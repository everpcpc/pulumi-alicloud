// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    public static partial class Invokes
    {
        /// <summary>
        /// The SSL-VPN servers data source lists lots of SSL-VPN servers resource information owned by an Alicloud account.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/ssl_vpn_servers.html.markdown.
        /// </summary>
        [Obsolete("Use GetSslVpnServers.InvokeAsync() instead")]
        public static Task<GetSslVpnServersResult> GetSslVpnServers(GetSslVpnServersArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSslVpnServersResult>("alicloud:vpc/getSslVpnServers:getSslVpnServers", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetSslVpnServers
    {
        /// <summary>
        /// The SSL-VPN servers data source lists lots of SSL-VPN servers resource information owned by an Alicloud account.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/ssl_vpn_servers.html.markdown.
        /// </summary>
        public static Task<GetSslVpnServersResult> InvokeAsync(GetSslVpnServersArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSslVpnServersResult>("alicloud:vpc/getSslVpnServers:getSslVpnServers", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetSslVpnServersArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// IDs of the SSL-VPN servers.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string of SSL-VPN server name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// Save the result to the file.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Use the VPN gateway ID as the search key.
        /// </summary>
        [Input("vpnGatewayId")]
        public string? VpnGatewayId { get; set; }

        public GetSslVpnServersArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetSslVpnServersResult
    {
        /// <summary>
        /// A list of SSL-VPN server IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of SSL-VPN server names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        /// <summary>
        /// A list of SSL-VPN servers. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSslVpnServersServersResult> Servers;
        /// <summary>
        /// The ID of the VPN gateway instance.
        /// </summary>
        public readonly string? VpnGatewayId;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetSslVpnServersResult(
            ImmutableArray<string> ids,
            string? nameRegex,
            ImmutableArray<string> names,
            string? outputFile,
            ImmutableArray<Outputs.GetSslVpnServersServersResult> servers,
            string? vpnGatewayId,
            string id)
        {
            Ids = ids;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            Servers = servers;
            VpnGatewayId = vpnGatewayId;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetSslVpnServersServersResult
    {
        /// <summary>
        /// The encryption algorithm used.
        /// </summary>
        public readonly string Cipher;
        /// <summary>
        /// The IP address pool of the client.
        /// </summary>
        public readonly string ClientIpPool;
        /// <summary>
        /// Whether to compress.
        /// </summary>
        public readonly bool Compress;
        /// <summary>
        /// The number of current connections.
        /// </summary>
        public readonly int Connections;
        /// <summary>
        /// The time of creation.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The ID of the SSL-VPN server.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The public IP.
        /// </summary>
        public readonly string InternetIp;
        /// <summary>
        /// The local subnet of the VPN connection.
        /// </summary>
        public readonly string LocalSubnet;
        /// <summary>
        /// The maximum number of connections.
        /// </summary>
        public readonly int MaxConnections;
        /// <summary>
        /// The name of the SSL-VPN server.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The port used by the SSL-VPN server.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The protocol used by the SSL-VPN server.
        /// </summary>
        public readonly string Proto;
        /// <summary>
        /// Use the VPN gateway ID as the search key.
        /// </summary>
        public readonly string VpnGatewayId;

        [OutputConstructor]
        private GetSslVpnServersServersResult(
            string cipher,
            string clientIpPool,
            bool compress,
            int connections,
            string createTime,
            string id,
            string internetIp,
            string localSubnet,
            int maxConnections,
            string name,
            int port,
            string proto,
            string vpnGatewayId)
        {
            Cipher = cipher;
            ClientIpPool = clientIpPool;
            Compress = compress;
            Connections = connections;
            CreateTime = createTime;
            Id = id;
            InternetIp = internetIp;
            LocalSubnet = localSubnet;
            MaxConnections = maxConnections;
            Name = name;
            Port = port;
            Proto = proto;
            VpnGatewayId = vpnGatewayId;
        }
    }
    }
}
