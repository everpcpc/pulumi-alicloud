// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.ActionTrail
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source provides a list of ALIKAFKA Topics in an Alibaba Cloud account according to the specified filters.
        /// 
        /// &gt; **NOTE:** Available in 1.56.0+
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/alikafka_topics.html.markdown.
        /// </summary>
        public static Task<GetTopicsResult> GetTopics(GetTopicsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTopicsResult>("alicloud:actiontrail/getTopics:getTopics", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetTopicsArgs : Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// A regex string to filter results by the topic name. 
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetTopicsArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetTopicsResult
    {
        public readonly string InstanceId;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of topic names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        /// <summary>
        /// A list of topics. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTopicsTopicsResult> Topics;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetTopicsResult(
            string instanceId,
            string? nameRegex,
            ImmutableArray<string> names,
            string? outputFile,
            ImmutableArray<Outputs.GetTopicsTopicsResult> topics,
            string id)
        {
            InstanceId = instanceId;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            Topics = topics;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetTopicsTopicsResult
    {
        /// <summary>
        /// whether the current topic is kafka compact topic or not.
        /// </summary>
        public readonly bool CompactTopic;
        /// <summary>
        /// Time of creation.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// whether the current topic is kafka local topic or not.
        /// </summary>
        public readonly bool LocalTopic;
        /// <summary>
        /// Partition number of the topic.
        /// </summary>
        public readonly int PartitionNum;
        /// <summary>
        /// Remark of the topic.
        /// </summary>
        public readonly string Remark;
        /// <summary>
        /// The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause. 
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// The name of the topic.
        /// </summary>
        public readonly string Topic;

        [OutputConstructor]
        private GetTopicsTopicsResult(
            bool compactTopic,
            string createTime,
            bool localTopic,
            int partitionNum,
            string remark,
            int status,
            string topic)
        {
            CompactTopic = compactTopic;
            CreateTime = createTime;
            LocalTopic = localTopic;
            PartitionNum = partitionNum;
            Remark = remark;
            Status = status;
            Topic = topic;
        }
    }
    }
}
