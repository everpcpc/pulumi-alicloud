// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Yundun
{
    public static partial class Invokes
    {
        public static Task<GetDBAuditInstanceResult> GetDBAuditInstance(GetDBAuditInstanceArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDBAuditInstanceResult>("alicloud:yundun/getDBAuditInstance:getDBAuditInstance", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetDBAuditInstanceArgs : Pulumi.InvokeArgs
    {
        [Input("descriptionRegex")]
        public string? DescriptionRegex { get; set; }

        [Input("ids")]
        private List<string>? _ids;
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("tags")]
        private Dictionary<string, object>? _tags;
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        public GetDBAuditInstanceArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetDBAuditInstanceResult
    {
        public readonly string? DescriptionRegex;
        public readonly ImmutableArray<string> Descriptions;
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<Outputs.GetDBAuditInstanceInstancesResult> Instances;
        public readonly string? OutputFile;
        public readonly ImmutableDictionary<string, object>? Tags;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetDBAuditInstanceResult(
            string? descriptionRegex,
            ImmutableArray<string> descriptions,
            ImmutableArray<string> ids,
            ImmutableArray<Outputs.GetDBAuditInstanceInstancesResult> instances,
            string? outputFile,
            ImmutableDictionary<string, object>? tags,
            string id)
        {
            DescriptionRegex = descriptionRegex;
            Descriptions = descriptions;
            Ids = ids;
            Instances = instances;
            OutputFile = outputFile;
            Tags = tags;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetDBAuditInstanceInstancesResult
    {
        public readonly string Description;
        public readonly string Id;
        public readonly string InstanceStatus;
        public readonly string LicenseCode;
        public readonly string PrivateDomain;
        public readonly string PublicDomain;
        public readonly bool PublicNetworkAccess;
        public readonly ImmutableDictionary<string, object>? Tags;
        public readonly string UserVswitchId;

        [OutputConstructor]
        private GetDBAuditInstanceInstancesResult(
            string description,
            string id,
            string instanceStatus,
            string licenseCode,
            string privateDomain,
            string publicDomain,
            bool publicNetworkAccess,
            ImmutableDictionary<string, object>? tags,
            string userVswitchId)
        {
            Description = description;
            Id = id;
            InstanceStatus = instanceStatus;
            LicenseCode = licenseCode;
            PrivateDomain = privateDomain;
            PublicDomain = publicDomain;
            PublicNetworkAccess = publicNetworkAccess;
            Tags = tags;
            UserVswitchId = userVswitchId;
        }
    }
    }
}
