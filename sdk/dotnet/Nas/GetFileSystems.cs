// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nas
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source provides FileSystems available to the user.
        /// 
        /// &gt; NOTE: Available in 1.35.0+
        /// 
        /// 
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/nas_file_systems.html.markdown.
        /// </summary>
        [Obsolete("Use GetFileSystems.InvokeAsync() instead")]
        public static Task<GetFileSystemsResult> GetFileSystems(GetFileSystemsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFileSystemsResult>("alicloud:nas/getFileSystems:getFileSystems", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetFileSystems
    {
        /// <summary>
        /// This data source provides FileSystems available to the user.
        /// 
        /// &gt; NOTE: Available in 1.35.0+
        /// 
        /// 
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/nas_file_systems.html.markdown.
        /// </summary>
        public static Task<GetFileSystemsResult> InvokeAsync(GetFileSystemsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFileSystemsResult>("alicloud:nas/getFileSystems:getFileSystems", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetFileSystemsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A regex string to filter the results by the ï¼šFileSystem description.
        /// </summary>
        [Input("descriptionRegex")]
        public string? DescriptionRegex { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of FileSystemId.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Filter results by a specific ProtocolType. 
        /// </summary>
        [Input("protocolType")]
        public string? ProtocolType { get; set; }

        /// <summary>
        /// Filter results by a specific StorageType. 
        /// </summary>
        [Input("storageType")]
        public string? StorageType { get; set; }

        public GetFileSystemsArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetFileSystemsResult
    {
        public readonly string? DescriptionRegex;
        /// <summary>
        /// A list of FileSystem descriptions.
        /// </summary>
        public readonly ImmutableArray<string> Descriptions;
        /// <summary>
        /// A list of FileSystem Id.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly string? OutputFile;
        /// <summary>
        /// ProtocolType block of the FileSystem
        /// </summary>
        public readonly string? ProtocolType;
        /// <summary>
        /// StorageType block of the FileSystem.
        /// </summary>
        public readonly string? StorageType;
        /// <summary>
        /// A list of VPCs. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFileSystemsSystemsResult> Systems;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetFileSystemsResult(
            string? descriptionRegex,
            ImmutableArray<string> descriptions,
            ImmutableArray<string> ids,
            string? outputFile,
            string? protocolType,
            string? storageType,
            ImmutableArray<Outputs.GetFileSystemsSystemsResult> systems,
            string id)
        {
            DescriptionRegex = descriptionRegex;
            Descriptions = descriptions;
            Ids = ids;
            OutputFile = outputFile;
            ProtocolType = protocolType;
            StorageType = storageType;
            Systems = systems;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetFileSystemsSystemsResult
    {
        /// <summary>
        /// Time of creation.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Destription of the FileSystem.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ID of the FileSystem.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// MeteredSize of the FileSystem.
        /// </summary>
        public readonly int MeteredSize;
        /// <summary>
        /// Filter results by a specific ProtocolType. 
        /// </summary>
        public readonly string ProtocolType;
        /// <summary>
        /// ID of the region where the FileSystem is located.
        /// </summary>
        public readonly string RegionId;
        /// <summary>
        /// Filter results by a specific StorageType. 
        /// </summary>
        public readonly string StorageType;

        [OutputConstructor]
        private GetFileSystemsSystemsResult(
            string createTime,
            string description,
            string id,
            int meteredSize,
            string protocolType,
            string regionId,
            string storageType)
        {
            CreateTime = createTime;
            Description = description;
            Id = id;
            MeteredSize = meteredSize;
            ProtocolType = protocolType;
            RegionId = regionId;
            StorageType = storageType;
        }
    }
    }
}
