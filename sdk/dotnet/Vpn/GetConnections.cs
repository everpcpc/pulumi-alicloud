// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpn
{
    public static partial class Invokes
    {
        /// <summary>
        /// The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/vpn_connections.html.markdown.
        /// </summary>
        public static Task<GetConnectionsResult> GetConnections(GetConnectionsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectionsResult>("alicloud:vpn/getConnections:getConnections", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetConnectionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Use the VPN customer gateway ID as the search key.
        /// </summary>
        [Input("customerGatewayId")]
        public string? CustomerGatewayId { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// IDs of the VPN connections.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string of VPN connection name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// Save the result to the file.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Use the VPN gateway ID as the search key.
        /// </summary>
        [Input("vpnGatewayId")]
        public string? VpnGatewayId { get; set; }

        public GetConnectionsArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetConnectionsResult
    {
        /// <summary>
        /// A list of VPN connections. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionsConnectionsResult> Connections;
        /// <summary>
        /// ID of the VPN customer gateway.
        /// </summary>
        public readonly string? CustomerGatewayId;
        /// <summary>
        /// (Optional) IDs of the VPN connections.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        /// <summary>
        /// (Optional) names of the VPN connections.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        /// <summary>
        /// ID of the VPN gateway.
        /// </summary>
        public readonly string? VpnGatewayId;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetConnectionsResult(
            ImmutableArray<Outputs.GetConnectionsConnectionsResult> connections,
            string? customerGatewayId,
            ImmutableArray<string> ids,
            string? nameRegex,
            ImmutableArray<string> names,
            string? outputFile,
            string? vpnGatewayId,
            string id)
        {
            Connections = connections;
            CustomerGatewayId = customerGatewayId;
            Ids = ids;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            VpnGatewayId = vpnGatewayId;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetConnectionsConnectionsIkeConfigsResult
    {
        /// <summary>
        /// The authentication algorithm of phase-one negotiation. 
        /// </summary>
        public readonly string? IkeAuthAlg;
        /// <summary>
        /// The encryption algorithm of phase-one negotiation. 
        /// </summary>
        public readonly string? IkeEncAlg;
        /// <summary>
        /// The SA lifecycle as the result of phase-one negotiation. 
        /// </summary>
        public readonly int? IkeLifetime;
        /// <summary>
        /// The identification of the VPN gateway.
        /// </summary>
        public readonly string? IkeLocalId;
        /// <summary>
        /// The negotiation mode of IKE phase-one. 
        /// </summary>
        public readonly string? IkeMode;
        /// <summary>
        /// The Diffie-Hellman key exchange algorithm used by phase-one negotiation. 
        /// </summary>
        public readonly string? IkePfs;
        /// <summary>
        /// The identification of the customer gateway.
        /// </summary>
        public readonly string? IkeRemoteId;
        /// <summary>
        /// The version of the IKE protocol. 
        /// </summary>
        public readonly string? IkeVersion;
        /// <summary>
        /// Used for authentication between the IPsec VPN gateway and the customer gateway.
        /// </summary>
        public readonly string? Psk;

        [OutputConstructor]
        private GetConnectionsConnectionsIkeConfigsResult(
            string? ikeAuthAlg,
            string? ikeEncAlg,
            int? ikeLifetime,
            string? ikeLocalId,
            string? ikeMode,
            string? ikePfs,
            string? ikeRemoteId,
            string? ikeVersion,
            string? psk)
        {
            IkeAuthAlg = ikeAuthAlg;
            IkeEncAlg = ikeEncAlg;
            IkeLifetime = ikeLifetime;
            IkeLocalId = ikeLocalId;
            IkeMode = ikeMode;
            IkePfs = ikePfs;
            IkeRemoteId = ikeRemoteId;
            IkeVersion = ikeVersion;
            Psk = psk;
        }
    }

    [OutputType]
    public sealed class GetConnectionsConnectionsIpsecConfigsResult
    {
        /// <summary>
        /// The authentication algorithm of phase-two negotiation. 
        /// </summary>
        public readonly string? IpsecAuthAlg;
        /// <summary>
        /// The encryption algorithm of phase-two negotiation. 
        /// </summary>
        public readonly string? IpsecEncAlg;
        /// <summary>
        /// The SA lifecycle as the result of phase-two negotiation. 
        /// </summary>
        public readonly int? IpsecLifetime;
        /// <summary>
        /// The Diffie-Hellman key exchange algorithm used by phase-two negotiation. 
        /// </summary>
        public readonly string? IpsecPfs;

        [OutputConstructor]
        private GetConnectionsConnectionsIpsecConfigsResult(
            string? ipsecAuthAlg,
            string? ipsecEncAlg,
            int? ipsecLifetime,
            string? ipsecPfs)
        {
            IpsecAuthAlg = ipsecAuthAlg;
            IpsecEncAlg = ipsecEncAlg;
            IpsecLifetime = ipsecLifetime;
            IpsecPfs = ipsecPfs;
        }
    }

    [OutputType]
    public sealed class GetConnectionsConnectionsResult
    {
        public readonly int CreateTime;
        /// <summary>
        /// Use the VPN customer gateway ID as the search key.
        /// </summary>
        public readonly string CustomerGatewayId;
        public readonly bool EffectImmediately;
        /// <summary>
        /// ID of the VPN connection.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The configurations of phase-one negotiation.
        /// </summary>
        public readonly ImmutableArray<GetConnectionsConnectionsIkeConfigsResult> IkeConfigs;
        /// <summary>
        /// The configurations of phase-two negotiation.
        /// </summary>
        public readonly ImmutableArray<GetConnectionsConnectionsIpsecConfigsResult> IpsecConfigs;
        /// <summary>
        /// The local subnet of the VPN connection.
        /// </summary>
        public readonly string LocalSubnet;
        /// <summary>
        /// The name of the VPN connection.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The remote subnet of the VPN connection.
        /// </summary>
        public readonly string RemoteSubnet;
        /// <summary>
        /// The status of the VPN connection, valid value:ike_sa_not_established, ike_sa_established, ipsec_sa_not_established, ipsec_sa_established.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Use the VPN gateway ID as the search key.
        /// </summary>
        public readonly string VpnGatewayId;

        [OutputConstructor]
        private GetConnectionsConnectionsResult(
            int createTime,
            string customerGatewayId,
            bool effectImmediately,
            string id,
            ImmutableArray<GetConnectionsConnectionsIkeConfigsResult> ikeConfigs,
            ImmutableArray<GetConnectionsConnectionsIpsecConfigsResult> ipsecConfigs,
            string localSubnet,
            string name,
            string remoteSubnet,
            string status,
            string vpnGatewayId)
        {
            CreateTime = createTime;
            CustomerGatewayId = customerGatewayId;
            EffectImmediately = effectImmediately;
            Id = id;
            IkeConfigs = ikeConfigs;
            IpsecConfigs = ipsecConfigs;
            LocalSubnet = localSubnet;
            Name = name;
            RemoteSubnet = remoteSubnet;
            Status = status;
            VpnGatewayId = vpnGatewayId;
        }
    }
    }
}
