// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Cen
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source provides CEN flow logs available to the user.
        /// 
        /// &gt; **NOTE:** Available in 1.78.0+
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/cen_flowlogs.html.markdown.
        /// </summary>
        [Obsolete("Use GetFlowlogs.InvokeAsync() instead")]
        public static Task<GetFlowlogsResult> GetFlowlogs(GetFlowlogsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFlowlogsResult>("alicloud:cen/getFlowlogs:getFlowlogs", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetFlowlogs
    {
        /// <summary>
        /// This data source provides CEN flow logs available to the user.
        /// 
        /// &gt; **NOTE:** Available in 1.78.0+
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/cen_flowlogs.html.markdown.
        /// </summary>
        public static Task<GetFlowlogsResult> InvokeAsync(GetFlowlogsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFlowlogsResult>("alicloud:cen/getFlowlogs:getFlowlogs", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetFlowlogsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the CEN Instance.
        /// </summary>
        [Input("cenId")]
        public string? CenId { get; set; }

        /// <summary>
        /// The description of flowlog.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of CEN flow log IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of the log store which is in the  `project_name` SLS project.
        /// </summary>
        [Input("logStoreName")]
        public string? LogStoreName { get; set; }

        /// <summary>
        /// A regex string to filter CEN flow logs by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The name of the SLS project.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetFlowlogsArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetFlowlogsResult
    {
        /// <summary>
        /// The ID of the CEN Instance.
        /// </summary>
        public readonly string? CenId;
        /// <summary>
        /// The description of flowlog.
        /// </summary>
        public readonly string? Description;
        public readonly ImmutableArray<Outputs.GetFlowlogsFlowlogsResult> Flowlogs;
        /// <summary>
        /// A list of CEN flow log IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The name of the log store which is in the  `project_name` SLS project.
        /// </summary>
        public readonly string? LogStoreName;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of CEN flow log names. 
        /// </summary>
        public readonly ImmutableArray<string> Names;
        /// <summary>
        /// The name of the SLS project.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The status of flowlog.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetFlowlogsResult(
            string? cenId,
            string? description,
            ImmutableArray<Outputs.GetFlowlogsFlowlogsResult> flowlogs,
            ImmutableArray<string> ids,
            string? logStoreName,
            string? nameRegex,
            ImmutableArray<string> names,
            string? projectName,
            string? status,
            string id)
        {
            CenId = cenId;
            Description = description;
            Flowlogs = flowlogs;
            Ids = ids;
            LogStoreName = logStoreName;
            NameRegex = nameRegex;
            Names = names;
            ProjectName = projectName;
            Status = status;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetFlowlogsFlowlogsResult
    {
        /// <summary>
        /// The ID of the CEN Instance.
        /// </summary>
        public readonly string CenId;
        /// <summary>
        /// The description of flowlog.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ID of the CEN flow log.
        /// </summary>
        public readonly string FlowLogId;
        /// <summary>
        /// The name of flowlog.
        /// </summary>
        public readonly string FlowLogName;
        /// <summary>
        /// ID of the CEN flow log.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the log store which is in the  `project_name` SLS project.
        /// </summary>
        public readonly string LogStoreName;
        /// <summary>
        /// The name of the SLS project.
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetFlowlogsFlowlogsResult(
            string cenId,
            string description,
            string flowLogId,
            string flowLogName,
            string id,
            string logStoreName,
            string projectName,
            string status)
        {
            CenId = cenId;
            Description = description;
            FlowLogId = flowLogId;
            FlowLogName = flowLogName;
            Id = id;
            LogStoreName = logStoreName;
            ProjectName = projectName;
            Status = status;
        }
    }
    }
}
