// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eds
{
    /// <summary>
    /// Provides a ECD Snapshot resource.
    /// 
    /// For information about ECD Snapshot and how to use it, see [What is Snapshot](https://www.alibabacloud.com/help/en/elastic-desktop-service/latest/createsnapshot).
    /// 
    /// &gt; **NOTE:** Available in v1.169.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Config();
    ///         var name = config.Get("name") ?? "example_value";
    ///         var defaultSimpleOfficeSite = new AliCloud.Eds.SimpleOfficeSite("defaultSimpleOfficeSite", new AliCloud.Eds.SimpleOfficeSiteArgs
    ///         {
    ///             CidrBlock = "172.16.0.0/12",
    ///             DesktopAccessType = "Internet",
    ///             OfficeSiteName = name,
    ///             EnableInternetAccess = false,
    ///         });
    ///         var defaultBundles = Output.Create(AliCloud.Eds.GetBundles.InvokeAsync(new AliCloud.Eds.GetBundlesArgs
    ///         {
    ///             BundleType = "SYSTEM",
    ///         }));
    ///         var defaultEcdPolicyGroup = new AliCloud.Eds.EcdPolicyGroup("defaultEcdPolicyGroup", new AliCloud.Eds.EcdPolicyGroupArgs
    ///         {
    ///             PolicyGroupName = name,
    ///             Clipboard = "readwrite",
    ///             LocalDrive = "read",
    ///             AuthorizeAccessPolicyRules = 
    ///             {
    ///                 new AliCloud.Eds.Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs
    ///                 {
    ///                     Description = "example_value",
    ///                     CidrIp = "1.2.3.4/24",
    ///                 },
    ///             },
    ///             AuthorizeSecurityPolicyRules = 
    ///             {
    ///                 new AliCloud.Eds.Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs
    ///                 {
    ///                     Type = "inflow",
    ///                     Policy = "accept",
    ///                     Description = "example_value",
    ///                     PortRange = "80/80",
    ///                     IpProtocol = "TCP",
    ///                     Priority = "1",
    ///                     CidrIp = "0.0.0.0/0",
    ///                 },
    ///             },
    ///         });
    ///         var defaultDesktop = new AliCloud.Eds.Desktop("defaultDesktop", new AliCloud.Eds.DesktopArgs
    ///         {
    ///             OfficeSiteId = defaultSimpleOfficeSite.Id,
    ///             PolicyGroupId = defaultEcdPolicyGroup.Id,
    ///             BundleId = defaultBundles.Apply(defaultBundles =&gt; defaultBundles.Bundles?[0]?.Id),
    ///             DesktopName = name,
    ///         });
    ///         var defaultSnapshot = new AliCloud.Eds.Snapshot("defaultSnapshot", new AliCloud.Eds.SnapshotArgs
    ///         {
    ///             Description = name,
    ///             DesktopId = defaultDesktop.Id,
    ///             SnapshotName = name,
    ///             SourceDiskType = "SYSTEM",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ECD Snapshot can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:eds/snapshot:Snapshot example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:eds/snapshot:Snapshot")]
    public partial class Snapshot : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the Snapshot.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the Desktop.
        /// </summary>
        [Output("desktopId")]
        public Output<string> DesktopId { get; private set; } = null!;

        /// <summary>
        /// The name of the Snapshot.
        /// </summary>
        [Output("snapshotName")]
        public Output<string> SnapshotName { get; private set; } = null!;

        /// <summary>
        /// The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
        /// </summary>
        [Output("sourceDiskType")]
        public Output<string> SourceDiskType { get; private set; } = null!;

        /// <summary>
        /// The status of the snapshot.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Snapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Snapshot(string name, SnapshotArgs args, CustomResourceOptions? options = null)
            : base("alicloud:eds/snapshot:Snapshot", name, args ?? new SnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Snapshot(string name, Input<string> id, SnapshotState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:eds/snapshot:Snapshot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Snapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Snapshot Get(string name, Input<string> id, SnapshotState? state = null, CustomResourceOptions? options = null)
        {
            return new Snapshot(name, id, state, options);
        }
    }

    public sealed class SnapshotArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Snapshot.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the Desktop.
        /// </summary>
        [Input("desktopId", required: true)]
        public Input<string> DesktopId { get; set; } = null!;

        /// <summary>
        /// The name of the Snapshot.
        /// </summary>
        [Input("snapshotName", required: true)]
        public Input<string> SnapshotName { get; set; } = null!;

        /// <summary>
        /// The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
        /// </summary>
        [Input("sourceDiskType", required: true)]
        public Input<string> SourceDiskType { get; set; } = null!;

        public SnapshotArgs()
        {
        }
    }

    public sealed class SnapshotState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Snapshot.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the Desktop.
        /// </summary>
        [Input("desktopId")]
        public Input<string>? DesktopId { get; set; }

        /// <summary>
        /// The name of the Snapshot.
        /// </summary>
        [Input("snapshotName")]
        public Input<string>? SnapshotName { get; set; }

        /// <summary>
        /// The type of the disk for which to create a snapshot. Valid values: `SYSTEM`, `DATA`.
        /// </summary>
        [Input("sourceDiskType")]
        public Input<string>? SourceDiskType { get; set; }

        /// <summary>
        /// The status of the snapshot.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public SnapshotState()
        {
        }
    }
}
