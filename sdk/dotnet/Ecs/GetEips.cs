// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source provides a list of EIPs (Elastic IP address) owned by an Alibaba Cloud account.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/eips.html.markdown.
        /// </summary>
        [Obsolete("Use GetEips.InvokeAsync() instead")]
        public static Task<GetEipsResult> GetEips(GetEipsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEipsResult>("alicloud:ecs/getEips:getEips", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetEips
    {
        /// <summary>
        /// This data source provides a list of EIPs (Elastic IP address) owned by an Alibaba Cloud account.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/eips.html.markdown.
        /// </summary>
        public static Task<GetEipsResult> InvokeAsync(GetEipsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEipsResult>("alicloud:ecs/getEips:getEips", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetEipsArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of EIP IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Deprecated since the version 1.8.0 of this provider.
        /// </summary>
        [Input("inUse")]
        public bool? InUse { get; set; }

        [Input("ipAddresses")]
        private List<string>? _ipAddresses;

        /// <summary>
        /// A list of EIP public IP addresses.
        /// </summary>
        public List<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new List<string>());
            set => _ipAddresses = value;
        }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The Id of resource group which the eips belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public string? ResourceGroupId { get; set; }

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        public GetEipsArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetEipsResult
    {
        /// <summary>
        /// A list of EIPs. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEipsEipsResult> Eips;
        /// <summary>
        /// (Optional) A list of EIP IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly bool? InUse;
        public readonly ImmutableArray<string> IpAddresses;
        /// <summary>
        /// (Optional) A list of EIP names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        /// <summary>
        /// The Id of resource group which the eips belongs.
        /// </summary>
        public readonly string? ResourceGroupId;
        public readonly ImmutableDictionary<string, object>? Tags;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetEipsResult(
            ImmutableArray<Outputs.GetEipsEipsResult> eips,
            ImmutableArray<string> ids,
            bool? inUse,
            ImmutableArray<string> ipAddresses,
            ImmutableArray<string> names,
            string? outputFile,
            string? resourceGroupId,
            ImmutableDictionary<string, object>? tags,
            string id)
        {
            Eips = eips;
            Ids = ids;
            InUse = inUse;
            IpAddresses = ipAddresses;
            Names = names;
            OutputFile = outputFile;
            ResourceGroupId = resourceGroupId;
            Tags = tags;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetEipsEipsResult
    {
        /// <summary>
        /// EIP internet max bandwidth in Mbps.
        /// </summary>
        public readonly string Bandwidth;
        /// <summary>
        /// Time of creation.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// ID of the EIP.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the instance that is being bound.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// The instance type of that the EIP is bound.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// EIP internet charge type.
        /// </summary>
        public readonly string InternetChargeType;
        /// <summary>
        /// Public IP Address of the the EIP.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// EIP status. Possible values are: `Associating`, `Unassociating`, `InUse` and `Available`.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetEipsEipsResult(
            string bandwidth,
            string creationTime,
            string id,
            string instanceId,
            string instanceType,
            string internetChargeType,
            string ipAddress,
            string status)
        {
            Bandwidth = bandwidth;
            CreationTime = creationTime;
            Id = id;
            InstanceId = instanceId;
            InstanceType = instanceType;
            InternetChargeType = internetChargeType;
            IpAddress = ipAddress;
            Status = status;
        }
    }
    }
}
