// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs
{
    public static class GetSnapshots
    {
        /// <summary>
        /// Use this data source to get a list of snapshot according to the specified filters in an Alibaba Cloud account.
        /// 
        /// For information about snapshot and how to use it, see [Snapshot](https://www.alibabacloud.com/help/doc-detail/25460.html).
        /// 
        /// &gt; **NOTE:**  Available in 1.40.0+.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// ##  Argument Reference
        /// 
        /// The following arguments are supported:
        /// 
        /// * `instance_id` - (Optional) The specified instance ID.
        /// * `disk_id` - (Optional) The specified disk ID.
        /// * `encrypted` - (Optional) Queries the encrypted snapshots. Optional values:
        ///   * true: Encrypted snapshots.
        ///   * false: No encryption attribute limit.
        ///   
        ///   Default value: false.
        /// * `ids` - (Optional)  A list of snapshot IDs.
        /// * `name_regex` - (Optional) A regex string to filter results by snapshot name.
        /// * `status` - (Optional) The specified snapshot status.
        ///   * The snapshot status. Optional values:
        ///   * progressing: The snapshots are being created.
        ///   * accomplished: The snapshots are ready to use.
        ///   * failed: The snapshot creation failed.
        ///   * all: All status.
        ///   
        ///   Default value: all.
        /// 
        /// * `type` - (Optional) The snapshot category. Optional values:
        ///   * auto: Auto snapshots.
        ///   * user: Manual snapshots.
        ///   * all: Auto and manual snapshots.
        ///   
        ///   Default value: all.
        /// * `source_disk_type` - (Optional) The type of source disk:
        ///   * System: The snapshots are created for system disks.
        ///   * Data: The snapshots are created for data disks.
        ///   
        /// * `usage` - (Optional) The usage of the snapshot:
        ///   * image: The snapshots are used to create custom images.
        ///   * disk: The snapshots are used to CreateDisk.
        ///   * mage_disk: The snapshots are used to create custom images and data disks.
        ///   * none: The snapshots are not used yet.
        /// * `tags` - (Optional) A map of tags assigned to snapshots.
        /// * `output_file` - (Optional) The name of output file that saves the filter results.
        /// </summary>
        public static Task<GetSnapshotsResult> InvokeAsync(GetSnapshotsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotsResult>("alicloud:ecs/getSnapshots:getSnapshots", args ?? new GetSnapshotsArgs(), options.WithVersion());
    }


    public sealed class GetSnapshotsArgs : Pulumi.InvokeArgs
    {
        [Input("diskId")]
        public string? DiskId { get; set; }

        /// <summary>
        /// Whether the snapshot is encrypted or not.
        /// </summary>
        [Input("encrypted")]
        public bool? Encrypted { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of snapshot IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("instanceId")]
        public string? InstanceId { get; set; }

        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Source disk attribute. Value range:
        /// * System
        /// * Data
        /// </summary>
        [Input("sourceDiskType")]
        public string? SourceDiskType { get; set; }

        /// <summary>
        /// The snapshot status. Value range:
        /// * progressing
        /// * accomplished
        /// * failed
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// A map of tags assigned to the snapshot.
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Whether the snapshots are used to create resources or not. Value range:
        /// * image
        /// * disk
        /// * image_disk
        /// * none
        /// </summary>
        [Input("usage")]
        public string? Usage { get; set; }

        public GetSnapshotsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSnapshotsResult
    {
        public readonly string? DiskId;
        /// <summary>
        /// Whether the snapshot is encrypted or not.
        /// </summary>
        public readonly bool? Encrypted;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of snapshot IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly string? InstanceId;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of snapshots names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        /// <summary>
        /// A list of snapshots. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSnapshotsSnapshotResult> Snapshots;
        /// <summary>
        /// Source disk attribute. Value range:
        /// * System
        /// * Data
        /// </summary>
        public readonly string? SourceDiskType;
        /// <summary>
        /// The snapshot status. Value range:
        /// * progressing
        /// * accomplished
        /// * failed
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// A map of tags assigned to the snapshot.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Tags;
        public readonly string? Type;
        /// <summary>
        /// Whether the snapshots are used to create resources or not. Value range:
        /// * image
        /// * disk
        /// * image_disk
        /// * none
        /// </summary>
        public readonly string? Usage;

        [OutputConstructor]
        private GetSnapshotsResult(
            string? diskId,

            bool? encrypted,

            string id,

            ImmutableArray<string> ids,

            string? instanceId,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            ImmutableArray<Outputs.GetSnapshotsSnapshotResult> snapshots,

            string? sourceDiskType,

            string? status,

            ImmutableDictionary<string, object>? tags,

            string? type,

            string? usage)
        {
            DiskId = diskId;
            Encrypted = encrypted;
            Id = id;
            Ids = ids;
            InstanceId = instanceId;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            Snapshots = snapshots;
            SourceDiskType = sourceDiskType;
            Status = status;
            Tags = tags;
            Type = type;
            Usage = usage;
        }
    }
}
