// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs
{
    public static partial class Invokes
    {
        /// <summary>
        /// The `alicloud.ecs.getSecurityGroupRules` data source provides a collection of security permissions of a specific security group.
        /// Each collection item represents a single `ingress` or `egress` permission rule.
        /// The ID of the security group can be provided via a variable or the result from the other data source `alicloud.ecs.getSecurityGroups`.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/security_group_rules.html.markdown.
        /// </summary>
        [Obsolete("Use GetSecurityGroupRules.InvokeAsync() instead")]
        public static Task<GetSecurityGroupRulesResult> GetSecurityGroupRules(GetSecurityGroupRulesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecurityGroupRulesResult>("alicloud:ecs/getSecurityGroupRules:getSecurityGroupRules", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetSecurityGroupRules
    {
        /// <summary>
        /// The `alicloud.ecs.getSecurityGroupRules` data source provides a collection of security permissions of a specific security group.
        /// Each collection item represents a single `ingress` or `egress` permission rule.
        /// The ID of the security group can be provided via a variable or the result from the other data source `alicloud.ecs.getSecurityGroups`.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/security_group_rules.html.markdown.
        /// </summary>
        public static Task<GetSecurityGroupRulesResult> InvokeAsync(GetSecurityGroupRulesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecurityGroupRulesResult>("alicloud:ecs/getSecurityGroupRules:getSecurityGroupRules", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetSecurityGroupRulesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Authorization direction. Valid values are: `ingress` or `egress`.
        /// </summary>
        [Input("direction")]
        public string? Direction { get; set; }

        /// <summary>
        /// The ID of the security group that owns the rules.
        /// </summary>
        [Input("groupId", required: true)]
        public string GroupId { get; set; } = null!;

        /// <summary>
        /// The IP protocol. Valid values are: `tcp`, `udp`, `icmp`, `gre` and `all`.
        /// </summary>
        [Input("ipProtocol")]
        public string? IpProtocol { get; set; }

        /// <summary>
        /// Refers to the network type. Can be either `internet` or `intranet`. The default value is `internet`.
        /// </summary>
        [Input("nicType")]
        public string? NicType { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Authorization policy. Can be either `accept` or `drop`. The default value is `accept`.
        /// </summary>
        [Input("policy")]
        public string? Policy { get; set; }

        public GetSecurityGroupRulesArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetSecurityGroupRulesResult
    {
        /// <summary>
        /// Authorization direction, `ingress` or `egress`.
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// The description of the security group that owns the rules.
        /// </summary>
        public readonly string GroupDesc;
        public readonly string GroupId;
        /// <summary>
        /// The name of the security group that owns the rules.
        /// </summary>
        public readonly string GroupName;
        /// <summary>
        /// The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
        /// </summary>
        public readonly string? IpProtocol;
        /// <summary>
        /// Network type, `internet` or `intranet`.
        /// </summary>
        public readonly string? NicType;
        public readonly string? OutputFile;
        /// <summary>
        /// Authorization policy. Can be either `accept` or `drop`.
        /// </summary>
        public readonly string? Policy;
        /// <summary>
        /// A list of security group rules. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGroupRulesRulesResult> Rules;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetSecurityGroupRulesResult(
            string? direction,
            string groupDesc,
            string groupId,
            string groupName,
            string? ipProtocol,
            string? nicType,
            string? outputFile,
            string? policy,
            ImmutableArray<Outputs.GetSecurityGroupRulesRulesResult> rules,
            string id)
        {
            Direction = direction;
            GroupDesc = groupDesc;
            GroupId = groupId;
            GroupName = groupName;
            IpProtocol = ipProtocol;
            NicType = nicType;
            OutputFile = outputFile;
            Policy = policy;
            Rules = rules;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetSecurityGroupRulesRulesResult
    {
        /// <summary>
        /// The description of the rule.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Target IP address segment for egress authorization.
        /// </summary>
        public readonly string DestCidrIp;
        public readonly string DestGroupId;
        /// <summary>
        /// Alibaba Cloud account of the target security group.
        /// </summary>
        public readonly string DestGroupOwnerAccount;
        /// <summary>
        /// Authorization direction. Valid values are: `ingress` or `egress`.
        /// </summary>
        public readonly string Direction;
        /// <summary>
        /// The IP protocol. Valid values are: `tcp`, `udp`, `icmp`, `gre` and `all`.
        /// </summary>
        public readonly string IpProtocol;
        /// <summary>
        /// Refers to the network type. Can be either `internet` or `intranet`. The default value is `internet`.
        /// </summary>
        public readonly string NicType;
        /// <summary>
        /// Authorization policy. Can be either `accept` or `drop`. The default value is `accept`.
        /// </summary>
        public readonly string Policy;
        /// <summary>
        /// The range of port numbers.
        /// </summary>
        public readonly string PortRange;
        /// <summary>
        /// Rule priority.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Source IP address segment for ingress authorization.
        /// </summary>
        public readonly string SourceCidrIp;
        public readonly string SourceGroupId;
        /// <summary>
        /// Alibaba Cloud account of the source security group.
        /// </summary>
        public readonly string SourceGroupOwnerAccount;

        [OutputConstructor]
        private GetSecurityGroupRulesRulesResult(
            string description,
            string destCidrIp,
            string destGroupId,
            string destGroupOwnerAccount,
            string direction,
            string ipProtocol,
            string nicType,
            string policy,
            string portRange,
            int priority,
            string sourceCidrIp,
            string sourceGroupId,
            string sourceGroupOwnerAccount)
        {
            Description = description;
            DestCidrIp = destCidrIp;
            DestGroupId = destGroupId;
            DestGroupOwnerAccount = destGroupOwnerAccount;
            Direction = direction;
            IpProtocol = ipProtocol;
            NicType = nicType;
            Policy = policy;
            PortRange = portRange;
            Priority = priority;
            SourceCidrIp = sourceCidrIp;
            SourceGroupId = sourceGroupId;
            SourceGroupOwnerAccount = sourceGroupOwnerAccount;
        }
    }
    }
}
