// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Oss
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source provides the ots instances of the current Alibaba Cloud user.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/d/ots_instances.html.markdown.
        /// </summary>
        public static Task<GetInstancesResult> GetInstances(GetInstancesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstancesResult>("alicloud:oss/getInstances:getInstances", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetInstancesArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of instance IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by instance name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// A map of tags assigned to the instance. It must be in the format:
        /// ```
        /// data "alicloud.oss.getInstances" "instances_ds" {
        /// tags = {
        /// tagKey1 = "tagValue1",
        /// tagKey2 = "tagValue2"
        /// }
        /// }
        /// ```
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        public GetInstancesArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetInstancesResult
    {
        /// <summary>
        /// A list of instance IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// A list of instances. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstancesResult> Instances;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of instance names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        /// <summary>
        /// The tags of the instance.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Tags;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetInstancesResult(
            ImmutableArray<string> ids,
            ImmutableArray<Outputs.GetInstancesInstancesResult> instances,
            string? nameRegex,
            ImmutableArray<string> names,
            string? outputFile,
            ImmutableDictionary<string, object>? tags,
            string id)
        {
            Ids = ids;
            Instances = instances;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            Tags = tags;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetInstancesInstancesResult
    {
        /// <summary>
        /// The cluster type of the instance. Possible values: `SSD`, `HYBRID`.
        /// </summary>
        public readonly string ClusterType;
        /// <summary>
        /// The create time of the instance.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The description of the instance.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The instance quota which indicating the maximum number of tables.
        /// </summary>
        public readonly int EntityQuota;
        /// <summary>
        /// ID of the instance.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Instance name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The network type of the instance. Possible values: `NORMAL`, `VPC`, `VPC_CONSOLE`.
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// The maximum adjustable read capacity unit of the instance.
        /// </summary>
        public readonly int ReadCapacity;
        /// <summary>
        /// Instance status. Possible values: `Running`, `Disabled`, `Deleting`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A map of tags assigned to the instance. It must be in the format:
        /// ```
        /// data "alicloud.oss.getInstances" "instances_ds" {
        /// tags = {
        /// tagKey1 = "tagValue1",
        /// tagKey2 = "tagValue2"
        /// }
        /// }
        /// ```
        /// </summary>
        public readonly ImmutableDictionary<string, object> Tags;
        /// <summary>
        /// The user id of the instance.
        /// </summary>
        public readonly string UserId;
        /// <summary>
        /// The maximum adjustable write capacity unit of the instance.
        /// </summary>
        public readonly int WriteCapacity;

        [OutputConstructor]
        private GetInstancesInstancesResult(
            string clusterType,
            string createTime,
            string description,
            int entityQuota,
            string id,
            string name,
            string network,
            int readCapacity,
            string status,
            ImmutableDictionary<string, object> tags,
            string userId,
            int writeCapacity)
        {
            ClusterType = clusterType;
            CreateTime = createTime;
            Description = description;
            EntityQuota = entityQuota;
            Id = id;
            Name = name;
            Network = network;
            ReadCapacity = readCapacity;
            Status = status;
            Tags = tags;
            UserId = userId;
            WriteCapacity = writeCapacity;
        }
    }
    }
}
