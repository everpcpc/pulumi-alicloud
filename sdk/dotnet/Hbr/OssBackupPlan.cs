// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Hbr
{
    /// <summary>
    /// Provides a HBR Oss Backup Plan resource.
    /// 
    /// For information about HBR Oss Backup Plan and how to use it, see [What is Oss Backup Plan](https://www.alibabacloud.com/product/hybrid-backup-recovery).
    /// 
    /// &gt; **NOTE:** Available in v1.131.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Config();
    ///         var name = config.Get("name") ?? "%s";
    ///         var defaultVault = new AliCloud.Hbr.Vault("defaultVault", new AliCloud.Hbr.VaultArgs
    ///         {
    ///             VaultName = name,
    ///         });
    ///         var defaultBuckets = Output.Create(AliCloud.Oss.GetBuckets.InvokeAsync(new AliCloud.Oss.GetBucketsArgs
    ///         {
    ///             NameRegex = "bosh-cf-blobstore-hz",
    ///         }));
    ///         var example = new AliCloud.Hbr.OssBackupPlan("example", new AliCloud.Hbr.OssBackupPlanArgs
    ///         {
    ///             OssBackupPlanName = name,
    ///             VaultId = defaultVault.Id,
    ///             Bucket = alicloud_oss_bucket.Default.Bucket,
    ///             Prefix = "/home",
    ///             Retention = "1",
    ///             Schedule = "I|1602673264|PT2H",
    ///             BackupType = "COMPLETE",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// HBR Oss Backup Plan can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:hbr/ossBackupPlan:OssBackupPlan example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:hbr/ossBackupPlan:OssBackupPlan")]
    public partial class OssBackupPlan : Pulumi.CustomResource
    {
        /// <summary>
        /// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
        /// </summary>
        [Output("backupType")]
        public Output<string> BackupType { get; private set; } = null!;

        /// <summary>
        /// The OSS Bucket Name.
        /// </summary>
        [Output("bucket")]
        public Output<string?> Bucket { get; private set; } = null!;

        /// <summary>
        /// Whether to Disable the Backup Task. Valid Values: true, false.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
        /// </summary>
        [Output("ossBackupPlanName")]
        public Output<string> OssBackupPlanName { get; private set; } = null!;

        [Output("prefix")]
        public Output<string?> Prefix { get; private set; } = null!;

        /// <summary>
        /// Backup Retention Period, the Minimum Value of 1.
        /// </summary>
        [Output("retention")]
        public Output<string> Retention { get; private set; } = null!;

        /// <summary>
        /// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
        /// </summary>
        [Output("schedule")]
        public Output<string> Schedule { get; private set; } = null!;

        /// <summary>
        /// Vault ID.
        /// </summary>
        [Output("vaultId")]
        public Output<string?> VaultId { get; private set; } = null!;


        /// <summary>
        /// Create a OssBackupPlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OssBackupPlan(string name, OssBackupPlanArgs args, CustomResourceOptions? options = null)
            : base("alicloud:hbr/ossBackupPlan:OssBackupPlan", name, args ?? new OssBackupPlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OssBackupPlan(string name, Input<string> id, OssBackupPlanState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:hbr/ossBackupPlan:OssBackupPlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OssBackupPlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OssBackupPlan Get(string name, Input<string> id, OssBackupPlanState? state = null, CustomResourceOptions? options = null)
        {
            return new OssBackupPlan(name, id, state, options);
        }
    }

    public sealed class OssBackupPlanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
        /// </summary>
        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        /// <summary>
        /// The OSS Bucket Name.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Whether to Disable the Backup Task. Valid Values: true, false.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
        /// </summary>
        [Input("ossBackupPlanName", required: true)]
        public Input<string> OssBackupPlanName { get; set; } = null!;

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Backup Retention Period, the Minimum Value of 1.
        /// </summary>
        [Input("retention", required: true)]
        public Input<string> Retention { get; set; } = null!;

        /// <summary>
        /// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
        /// </summary>
        [Input("schedule", required: true)]
        public Input<string> Schedule { get; set; } = null!;

        /// <summary>
        /// Vault ID.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        public OssBackupPlanArgs()
        {
        }
    }

    public sealed class OssBackupPlanState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
        /// </summary>
        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        /// <summary>
        /// The OSS Bucket Name.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Whether to Disable the Backup Task. Valid Values: true, false.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
        /// </summary>
        [Input("ossBackupPlanName")]
        public Input<string>? OssBackupPlanName { get; set; }

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Backup Retention Period, the Minimum Value of 1.
        /// </summary>
        [Input("retention")]
        public Input<string>? Retention { get; set; }

        /// <summary>
        /// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
        /// </summary>
        [Input("schedule")]
        public Input<string>? Schedule { get; set; }

        /// <summary>
        /// Vault ID.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        public OssBackupPlanState()
        {
        }
    }
}
