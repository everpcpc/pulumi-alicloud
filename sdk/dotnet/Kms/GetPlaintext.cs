// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Kms
{
    public static class GetPlaintext
    {
        public static Task<GetPlaintextResult> InvokeAsync(GetPlaintextArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPlaintextResult>("alicloud:kms/getPlaintext:getPlaintext", args ?? new GetPlaintextArgs(), options.WithVersion());
    }


    public sealed class GetPlaintextArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ciphertext to be decrypted.
        /// </summary>
        [Input("ciphertextBlob", required: true)]
        public string CiphertextBlob { get; set; } = null!;

        [Input("encryptionContext")]
        private Dictionary<string, string>? _encryptionContext;
        public Dictionary<string, string> EncryptionContext
        {
            get => _encryptionContext ?? (_encryptionContext = new Dictionary<string, string>());
            set => _encryptionContext = value;
        }

        public GetPlaintextArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPlaintextResult
    {
        public readonly string CiphertextBlob;
        public readonly ImmutableDictionary<string, string>? EncryptionContext;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The globally unique ID of the CMK. It is the ID of the CMK used to decrypt ciphertext.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// The decrypted plaintext.
        /// </summary>
        public readonly string Plaintext;

        [OutputConstructor]
        private GetPlaintextResult(
            string ciphertextBlob,

            ImmutableDictionary<string, string>? encryptionContext,

            string id,

            string keyId,

            string plaintext)
        {
            CiphertextBlob = ciphertextBlob;
            EncryptionContext = encryptionContext;
            Id = id;
            KeyId = keyId;
            Plaintext = plaintext;
        }
    }
}
