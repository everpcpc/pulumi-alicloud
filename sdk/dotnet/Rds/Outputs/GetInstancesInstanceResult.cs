// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Rds.Outputs
{

    [OutputType]
    public sealed class GetInstancesInstanceResult
    {
        /// <summary>
        /// Availability zone.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// Billing method. Value options: `Postpaid` for Pay-As-You-Go and `Prepaid` for subscription.
        /// </summary>
        public readonly string ChargeType;
        /// <summary>
        /// `Standard` for standard access mode and `Safe` for high security access mode.
        /// </summary>
        public readonly string ConnectionMode;
        /// <summary>
        /// (Available in 1.70.3+) RDS database connection string.
        /// </summary>
        public readonly string ConnectionString;
        /// <summary>
        /// Creation time of the instance.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// (Available in 1.70.3+) The storage type of the instance.
        /// </summary>
        public readonly string DbInstanceStorageType;
        /// <summary>
        /// `Primary` for primary instance, `Readonly` for read-only instance, `Guard` for disaster recovery instance, and `Temp` for temporary instance.
        /// </summary>
        public readonly string DbType;
        /// <summary>
        /// Database type. Options are `MySQL`, `SQLServer`, `PostgreSQL` and `PPAS`. If no value is specified, all types are returned.
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// Database version.
        /// </summary>
        public readonly string EngineVersion;
        /// <summary>
        /// Expiration time. Pay-As-You-Go instances never expire.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// If a disaster recovery instance is attached to the current instance, the ID of the disaster recovery instance applies.
        /// </summary>
        public readonly string GuardInstanceId;
        /// <summary>
        /// The ID of the RDS instance.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Available in 1.70.3+) User-defined DB instance storage space.
        /// </summary>
        public readonly int InstanceStorage;
        /// <summary>
        /// Sizing of the RDS instance.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// ID of the primary instance. If this parameter is not returned, the current instance is a primary instance.
        /// </summary>
        public readonly string MasterInstanceId;
        /// <summary>
        /// (Available in 1.101.0+) The master zone of the instance.
        /// </summary>
        public readonly string MasterZone;
        /// <summary>
        /// The name of the RDS instance.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// `Internet` for public network or `Intranet` for private network.
        /// </summary>
        public readonly string NetType;
        /// <summary>
        /// (Available in 1.70.3+) RDS database connection port.
        /// </summary>
        public readonly string Port;
        /// <summary>
        /// A list of IDs of read-only instances attached to the primary instance.
        /// </summary>
        public readonly ImmutableArray<string> ReadonlyInstanceIds;
        /// <summary>
        /// Region ID the instance belongs to.
        /// </summary>
        public readonly string RegionId;
        /// <summary>
        /// Status of the instance.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// If a temporary instance is attached to the current instance, the ID of the temporary instance applies.
        /// </summary>
        public readonly string TempInstanceId;
        /// <summary>
        /// Used to retrieve instances belong to specified VPC.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// Used to retrieve instances belong to specified `vswitch` resources.
        /// </summary>
        public readonly string VswitchId;
        /// <summary>
        /// (Available in 1.101.0+) The region ID of the secondary instance if you create a secondary instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
        /// </summary>
        public readonly string ZoneIdSlaveA;
        /// <summary>
        /// (Available in 1.101.0+) The region ID of the log instance if you create a log instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
        /// </summary>
        public readonly string ZoneIdSlaveB;

        [OutputConstructor]
        private GetInstancesInstanceResult(
            string availabilityZone,

            string chargeType,

            string connectionMode,

            string connectionString,

            string createTime,

            string dbInstanceStorageType,

            string dbType,

            string engine,

            string engineVersion,

            string expireTime,

            string guardInstanceId,

            string id,

            int instanceStorage,

            string instanceType,

            string masterInstanceId,

            string masterZone,

            string name,

            string netType,

            string port,

            ImmutableArray<string> readonlyInstanceIds,

            string regionId,

            string status,

            string tempInstanceId,

            string vpcId,

            string vswitchId,

            string zoneIdSlaveA,

            string zoneIdSlaveB)
        {
            AvailabilityZone = availabilityZone;
            ChargeType = chargeType;
            ConnectionMode = connectionMode;
            ConnectionString = connectionString;
            CreateTime = createTime;
            DbInstanceStorageType = dbInstanceStorageType;
            DbType = dbType;
            Engine = engine;
            EngineVersion = engineVersion;
            ExpireTime = expireTime;
            GuardInstanceId = guardInstanceId;
            Id = id;
            InstanceStorage = instanceStorage;
            InstanceType = instanceType;
            MasterInstanceId = masterInstanceId;
            MasterZone = masterZone;
            Name = name;
            NetType = netType;
            Port = port;
            ReadonlyInstanceIds = readonlyInstanceIds;
            RegionId = regionId;
            Status = status;
            TempInstanceId = tempInstanceId;
            VpcId = vpcId;
            VswitchId = vswitchId;
            ZoneIdSlaveA = zoneIdSlaveA;
            ZoneIdSlaveB = zoneIdSlaveB;
        }
    }
}
