// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a RabbitMQ (AMQP) Queue resource.
 *
 * For information about RabbitMQ (AMQP) Queue and how to use it, see [What is Queue](https://www.alibabacloud.com/help/doc-detail/101631.htm).
 *
 * > **NOTE:** Available in v1.127.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const exampleVirtualHost = new alicloud.amqp.VirtualHost("exampleVirtualHost", {
 *     instanceId: "amqp-abc12345",
 *     virtualHostName: "my-VirtualHost",
 * });
 * const exampleQueue = new alicloud.amqp.Queue("exampleQueue", {
 *     instanceId: exampleVirtualHost.instanceId,
 *     queueName: "my-Queue",
 *     virtualHostName: exampleVirtualHost.virtualHostName,
 * });
 * ```
 *
 * ## Import
 *
 * RabbitMQ (AMQP) Queue can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:amqp/queue:Queue example <instance_id>:<virtual_host_name>:<queue_name>
 * ```
 */
export class Queue extends pulumi.CustomResource {
    /**
     * Get an existing Queue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QueueState, opts?: pulumi.CustomResourceOptions): Queue {
        return new Queue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:amqp/queue:Queue';

    /**
     * Returns true if the given object is an instance of Queue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Queue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Queue.__pulumiType;
    }

    /**
     * Specifies whether the Auto Delete attribute is configured. Valid values:
     * * true: The Auto Delete attribute is configured. The queue is automatically deleted after the last subscription from consumers to this queue is canceled.
     * * false: The Auto Delete attribute is not configured.
     */
    public readonly autoDeleteState!: pulumi.Output<boolean | undefined>;
    /**
     * The validity period after which the queue is automatically deleted.
     * If the queue is not accessed within a specified period of time, it is automatically deleted.
     */
    public readonly autoExpireState!: pulumi.Output<string | undefined>;
    /**
     * The dead-letter exchange. A dead-letter exchange is used to receive rejected messages. 
     * If a consumer rejects a message that cannot be retried, this message is routed to a specified dead-letter exchange.
     * Then, the dead-letter exchange routes the message to the queue that is bound to the dead-letter exchange.
     */
    public readonly deadLetterExchange!: pulumi.Output<string | undefined>;
    /**
     * The dead letter routing key.
     */
    public readonly deadLetterRoutingKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the queue is an exclusive queue. Valid values:
     * * true: The queue is an exclusive queue. It can be used only for the connection that declares the exclusive queue. After the connection is closed, the exclusive queue is automatically deleted.
     * * false: The queue is not an exclusive queue.
     */
    public readonly exclusiveState!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The maximum number of messages that can be stored in the queue.
     * If this threshold is exceeded, the earliest messages that are routed to the queue are discarded.
     */
    public readonly maxLength!: pulumi.Output<string | undefined>;
    /**
     * The highest priority supported by the queue. This parameter is set to a positive integer.
     * Valid values: 0 to 255. Recommended values: 1 to 10
     */
    public readonly maximumPriority!: pulumi.Output<number | undefined>;
    /**
     * The message TTL of the queue.
     * If the retention period of a message in the queue exceeds the message TTL of the queue, the message expires.
     * Message TTL must be set to a non-negative integer, in milliseconds.
     * For example, if the message TTL of the queue is 1000, messages survive for at most 1 second in the queue.
     */
    public readonly messageTtl!: pulumi.Output<string | undefined>;
    /**
     * The name of the queue.
     * The queue name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (_), periods (.), and at signs (@).
     */
    public readonly queueName!: pulumi.Output<string>;
    /**
     * The name of the virtual host.
     */
    public readonly virtualHostName!: pulumi.Output<string>;

    /**
     * Create a Queue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QueueArgs | QueueState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QueueState | undefined;
            inputs["autoDeleteState"] = state ? state.autoDeleteState : undefined;
            inputs["autoExpireState"] = state ? state.autoExpireState : undefined;
            inputs["deadLetterExchange"] = state ? state.deadLetterExchange : undefined;
            inputs["deadLetterRoutingKey"] = state ? state.deadLetterRoutingKey : undefined;
            inputs["exclusiveState"] = state ? state.exclusiveState : undefined;
            inputs["instanceId"] = state ? state.instanceId : undefined;
            inputs["maxLength"] = state ? state.maxLength : undefined;
            inputs["maximumPriority"] = state ? state.maximumPriority : undefined;
            inputs["messageTtl"] = state ? state.messageTtl : undefined;
            inputs["queueName"] = state ? state.queueName : undefined;
            inputs["virtualHostName"] = state ? state.virtualHostName : undefined;
        } else {
            const args = argsOrState as QueueArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.queueName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueName'");
            }
            if ((!args || args.virtualHostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualHostName'");
            }
            inputs["autoDeleteState"] = args ? args.autoDeleteState : undefined;
            inputs["autoExpireState"] = args ? args.autoExpireState : undefined;
            inputs["deadLetterExchange"] = args ? args.deadLetterExchange : undefined;
            inputs["deadLetterRoutingKey"] = args ? args.deadLetterRoutingKey : undefined;
            inputs["exclusiveState"] = args ? args.exclusiveState : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["maxLength"] = args ? args.maxLength : undefined;
            inputs["maximumPriority"] = args ? args.maximumPriority : undefined;
            inputs["messageTtl"] = args ? args.messageTtl : undefined;
            inputs["queueName"] = args ? args.queueName : undefined;
            inputs["virtualHostName"] = args ? args.virtualHostName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Queue.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Queue resources.
 */
export interface QueueState {
    /**
     * Specifies whether the Auto Delete attribute is configured. Valid values:
     * * true: The Auto Delete attribute is configured. The queue is automatically deleted after the last subscription from consumers to this queue is canceled.
     * * false: The Auto Delete attribute is not configured.
     */
    readonly autoDeleteState?: pulumi.Input<boolean>;
    /**
     * The validity period after which the queue is automatically deleted.
     * If the queue is not accessed within a specified period of time, it is automatically deleted.
     */
    readonly autoExpireState?: pulumi.Input<string>;
    /**
     * The dead-letter exchange. A dead-letter exchange is used to receive rejected messages. 
     * If a consumer rejects a message that cannot be retried, this message is routed to a specified dead-letter exchange.
     * Then, the dead-letter exchange routes the message to the queue that is bound to the dead-letter exchange.
     */
    readonly deadLetterExchange?: pulumi.Input<string>;
    /**
     * The dead letter routing key.
     */
    readonly deadLetterRoutingKey?: pulumi.Input<string>;
    /**
     * Specifies whether the queue is an exclusive queue. Valid values:
     * * true: The queue is an exclusive queue. It can be used only for the connection that declares the exclusive queue. After the connection is closed, the exclusive queue is automatically deleted.
     * * false: The queue is not an exclusive queue.
     */
    readonly exclusiveState?: pulumi.Input<boolean>;
    /**
     * The ID of the instance.
     */
    readonly instanceId?: pulumi.Input<string>;
    /**
     * The maximum number of messages that can be stored in the queue.
     * If this threshold is exceeded, the earliest messages that are routed to the queue are discarded.
     */
    readonly maxLength?: pulumi.Input<string>;
    /**
     * The highest priority supported by the queue. This parameter is set to a positive integer.
     * Valid values: 0 to 255. Recommended values: 1 to 10
     */
    readonly maximumPriority?: pulumi.Input<number>;
    /**
     * The message TTL of the queue.
     * If the retention period of a message in the queue exceeds the message TTL of the queue, the message expires.
     * Message TTL must be set to a non-negative integer, in milliseconds.
     * For example, if the message TTL of the queue is 1000, messages survive for at most 1 second in the queue.
     */
    readonly messageTtl?: pulumi.Input<string>;
    /**
     * The name of the queue.
     * The queue name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (_), periods (.), and at signs (@).
     */
    readonly queueName?: pulumi.Input<string>;
    /**
     * The name of the virtual host.
     */
    readonly virtualHostName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Queue resource.
 */
export interface QueueArgs {
    /**
     * Specifies whether the Auto Delete attribute is configured. Valid values:
     * * true: The Auto Delete attribute is configured. The queue is automatically deleted after the last subscription from consumers to this queue is canceled.
     * * false: The Auto Delete attribute is not configured.
     */
    readonly autoDeleteState?: pulumi.Input<boolean>;
    /**
     * The validity period after which the queue is automatically deleted.
     * If the queue is not accessed within a specified period of time, it is automatically deleted.
     */
    readonly autoExpireState?: pulumi.Input<string>;
    /**
     * The dead-letter exchange. A dead-letter exchange is used to receive rejected messages. 
     * If a consumer rejects a message that cannot be retried, this message is routed to a specified dead-letter exchange.
     * Then, the dead-letter exchange routes the message to the queue that is bound to the dead-letter exchange.
     */
    readonly deadLetterExchange?: pulumi.Input<string>;
    /**
     * The dead letter routing key.
     */
    readonly deadLetterRoutingKey?: pulumi.Input<string>;
    /**
     * Specifies whether the queue is an exclusive queue. Valid values:
     * * true: The queue is an exclusive queue. It can be used only for the connection that declares the exclusive queue. After the connection is closed, the exclusive queue is automatically deleted.
     * * false: The queue is not an exclusive queue.
     */
    readonly exclusiveState?: pulumi.Input<boolean>;
    /**
     * The ID of the instance.
     */
    readonly instanceId: pulumi.Input<string>;
    /**
     * The maximum number of messages that can be stored in the queue.
     * If this threshold is exceeded, the earliest messages that are routed to the queue are discarded.
     */
    readonly maxLength?: pulumi.Input<string>;
    /**
     * The highest priority supported by the queue. This parameter is set to a positive integer.
     * Valid values: 0 to 255. Recommended values: 1 to 10
     */
    readonly maximumPriority?: pulumi.Input<number>;
    /**
     * The message TTL of the queue.
     * If the retention period of a message in the queue exceeds the message TTL of the queue, the message expires.
     * Message TTL must be set to a non-negative integer, in milliseconds.
     * For example, if the message TTL of the queue is 1000, messages survive for at most 1 second in the queue.
     */
    readonly messageTtl?: pulumi.Input<string>;
    /**
     * The name of the queue.
     * The queue name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (_), periods (.), and at signs (@).
     */
    readonly queueName: pulumi.Input<string>;
    /**
     * The name of the virtual host.
     */
    readonly virtualHostName: pulumi.Input<string>;
}
