"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides a ECS instance resource.
 *
 * ~> **NOTE:** You can launch an ECS instance for a VPC network via specifying parameter `vswitch_id`. One instance can only belong to one VSwitch.
 *
 * ~> **NOTE:** If a VSwitchId is specified for creating an instance, SecurityGroupId and VSwitchId must belong to one VPC.
 *
 * ~> **NOTE:** Several instance types have outdated in some regions and availability zones, such as `ecs.t1.*`, `ecs.s2.*`, `ecs.n1.*` and so on. If you want to keep them, you should set `is_outdated` to true. For more about the upgraded instance type, refer to `alicloud_instance_types` datasource.
 *
 * ~> **NOTE:** At present, 'PrePaid' instance cannot be deleted and must wait it to be outdated and release it automatically.
 *
 * ~> **NOTE:** The resource supports modifying instance charge type from 'PrePaid' to 'PostPaid' from version 1.9.6.
 *  However, at present, this modification has some limitation about CPU core count in one month, so strongly recommand that `Don't modify instance charge type frequentlly in one month`.
 */
class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new Instance(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["allocatePublicIp"] = state ? state.allocatePublicIp : undefined;
            inputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dryRun"] = state ? state.dryRun : undefined;
            inputs["forceDelete"] = state ? state.forceDelete : undefined;
            inputs["hostName"] = state ? state.hostName : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["includeDataDisks"] = state ? state.includeDataDisks : undefined;
            inputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            inputs["instanceName"] = state ? state.instanceName : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["internetChargeType"] = state ? state.internetChargeType : undefined;
            inputs["internetMaxBandwidthIn"] = state ? state.internetMaxBandwidthIn : undefined;
            inputs["internetMaxBandwidthOut"] = state ? state.internetMaxBandwidthOut : undefined;
            inputs["ioOptimized"] = state ? state.ioOptimized : undefined;
            inputs["isOutdated"] = state ? state.isOutdated : undefined;
            inputs["keyName"] = state ? state.keyName : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["period"] = state ? state.period : undefined;
            inputs["periodUnit"] = state ? state.periodUnit : undefined;
            inputs["privateIp"] = state ? state.privateIp : undefined;
            inputs["publicIp"] = state ? state.publicIp : undefined;
            inputs["renewalStatus"] = state ? state.renewalStatus : undefined;
            inputs["roleName"] = state ? state.roleName : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["spotPriceLimit"] = state ? state.spotPriceLimit : undefined;
            inputs["spotStrategy"] = state ? state.spotStrategy : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["systemDiskCategory"] = state ? state.systemDiskCategory : undefined;
            inputs["systemDiskSize"] = state ? state.systemDiskSize : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["userData"] = state ? state.userData : undefined;
            inputs["vswitchId"] = state ? state.vswitchId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.imageId === undefined) {
                throw new Error("Missing required property 'imageId'");
            }
            if (!args || args.instanceType === undefined) {
                throw new Error("Missing required property 'instanceType'");
            }
            if (!args || args.securityGroups === undefined) {
                throw new Error("Missing required property 'securityGroups'");
            }
            inputs["allocatePublicIp"] = args ? args.allocatePublicIp : undefined;
            inputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dryRun"] = args ? args.dryRun : undefined;
            inputs["forceDelete"] = args ? args.forceDelete : undefined;
            inputs["hostName"] = args ? args.hostName : undefined;
            inputs["imageId"] = args ? args.imageId : undefined;
            inputs["includeDataDisks"] = args ? args.includeDataDisks : undefined;
            inputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            inputs["instanceName"] = args ? args.instanceName : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["internetChargeType"] = args ? args.internetChargeType : undefined;
            inputs["internetMaxBandwidthIn"] = args ? args.internetMaxBandwidthIn : undefined;
            inputs["internetMaxBandwidthOut"] = args ? args.internetMaxBandwidthOut : undefined;
            inputs["ioOptimized"] = args ? args.ioOptimized : undefined;
            inputs["isOutdated"] = args ? args.isOutdated : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["periodUnit"] = args ? args.periodUnit : undefined;
            inputs["privateIp"] = args ? args.privateIp : undefined;
            inputs["renewalStatus"] = args ? args.renewalStatus : undefined;
            inputs["roleName"] = args ? args.roleName : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["spotPriceLimit"] = args ? args.spotPriceLimit : undefined;
            inputs["spotStrategy"] = args ? args.spotStrategy : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["systemDiskCategory"] = args ? args.systemDiskCategory : undefined;
            inputs["systemDiskSize"] = args ? args.systemDiskSize : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["vswitchId"] = args ? args.vswitchId : undefined;
            inputs["publicIp"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        super("alicloud:ecs/instance:Instance", name, inputs, opts);
    }
}
exports.Instance = Instance;
//# sourceMappingURL=instance.js.map