"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides a security group rule resource.
 * Represents a single `ingress` or `egress` group rule, which can be added to external Security Groups.
 *
 * ~> **NOTE:**  `nic_type` should set to `intranet` when security group type is `vpc` or specifying the `source_security_group_id`. In this situation it does not distinguish between intranet and internet, the rule is effective on them both.
 *
 */
class SecurityGroupRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroupRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new SecurityGroupRule(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["cidrIp"] = state ? state.cidrIp : undefined;
            inputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            inputs["nicType"] = state ? state.nicType : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["portRange"] = state ? state.portRange : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            inputs["sourceGroupOwnerAccount"] = state ? state.sourceGroupOwnerAccount : undefined;
            inputs["sourceSecurityGroupId"] = state ? state.sourceSecurityGroupId : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.ipProtocol === undefined) {
                throw new Error("Missing required property 'ipProtocol'");
            }
            if (!args || args.securityGroupId === undefined) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["cidrIp"] = args ? args.cidrIp : undefined;
            inputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            inputs["nicType"] = args ? args.nicType : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["portRange"] = args ? args.portRange : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            inputs["sourceGroupOwnerAccount"] = args ? args.sourceGroupOwnerAccount : undefined;
            inputs["sourceSecurityGroupId"] = args ? args.sourceSecurityGroupId : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        super("alicloud:ecs/securityGroupRule:SecurityGroupRule", name, inputs, opts);
    }
}
exports.SecurityGroupRule = SecurityGroupRule;
//# sourceMappingURL=securityGroupRule.js.map