"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides an Application Load Balancer Listener resource.
 *
 * For information about slb and how to use it, see [What is Server Load Balancer](https://www.alibabacloud.com/help/doc-detail/27539.htm).
 *
 * For information about listener and how to use it, see [Configure a Listener](https://www.alibabacloud.com/help/doc-detail/27594.htm).
 *
 */
class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new Listener(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["aclId"] = state ? state.aclId : undefined;
            inputs["aclStatus"] = state ? state.aclStatus : undefined;
            inputs["aclType"] = state ? state.aclType : undefined;
            inputs["backendPort"] = state ? state.backendPort : undefined;
            inputs["bandwidth"] = state ? state.bandwidth : undefined;
            inputs["cookie"] = state ? state.cookie : undefined;
            inputs["cookieTimeout"] = state ? state.cookieTimeout : undefined;
            inputs["frontendPort"] = state ? state.frontendPort : undefined;
            inputs["gzip"] = state ? state.gzip : undefined;
            inputs["healthCheck"] = state ? state.healthCheck : undefined;
            inputs["healthCheckConnectPort"] = state ? state.healthCheckConnectPort : undefined;
            inputs["healthCheckDomain"] = state ? state.healthCheckDomain : undefined;
            inputs["healthCheckHttpCode"] = state ? state.healthCheckHttpCode : undefined;
            inputs["healthCheckInterval"] = state ? state.healthCheckInterval : undefined;
            inputs["healthCheckTimeout"] = state ? state.healthCheckTimeout : undefined;
            inputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            inputs["healthCheckUri"] = state ? state.healthCheckUri : undefined;
            inputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            inputs["instancePort"] = state ? state.instancePort : undefined;
            inputs["lbPort"] = state ? state.lbPort : undefined;
            inputs["lbProtocol"] = state ? state.lbProtocol : undefined;
            inputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            inputs["persistenceTimeout"] = state ? state.persistenceTimeout : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["scheduler"] = state ? state.scheduler : undefined;
            inputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            inputs["sslCertificateId"] = state ? state.sslCertificateId : undefined;
            inputs["stickySession"] = state ? state.stickySession : undefined;
            inputs["stickySessionType"] = state ? state.stickySessionType : undefined;
            inputs["unhealthyThreshold"] = state ? state.unhealthyThreshold : undefined;
            inputs["xForwardedFor"] = state ? state.xForwardedFor : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.backendPort === undefined) {
                throw new Error("Missing required property 'backendPort'");
            }
            if (!args || args.bandwidth === undefined) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if (!args || args.frontendPort === undefined) {
                throw new Error("Missing required property 'frontendPort'");
            }
            if (!args || args.loadBalancerId === undefined) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if (!args || args.protocol === undefined) {
                throw new Error("Missing required property 'protocol'");
            }
            inputs["aclId"] = args ? args.aclId : undefined;
            inputs["aclStatus"] = args ? args.aclStatus : undefined;
            inputs["aclType"] = args ? args.aclType : undefined;
            inputs["backendPort"] = args ? args.backendPort : undefined;
            inputs["bandwidth"] = args ? args.bandwidth : undefined;
            inputs["cookie"] = args ? args.cookie : undefined;
            inputs["cookieTimeout"] = args ? args.cookieTimeout : undefined;
            inputs["frontendPort"] = args ? args.frontendPort : undefined;
            inputs["gzip"] = args ? args.gzip : undefined;
            inputs["healthCheck"] = args ? args.healthCheck : undefined;
            inputs["healthCheckConnectPort"] = args ? args.healthCheckConnectPort : undefined;
            inputs["healthCheckDomain"] = args ? args.healthCheckDomain : undefined;
            inputs["healthCheckHttpCode"] = args ? args.healthCheckHttpCode : undefined;
            inputs["healthCheckInterval"] = args ? args.healthCheckInterval : undefined;
            inputs["healthCheckTimeout"] = args ? args.healthCheckTimeout : undefined;
            inputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            inputs["healthCheckUri"] = args ? args.healthCheckUri : undefined;
            inputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            inputs["instancePort"] = args ? args.instancePort : undefined;
            inputs["lbPort"] = args ? args.lbPort : undefined;
            inputs["lbProtocol"] = args ? args.lbProtocol : undefined;
            inputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            inputs["persistenceTimeout"] = args ? args.persistenceTimeout : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["scheduler"] = args ? args.scheduler : undefined;
            inputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            inputs["sslCertificateId"] = args ? args.sslCertificateId : undefined;
            inputs["stickySession"] = args ? args.stickySession : undefined;
            inputs["stickySessionType"] = args ? args.stickySessionType : undefined;
            inputs["unhealthyThreshold"] = args ? args.unhealthyThreshold : undefined;
            inputs["xForwardedFor"] = args ? args.xForwardedFor : undefined;
        }
        super("alicloud:slb/listener:Listener", name, inputs, opts);
    }
}
exports.Listener = Listener;
//# sourceMappingURL=listener.js.map