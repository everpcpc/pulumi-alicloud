"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides a CDN Accelerated Domain resource.
 */
class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new Domain(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["authConfig"] = state ? state.authConfig : undefined;
            inputs["blockIps"] = state ? state.blockIps : undefined;
            inputs["cacheConfigs"] = state ? state.cacheConfigs : undefined;
            inputs["cdnType"] = state ? state.cdnType : undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["httpHeaderConfigs"] = state ? state.httpHeaderConfigs : undefined;
            inputs["optimizeEnable"] = state ? state.optimizeEnable : undefined;
            inputs["page404Config"] = state ? state.page404Config : undefined;
            inputs["pageCompressEnable"] = state ? state.pageCompressEnable : undefined;
            inputs["parameterFilterConfig"] = state ? state.parameterFilterConfig : undefined;
            inputs["rangeEnable"] = state ? state.rangeEnable : undefined;
            inputs["referConfig"] = state ? state.referConfig : undefined;
            inputs["scope"] = state ? state.scope : undefined;
            inputs["sourcePort"] = state ? state.sourcePort : undefined;
            inputs["sourceType"] = state ? state.sourceType : undefined;
            inputs["sources"] = state ? state.sources : undefined;
            inputs["videoSeekEnable"] = state ? state.videoSeekEnable : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.cdnType === undefined) {
                throw new Error("Missing required property 'cdnType'");
            }
            if (!args || args.domainName === undefined) {
                throw new Error("Missing required property 'domainName'");
            }
            inputs["authConfig"] = args ? args.authConfig : undefined;
            inputs["blockIps"] = args ? args.blockIps : undefined;
            inputs["cacheConfigs"] = args ? args.cacheConfigs : undefined;
            inputs["cdnType"] = args ? args.cdnType : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["httpHeaderConfigs"] = args ? args.httpHeaderConfigs : undefined;
            inputs["optimizeEnable"] = args ? args.optimizeEnable : undefined;
            inputs["page404Config"] = args ? args.page404Config : undefined;
            inputs["pageCompressEnable"] = args ? args.pageCompressEnable : undefined;
            inputs["parameterFilterConfig"] = args ? args.parameterFilterConfig : undefined;
            inputs["rangeEnable"] = args ? args.rangeEnable : undefined;
            inputs["referConfig"] = args ? args.referConfig : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["sourcePort"] = args ? args.sourcePort : undefined;
            inputs["sourceType"] = args ? args.sourceType : undefined;
            inputs["sources"] = args ? args.sources : undefined;
            inputs["videoSeekEnable"] = args ? args.videoSeekEnable : undefined;
        }
        super("alicloud:cdn/domain:Domain", name, inputs, opts);
    }
}
exports.Domain = Domain;
//# sourceMappingURL=domain.js.map