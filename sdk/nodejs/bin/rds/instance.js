"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides an RDS instance resource. A DB instance is an isolated database
 * environment in the cloud. A DB instance can contain multiple user-created
 * databases.
 */
class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new Instance(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["allocatePublicConnection"] = state ? state.allocatePublicConnection : undefined;
            inputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            inputs["connectionString"] = state ? state.connectionString : undefined;
            inputs["connections"] = state ? state.connections : undefined;
            inputs["dbInstanceClass"] = state ? state.dbInstanceClass : undefined;
            inputs["dbInstanceNetType"] = state ? state.dbInstanceNetType : undefined;
            inputs["dbInstanceStorage"] = state ? state.dbInstanceStorage : undefined;
            inputs["dbMappings"] = state ? state.dbMappings : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            inputs["instanceName"] = state ? state.instanceName : undefined;
            inputs["instanceNetworkType"] = state ? state.instanceNetworkType : undefined;
            inputs["instanceStorage"] = state ? state.instanceStorage : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["masterUserName"] = state ? state.masterUserName : undefined;
            inputs["masterUserPassword"] = state ? state.masterUserPassword : undefined;
            inputs["multiAz"] = state ? state.multiAz : undefined;
            inputs["period"] = state ? state.period : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["preferredBackupPeriods"] = state ? state.preferredBackupPeriods : undefined;
            inputs["preferredBackupTime"] = state ? state.preferredBackupTime : undefined;
            inputs["securityIps"] = state ? state.securityIps : undefined;
            inputs["vswitchId"] = state ? state.vswitchId : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.engine === undefined) {
                throw new Error("Missing required property 'engine'");
            }
            if (!args || args.engineVersion === undefined) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if (!args || args.instanceStorage === undefined) {
                throw new Error("Missing required property 'instanceStorage'");
            }
            if (!args || args.instanceType === undefined) {
                throw new Error("Missing required property 'instanceType'");
            }
            inputs["allocatePublicConnection"] = args ? args.allocatePublicConnection : undefined;
            inputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            inputs["connections"] = args ? args.connections : undefined;
            inputs["dbInstanceClass"] = args ? args.dbInstanceClass : undefined;
            inputs["dbInstanceNetType"] = args ? args.dbInstanceNetType : undefined;
            inputs["dbInstanceStorage"] = args ? args.dbInstanceStorage : undefined;
            inputs["dbMappings"] = args ? args.dbMappings : undefined;
            inputs["engine"] = args ? args.engine : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            inputs["instanceName"] = args ? args.instanceName : undefined;
            inputs["instanceNetworkType"] = args ? args.instanceNetworkType : undefined;
            inputs["instanceStorage"] = args ? args.instanceStorage : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["masterUserName"] = args ? args.masterUserName : undefined;
            inputs["masterUserPassword"] = args ? args.masterUserPassword : undefined;
            inputs["multiAz"] = args ? args.multiAz : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["preferredBackupPeriods"] = args ? args.preferredBackupPeriods : undefined;
            inputs["preferredBackupTime"] = args ? args.preferredBackupTime : undefined;
            inputs["securityIps"] = args ? args.securityIps : undefined;
            inputs["vswitchId"] = args ? args.vswitchId : undefined;
            inputs["zoneId"] = args ? args.zoneId : undefined;
            inputs["connectionString"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
        }
        super("alicloud:rds/instance:Instance", name, inputs, opts);
    }
}
exports.Instance = Instance;
//# sourceMappingURL=instance.js.map