"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides a VPC router interface resource aim to build a connection between two VPCs.
 *
 * -> **NOTE:** Only one pair of connected router interfaces can exist between two routers. Up to 5 router interfaces can be created for each router and each account.
 *
 * -> **NOTE:** The router interface is not connected when it is created. It can be connected by means of resource [alicloud_router_interface_connection](https://www.terraform.io/docs/providers/alicloud/r/router_interface_connection.html).
 *
 */
class RouterInterface extends pulumi.CustomResource {
    /**
     * Get an existing RouterInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new RouterInterface(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["accessPointId"] = state ? state.accessPointId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["healthCheckSourceIp"] = state ? state.healthCheckSourceIp : undefined;
            inputs["healthCheckTargetIp"] = state ? state.healthCheckTargetIp : undefined;
            inputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["oppositeAccessPointId"] = state ? state.oppositeAccessPointId : undefined;
            inputs["oppositeInterfaceId"] = state ? state.oppositeInterfaceId : undefined;
            inputs["oppositeInterfaceOwnerId"] = state ? state.oppositeInterfaceOwnerId : undefined;
            inputs["oppositeRegion"] = state ? state.oppositeRegion : undefined;
            inputs["oppositeRouterId"] = state ? state.oppositeRouterId : undefined;
            inputs["oppositeRouterType"] = state ? state.oppositeRouterType : undefined;
            inputs["period"] = state ? state.period : undefined;
            inputs["role"] = state ? state.role : undefined;
            inputs["routerId"] = state ? state.routerId : undefined;
            inputs["routerType"] = state ? state.routerType : undefined;
            inputs["specification"] = state ? state.specification : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.oppositeRegion === undefined) {
                throw new Error("Missing required property 'oppositeRegion'");
            }
            if (!args || args.role === undefined) {
                throw new Error("Missing required property 'role'");
            }
            if (!args || args.routerId === undefined) {
                throw new Error("Missing required property 'routerId'");
            }
            if (!args || args.routerType === undefined) {
                throw new Error("Missing required property 'routerType'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["healthCheckSourceIp"] = args ? args.healthCheckSourceIp : undefined;
            inputs["healthCheckTargetIp"] = args ? args.healthCheckTargetIp : undefined;
            inputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["oppositeAccessPointId"] = args ? args.oppositeAccessPointId : undefined;
            inputs["oppositeRegion"] = args ? args.oppositeRegion : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["routerId"] = args ? args.routerId : undefined;
            inputs["routerType"] = args ? args.routerType : undefined;
            inputs["specification"] = args ? args.specification : undefined;
            inputs["accessPointId"] = undefined /*out*/;
            inputs["oppositeInterfaceId"] = undefined /*out*/;
            inputs["oppositeInterfaceOwnerId"] = undefined /*out*/;
            inputs["oppositeRouterId"] = undefined /*out*/;
            inputs["oppositeRouterType"] = undefined /*out*/;
        }
        super("alicloud:vpc/routerInterface:RouterInterface", name, inputs, opts);
    }
}
exports.RouterInterface = RouterInterface;
//# sourceMappingURL=routerInterface.js.map