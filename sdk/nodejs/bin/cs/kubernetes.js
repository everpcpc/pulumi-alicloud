"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * This resource will help you to manager a Kubernetes Cluster. The cluster is same as container service created by web console.
 *
 * -> **NOTE:** Kubernetes cluster only supports VPC network and it can access internet while creating kubernetes cluster.
 * A Nat Gateway and configuring a SNAT for it can ensure one VPC network access internet. If there is no nat gateway in the
 * VPC, you can set `new_nat_gateway` to "true" to create one automatically.
 *
 * -> **NOTE:** If there is no specified `vswitch_ids`, the resource will create a new VPC and VSwitch while creating kubernetes cluster.
 *
 * -> **NOTE:** Each kubernetes cluster contains 3 master nodes and those number cannot be changed at now.
 *
 * -> **NOTE:** Creating kubernetes cluster need to install several packages and it will cost about 15 minutes. Please be patient.
 *
 * -> **NOTE:** From version 1.9.4, the provider supports to download kube config, client certificate, client key and cluster ca certificate
 * after creating cluster successfully, and you can put them into the specified location, like '~/.kube/config'.
 *
 * -> **NOTE:** From version 1.16.0, the provider supports Multiple Availability Zones Kubernetes Cluster. To create a cluster of this kind,
 * you must specify three items in `vswitch_ids`, `master_instance_types` and `worker_instance_types`.
 *
 * -> **NOTE:** From version 1.20.0, the provider supports disabling internet load balancer for API Server by setting `false` to `slb_internet_enabled`.
 */
class Kubernetes extends pulumi.CustomResource {
    /**
     * Get an existing Kubernetes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new Kubernetes(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["clientCert"] = state ? state.clientCert : undefined;
            inputs["clientKey"] = state ? state.clientKey : undefined;
            inputs["clusterCaCert"] = state ? state.clusterCaCert : undefined;
            inputs["clusterNetworkType"] = state ? state.clusterNetworkType : undefined;
            inputs["connections"] = state ? state.connections : undefined;
            inputs["enableSsh"] = state ? state.enableSsh : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["installCloudMonitor"] = state ? state.installCloudMonitor : undefined;
            inputs["isOutdated"] = state ? state.isOutdated : undefined;
            inputs["keyName"] = state ? state.keyName : undefined;
            inputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            inputs["logConfig"] = state ? state.logConfig : undefined;
            inputs["masterDiskCategory"] = state ? state.masterDiskCategory : undefined;
            inputs["masterDiskSize"] = state ? state.masterDiskSize : undefined;
            inputs["masterInstanceType"] = state ? state.masterInstanceType : undefined;
            inputs["masterInstanceTypes"] = state ? state.masterInstanceTypes : undefined;
            inputs["masterNodes"] = state ? state.masterNodes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            inputs["newNatGateway"] = state ? state.newNatGateway : undefined;
            inputs["nodeCidrMask"] = state ? state.nodeCidrMask : undefined;
            inputs["nodes"] = state ? state.nodes : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["podCidr"] = state ? state.podCidr : undefined;
            inputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            inputs["serviceCidr"] = state ? state.serviceCidr : undefined;
            inputs["slbId"] = state ? state.slbId : undefined;
            inputs["slbInternet"] = state ? state.slbInternet : undefined;
            inputs["slbInternetEnabled"] = state ? state.slbInternetEnabled : undefined;
            inputs["slbIntranet"] = state ? state.slbIntranet : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
            inputs["vswitchId"] = state ? state.vswitchId : undefined;
            inputs["vswitchIds"] = state ? state.vswitchIds : undefined;
            inputs["workerDataDiskCategory"] = state ? state.workerDataDiskCategory : undefined;
            inputs["workerDataDiskSize"] = state ? state.workerDataDiskSize : undefined;
            inputs["workerDiskCategory"] = state ? state.workerDiskCategory : undefined;
            inputs["workerDiskSize"] = state ? state.workerDiskSize : undefined;
            inputs["workerInstanceType"] = state ? state.workerInstanceType : undefined;
            inputs["workerInstanceTypes"] = state ? state.workerInstanceTypes : undefined;
            inputs["workerNodes"] = state ? state.workerNodes : undefined;
            inputs["workerNumber"] = state ? state.workerNumber : undefined;
            inputs["workerNumbers"] = state ? state.workerNumbers : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.masterInstanceTypes === undefined) {
                throw new Error("Missing required property 'masterInstanceTypes'");
            }
            if (!args || args.workerInstanceTypes === undefined) {
                throw new Error("Missing required property 'workerInstanceTypes'");
            }
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["clientCert"] = args ? args.clientCert : undefined;
            inputs["clientKey"] = args ? args.clientKey : undefined;
            inputs["clusterCaCert"] = args ? args.clusterCaCert : undefined;
            inputs["clusterNetworkType"] = args ? args.clusterNetworkType : undefined;
            inputs["enableSsh"] = args ? args.enableSsh : undefined;
            inputs["installCloudMonitor"] = args ? args.installCloudMonitor : undefined;
            inputs["isOutdated"] = args ? args.isOutdated : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
            inputs["kubeConfig"] = args ? args.kubeConfig : undefined;
            inputs["logConfig"] = args ? args.logConfig : undefined;
            inputs["masterDiskCategory"] = args ? args.masterDiskCategory : undefined;
            inputs["masterDiskSize"] = args ? args.masterDiskSize : undefined;
            inputs["masterInstanceType"] = args ? args.masterInstanceType : undefined;
            inputs["masterInstanceTypes"] = args ? args.masterInstanceTypes : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["newNatGateway"] = args ? args.newNatGateway : undefined;
            inputs["nodeCidrMask"] = args ? args.nodeCidrMask : undefined;
            inputs["nodes"] = args ? args.nodes : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["podCidr"] = args ? args.podCidr : undefined;
            inputs["serviceCidr"] = args ? args.serviceCidr : undefined;
            inputs["slbInternetEnabled"] = args ? args.slbInternetEnabled : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["vswitchId"] = args ? args.vswitchId : undefined;
            inputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            inputs["workerDataDiskCategory"] = args ? args.workerDataDiskCategory : undefined;
            inputs["workerDataDiskSize"] = args ? args.workerDataDiskSize : undefined;
            inputs["workerDiskCategory"] = args ? args.workerDiskCategory : undefined;
            inputs["workerDiskSize"] = args ? args.workerDiskSize : undefined;
            inputs["workerInstanceType"] = args ? args.workerInstanceType : undefined;
            inputs["workerInstanceTypes"] = args ? args.workerInstanceTypes : undefined;
            inputs["workerNumber"] = args ? args.workerNumber : undefined;
            inputs["workerNumbers"] = args ? args.workerNumbers : undefined;
            inputs["connections"] = undefined /*out*/;
            inputs["imageId"] = undefined /*out*/;
            inputs["masterNodes"] = undefined /*out*/;
            inputs["natGatewayId"] = undefined /*out*/;
            inputs["securityGroupId"] = undefined /*out*/;
            inputs["slbId"] = undefined /*out*/;
            inputs["slbInternet"] = undefined /*out*/;
            inputs["slbIntranet"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
            inputs["workerNodes"] = undefined /*out*/;
        }
        super("alicloud:cs/kubernetes:Kubernetes", name, inputs, opts);
    }
}
exports.Kubernetes = Kubernetes;
//# sourceMappingURL=kubernetes.js.map