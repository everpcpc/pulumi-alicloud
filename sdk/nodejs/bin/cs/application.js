"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * This resource use an orchestration template to define and deploy a multi-container application. An application is created by using an orchestration template.
 * Each application can contain one or more services.
 *
 * -> **NOTE:** Application orchestration template must be a valid Docker Compose YAML template.
 *
 * -> **NOTE:** At present, this resource only support swarm cluster.
 */
class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new Application(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["blueGreen"] = state ? state.blueGreen : undefined;
            inputs["blueGreenConfirm"] = state ? state.blueGreenConfirm : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["defaultDomain"] = state ? state.defaultDomain : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["environment"] = state ? state.environment : undefined;
            inputs["latestImage"] = state ? state.latestImage : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["services"] = state ? state.services : undefined;
            inputs["template"] = state ? state.template : undefined;
            inputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.clusterName === undefined) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (!args || args.template === undefined) {
                throw new Error("Missing required property 'template'");
            }
            inputs["blueGreen"] = args ? args.blueGreen : undefined;
            inputs["blueGreenConfirm"] = args ? args.blueGreenConfirm : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["environment"] = args ? args.environment : undefined;
            inputs["latestImage"] = args ? args.latestImage : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["template"] = args ? args.template : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["defaultDomain"] = undefined /*out*/;
            inputs["services"] = undefined /*out*/;
        }
        super("alicloud:cs/application:Application", name, inputs, opts);
    }
}
exports.Application = Application;
//# sourceMappingURL=application.js.map