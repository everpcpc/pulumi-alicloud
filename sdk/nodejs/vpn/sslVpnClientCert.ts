// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/ssl_vpn_client_cert.html.markdown.
 */
export class SslVpnClientCert extends pulumi.CustomResource {
    /**
     * Get an existing SslVpnClientCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslVpnClientCertState, opts?: pulumi.CustomResourceOptions): SslVpnClientCert {
        return new SslVpnClientCert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpn/sslVpnClientCert:SslVpnClientCert';

    /**
     * Returns true if the given object is an instance of SslVpnClientCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslVpnClientCert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslVpnClientCert.__pulumiType;
    }

    public /*out*/ readonly caCert!: pulumi.Output<string>;
    public /*out*/ readonly clientCert!: pulumi.Output<string>;
    public /*out*/ readonly clientConfig!: pulumi.Output<string>;
    public /*out*/ readonly clientKey!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly sslVpnServerId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a SslVpnClientCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslVpnClientCertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslVpnClientCertArgs | SslVpnClientCertState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SslVpnClientCertState | undefined;
            inputs["caCert"] = state ? state.caCert : undefined;
            inputs["clientCert"] = state ? state.clientCert : undefined;
            inputs["clientConfig"] = state ? state.clientConfig : undefined;
            inputs["clientKey"] = state ? state.clientKey : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["sslVpnServerId"] = state ? state.sslVpnServerId : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as SslVpnClientCertArgs | undefined;
            if (!args || args.sslVpnServerId === undefined) {
                throw new Error("Missing required property 'sslVpnServerId'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["sslVpnServerId"] = args ? args.sslVpnServerId : undefined;
            inputs["caCert"] = undefined /*out*/;
            inputs["clientCert"] = undefined /*out*/;
            inputs["clientConfig"] = undefined /*out*/;
            inputs["clientKey"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SslVpnClientCert.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SslVpnClientCert resources.
 */
export interface SslVpnClientCertState {
    readonly caCert?: pulumi.Input<string>;
    readonly clientCert?: pulumi.Input<string>;
    readonly clientConfig?: pulumi.Input<string>;
    readonly clientKey?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly sslVpnServerId?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslVpnClientCert resource.
 */
export interface SslVpnClientCertArgs {
    readonly name?: pulumi.Input<string>;
    readonly sslVpnServerId: pulumi.Input<string>;
}
