// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ECD Nas File System resource.
 *
 * For information about ECD Nas File System and how to use it, see [What is Nas File System](https://help.aliyun.com/document_detail/188382.html).
 *
 * > **NOTE:** Available in v1.141.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.eds.SimpleOfficeSite("default", {
 *     cidrBlock: "172.16.0.0/12",
 *     desktopAccessType: "Internet",
 *     officeSiteName: "your_office_site_name",
 *     enableInternetAccess: false,
 * });
 * const example = new alicloud.eds.NasFileSystem("example", {
 *     nasFileSystemName: "example_value",
 *     officeSiteId: _default.id,
 *     description: "example_value",
 * });
 * ```
 *
 * ## Import
 *
 * ECD Nas File System can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:eds/nasFileSystem:NasFileSystem example <id>
 * ```
 */
export class NasFileSystem extends pulumi.CustomResource {
    /**
     * Get an existing NasFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NasFileSystemState, opts?: pulumi.CustomResourceOptions): NasFileSystem {
        return new NasFileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eds/nasFileSystem:NasFileSystem';

    /**
     * Returns true if the given object is an instance of NasFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NasFileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NasFileSystem.__pulumiType;
    }

    /**
     * The description of nas file system.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The filesystem id of nas file system.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * The domain of mount target.
     */
    public readonly mountTargetDomain!: pulumi.Output<string>;
    /**
     * The name of nas file system.
     */
    public readonly nasFileSystemName!: pulumi.Output<string | undefined>;
    /**
     * The ID of office site.
     */
    public readonly officeSiteId!: pulumi.Output<string>;
    /**
     * The mount point is in an inactive state, reset the mount point of the NAS file system. Default to `false`.
     */
    public readonly reset!: pulumi.Output<boolean | undefined>;
    /**
     * The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a NasFileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NasFileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NasFileSystemArgs | NasFileSystemState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NasFileSystemState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            inputs["mountTargetDomain"] = state ? state.mountTargetDomain : undefined;
            inputs["nasFileSystemName"] = state ? state.nasFileSystemName : undefined;
            inputs["officeSiteId"] = state ? state.officeSiteId : undefined;
            inputs["reset"] = state ? state.reset : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as NasFileSystemArgs | undefined;
            if ((!args || args.officeSiteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'officeSiteId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            inputs["mountTargetDomain"] = args ? args.mountTargetDomain : undefined;
            inputs["nasFileSystemName"] = args ? args.nasFileSystemName : undefined;
            inputs["officeSiteId"] = args ? args.officeSiteId : undefined;
            inputs["reset"] = args ? args.reset : undefined;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(NasFileSystem.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NasFileSystem resources.
 */
export interface NasFileSystemState {
    /**
     * The description of nas file system.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The filesystem id of nas file system.
     */
    readonly fileSystemId?: pulumi.Input<string>;
    /**
     * The domain of mount target.
     */
    readonly mountTargetDomain?: pulumi.Input<string>;
    /**
     * The name of nas file system.
     */
    readonly nasFileSystemName?: pulumi.Input<string>;
    /**
     * The ID of office site.
     */
    readonly officeSiteId?: pulumi.Input<string>;
    /**
     * The mount point is in an inactive state, reset the mount point of the NAS file system. Default to `false`.
     */
    readonly reset?: pulumi.Input<boolean>;
    /**
     * The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
     */
    readonly status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NasFileSystem resource.
 */
export interface NasFileSystemArgs {
    /**
     * The description of nas file system.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The filesystem id of nas file system.
     */
    readonly fileSystemId?: pulumi.Input<string>;
    /**
     * The domain of mount target.
     */
    readonly mountTargetDomain?: pulumi.Input<string>;
    /**
     * The name of nas file system.
     */
    readonly nasFileSystemName?: pulumi.Input<string>;
    /**
     * The ID of office site.
     */
    readonly officeSiteId: pulumi.Input<string>;
    /**
     * The mount point is in an inactive state, reset the mount point of the NAS file system. Default to `false`.
     */
    readonly reset?: pulumi.Input<boolean>;
}
