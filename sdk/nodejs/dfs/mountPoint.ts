// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DFS Mount Point resource.
 *
 * For information about DFS Mount Point and how to use it, see [What is Mount Point](https://www.alibabacloud.com/help/doc-detail/207144.htm).
 *
 * > **NOTE:** Available in v1.140.0+.
 *
 * ## Import
 *
 * DFS Mount Point can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:dfs/mountPoint:MountPoint example <file_system_id>:<mount_point_id>
 * ```
 */
export class MountPoint extends pulumi.CustomResource {
    /**
     * Get an existing MountPoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MountPointState, opts?: pulumi.CustomResourceOptions): MountPoint {
        return new MountPoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dfs/mountPoint:MountPoint';

    /**
     * Returns true if the given object is an instance of MountPoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MountPoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MountPoint.__pulumiType;
    }

    /**
     * The ID of the Access Group.
     */
    public readonly accessGroupId!: pulumi.Output<string>;
    /**
     * The description of the Mount Point.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the File System.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * The ID of the Mount Point.
     */
    public /*out*/ readonly mountPointId!: pulumi.Output<string>;
    /**
     * The network type of the Mount Point. Valid values: `VPC`.
     */
    public readonly networkType!: pulumi.Output<string>;
    /**
     * The status of the Mount Point. Valid values: `Active`, `Inactive`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The vpc id.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * The vswitch id.
     */
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a MountPoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MountPointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MountPointArgs | MountPointState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MountPointState | undefined;
            inputs["accessGroupId"] = state ? state.accessGroupId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            inputs["mountPointId"] = state ? state.mountPointId : undefined;
            inputs["networkType"] = state ? state.networkType : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
            inputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as MountPointArgs | undefined;
            if ((!args || args.accessGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessGroupId'");
            }
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.networkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkType'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            inputs["accessGroupId"] = args ? args.accessGroupId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            inputs["networkType"] = args ? args.networkType : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["vswitchId"] = args ? args.vswitchId : undefined;
            inputs["mountPointId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(MountPoint.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MountPoint resources.
 */
export interface MountPointState {
    /**
     * The ID of the Access Group.
     */
    readonly accessGroupId?: pulumi.Input<string>;
    /**
     * The description of the Mount Point.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The ID of the File System.
     */
    readonly fileSystemId?: pulumi.Input<string>;
    /**
     * The ID of the Mount Point.
     */
    readonly mountPointId?: pulumi.Input<string>;
    /**
     * The network type of the Mount Point. Valid values: `VPC`.
     */
    readonly networkType?: pulumi.Input<string>;
    /**
     * The status of the Mount Point. Valid values: `Active`, `Inactive`.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The vpc id.
     */
    readonly vpcId?: pulumi.Input<string>;
    /**
     * The vswitch id.
     */
    readonly vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MountPoint resource.
 */
export interface MountPointArgs {
    /**
     * The ID of the Access Group.
     */
    readonly accessGroupId: pulumi.Input<string>;
    /**
     * The description of the Mount Point.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The ID of the File System.
     */
    readonly fileSystemId: pulumi.Input<string>;
    /**
     * The network type of the Mount Point. Valid values: `VPC`.
     */
    readonly networkType: pulumi.Input<string>;
    /**
     * The status of the Mount Point. Valid values: `Active`, `Inactive`.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The vpc id.
     */
    readonly vpcId: pulumi.Input<string>;
    /**
     * The vswitch id.
     */
    readonly vswitchId: pulumi.Input<string>;
}
