// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DFS File System resource.
 *
 * For information about DFS File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/doc-detail/207144.htm).
 *
 * > **NOTE:** Available in v1.140.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-testAccFileSystem";
 * const defaultZones = alicloud.dfs.getZones({});
 * const defaultFileSystem = new alicloud.dfs.FileSystem("defaultFileSystem", {
 *     storageType: defaultZones.then(defaultZones => defaultZones.zones?[0]?.options?[0]?.storageType),
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?[0]?.zoneId),
 *     protocolType: "HDFS",
 *     description: name,
 *     fileSystemName: name,
 *     throughputMode: "Standard",
 *     spaceCapacity: "1024",
 * });
 * ```
 *
 * ## Import
 *
 * DFS File System can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:dfs/fileSystem:FileSystem example <id>
 * ```
 */
export class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileSystemState, opts?: pulumi.CustomResourceOptions): FileSystem {
        return new FileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dfs/fileSystem:FileSystem';

    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }

    /**
     * The description of the File system.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the File system.
     */
    public readonly fileSystemName!: pulumi.Output<string>;
    /**
     * The protocol type. Valid values: `HDFS`.
     */
    public readonly protocolType!: pulumi.Output<string>;
    /**
     * The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughputMode` is `Provisioned`, this param is valid.
     */
    public readonly provisionedThroughputInMiBps!: pulumi.Output<number | undefined>;
    /**
     * The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
     */
    public readonly spaceCapacity!: pulumi.Output<number>;
    /**
     * The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     */
    public readonly storageType!: pulumi.Output<string>;
    /**
     * The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     */
    public readonly throughputMode!: pulumi.Output<string | undefined>;
    /**
     * The zone ID of the File system.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a FileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileSystemArgs | FileSystemState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileSystemState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["fileSystemName"] = state ? state.fileSystemName : undefined;
            inputs["protocolType"] = state ? state.protocolType : undefined;
            inputs["provisionedThroughputInMiBps"] = state ? state.provisionedThroughputInMiBps : undefined;
            inputs["spaceCapacity"] = state ? state.spaceCapacity : undefined;
            inputs["storageType"] = state ? state.storageType : undefined;
            inputs["throughputMode"] = state ? state.throughputMode : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as FileSystemArgs | undefined;
            if ((!args || args.fileSystemName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemName'");
            }
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            if ((!args || args.spaceCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spaceCapacity'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["fileSystemName"] = args ? args.fileSystemName : undefined;
            inputs["protocolType"] = args ? args.protocolType : undefined;
            inputs["provisionedThroughputInMiBps"] = args ? args.provisionedThroughputInMiBps : undefined;
            inputs["spaceCapacity"] = args ? args.spaceCapacity : undefined;
            inputs["storageType"] = args ? args.storageType : undefined;
            inputs["throughputMode"] = args ? args.throughputMode : undefined;
            inputs["zoneId"] = args ? args.zoneId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FileSystem.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileSystem resources.
 */
export interface FileSystemState {
    /**
     * The description of the File system.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the File system.
     */
    fileSystemName?: pulumi.Input<string>;
    /**
     * The protocol type. Valid values: `HDFS`.
     */
    protocolType?: pulumi.Input<string>;
    /**
     * The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughputMode` is `Provisioned`, this param is valid.
     */
    provisionedThroughputInMiBps?: pulumi.Input<number>;
    /**
     * The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
     */
    spaceCapacity?: pulumi.Input<number>;
    /**
     * The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     */
    storageType?: pulumi.Input<string>;
    /**
     * The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     */
    throughputMode?: pulumi.Input<string>;
    /**
     * The zone ID of the File system.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileSystem resource.
 */
export interface FileSystemArgs {
    /**
     * The description of the File system.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the File system.
     */
    fileSystemName: pulumi.Input<string>;
    /**
     * The protocol type. Valid values: `HDFS`.
     */
    protocolType: pulumi.Input<string>;
    /**
     * The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughputMode` is `Provisioned`, this param is valid.
     */
    provisionedThroughputInMiBps?: pulumi.Input<number>;
    /**
     * The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
     */
    spaceCapacity: pulumi.Input<number>;
    /**
     * The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     */
    storageType: pulumi.Input<string>;
    /**
     * The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     */
    throughputMode?: pulumi.Input<string>;
    /**
     * The zone ID of the File system.
     */
    zoneId: pulumi.Input<string>;
}
