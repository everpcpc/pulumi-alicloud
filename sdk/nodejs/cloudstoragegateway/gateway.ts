// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Storage Gateway: Gateway resource.
 *
 * For information about Cloud Storage Gateway Gateway and how to use it, see [What is Gateway](https://www.alibabacloud.com/help/en/doc-detail/53972.htm).
 *
 * > **NOTE:** Available in v1.132.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const vpc = new alicloud.vpc.Network("vpc", {
 *     vpcName: "tf_test_foo",
 *     cidrBlock: "172.16.0.0/12",
 * });
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vpcId: vpc.id,
 *     cidrBlock: "172.16.0.0/21",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones[0].id),
 *     vswitchName: "tf-testAccCsgName",
 * });
 * const example = new alicloud.cloudstoragegateway.StorageBundle("example", {storageBundleName: "example_value"});
 * const defaultGateway = new alicloud.cloudstoragegateway.Gateway("defaultGateway", {
 *     description: "tf-acctestDesalone",
 *     gatewayClass: "Standard",
 *     type: "File",
 *     paymentType: "PayAsYouGo",
 *     vswitchId: defaultSwitch.id,
 *     releaseAfterExpiration: false,
 *     publicNetworkBandwidth: 40,
 *     storageBundleId: example.id,
 *     location: "Cloud",
 *     gatewayName: "tf-acctestGatewayName",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Storage Gateway Gateway can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cloudstoragegateway/gateway:Gateway example <id>
 * ```
 */
export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudstoragegateway/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    /**
     * the description of gateway.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * the gateway class. the valid values: `Basic`, `Standard`,`Enhanced`,`Advanced`
     */
    public readonly gatewayClass!: pulumi.Output<string | undefined>;
    /**
     * the name of gateway.
     */
    public readonly gatewayName!: pulumi.Output<string>;
    /**
     * gateway location. the valid values: `Cloud`, `On_Premise`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The Payment type of gateway. The valid value: `PayAsYouGo`.
     */
    public readonly paymentType!: pulumi.Output<string | undefined>;
    /**
     * The public network bandwidth of gateway. Valid values between `5` and `200`. Defaults to `5`.
     */
    public readonly publicNetworkBandwidth!: pulumi.Output<number>;
    /**
     * The reason detail of gateway.
     */
    public readonly reasonDetail!: pulumi.Output<string | undefined>;
    /**
     * The reason type when user deletes the gateway.
     */
    public readonly reasonType!: pulumi.Output<string | undefined>;
    /**
     * Whether to release the gateway due to expiration.
     */
    public readonly releaseAfterExpiration!: pulumi.Output<boolean | undefined>;
    /**
     * gateway status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * storage bundle id.
     */
    public readonly storageBundleId!: pulumi.Output<string>;
    /**
     * gateway type. the valid values: `Type`, `Iscsi`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The vswitch id of gateway.
     */
    public readonly vswitchId!: pulumi.Output<string | undefined>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["gatewayClass"] = state ? state.gatewayClass : undefined;
            inputs["gatewayName"] = state ? state.gatewayName : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["paymentType"] = state ? state.paymentType : undefined;
            inputs["publicNetworkBandwidth"] = state ? state.publicNetworkBandwidth : undefined;
            inputs["reasonDetail"] = state ? state.reasonDetail : undefined;
            inputs["reasonType"] = state ? state.reasonType : undefined;
            inputs["releaseAfterExpiration"] = state ? state.releaseAfterExpiration : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["storageBundleId"] = state ? state.storageBundleId : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if ((!args || args.gatewayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.storageBundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageBundleId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["gatewayClass"] = args ? args.gatewayClass : undefined;
            inputs["gatewayName"] = args ? args.gatewayName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["paymentType"] = args ? args.paymentType : undefined;
            inputs["publicNetworkBandwidth"] = args ? args.publicNetworkBandwidth : undefined;
            inputs["reasonDetail"] = args ? args.reasonDetail : undefined;
            inputs["reasonType"] = args ? args.reasonType : undefined;
            inputs["releaseAfterExpiration"] = args ? args.releaseAfterExpiration : undefined;
            inputs["storageBundleId"] = args ? args.storageBundleId : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["vswitchId"] = args ? args.vswitchId : undefined;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Gateway.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    /**
     * the description of gateway.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * the gateway class. the valid values: `Basic`, `Standard`,`Enhanced`,`Advanced`
     */
    readonly gatewayClass?: pulumi.Input<string>;
    /**
     * the name of gateway.
     */
    readonly gatewayName?: pulumi.Input<string>;
    /**
     * gateway location. the valid values: `Cloud`, `On_Premise`.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The Payment type of gateway. The valid value: `PayAsYouGo`.
     */
    readonly paymentType?: pulumi.Input<string>;
    /**
     * The public network bandwidth of gateway. Valid values between `5` and `200`. Defaults to `5`.
     */
    readonly publicNetworkBandwidth?: pulumi.Input<number>;
    /**
     * The reason detail of gateway.
     */
    readonly reasonDetail?: pulumi.Input<string>;
    /**
     * The reason type when user deletes the gateway.
     */
    readonly reasonType?: pulumi.Input<string>;
    /**
     * Whether to release the gateway due to expiration.
     */
    readonly releaseAfterExpiration?: pulumi.Input<boolean>;
    /**
     * gateway status.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * storage bundle id.
     */
    readonly storageBundleId?: pulumi.Input<string>;
    /**
     * gateway type. the valid values: `Type`, `Iscsi`.
     */
    readonly type?: pulumi.Input<string>;
    /**
     * The vswitch id of gateway.
     */
    readonly vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    /**
     * the description of gateway.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * the gateway class. the valid values: `Basic`, `Standard`,`Enhanced`,`Advanced`
     */
    readonly gatewayClass?: pulumi.Input<string>;
    /**
     * the name of gateway.
     */
    readonly gatewayName: pulumi.Input<string>;
    /**
     * gateway location. the valid values: `Cloud`, `On_Premise`.
     */
    readonly location: pulumi.Input<string>;
    /**
     * The Payment type of gateway. The valid value: `PayAsYouGo`.
     */
    readonly paymentType?: pulumi.Input<string>;
    /**
     * The public network bandwidth of gateway. Valid values between `5` and `200`. Defaults to `5`.
     */
    readonly publicNetworkBandwidth?: pulumi.Input<number>;
    /**
     * The reason detail of gateway.
     */
    readonly reasonDetail?: pulumi.Input<string>;
    /**
     * The reason type when user deletes the gateway.
     */
    readonly reasonType?: pulumi.Input<string>;
    /**
     * Whether to release the gateway due to expiration.
     */
    readonly releaseAfterExpiration?: pulumi.Input<boolean>;
    /**
     * storage bundle id.
     */
    readonly storageBundleId: pulumi.Input<string>;
    /**
     * gateway type. the valid values: `Type`, `Iscsi`.
     */
    readonly type: pulumi.Input<string>;
    /**
     * The vswitch id of gateway.
     */
    readonly vswitchId?: pulumi.Input<string>;
}
