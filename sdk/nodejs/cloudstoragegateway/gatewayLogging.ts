// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Storage Gateway Gateway Logging resource.
 *
 * For information about Cloud Storage Gateway Gateway Logging and how to use it, see [What is Gateway Logging](https://www.alibabacloud.com/help/en/doc-detail/108299.htm).
 *
 * > **NOTE:** Available in v1.144.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "example";
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/12",
 * });
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/21",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultStorageBundle = new alicloud.cloudstoragegateway.StorageBundle("defaultStorageBundle", {storageBundleName: name});
 * const defaultGateway = new alicloud.cloudstoragegateway.Gateway("defaultGateway", {
 *     description: "tf-acctestDesalone",
 *     gatewayClass: "Basic",
 *     type: "File",
 *     paymentType: "PayAsYouGo",
 *     vswitchId: defaultSwitch.id,
 *     releaseAfterExpiration: true,
 *     publicNetworkBandwidth: 10,
 *     storageBundleId: defaultStorageBundle.id,
 *     location: "Cloud",
 *     gatewayName: name,
 * });
 * const defaultProject = new alicloud.log.Project("defaultProject", {description: "created by terraform"});
 * const defaultStore = new alicloud.log.Store("defaultStore", {
 *     project: defaultProject.name,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const defaultGatewayLogging = new alicloud.cloudstoragegateway.GatewayLogging("defaultGatewayLogging", {
 *     gatewayId: defaultGateway.id,
 *     slsLogstore: defaultStore.name,
 *     slsProject: defaultProject.name,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Storage Gateway Gateway Logging can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cloudstoragegateway/gatewayLogging:GatewayLogging example <gateway_id>
 * ```
 */
export class GatewayLogging extends pulumi.CustomResource {
    /**
     * Get an existing GatewayLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayLoggingState, opts?: pulumi.CustomResourceOptions): GatewayLogging {
        return new GatewayLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudstoragegateway/gatewayLogging:GatewayLogging';

    /**
     * Returns true if the given object is an instance of GatewayLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayLogging.__pulumiType;
    }

    /**
     * The ID of the Gateway.
     */
    public readonly gatewayId!: pulumi.Output<string>;
    /**
     * The name of the Log Store.
     */
    public readonly slsLogstore!: pulumi.Output<string>;
    /**
     * The name of the Project.
     */
    public readonly slsProject!: pulumi.Output<string>;
    /**
     * The status of the resource. Valid values: `Enabled`, `Disable`.
     */
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a GatewayLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayLoggingArgs | GatewayLoggingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayLoggingState | undefined;
            inputs["gatewayId"] = state ? state.gatewayId : undefined;
            inputs["slsLogstore"] = state ? state.slsLogstore : undefined;
            inputs["slsProject"] = state ? state.slsProject : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as GatewayLoggingArgs | undefined;
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.slsLogstore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slsLogstore'");
            }
            if ((!args || args.slsProject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slsProject'");
            }
            inputs["gatewayId"] = args ? args.gatewayId : undefined;
            inputs["slsLogstore"] = args ? args.slsLogstore : undefined;
            inputs["slsProject"] = args ? args.slsProject : undefined;
            inputs["status"] = args ? args.status : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(GatewayLogging.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayLogging resources.
 */
export interface GatewayLoggingState {
    /**
     * The ID of the Gateway.
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * The name of the Log Store.
     */
    slsLogstore?: pulumi.Input<string>;
    /**
     * The name of the Project.
     */
    slsProject?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `Enabled`, `Disable`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayLogging resource.
 */
export interface GatewayLoggingArgs {
    /**
     * The ID of the Gateway.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * The name of the Log Store.
     */
    slsLogstore: pulumi.Input<string>;
    /**
     * The name of the Project.
     */
    slsProject: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `Enabled`, `Disable`.
     */
    status?: pulumi.Input<string>;
}
