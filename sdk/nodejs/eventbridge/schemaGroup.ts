// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SchemaGroup extends pulumi.CustomResource {
    /**
     * Get an existing SchemaGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaGroupState, opts?: pulumi.CustomResourceOptions): SchemaGroup {
        return new SchemaGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eventbridge/schemaGroup:SchemaGroup';

    /**
     * Returns true if the given object is an instance of SchemaGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaGroup.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly format!: pulumi.Output<string>;
    public readonly groupId!: pulumi.Output<string>;

    /**
     * Create a SchemaGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaGroupArgs | SchemaGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaGroupState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["format"] = state ? state.format : undefined;
            inputs["groupId"] = state ? state.groupId : undefined;
        } else {
            const args = argsOrState as SchemaGroupArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["format"] = args ? args.format : undefined;
            inputs["groupId"] = args ? args.groupId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SchemaGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaGroup resources.
 */
export interface SchemaGroupState {
    readonly description?: pulumi.Input<string>;
    readonly format?: pulumi.Input<string>;
    readonly groupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaGroup resource.
 */
export interface SchemaGroupArgs {
    readonly description?: pulumi.Input<string>;
    readonly format?: pulumi.Input<string>;
    readonly groupId: pulumi.Input<string>;
}
