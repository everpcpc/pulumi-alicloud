// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the Ecs Disks of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.122.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = alicloud.ecs.getEcsDisks({
 *     ids: ["d-artgdsvdvxxxx"],
 *     nameRegex: "tf-test",
 * });
 * export const firstEcsDiskId = example.then(example => example.disks[0].id);
 * ```
 */
export function getEcsDisks(args?: GetEcsDisksArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsDisksResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("alicloud:ecs/getEcsDisks:getEcsDisks", {
        "additionalAttributes": args.additionalAttributes,
        "autoSnapshotPolicyId": args.autoSnapshotPolicyId,
        "availabilityZone": args.availabilityZone,
        "category": args.category,
        "deleteAutoSnapshot": args.deleteAutoSnapshot,
        "deleteWithInstance": args.deleteWithInstance,
        "diskName": args.diskName,
        "diskType": args.diskType,
        "dryRun": args.dryRun,
        "enableAutoSnapshot": args.enableAutoSnapshot,
        "enableAutomatedSnapshotPolicy": args.enableAutomatedSnapshotPolicy,
        "enableShared": args.enableShared,
        "encrypted": args.encrypted,
        "ids": args.ids,
        "instanceId": args.instanceId,
        "kmsKeyId": args.kmsKeyId,
        "nameRegex": args.nameRegex,
        "operationLocks": args.operationLocks,
        "outputFile": args.outputFile,
        "paymentType": args.paymentType,
        "portable": args.portable,
        "resourceGroupId": args.resourceGroupId,
        "snapshotId": args.snapshotId,
        "status": args.status,
        "tags": args.tags,
        "type": args.type,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getEcsDisks.
 */
export interface GetEcsDisksArgs {
    /**
     * Other attribute values. Currently, only the incoming value of IOPS is supported, which means to query the IOPS upper limit of the current disk.
     */
    readonly additionalAttributes?: string[];
    /**
     * Query cloud disks based on the automatic snapshot policy ID.
     */
    readonly autoSnapshotPolicyId?: string;
    /**
     * Availability zone of the disk.
     *
     * @deprecated Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead
     */
    readonly availabilityZone?: string;
    /**
     * Disk category.
     */
    readonly category?: string;
    /**
     * Indicates whether the automatic snapshot is deleted when the disk is released.
     */
    readonly deleteAutoSnapshot?: boolean;
    /**
     * Indicates whether the disk is released together with the instance.
     */
    readonly deleteWithInstance?: boolean;
    /**
     * The disk name.
     */
    readonly diskName?: string;
    /**
     * The disk type.
     */
    readonly diskType?: string;
    /**
     * Specifies whether to check the validity of the request without actually making the request.request Default value: false. Valid values:
     * * `true`: The validity of the request is checked but the request is not made. Check items include the required parameters, request format, service limits, and available ECS resources. If the check fails, the corresponding error message is returned. If the check succeeds, the DryRunOperation error code is returned.
     * * `false`: The validity of the request is checked. If the check succeeds, a 2xx HTTP status code is returned and the request is made.
     */
    readonly dryRun?: boolean;
    /**
     * Whether the disk implements an automatic snapshot policy.
     */
    readonly enableAutoSnapshot?: boolean;
    /**
     * Whether the disk implements an automatic snapshot policy.
     */
    readonly enableAutomatedSnapshotPolicy?: boolean;
    /**
     * Whether it is shared block storage.
     */
    readonly enableShared?: boolean;
    /**
     * Indicate whether the disk is encrypted or not.
     */
    readonly encrypted?: string;
    /**
     * A list of Disk IDs.
     */
    readonly ids?: string[];
    /**
     * The instance ID of the disk mount.
     */
    readonly instanceId?: string;
    /**
     * The kms key id.
     */
    readonly kmsKeyId?: string;
    /**
     * A regex string to filter results by Disk name.
     */
    readonly nameRegex?: string;
    readonly operationLocks?: inputs.ecs.GetEcsDisksOperationLock[];
    readonly outputFile?: string;
    /**
     * Payment method for disk.
     */
    readonly paymentType?: string;
    /**
     * Whether the disk is unmountable.
     */
    readonly portable?: boolean;
    /**
     * The Id of resource group.
     */
    readonly resourceGroupId?: string;
    /**
     * Snapshot used to create the disk. It is null if no snapshot is used to create the disk.
     */
    readonly snapshotId?: string;
    /**
     * Current status.
     */
    readonly status?: string;
    /**
     * A map of tags assigned to the disk.
     */
    readonly tags?: {[key: string]: any};
    /**
     * Disk type.
     *
     * @deprecated Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead.
     */
    readonly type?: string;
    /**
     * The zone id.
     */
    readonly zoneId?: string;
}

/**
 * A collection of values returned by getEcsDisks.
 */
export interface GetEcsDisksResult {
    readonly additionalAttributes?: string[];
    readonly autoSnapshotPolicyId?: string;
    /**
     * @deprecated Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead
     */
    readonly availabilityZone?: string;
    readonly category?: string;
    readonly deleteAutoSnapshot?: boolean;
    readonly deleteWithInstance?: boolean;
    readonly diskName?: string;
    readonly diskType?: string;
    readonly disks: outputs.ecs.GetEcsDisksDisk[];
    readonly dryRun?: boolean;
    readonly enableAutoSnapshot?: boolean;
    readonly enableAutomatedSnapshotPolicy?: boolean;
    readonly enableShared?: boolean;
    readonly encrypted?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly instanceId?: string;
    readonly kmsKeyId?: string;
    readonly nameRegex?: string;
    readonly names: string[];
    readonly operationLocks?: outputs.ecs.GetEcsDisksOperationLock[];
    readonly outputFile?: string;
    readonly paymentType?: string;
    readonly portable?: boolean;
    readonly resourceGroupId?: string;
    readonly snapshotId?: string;
    readonly status?: string;
    readonly tags?: {[key: string]: any};
    /**
     * @deprecated Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead.
     */
    readonly type?: string;
    readonly zoneId?: string;
}
