// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Nas Mount Target resource.
 *
 * > NOTE: Available in v1.34.0+.
 *
 * > NOTE: Currently this resource support create a mount point in a classic network only when current region is China mainland regions.
 *
 * > NOTE: You must grant NAS with specific RAM permissions when creating a classic mount targets,
 * and it only can be achieved by creating a classic mount target mannually.
 * See [Add a mount point](https://www.alibabacloud.com/help/doc-detail/60431.htm) and [Why do I need RAM permissions to create a mount point in a classic network](https://www.alibabacloud.com/help/faq-detail/42176.htm).
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const fooFileSystem = new alicloud.nas.FileSystem("foo", {
 *     description: "tf-testAccNasConfigFs",
 *     protocolType: "NFS",
 *     storageType: "Performance",
 * });
 * const fooAccessGroup = new alicloud.nas.AccessGroup("foo", {
 *     description: "tf-testAccNasConfig",
 *     type: "Classic",
 * });
 * const bar = new alicloud.nas.AccessGroup("bar", {
 *     description: "tf-testAccNasConfig-2",
 *     type: "Classic",
 * });
 * const fooMountTarget = new alicloud.nas.MountTarget("foo", {
 *     accessGroupName: fooAccessGroup.id,
 *     fileSystemId: fooFileSystem.id,
 * });
 * ```
 */
export class MountTarget extends pulumi.CustomResource {
    /**
     * Get an existing MountTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MountTargetState, opts?: pulumi.CustomResourceOptions): MountTarget {
        return new MountTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:nas/mountTarget:MountTarget';

    /**
     * Returns true if the given object is an instance of MountTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MountTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MountTarget.__pulumiType;
    }

    /**
     * Permission group name.
     */
    public readonly accessGroupName!: pulumi.Output<string>;
    /**
     * File system ID.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * VSwitch ID.
     */
    public readonly vswitchId!: pulumi.Output<string | undefined>;

    /**
     * Create a MountTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MountTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MountTargetArgs | MountTargetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as MountTargetState | undefined;
            inputs["accessGroupName"] = state ? state.accessGroupName : undefined;
            inputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as MountTargetArgs | undefined;
            if (!args || args.accessGroupName === undefined) {
                throw new Error("Missing required property 'accessGroupName'");
            }
            if (!args || args.fileSystemId === undefined) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            inputs["accessGroupName"] = args ? args.accessGroupName : undefined;
            inputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["vswitchId"] = args ? args.vswitchId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(MountTarget.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MountTarget resources.
 */
export interface MountTargetState {
    /**
     * Permission group name.
     */
    readonly accessGroupName?: pulumi.Input<string>;
    /**
     * File system ID.
     */
    readonly fileSystemId?: pulumi.Input<string>;
    /**
     * Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * VSwitch ID.
     */
    readonly vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MountTarget resource.
 */
export interface MountTargetArgs {
    /**
     * Permission group name.
     */
    readonly accessGroupName: pulumi.Input<string>;
    /**
     * File system ID.
     */
    readonly fileSystemId: pulumi.Input<string>;
    /**
     * Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * VSwitch ID.
     */
    readonly vswitchId?: pulumi.Input<string>;
}
