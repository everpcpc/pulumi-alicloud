// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Monitor Service Monitor Group resource.
 *
 * For information about Cloud Monitor Service Monitor Group and how to use it, see [What is Monitor Group](https://www.alibabacloud.com/help/en/doc-detail/115030.htm).
 *
 * > **NOTE:** Available in v1.113.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.cms.MonitorGroup("example", {
 *     monitorGroupName: "tf-testaccmonitorgroup",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Monitor Service Monitor Group can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cms/monitorGroup:MonitorGroup example <id>
 * ```
 */
export class MonitorGroup extends pulumi.CustomResource {
    /**
     * Get an existing MonitorGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorGroupState, opts?: pulumi.CustomResourceOptions): MonitorGroup {
        return new MonitorGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cms/monitorGroup:MonitorGroup';

    /**
     * Returns true if the given object is an instance of MonitorGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorGroup.__pulumiType;
    }

    /**
     * The alert group to which alert notifications will be sent.
     */
    public readonly contactGroups!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the application group.
     */
    public readonly monitorGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a MonitorGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorGroupArgs | MonitorGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorGroupState | undefined;
            inputs["contactGroups"] = state ? state.contactGroups : undefined;
            inputs["monitorGroupName"] = state ? state.monitorGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as MonitorGroupArgs | undefined;
            if ((!args || args.monitorGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorGroupName'");
            }
            inputs["contactGroups"] = args ? args.contactGroups : undefined;
            inputs["monitorGroupName"] = args ? args.monitorGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(MonitorGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MonitorGroup resources.
 */
export interface MonitorGroupState {
    /**
     * The alert group to which alert notifications will be sent.
     */
    readonly contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the application group.
     */
    readonly monitorGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a MonitorGroup resource.
 */
export interface MonitorGroupArgs {
    /**
     * The alert group to which alert notifications will be sent.
     */
    readonly contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the application group.
     */
    readonly monitorGroupName: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
