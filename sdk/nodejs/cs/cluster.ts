// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ~> **NOTE:** This resource name has been replaced by [`alicloud_cs_swarm`](https://www.terraform.io/docs/providers/alicloud/r/cs_swarm.html) from [version 1.8.2](https://releases.hashicorp.com/terraform-provider-alicloud/1.8.2/).
 * Please update it.
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState): Cluster {
        return new Cluster(name, <any>state, { id });
    }

    public /*out*/ readonly agentVersion: pulumi.Output<string>;
    public readonly cidrBlock: pulumi.Output<string>;
    public readonly diskCategory: pulumi.Output<string | undefined>;
    public readonly diskSize: pulumi.Output<number | undefined>;
    public readonly imageId: pulumi.Output<string | undefined>;
    public readonly instanceType: pulumi.Output<string>;
    public readonly isOutdated: pulumi.Output<boolean | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly namePrefix: pulumi.Output<string | undefined>;
    public readonly needSlb: pulumi.Output<boolean | undefined>;
    public readonly nodeNumber: pulumi.Output<number | undefined>;
    public /*out*/ readonly nodes: pulumi.Output<{ eip: string, id: string, name: string, privateIp: string, status: string }[]>;
    public readonly password: pulumi.Output<string>;
    public readonly releaseEip: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly securityGroupId: pulumi.Output<string>;
    public readonly size: pulumi.Output<number | undefined>;
    public /*out*/ readonly slbId: pulumi.Output<string>;
    public /*out*/ readonly vpcId: pulumi.Output<string>;
    public readonly vswitchId: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ClusterState = argsOrState as ClusterState | undefined;
            inputs["agentVersion"] = state ? state.agentVersion : undefined;
            inputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            inputs["diskCategory"] = state ? state.diskCategory : undefined;
            inputs["diskSize"] = state ? state.diskSize : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["isOutdated"] = state ? state.isOutdated : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["needSlb"] = state ? state.needSlb : undefined;
            inputs["nodeNumber"] = state ? state.nodeNumber : undefined;
            inputs["nodes"] = state ? state.nodes : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["releaseEip"] = state ? state.releaseEip : undefined;
            inputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["slbId"] = state ? state.slbId : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
            inputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (!args || args.cidrBlock === undefined) {
                throw new Error("Missing required property 'cidrBlock'");
            }
            if (!args || args.instanceType === undefined) {
                throw new Error("Missing required property 'instanceType'");
            }
            if (!args || args.password === undefined) {
                throw new Error("Missing required property 'password'");
            }
            if (!args || args.vswitchId === undefined) {
                throw new Error("Missing required property 'vswitchId'");
            }
            inputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            inputs["diskCategory"] = args ? args.diskCategory : undefined;
            inputs["diskSize"] = args ? args.diskSize : undefined;
            inputs["imageId"] = args ? args.imageId : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["isOutdated"] = args ? args.isOutdated : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["needSlb"] = args ? args.needSlb : undefined;
            inputs["nodeNumber"] = args ? args.nodeNumber : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["releaseEip"] = args ? args.releaseEip : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["vswitchId"] = args ? args.vswitchId : undefined;
            inputs["agentVersion"] = undefined /*out*/;
            inputs["nodes"] = undefined /*out*/;
            inputs["securityGroupId"] = undefined /*out*/;
            inputs["slbId"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
        }
        super("alicloud:cs/cluster:Cluster", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    readonly agentVersion?: pulumi.Input<string>;
    readonly cidrBlock?: pulumi.Input<string>;
    readonly diskCategory?: pulumi.Input<string>;
    readonly diskSize?: pulumi.Input<number>;
    readonly imageId?: pulumi.Input<string>;
    readonly instanceType?: pulumi.Input<string>;
    readonly isOutdated?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly needSlb?: pulumi.Input<boolean>;
    readonly nodeNumber?: pulumi.Input<number>;
    readonly nodes?: pulumi.Input<pulumi.Input<{ eip?: pulumi.Input<string>, id?: pulumi.Input<string>, name?: pulumi.Input<string>, privateIp?: pulumi.Input<string>, status?: pulumi.Input<string> }>[]>;
    readonly password?: pulumi.Input<string>;
    readonly releaseEip?: pulumi.Input<boolean>;
    readonly securityGroupId?: pulumi.Input<string>;
    readonly size?: pulumi.Input<number>;
    readonly slbId?: pulumi.Input<string>;
    readonly vpcId?: pulumi.Input<string>;
    readonly vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    readonly cidrBlock: pulumi.Input<string>;
    readonly diskCategory?: pulumi.Input<string>;
    readonly diskSize?: pulumi.Input<number>;
    readonly imageId?: pulumi.Input<string>;
    readonly instanceType: pulumi.Input<string>;
    readonly isOutdated?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly needSlb?: pulumi.Input<boolean>;
    readonly nodeNumber?: pulumi.Input<number>;
    readonly password: pulumi.Input<string>;
    readonly releaseEip?: pulumi.Input<boolean>;
    readonly size?: pulumi.Input<number>;
    readonly vswitchId: pulumi.Input<string>;
}
