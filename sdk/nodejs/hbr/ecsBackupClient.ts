// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Hybrid Backup Recovery (HBR) Ecs Backup Client resource.
 *
 * For information about Hybrid Backup Recovery (HBR) Ecs Backup Client and how to use it, see [What is Ecs Backup Client](https://www.alibabacloud.com/help/doc-detail/186570.htm).
 *
 * > **NOTE:** Available in v1.132.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const default = alicloud.ecs.getInstances({
 *     nameRegex: "ecs_instance_name",
 *     status: "Running",
 * });
 * const example = new alicloud.hbr.EcsBackupClient("example", {
 *     instanceId: _default.then(_default => _default.instances?[0]?.id),
 *     useHttps: false,
 *     dataNetworkType: "PUBLIC",
 *     maxCpuCore: 2,
 *     maxWorker: 4,
 *     dataProxySetting: "USE_CONTROL_PROXY",
 *     proxyHost: "192.168.11.101",
 *     proxyPort: 80,
 *     proxyUser: "user",
 *     proxyPassword: "password",
 * });
 * ```
 * ## Notice
 *
 * > **Note:** Please read the following precautions carefully before deleting a client:
 * 1. You cannot delete active clients that have received heartbeat packets within one hour.
 * 2. You can make the client inactive by change the status of client to `STOPPED`.
 * 3. The resources bound to the client will be deleted in cascade, including:
 *     - Backup plan
 *     - Backup task (Running in the background)
 *     - Snapshot
 *
 * ## Import
 *
 * Hybrid Backup Recovery (HBR) Ecs Backup Client can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:hbr/ecsBackupClient:EcsBackupClient example <id>
 * ```
 */
export class EcsBackupClient extends pulumi.CustomResource {
    /**
     * Get an existing EcsBackupClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsBackupClientState, opts?: pulumi.CustomResourceOptions): EcsBackupClient {
        return new EcsBackupClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:hbr/ecsBackupClient:EcsBackupClient';

    /**
     * Returns true if the given object is an instance of EcsBackupClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsBackupClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsBackupClient.__pulumiType;
    }

    /**
     * The data plane access point type. Valid values: `CLASSIC`, `PUBLIC`, `VPC`.
     */
    public readonly dataNetworkType!: pulumi.Output<string>;
    /**
     * The data plane proxy settings. Valid values: `CUSTOM`, `DISABLE`, `USE_CONTROL_PROXY`.
     */
    public readonly dataProxySetting!: pulumi.Output<string>;
    /**
     * The ID of ECS instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The number of CPU cores used by a single backup task, 0 means no restrictions.
     */
    public readonly maxCpuCore!: pulumi.Output<string>;
    /**
     * The number of concurrent jobs for a single backup task, 0 means no restrictions.
     */
    public readonly maxWorker!: pulumi.Output<string>;
    /**
     * Custom data plane proxy server host address.
     */
    public readonly proxyHost!: pulumi.Output<string>;
    /**
     * The password of custom data plane proxy server.
     */
    public readonly proxyPassword!: pulumi.Output<string>;
    /**
     * Custom data plane proxy server host port.
     */
    public readonly proxyPort!: pulumi.Output<string>;
    /**
     * The username of custom data plane proxy server.
     */
    public readonly proxyUser!: pulumi.Output<string>;
    /**
     * Status of client. Valid values: `ACTIVATED`, `STOPPED`. You can start or stop the client by specifying the status.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     */
    public readonly useHttps!: pulumi.Output<boolean>;

    /**
     * Create a EcsBackupClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsBackupClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsBackupClientArgs | EcsBackupClientState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsBackupClientState | undefined;
            inputs["dataNetworkType"] = state ? state.dataNetworkType : undefined;
            inputs["dataProxySetting"] = state ? state.dataProxySetting : undefined;
            inputs["instanceId"] = state ? state.instanceId : undefined;
            inputs["maxCpuCore"] = state ? state.maxCpuCore : undefined;
            inputs["maxWorker"] = state ? state.maxWorker : undefined;
            inputs["proxyHost"] = state ? state.proxyHost : undefined;
            inputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            inputs["proxyPort"] = state ? state.proxyPort : undefined;
            inputs["proxyUser"] = state ? state.proxyUser : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["useHttps"] = state ? state.useHttps : undefined;
        } else {
            const args = argsOrState as EcsBackupClientArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            inputs["dataNetworkType"] = args ? args.dataNetworkType : undefined;
            inputs["dataProxySetting"] = args ? args.dataProxySetting : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["maxCpuCore"] = args ? args.maxCpuCore : undefined;
            inputs["maxWorker"] = args ? args.maxWorker : undefined;
            inputs["proxyHost"] = args ? args.proxyHost : undefined;
            inputs["proxyPassword"] = args ? args.proxyPassword : undefined;
            inputs["proxyPort"] = args ? args.proxyPort : undefined;
            inputs["proxyUser"] = args ? args.proxyUser : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["useHttps"] = args ? args.useHttps : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(EcsBackupClient.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsBackupClient resources.
 */
export interface EcsBackupClientState {
    /**
     * The data plane access point type. Valid values: `CLASSIC`, `PUBLIC`, `VPC`.
     */
    dataNetworkType?: pulumi.Input<string>;
    /**
     * The data plane proxy settings. Valid values: `CUSTOM`, `DISABLE`, `USE_CONTROL_PROXY`.
     */
    dataProxySetting?: pulumi.Input<string>;
    /**
     * The ID of ECS instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The number of CPU cores used by a single backup task, 0 means no restrictions.
     */
    maxCpuCore?: pulumi.Input<string>;
    /**
     * The number of concurrent jobs for a single backup task, 0 means no restrictions.
     */
    maxWorker?: pulumi.Input<string>;
    /**
     * Custom data plane proxy server host address.
     */
    proxyHost?: pulumi.Input<string>;
    /**
     * The password of custom data plane proxy server.
     */
    proxyPassword?: pulumi.Input<string>;
    /**
     * Custom data plane proxy server host port.
     */
    proxyPort?: pulumi.Input<string>;
    /**
     * The username of custom data plane proxy server.
     */
    proxyUser?: pulumi.Input<string>;
    /**
     * Status of client. Valid values: `ACTIVATED`, `STOPPED`. You can start or stop the client by specifying the status.
     */
    status?: pulumi.Input<string>;
    /**
     * Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     */
    useHttps?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EcsBackupClient resource.
 */
export interface EcsBackupClientArgs {
    /**
     * The data plane access point type. Valid values: `CLASSIC`, `PUBLIC`, `VPC`.
     */
    dataNetworkType?: pulumi.Input<string>;
    /**
     * The data plane proxy settings. Valid values: `CUSTOM`, `DISABLE`, `USE_CONTROL_PROXY`.
     */
    dataProxySetting?: pulumi.Input<string>;
    /**
     * The ID of ECS instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The number of CPU cores used by a single backup task, 0 means no restrictions.
     */
    maxCpuCore?: pulumi.Input<string>;
    /**
     * The number of concurrent jobs for a single backup task, 0 means no restrictions.
     */
    maxWorker?: pulumi.Input<string>;
    /**
     * Custom data plane proxy server host address.
     */
    proxyHost?: pulumi.Input<string>;
    /**
     * The password of custom data plane proxy server.
     */
    proxyPassword?: pulumi.Input<string>;
    /**
     * Custom data plane proxy server host port.
     */
    proxyPort?: pulumi.Input<string>;
    /**
     * The username of custom data plane proxy server.
     */
    proxyUser?: pulumi.Input<string>;
    /**
     * Status of client. Valid values: `ACTIVATED`, `STOPPED`. You can start or stop the client by specifying the status.
     */
    status?: pulumi.Input<string>;
    /**
     * Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     */
    useHttps?: pulumi.Input<boolean>;
}
