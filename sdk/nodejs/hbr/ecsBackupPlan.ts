// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a HBR Ecs Backup Plan resource.
 *
 * For information about HBR Ecs Backup Plan and how to use it, see [What is Ecs Backup Plan](https://www.alibabacloud.com/help/doc-detail/186568.htm).
 *
 * > **NOTE:** Available in v1.132.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.hbr.EcsBackupPlan("example", {
 *     backupType: "COMPLETE",
 *     ecsBackupPlanName: "example_value",
 *     exclude: `  ["/home/exclude"]
 *   `,
 *     include: `  ["/home/include"]
 *   `,
 *     instanceId: "i-bp1567rc0oxxxxxxxxxx",
 *     paths: [
 *         "/home",
 *         "/var",
 *     ],
 *     retention: "1",
 *     schedule: "I|1602673264|PT2H",
 *     speedLimit: "I|1602673264|PT2H",
 *     vaultId: "v-0003gxoksflhxxxxxxxx",
 * });
 * ```
 *
 * ## Import
 *
 * HBR Ecs Backup Plan can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:hbr/ecsBackupPlan:EcsBackupPlan example <id>
 * ```
 */
export class EcsBackupPlan extends pulumi.CustomResource {
    /**
     * Get an existing EcsBackupPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsBackupPlanState, opts?: pulumi.CustomResourceOptions): EcsBackupPlan {
        return new EcsBackupPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:hbr/ecsBackupPlan:EcsBackupPlan';

    /**
     * Returns true if the given object is an instance of EcsBackupPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsBackupPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsBackupPlan.__pulumiType;
    }

    /**
     * Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
     */
    public readonly backupType!: pulumi.Output<string>;
    public readonly detail!: pulumi.Output<string | undefined>;
    /**
     * Whether to Disable the Backup Task. Valid Values: true, false.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
     */
    public readonly ecsBackupPlanName!: pulumi.Output<string>;
    /**
     * Exclude Path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
     */
    public readonly exclude!: pulumi.Output<string | undefined>;
    /**
     * Include Path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
     */
    public readonly include!: pulumi.Output<string | undefined>;
    /**
     * The ECS Instance Id. Must Have Installed the Client.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Windows System with Application Consistency Using VSS. eg: {`UseVSS`:false}.
     */
    public readonly options!: pulumi.Output<string | undefined>;
    /**
     * Backup Path. e.g. `["/home", "/var"]`
     */
    public readonly paths!: pulumi.Output<string[] | undefined>;
    /**
     * Backup Retention Period, the Minimum Value of 1.
     */
    public readonly retention!: pulumi.Output<string>;
    /**
     * Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
     */
    public readonly speedLimit!: pulumi.Output<string | undefined>;
    public readonly updatePaths!: pulumi.Output<boolean | undefined>;
    /**
     * Vault ID.
     */
    public readonly vaultId!: pulumi.Output<string | undefined>;

    /**
     * Create a EcsBackupPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsBackupPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsBackupPlanArgs | EcsBackupPlanState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsBackupPlanState | undefined;
            inputs["backupType"] = state ? state.backupType : undefined;
            inputs["detail"] = state ? state.detail : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["ecsBackupPlanName"] = state ? state.ecsBackupPlanName : undefined;
            inputs["exclude"] = state ? state.exclude : undefined;
            inputs["include"] = state ? state.include : undefined;
            inputs["instanceId"] = state ? state.instanceId : undefined;
            inputs["options"] = state ? state.options : undefined;
            inputs["paths"] = state ? state.paths : undefined;
            inputs["retention"] = state ? state.retention : undefined;
            inputs["schedule"] = state ? state.schedule : undefined;
            inputs["speedLimit"] = state ? state.speedLimit : undefined;
            inputs["updatePaths"] = state ? state.updatePaths : undefined;
            inputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as EcsBackupPlanArgs | undefined;
            if ((!args || args.ecsBackupPlanName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ecsBackupPlanName'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.retention === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            inputs["backupType"] = args ? args.backupType : undefined;
            inputs["detail"] = args ? args.detail : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["ecsBackupPlanName"] = args ? args.ecsBackupPlanName : undefined;
            inputs["exclude"] = args ? args.exclude : undefined;
            inputs["include"] = args ? args.include : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["options"] = args ? args.options : undefined;
            inputs["paths"] = args ? args.paths : undefined;
            inputs["retention"] = args ? args.retention : undefined;
            inputs["schedule"] = args ? args.schedule : undefined;
            inputs["speedLimit"] = args ? args.speedLimit : undefined;
            inputs["updatePaths"] = args ? args.updatePaths : undefined;
            inputs["vaultId"] = args ? args.vaultId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(EcsBackupPlan.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsBackupPlan resources.
 */
export interface EcsBackupPlanState {
    /**
     * Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
     */
    readonly backupType?: pulumi.Input<string>;
    readonly detail?: pulumi.Input<string>;
    /**
     * Whether to Disable the Backup Task. Valid Values: true, false.
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
     */
    readonly ecsBackupPlanName?: pulumi.Input<string>;
    /**
     * Exclude Path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
     */
    readonly exclude?: pulumi.Input<string>;
    /**
     * Include Path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
     */
    readonly include?: pulumi.Input<string>;
    /**
     * The ECS Instance Id. Must Have Installed the Client.
     */
    readonly instanceId?: pulumi.Input<string>;
    /**
     * Windows System with Application Consistency Using VSS. eg: {`UseVSS`:false}.
     */
    readonly options?: pulumi.Input<string>;
    /**
     * Backup Path. e.g. `["/home", "/var"]`
     */
    readonly paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Backup Retention Period, the Minimum Value of 1.
     */
    readonly retention?: pulumi.Input<string>;
    /**
     * Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
     */
    readonly schedule?: pulumi.Input<string>;
    /**
     * flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
     */
    readonly speedLimit?: pulumi.Input<string>;
    readonly updatePaths?: pulumi.Input<boolean>;
    /**
     * Vault ID.
     */
    readonly vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsBackupPlan resource.
 */
export interface EcsBackupPlanArgs {
    /**
     * Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
     */
    readonly backupType?: pulumi.Input<string>;
    readonly detail?: pulumi.Input<string>;
    /**
     * Whether to Disable the Backup Task. Valid Values: true, false.
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
     */
    readonly ecsBackupPlanName: pulumi.Input<string>;
    /**
     * Exclude Path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
     */
    readonly exclude?: pulumi.Input<string>;
    /**
     * Include Path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
     */
    readonly include?: pulumi.Input<string>;
    /**
     * The ECS Instance Id. Must Have Installed the Client.
     */
    readonly instanceId: pulumi.Input<string>;
    /**
     * Windows System with Application Consistency Using VSS. eg: {`UseVSS`:false}.
     */
    readonly options?: pulumi.Input<string>;
    /**
     * Backup Path. e.g. `["/home", "/var"]`
     */
    readonly paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Backup Retention Period, the Minimum Value of 1.
     */
    readonly retention: pulumi.Input<string>;
    /**
     * Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
     */
    readonly schedule: pulumi.Input<string>;
    /**
     * flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
     */
    readonly speedLimit?: pulumi.Input<string>;
    readonly updatePaths?: pulumi.Input<boolean>;
    /**
     * Vault ID.
     */
    readonly vaultId?: pulumi.Input<string>;
}
