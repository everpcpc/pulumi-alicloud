// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class RouteEntry extends pulumi.CustomResource {
    /**
     * Get an existing RouteEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteEntryState): RouteEntry {
        return new RouteEntry(name, <any>state, { id });
    }

    public readonly destinationCidrblock: pulumi.Output<string | undefined>;
    public readonly nexthopId: pulumi.Output<string | undefined>;
    public readonly nexthopType: pulumi.Output<string | undefined>;
    public readonly routeTableId: pulumi.Output<string>;
    public readonly routerId: pulumi.Output<string>;

    /**
     * Create a RouteEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteEntryArgs | RouteEntryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: RouteEntryState = argsOrState as RouteEntryState | undefined;
            inputs["destinationCidrblock"] = state ? state.destinationCidrblock : undefined;
            inputs["nexthopId"] = state ? state.nexthopId : undefined;
            inputs["nexthopType"] = state ? state.nexthopType : undefined;
            inputs["routeTableId"] = state ? state.routeTableId : undefined;
            inputs["routerId"] = state ? state.routerId : undefined;
        } else {
            const args = argsOrState as RouteEntryArgs | undefined;
            if (!args || args.routeTableId === undefined) {
                throw new Error("Missing required property 'routeTableId'");
            }
            inputs["destinationCidrblock"] = args ? args.destinationCidrblock : undefined;
            inputs["nexthopId"] = args ? args.nexthopId : undefined;
            inputs["nexthopType"] = args ? args.nexthopType : undefined;
            inputs["routeTableId"] = args ? args.routeTableId : undefined;
            inputs["routerId"] = args ? args.routerId : undefined;
        }
        super("alicloud:vpc/routeEntry:RouteEntry", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteEntry resources.
 */
export interface RouteEntryState {
    readonly destinationCidrblock?: pulumi.Input<string>;
    readonly nexthopId?: pulumi.Input<string>;
    readonly nexthopType?: pulumi.Input<string>;
    readonly routeTableId?: pulumi.Input<string>;
    readonly routerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteEntry resource.
 */
export interface RouteEntryArgs {
    readonly destinationCidrblock?: pulumi.Input<string>;
    readonly nexthopId?: pulumi.Input<string>;
    readonly nexthopType?: pulumi.Input<string>;
    readonly routeTableId: pulumi.Input<string>;
    readonly routerId?: pulumi.Input<string>;
}
