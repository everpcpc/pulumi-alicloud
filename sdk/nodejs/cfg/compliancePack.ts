// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Config Compliance Pack resource.
 *
 * For information about Cloud Config Compliance Pack and how to use it, see [What is Compliance Pack](https://help.aliyun.com/).
 *
 * > **NOTE:** Available in v1.124.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.cfg.CompliancePack("example", {
 *     compliancePackName: "tf-testaccConfig1234",
 *     compliancePackTemplateId: "ct-3d20ff4e06a30027f76e",
 *     configRules: [
 *         {
 *             configRuleParameters: [{
 *                 parameterName: "days",
 *                 parameterValue: "7",
 *             }],
 *             managedRuleIdentifier: "ecs-snapshot-retention-days",
 *         },
 *         {
 *             configRuleParameters: [{
 *                 parameterName: "days",
 *                 parameterValue: "60",
 *             }],
 *             managedRuleIdentifier: "ecs-instance-expired-check",
 *         },
 *     ],
 *     description: "tf-testaccConfig1234",
 *     riskLevel: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Config Compliance Pack can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cfg/compliancePack:CompliancePack example <id>
 * ```
 */
export class CompliancePack extends pulumi.CustomResource {
    /**
     * Get an existing CompliancePack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CompliancePackState, opts?: pulumi.CustomResourceOptions): CompliancePack {
        return new CompliancePack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cfg/compliancePack:CompliancePack';

    /**
     * Returns true if the given object is an instance of CompliancePack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CompliancePack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CompliancePack.__pulumiType;
    }

    /**
     * The Compliance Package Name.
     */
    public readonly compliancePackName!: pulumi.Output<string>;
    /**
     * Compliance Package Template Id.
     */
    public readonly compliancePackTemplateId!: pulumi.Output<string>;
    /**
     * A list of Config Rules.
     */
    public readonly configRules!: pulumi.Output<outputs.cfg.CompliancePackConfigRule[]>;
    /**
     * The Description of compliance pack.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Risk Level. Valid values:  `1`: critical, `2`: warning, `3`: info.
     */
    public readonly riskLevel!: pulumi.Output<number>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a CompliancePack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CompliancePackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CompliancePackArgs | CompliancePackState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CompliancePackState | undefined;
            inputs["compliancePackName"] = state ? state.compliancePackName : undefined;
            inputs["compliancePackTemplateId"] = state ? state.compliancePackTemplateId : undefined;
            inputs["configRules"] = state ? state.configRules : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["riskLevel"] = state ? state.riskLevel : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as CompliancePackArgs | undefined;
            if ((!args || args.compliancePackName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compliancePackName'");
            }
            if ((!args || args.compliancePackTemplateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compliancePackTemplateId'");
            }
            if ((!args || args.configRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configRules'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.riskLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'riskLevel'");
            }
            inputs["compliancePackName"] = args ? args.compliancePackName : undefined;
            inputs["compliancePackTemplateId"] = args ? args.compliancePackTemplateId : undefined;
            inputs["configRules"] = args ? args.configRules : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["riskLevel"] = args ? args.riskLevel : undefined;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CompliancePack.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CompliancePack resources.
 */
export interface CompliancePackState {
    /**
     * The Compliance Package Name.
     */
    readonly compliancePackName?: pulumi.Input<string>;
    /**
     * Compliance Package Template Id.
     */
    readonly compliancePackTemplateId?: pulumi.Input<string>;
    /**
     * A list of Config Rules.
     */
    readonly configRules?: pulumi.Input<pulumi.Input<inputs.cfg.CompliancePackConfigRule>[]>;
    /**
     * The Description of compliance pack.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The Risk Level. Valid values:  `1`: critical, `2`: warning, `3`: info.
     */
    readonly riskLevel?: pulumi.Input<number>;
    /**
     * The status of the resource.
     */
    readonly status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CompliancePack resource.
 */
export interface CompliancePackArgs {
    /**
     * The Compliance Package Name.
     */
    readonly compliancePackName: pulumi.Input<string>;
    /**
     * Compliance Package Template Id.
     */
    readonly compliancePackTemplateId: pulumi.Input<string>;
    /**
     * A list of Config Rules.
     */
    readonly configRules: pulumi.Input<pulumi.Input<inputs.cfg.CompliancePackConfigRule>[]>;
    /**
     * The Description of compliance pack.
     */
    readonly description: pulumi.Input<string>;
    /**
     * The Risk Level. Valid values:  `1`: critical, `2`: warning, `3`: info.
     */
    readonly riskLevel: pulumi.Input<number>;
}
