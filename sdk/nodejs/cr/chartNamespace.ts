// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CR Chart Namespace resource.
 *
 * For information about CR Chart Namespace and how to use it, see [What is Chart Namespace](https://www.alibabacloud.com/help/doc-detail/145313.htm).
 *
 * > **NOTE:** Available in v1.149.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultRegistryEnterpriseInstance = new alicloud.cr.RegistryEnterpriseInstance("defaultRegistryEnterpriseInstance", {
 *     paymentType: "Subscription",
 *     period: 1,
 *     instanceType: "Advanced",
 *     instanceName: "name",
 * });
 * const defaultChartNamespace = new alicloud.cr.ChartNamespace("defaultChartNamespace", {
 *     instanceId: defaultRegistryEnterpriseInstance.id,
 *     namespaceName: "name",
 * });
 * ```
 *
 * ## Import
 *
 * CR Chart Namespace can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cr/chartNamespace:ChartNamespace example <instance_id>:<namespace_name>
 * ```
 */
export class ChartNamespace extends pulumi.CustomResource {
    /**
     * Get an existing ChartNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChartNamespaceState, opts?: pulumi.CustomResourceOptions): ChartNamespace {
        return new ChartNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cr/chartNamespace:ChartNamespace';

    /**
     * Returns true if the given object is an instance of ChartNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChartNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChartNamespace.__pulumiType;
    }

    /**
     * Specifies whether to automatically create repositories in the namespace. Valid values:
     */
    public readonly autoCreateRepo!: pulumi.Output<boolean>;
    /**
     * DefaultRepoType. Valid values: `PRIVATE`, `PUBLIC`.
     */
    public readonly defaultRepoType!: pulumi.Output<string>;
    /**
     * The ID of the Container Registry instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The name of the namespace that you want to create.
     */
    public readonly namespaceName!: pulumi.Output<string>;

    /**
     * Create a ChartNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChartNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChartNamespaceArgs | ChartNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChartNamespaceState | undefined;
            inputs["autoCreateRepo"] = state ? state.autoCreateRepo : undefined;
            inputs["defaultRepoType"] = state ? state.defaultRepoType : undefined;
            inputs["instanceId"] = state ? state.instanceId : undefined;
            inputs["namespaceName"] = state ? state.namespaceName : undefined;
        } else {
            const args = argsOrState as ChartNamespaceArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            inputs["autoCreateRepo"] = args ? args.autoCreateRepo : undefined;
            inputs["defaultRepoType"] = args ? args.defaultRepoType : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["namespaceName"] = args ? args.namespaceName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ChartNamespace.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ChartNamespace resources.
 */
export interface ChartNamespaceState {
    /**
     * Specifies whether to automatically create repositories in the namespace. Valid values:
     */
    autoCreateRepo?: pulumi.Input<boolean>;
    /**
     * DefaultRepoType. Valid values: `PRIVATE`, `PUBLIC`.
     */
    defaultRepoType?: pulumi.Input<string>;
    /**
     * The ID of the Container Registry instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of the namespace that you want to create.
     */
    namespaceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ChartNamespace resource.
 */
export interface ChartNamespaceArgs {
    /**
     * Specifies whether to automatically create repositories in the namespace. Valid values:
     */
    autoCreateRepo?: pulumi.Input<boolean>;
    /**
     * DefaultRepoType. Valid values: `PRIVATE`, `PUBLIC`.
     */
    defaultRepoType?: pulumi.Input<string>;
    /**
     * The ID of the Container Registry instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The name of the namespace that you want to create.
     */
    namespaceName: pulumi.Input<string>;
}
