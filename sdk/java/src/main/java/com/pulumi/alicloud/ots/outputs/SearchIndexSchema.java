// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots.outputs;

import com.pulumi.alicloud.ots.outputs.SearchIndexSchemaFieldSchema;
import com.pulumi.alicloud.ots.outputs.SearchIndexSchemaIndexSetting;
import com.pulumi.alicloud.ots.outputs.SearchIndexSchemaIndexSort;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class SearchIndexSchema {
    /**
     * @return A list of field schemas. Each field schema contains the following parameters:
     * 
     */
    private final List<SearchIndexSchemaFieldSchema> fieldSchemas;
    /**
     * @return The settings of the search index, including routingFields.
     * 
     */
    private final @Nullable List<SearchIndexSchemaIndexSetting> indexSettings;
    /**
     * @return The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default.
     * 
     */
    private final @Nullable List<SearchIndexSchemaIndexSort> indexSorts;

    @CustomType.Constructor
    private SearchIndexSchema(
        @CustomType.Parameter("fieldSchemas") List<SearchIndexSchemaFieldSchema> fieldSchemas,
        @CustomType.Parameter("indexSettings") @Nullable List<SearchIndexSchemaIndexSetting> indexSettings,
        @CustomType.Parameter("indexSorts") @Nullable List<SearchIndexSchemaIndexSort> indexSorts) {
        this.fieldSchemas = fieldSchemas;
        this.indexSettings = indexSettings;
        this.indexSorts = indexSorts;
    }

    /**
     * @return A list of field schemas. Each field schema contains the following parameters:
     * 
     */
    public List<SearchIndexSchemaFieldSchema> fieldSchemas() {
        return this.fieldSchemas;
    }
    /**
     * @return The settings of the search index, including routingFields.
     * 
     */
    public List<SearchIndexSchemaIndexSetting> indexSettings() {
        return this.indexSettings == null ? List.of() : this.indexSettings;
    }
    /**
     * @return The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default.
     * 
     */
    public List<SearchIndexSchemaIndexSort> indexSorts() {
        return this.indexSorts == null ? List.of() : this.indexSorts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SearchIndexSchema defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<SearchIndexSchemaFieldSchema> fieldSchemas;
        private @Nullable List<SearchIndexSchemaIndexSetting> indexSettings;
        private @Nullable List<SearchIndexSchemaIndexSort> indexSorts;

        public Builder() {
    	      // Empty
        }

        public Builder(SearchIndexSchema defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fieldSchemas = defaults.fieldSchemas;
    	      this.indexSettings = defaults.indexSettings;
    	      this.indexSorts = defaults.indexSorts;
        }

        public Builder fieldSchemas(List<SearchIndexSchemaFieldSchema> fieldSchemas) {
            this.fieldSchemas = Objects.requireNonNull(fieldSchemas);
            return this;
        }
        public Builder fieldSchemas(SearchIndexSchemaFieldSchema... fieldSchemas) {
            return fieldSchemas(List.of(fieldSchemas));
        }
        public Builder indexSettings(@Nullable List<SearchIndexSchemaIndexSetting> indexSettings) {
            this.indexSettings = indexSettings;
            return this;
        }
        public Builder indexSettings(SearchIndexSchemaIndexSetting... indexSettings) {
            return indexSettings(List.of(indexSettings));
        }
        public Builder indexSorts(@Nullable List<SearchIndexSchemaIndexSort> indexSorts) {
            this.indexSorts = indexSorts;
            return this;
        }
        public Builder indexSorts(SearchIndexSchemaIndexSort... indexSorts) {
            return indexSorts(List.of(indexSorts));
        }        public SearchIndexSchema build() {
            return new SearchIndexSchema(fieldSchemas, indexSettings, indexSorts);
        }
    }
}
