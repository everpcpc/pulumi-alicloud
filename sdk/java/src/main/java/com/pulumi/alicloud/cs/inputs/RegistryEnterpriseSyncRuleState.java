// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryEnterpriseSyncRuleState extends com.pulumi.resources.ResourceArgs {

    public static final RegistryEnterpriseSyncRuleState Empty = new RegistryEnterpriseSyncRuleState();

    /**
     * ID of Container Registry Enterprise Edition source instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return ID of Container Registry Enterprise Edition source instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * Name of Container Registry Enterprise Edition sync rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of Container Registry Enterprise Edition sync rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of Container Registry Enterprise Edition source namespace. It can contain 2 to 30 characters.
     * 
     */
    @Import(name="namespaceName")
    private @Nullable Output<String> namespaceName;

    /**
     * @return Name of Container Registry Enterprise Edition source namespace. It can contain 2 to 30 characters.
     * 
     */
    public Optional<Output<String>> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }

    /**
     * Name of the source repository which should be set together with `target_repo_name`, if empty means that the synchronization scope is the entire namespace level.
     * 
     */
    @Import(name="repoName")
    private @Nullable Output<String> repoName;

    /**
     * @return Name of the source repository which should be set together with `target_repo_name`, if empty means that the synchronization scope is the entire namespace level.
     * 
     */
    public Optional<Output<String>> repoName() {
        return Optional.ofNullable(this.repoName);
    }

    /**
     * The uuid of Container Registry Enterprise Edition sync rule.
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<String> ruleId;

    /**
     * @return The uuid of Container Registry Enterprise Edition sync rule.
     * 
     */
    public Optional<Output<String>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * `FROM` or `TO`, the direction of synchronization. `FROM` means source instance, `TO` means target instance.
     * 
     */
    @Import(name="syncDirection")
    private @Nullable Output<String> syncDirection;

    /**
     * @return `FROM` or `TO`, the direction of synchronization. `FROM` means source instance, `TO` means target instance.
     * 
     */
    public Optional<Output<String>> syncDirection() {
        return Optional.ofNullable(this.syncDirection);
    }

    /**
     * `REPO` or `NAMESPACE`,the scope that the synchronization rule applies.
     * 
     */
    @Import(name="syncScope")
    private @Nullable Output<String> syncScope;

    /**
     * @return `REPO` or `NAMESPACE`,the scope that the synchronization rule applies.
     * 
     */
    public Optional<Output<String>> syncScope() {
        return Optional.ofNullable(this.syncScope);
    }

    /**
     * The regular expression used to filter image tags for synchronization in the source repository.
     * 
     */
    @Import(name="tagFilter")
    private @Nullable Output<String> tagFilter;

    /**
     * @return The regular expression used to filter image tags for synchronization in the source repository.
     * 
     */
    public Optional<Output<String>> tagFilter() {
        return Optional.ofNullable(this.tagFilter);
    }

    /**
     * ID of Container Registry Enterprise Edition target instance to be synchronized.
     * 
     */
    @Import(name="targetInstanceId")
    private @Nullable Output<String> targetInstanceId;

    /**
     * @return ID of Container Registry Enterprise Edition target instance to be synchronized.
     * 
     */
    public Optional<Output<String>> targetInstanceId() {
        return Optional.ofNullable(this.targetInstanceId);
    }

    /**
     * Name of Container Registry Enterprise Edition target namespace to be synchronized. It can contain 2 to 30 characters.
     * 
     */
    @Import(name="targetNamespaceName")
    private @Nullable Output<String> targetNamespaceName;

    /**
     * @return Name of Container Registry Enterprise Edition target namespace to be synchronized. It can contain 2 to 30 characters.
     * 
     */
    public Optional<Output<String>> targetNamespaceName() {
        return Optional.ofNullable(this.targetNamespaceName);
    }

    /**
     * The target region to be synchronized.
     * 
     */
    @Import(name="targetRegionId")
    private @Nullable Output<String> targetRegionId;

    /**
     * @return The target region to be synchronized.
     * 
     */
    public Optional<Output<String>> targetRegionId() {
        return Optional.ofNullable(this.targetRegionId);
    }

    /**
     * Name of the target repository.
     * 
     */
    @Import(name="targetRepoName")
    private @Nullable Output<String> targetRepoName;

    /**
     * @return Name of the target repository.
     * 
     */
    public Optional<Output<String>> targetRepoName() {
        return Optional.ofNullable(this.targetRepoName);
    }

    private RegistryEnterpriseSyncRuleState() {}

    private RegistryEnterpriseSyncRuleState(RegistryEnterpriseSyncRuleState $) {
        this.instanceId = $.instanceId;
        this.name = $.name;
        this.namespaceName = $.namespaceName;
        this.repoName = $.repoName;
        this.ruleId = $.ruleId;
        this.syncDirection = $.syncDirection;
        this.syncScope = $.syncScope;
        this.tagFilter = $.tagFilter;
        this.targetInstanceId = $.targetInstanceId;
        this.targetNamespaceName = $.targetNamespaceName;
        this.targetRegionId = $.targetRegionId;
        this.targetRepoName = $.targetRepoName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryEnterpriseSyncRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryEnterpriseSyncRuleState $;

        public Builder() {
            $ = new RegistryEnterpriseSyncRuleState();
        }

        public Builder(RegistryEnterpriseSyncRuleState defaults) {
            $ = new RegistryEnterpriseSyncRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId ID of Container Registry Enterprise Edition source instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId ID of Container Registry Enterprise Edition source instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param name Name of Container Registry Enterprise Edition sync rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Container Registry Enterprise Edition sync rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaceName Name of Container Registry Enterprise Edition source namespace. It can contain 2 to 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(@Nullable Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName Name of Container Registry Enterprise Edition source namespace. It can contain 2 to 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param repoName Name of the source repository which should be set together with `target_repo_name`, if empty means that the synchronization scope is the entire namespace level.
         * 
         * @return builder
         * 
         */
        public Builder repoName(@Nullable Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Name of the source repository which should be set together with `target_repo_name`, if empty means that the synchronization scope is the entire namespace level.
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        /**
         * @param ruleId The uuid of Container Registry Enterprise Edition sync rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId The uuid of Container Registry Enterprise Edition sync rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param syncDirection `FROM` or `TO`, the direction of synchronization. `FROM` means source instance, `TO` means target instance.
         * 
         * @return builder
         * 
         */
        public Builder syncDirection(@Nullable Output<String> syncDirection) {
            $.syncDirection = syncDirection;
            return this;
        }

        /**
         * @param syncDirection `FROM` or `TO`, the direction of synchronization. `FROM` means source instance, `TO` means target instance.
         * 
         * @return builder
         * 
         */
        public Builder syncDirection(String syncDirection) {
            return syncDirection(Output.of(syncDirection));
        }

        /**
         * @param syncScope `REPO` or `NAMESPACE`,the scope that the synchronization rule applies.
         * 
         * @return builder
         * 
         */
        public Builder syncScope(@Nullable Output<String> syncScope) {
            $.syncScope = syncScope;
            return this;
        }

        /**
         * @param syncScope `REPO` or `NAMESPACE`,the scope that the synchronization rule applies.
         * 
         * @return builder
         * 
         */
        public Builder syncScope(String syncScope) {
            return syncScope(Output.of(syncScope));
        }

        /**
         * @param tagFilter The regular expression used to filter image tags for synchronization in the source repository.
         * 
         * @return builder
         * 
         */
        public Builder tagFilter(@Nullable Output<String> tagFilter) {
            $.tagFilter = tagFilter;
            return this;
        }

        /**
         * @param tagFilter The regular expression used to filter image tags for synchronization in the source repository.
         * 
         * @return builder
         * 
         */
        public Builder tagFilter(String tagFilter) {
            return tagFilter(Output.of(tagFilter));
        }

        /**
         * @param targetInstanceId ID of Container Registry Enterprise Edition target instance to be synchronized.
         * 
         * @return builder
         * 
         */
        public Builder targetInstanceId(@Nullable Output<String> targetInstanceId) {
            $.targetInstanceId = targetInstanceId;
            return this;
        }

        /**
         * @param targetInstanceId ID of Container Registry Enterprise Edition target instance to be synchronized.
         * 
         * @return builder
         * 
         */
        public Builder targetInstanceId(String targetInstanceId) {
            return targetInstanceId(Output.of(targetInstanceId));
        }

        /**
         * @param targetNamespaceName Name of Container Registry Enterprise Edition target namespace to be synchronized. It can contain 2 to 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder targetNamespaceName(@Nullable Output<String> targetNamespaceName) {
            $.targetNamespaceName = targetNamespaceName;
            return this;
        }

        /**
         * @param targetNamespaceName Name of Container Registry Enterprise Edition target namespace to be synchronized. It can contain 2 to 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder targetNamespaceName(String targetNamespaceName) {
            return targetNamespaceName(Output.of(targetNamespaceName));
        }

        /**
         * @param targetRegionId The target region to be synchronized.
         * 
         * @return builder
         * 
         */
        public Builder targetRegionId(@Nullable Output<String> targetRegionId) {
            $.targetRegionId = targetRegionId;
            return this;
        }

        /**
         * @param targetRegionId The target region to be synchronized.
         * 
         * @return builder
         * 
         */
        public Builder targetRegionId(String targetRegionId) {
            return targetRegionId(Output.of(targetRegionId));
        }

        /**
         * @param targetRepoName Name of the target repository.
         * 
         * @return builder
         * 
         */
        public Builder targetRepoName(@Nullable Output<String> targetRepoName) {
            $.targetRepoName = targetRepoName;
            return this;
        }

        /**
         * @param targetRepoName Name of the target repository.
         * 
         * @return builder
         * 
         */
        public Builder targetRepoName(String targetRepoName) {
            return targetRepoName(Output.of(targetRepoName));
        }

        public RegistryEnterpriseSyncRuleState build() {
            return $;
        }
    }

}
