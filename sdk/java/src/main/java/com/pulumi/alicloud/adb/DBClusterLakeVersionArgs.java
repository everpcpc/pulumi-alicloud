// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.adb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DBClusterLakeVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DBClusterLakeVersionArgs Empty = new DBClusterLakeVersionArgs();

    /**
     * The computing resources of the cluster.
     * 
     */
    @Import(name="computeResource", required=true)
    private Output<String> computeResource;

    /**
     * @return The computing resources of the cluster.
     * 
     */
    public Output<String> computeResource() {
        return this.computeResource;
    }

    /**
     * The version of the cluster. Value options: `5.0`.
     * 
     */
    @Import(name="dbClusterVersion", required=true)
    private Output<String> dbClusterVersion;

    /**
     * @return The version of the cluster. Value options: `5.0`.
     * 
     */
    public Output<String> dbClusterVersion() {
        return this.dbClusterVersion;
    }

    /**
     * Whether to enable default allocation of resources to user_default resource groups.
     * 
     */
    @Import(name="enableDefaultResourceGroup")
    private @Nullable Output<Boolean> enableDefaultResourceGroup;

    /**
     * @return Whether to enable default allocation of resources to user_default resource groups.
     * 
     */
    public Optional<Output<Boolean>> enableDefaultResourceGroup() {
        return Optional.ofNullable(this.enableDefaultResourceGroup);
    }

    /**
     * The payment type of the resource. Valid values are `PayAsYouGo`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values are `PayAsYouGo`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * The storage resources of the cluster.
     * 
     */
    @Import(name="storageResource", required=true)
    private Output<String> storageResource;

    /**
     * @return The storage resources of the cluster.
     * 
     */
    public Output<String> storageResource() {
        return this.storageResource;
    }

    /**
     * The vpc ID of the resource.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The vpc ID of the resource.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The ID of the vSwitch.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    /**
     * The zone ID of the resource.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone ID of the resource.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private DBClusterLakeVersionArgs() {}

    private DBClusterLakeVersionArgs(DBClusterLakeVersionArgs $) {
        this.computeResource = $.computeResource;
        this.dbClusterVersion = $.dbClusterVersion;
        this.enableDefaultResourceGroup = $.enableDefaultResourceGroup;
        this.paymentType = $.paymentType;
        this.storageResource = $.storageResource;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DBClusterLakeVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DBClusterLakeVersionArgs $;

        public Builder() {
            $ = new DBClusterLakeVersionArgs();
        }

        public Builder(DBClusterLakeVersionArgs defaults) {
            $ = new DBClusterLakeVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeResource The computing resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder computeResource(Output<String> computeResource) {
            $.computeResource = computeResource;
            return this;
        }

        /**
         * @param computeResource The computing resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder computeResource(String computeResource) {
            return computeResource(Output.of(computeResource));
        }

        /**
         * @param dbClusterVersion The version of the cluster. Value options: `5.0`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterVersion(Output<String> dbClusterVersion) {
            $.dbClusterVersion = dbClusterVersion;
            return this;
        }

        /**
         * @param dbClusterVersion The version of the cluster. Value options: `5.0`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterVersion(String dbClusterVersion) {
            return dbClusterVersion(Output.of(dbClusterVersion));
        }

        /**
         * @param enableDefaultResourceGroup Whether to enable default allocation of resources to user_default resource groups.
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultResourceGroup(@Nullable Output<Boolean> enableDefaultResourceGroup) {
            $.enableDefaultResourceGroup = enableDefaultResourceGroup;
            return this;
        }

        /**
         * @param enableDefaultResourceGroup Whether to enable default allocation of resources to user_default resource groups.
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultResourceGroup(Boolean enableDefaultResourceGroup) {
            return enableDefaultResourceGroup(Output.of(enableDefaultResourceGroup));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values are `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values are `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param storageResource The storage resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageResource(Output<String> storageResource) {
            $.storageResource = storageResource;
            return this;
        }

        /**
         * @param storageResource The storage resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageResource(String storageResource) {
            return storageResource(Output.of(storageResource));
        }

        /**
         * @param vpcId The vpc ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The vpc ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DBClusterLakeVersionArgs build() {
            $.computeResource = Objects.requireNonNull($.computeResource, "expected parameter 'computeResource' to be non-null");
            $.dbClusterVersion = Objects.requireNonNull($.dbClusterVersion, "expected parameter 'dbClusterVersion' to be non-null");
            $.paymentType = Objects.requireNonNull($.paymentType, "expected parameter 'paymentType' to be non-null");
            $.storageResource = Objects.requireNonNull($.storageResource, "expected parameter 'storageResource' to be non-null");
            $.vpcId = Objects.requireNonNull($.vpcId, "expected parameter 'vpcId' to be non-null");
            $.vswitchId = Objects.requireNonNull($.vswitchId, "expected parameter 'vswitchId' to be non-null");
            $.zoneId = Objects.requireNonNull($.zoneId, "expected parameter 'zoneId' to be non-null");
            return $;
        }
    }

}
