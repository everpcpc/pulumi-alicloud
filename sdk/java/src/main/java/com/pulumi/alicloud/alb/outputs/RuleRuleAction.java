// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.alicloud.alb.outputs.RuleRuleActionFixedResponseConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionForwardGroupConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionInsertHeaderConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionRedirectConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionRewriteConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionTrafficLimitConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleActionTrafficMirrorConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuleRuleAction {
    /**
     * @return The configuration of the fixed response. See the following `Block fixed_response_config`.
     * 
     */
    private final @Nullable RuleRuleActionFixedResponseConfig fixedResponseConfig;
    /**
     * @return The forward response action within ALB. See the following `Block forward_group_config`.
     * 
     */
    private final @Nullable RuleRuleActionForwardGroupConfig forwardGroupConfig;
    /**
     * @return The configuration of the inserted header field. See the following `Block insert_header_config`.
     * 
     */
    private final @Nullable RuleRuleActionInsertHeaderConfig insertHeaderConfig;
    /**
     * @return The order of the forwarding rule actions. Valid values: 1 to 50000. The actions are performed in ascending order. You cannot leave this parameter empty. Each value must be unique.
     * 
     */
    private final Integer order;
    /**
     * @return The configuration of the external redirect action. See the following `Block redirect_config`.
     * 
     */
    private final @Nullable RuleRuleActionRedirectConfig redirectConfig;
    /**
     * @return The redirect action within ALB. See the following `Block rewrite_config`.
     * 
     */
    private final @Nullable RuleRuleActionRewriteConfig rewriteConfig;
    /**
     * @return The Flow speed limit. See the following `Block traffic_limit_config`.
     * 
     */
    private final @Nullable RuleRuleActionTrafficLimitConfig trafficLimitConfig;
    /**
     * @return The Traffic mirroring. See the following `Block traffic_mirror_config`.
     * 
     */
    private final @Nullable RuleRuleActionTrafficMirrorConfig trafficMirrorConfig;
    /**
     * @return The type of the forwarding rule. Valid values: `Header`, `Host`, `Path`,  `Cookie`, `QueryString`, `Method` and `SourceIp`.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private RuleRuleAction(
        @CustomType.Parameter("fixedResponseConfig") @Nullable RuleRuleActionFixedResponseConfig fixedResponseConfig,
        @CustomType.Parameter("forwardGroupConfig") @Nullable RuleRuleActionForwardGroupConfig forwardGroupConfig,
        @CustomType.Parameter("insertHeaderConfig") @Nullable RuleRuleActionInsertHeaderConfig insertHeaderConfig,
        @CustomType.Parameter("order") Integer order,
        @CustomType.Parameter("redirectConfig") @Nullable RuleRuleActionRedirectConfig redirectConfig,
        @CustomType.Parameter("rewriteConfig") @Nullable RuleRuleActionRewriteConfig rewriteConfig,
        @CustomType.Parameter("trafficLimitConfig") @Nullable RuleRuleActionTrafficLimitConfig trafficLimitConfig,
        @CustomType.Parameter("trafficMirrorConfig") @Nullable RuleRuleActionTrafficMirrorConfig trafficMirrorConfig,
        @CustomType.Parameter("type") String type) {
        this.fixedResponseConfig = fixedResponseConfig;
        this.forwardGroupConfig = forwardGroupConfig;
        this.insertHeaderConfig = insertHeaderConfig;
        this.order = order;
        this.redirectConfig = redirectConfig;
        this.rewriteConfig = rewriteConfig;
        this.trafficLimitConfig = trafficLimitConfig;
        this.trafficMirrorConfig = trafficMirrorConfig;
        this.type = type;
    }

    /**
     * @return The configuration of the fixed response. See the following `Block fixed_response_config`.
     * 
     */
    public Optional<RuleRuleActionFixedResponseConfig> fixedResponseConfig() {
        return Optional.ofNullable(this.fixedResponseConfig);
    }
    /**
     * @return The forward response action within ALB. See the following `Block forward_group_config`.
     * 
     */
    public Optional<RuleRuleActionForwardGroupConfig> forwardGroupConfig() {
        return Optional.ofNullable(this.forwardGroupConfig);
    }
    /**
     * @return The configuration of the inserted header field. See the following `Block insert_header_config`.
     * 
     */
    public Optional<RuleRuleActionInsertHeaderConfig> insertHeaderConfig() {
        return Optional.ofNullable(this.insertHeaderConfig);
    }
    /**
     * @return The order of the forwarding rule actions. Valid values: 1 to 50000. The actions are performed in ascending order. You cannot leave this parameter empty. Each value must be unique.
     * 
     */
    public Integer order() {
        return this.order;
    }
    /**
     * @return The configuration of the external redirect action. See the following `Block redirect_config`.
     * 
     */
    public Optional<RuleRuleActionRedirectConfig> redirectConfig() {
        return Optional.ofNullable(this.redirectConfig);
    }
    /**
     * @return The redirect action within ALB. See the following `Block rewrite_config`.
     * 
     */
    public Optional<RuleRuleActionRewriteConfig> rewriteConfig() {
        return Optional.ofNullable(this.rewriteConfig);
    }
    /**
     * @return The Flow speed limit. See the following `Block traffic_limit_config`.
     * 
     */
    public Optional<RuleRuleActionTrafficLimitConfig> trafficLimitConfig() {
        return Optional.ofNullable(this.trafficLimitConfig);
    }
    /**
     * @return The Traffic mirroring. See the following `Block traffic_mirror_config`.
     * 
     */
    public Optional<RuleRuleActionTrafficMirrorConfig> trafficMirrorConfig() {
        return Optional.ofNullable(this.trafficMirrorConfig);
    }
    /**
     * @return The type of the forwarding rule. Valid values: `Header`, `Host`, `Path`,  `Cookie`, `QueryString`, `Method` and `SourceIp`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleRuleAction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable RuleRuleActionFixedResponseConfig fixedResponseConfig;
        private @Nullable RuleRuleActionForwardGroupConfig forwardGroupConfig;
        private @Nullable RuleRuleActionInsertHeaderConfig insertHeaderConfig;
        private Integer order;
        private @Nullable RuleRuleActionRedirectConfig redirectConfig;
        private @Nullable RuleRuleActionRewriteConfig rewriteConfig;
        private @Nullable RuleRuleActionTrafficLimitConfig trafficLimitConfig;
        private @Nullable RuleRuleActionTrafficMirrorConfig trafficMirrorConfig;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleRuleAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fixedResponseConfig = defaults.fixedResponseConfig;
    	      this.forwardGroupConfig = defaults.forwardGroupConfig;
    	      this.insertHeaderConfig = defaults.insertHeaderConfig;
    	      this.order = defaults.order;
    	      this.redirectConfig = defaults.redirectConfig;
    	      this.rewriteConfig = defaults.rewriteConfig;
    	      this.trafficLimitConfig = defaults.trafficLimitConfig;
    	      this.trafficMirrorConfig = defaults.trafficMirrorConfig;
    	      this.type = defaults.type;
        }

        public Builder fixedResponseConfig(@Nullable RuleRuleActionFixedResponseConfig fixedResponseConfig) {
            this.fixedResponseConfig = fixedResponseConfig;
            return this;
        }
        public Builder forwardGroupConfig(@Nullable RuleRuleActionForwardGroupConfig forwardGroupConfig) {
            this.forwardGroupConfig = forwardGroupConfig;
            return this;
        }
        public Builder insertHeaderConfig(@Nullable RuleRuleActionInsertHeaderConfig insertHeaderConfig) {
            this.insertHeaderConfig = insertHeaderConfig;
            return this;
        }
        public Builder order(Integer order) {
            this.order = Objects.requireNonNull(order);
            return this;
        }
        public Builder redirectConfig(@Nullable RuleRuleActionRedirectConfig redirectConfig) {
            this.redirectConfig = redirectConfig;
            return this;
        }
        public Builder rewriteConfig(@Nullable RuleRuleActionRewriteConfig rewriteConfig) {
            this.rewriteConfig = rewriteConfig;
            return this;
        }
        public Builder trafficLimitConfig(@Nullable RuleRuleActionTrafficLimitConfig trafficLimitConfig) {
            this.trafficLimitConfig = trafficLimitConfig;
            return this;
        }
        public Builder trafficMirrorConfig(@Nullable RuleRuleActionTrafficMirrorConfig trafficMirrorConfig) {
            this.trafficMirrorConfig = trafficMirrorConfig;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public RuleRuleAction build() {
            return new RuleRuleAction(fixedResponseConfig, forwardGroupConfig, insertHeaderConfig, order, redirectConfig, rewriteConfig, trafficLimitConfig, trafficMirrorConfig, type);
        }
    }
}
