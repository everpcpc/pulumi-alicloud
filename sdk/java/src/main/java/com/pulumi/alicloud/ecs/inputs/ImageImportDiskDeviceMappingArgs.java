// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageImportDiskDeviceMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageImportDiskDeviceMappingArgs Empty = new ImageImportDiskDeviceMappingArgs();

    /**
     * The name of disk N in the custom image.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return The name of disk N in the custom image.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Resolution size. You must ensure that the system disk space ≥ file system space. Ranges: When n = 1, the system disk: 5 ~ 500GiB, When n = 2 ~ 17, that is, data disk: 5 ~ 1000GiB, When temporary is introduced, the system automatically detects the size, which is subject to the detection result.
     * 
     */
    @Import(name="diskImageSize")
    private @Nullable Output<Integer> diskImageSize;

    /**
     * @return Resolution size. You must ensure that the system disk space ≥ file system space. Ranges: When n = 1, the system disk: 5 ~ 500GiB, When n = 2 ~ 17, that is, data disk: 5 ~ 1000GiB, When temporary is introduced, the system automatically detects the size, which is subject to the detection result.
     * 
     */
    public Optional<Output<Integer>> diskImageSize() {
        return Optional.ofNullable(this.diskImageSize);
    }

    /**
     * Image format. Value range: When the `RAW`, `VHD`, `qcow2` is imported into the image, the system automatically detects the image format, whichever comes first.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return Image format. Value range: When the `RAW`, `VHD`, `qcow2` is imported into the image, the system automatically detects the image format, whichever comes first.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Save the exported OSS bucket.
     * 
     */
    @Import(name="ossBucket")
    private @Nullable Output<String> ossBucket;

    /**
     * @return Save the exported OSS bucket.
     * 
     */
    public Optional<Output<String>> ossBucket() {
        return Optional.ofNullable(this.ossBucket);
    }

    /**
     * The file name of your OSS Object.
     * 
     */
    @Import(name="ossObject")
    private @Nullable Output<String> ossObject;

    /**
     * @return The file name of your OSS Object.
     * 
     */
    public Optional<Output<String>> ossObject() {
        return Optional.ofNullable(this.ossObject);
    }

    private ImageImportDiskDeviceMappingArgs() {}

    private ImageImportDiskDeviceMappingArgs(ImageImportDiskDeviceMappingArgs $) {
        this.device = $.device;
        this.diskImageSize = $.diskImageSize;
        this.format = $.format;
        this.ossBucket = $.ossBucket;
        this.ossObject = $.ossObject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageImportDiskDeviceMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageImportDiskDeviceMappingArgs $;

        public Builder() {
            $ = new ImageImportDiskDeviceMappingArgs();
        }

        public Builder(ImageImportDiskDeviceMappingArgs defaults) {
            $ = new ImageImportDiskDeviceMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param device The name of disk N in the custom image.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device The name of disk N in the custom image.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param diskImageSize Resolution size. You must ensure that the system disk space ≥ file system space. Ranges: When n = 1, the system disk: 5 ~ 500GiB, When n = 2 ~ 17, that is, data disk: 5 ~ 1000GiB, When temporary is introduced, the system automatically detects the size, which is subject to the detection result.
         * 
         * @return builder
         * 
         */
        public Builder diskImageSize(@Nullable Output<Integer> diskImageSize) {
            $.diskImageSize = diskImageSize;
            return this;
        }

        /**
         * @param diskImageSize Resolution size. You must ensure that the system disk space ≥ file system space. Ranges: When n = 1, the system disk: 5 ~ 500GiB, When n = 2 ~ 17, that is, data disk: 5 ~ 1000GiB, When temporary is introduced, the system automatically detects the size, which is subject to the detection result.
         * 
         * @return builder
         * 
         */
        public Builder diskImageSize(Integer diskImageSize) {
            return diskImageSize(Output.of(diskImageSize));
        }

        /**
         * @param format Image format. Value range: When the `RAW`, `VHD`, `qcow2` is imported into the image, the system automatically detects the image format, whichever comes first.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Image format. Value range: When the `RAW`, `VHD`, `qcow2` is imported into the image, the system automatically detects the image format, whichever comes first.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param ossBucket Save the exported OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder ossBucket(@Nullable Output<String> ossBucket) {
            $.ossBucket = ossBucket;
            return this;
        }

        /**
         * @param ossBucket Save the exported OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder ossBucket(String ossBucket) {
            return ossBucket(Output.of(ossBucket));
        }

        /**
         * @param ossObject The file name of your OSS Object.
         * 
         * @return builder
         * 
         */
        public Builder ossObject(@Nullable Output<String> ossObject) {
            $.ossObject = ossObject;
            return this;
        }

        /**
         * @param ossObject The file name of your OSS Object.
         * 
         * @return builder
         * 
         */
        public Builder ossObject(String ossObject) {
            return ossObject(Output.of(ossObject));
        }

        public ImageImportDiskDeviceMappingArgs build() {
            return $;
        }
    }

}
