// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegistryEnterpriseSyncRulesRule {
    /**
     * @return ID of Container Registry Enterprise Edition sync rule.
     * 
     */
    private final String id;
    /**
     * @return ID of Container Registry Enterprise Edition local instance.
     * 
     */
    private final String instanceId;
    /**
     * @return Name of Container Registry Enterprise Edition sync rule.
     * 
     */
    private final String name;
    /**
     * @return Name of Container Registry Enterprise Edition local namespace.
     * 
     */
    private final String namespaceName;
    /**
     * @return Region of Container Registry Enterprise Edition local instance.
     * 
     */
    private final String regionId;
    /**
     * @return Name of Container Registry Enterprise Edition local repo.
     * 
     */
    private final String repoName;
    /**
     * @return `FROM` or `TO`, the direction of synchronization. `FROM` indicates that the local instance is the source instance. `TO` indicates that the local instance is the target instance to be synchronized.
     * 
     */
    private final String syncDirection;
    /**
     * @return `REPO` or `NAMESPACE`,the scope that the synchronization rule applies.
     * 
     */
    private final String syncScope;
    /**
     * @return `PASSIVE` or `INITIATIVE`, the policy configured to trigger the synchronization rule.
     * 
     */
    private final String syncTrigger;
    /**
     * @return The regular expression used to filter image tags for synchronization in the source repository.
     * 
     */
    private final String tagFilter;
    /**
     * @return ID of Container Registry Enterprise Edition target instance.
     * 
     */
    private final String targetInstanceId;
    /**
     * @return Name of Container Registry Enterprise Edition target namespace.
     * 
     */
    private final String targetNamespaceName;
    /**
     * @return Region of Container Registry Enterprise Edition target instance.
     * 
     */
    private final String targetRegionId;
    /**
     * @return Name of Container Registry Enterprise Edition target repo.
     * 
     */
    private final String targetRepoName;

    @CustomType.Constructor
    private GetRegistryEnterpriseSyncRulesRule(
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceId") String instanceId,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("namespaceName") String namespaceName,
        @CustomType.Parameter("regionId") String regionId,
        @CustomType.Parameter("repoName") String repoName,
        @CustomType.Parameter("syncDirection") String syncDirection,
        @CustomType.Parameter("syncScope") String syncScope,
        @CustomType.Parameter("syncTrigger") String syncTrigger,
        @CustomType.Parameter("tagFilter") String tagFilter,
        @CustomType.Parameter("targetInstanceId") String targetInstanceId,
        @CustomType.Parameter("targetNamespaceName") String targetNamespaceName,
        @CustomType.Parameter("targetRegionId") String targetRegionId,
        @CustomType.Parameter("targetRepoName") String targetRepoName) {
        this.id = id;
        this.instanceId = instanceId;
        this.name = name;
        this.namespaceName = namespaceName;
        this.regionId = regionId;
        this.repoName = repoName;
        this.syncDirection = syncDirection;
        this.syncScope = syncScope;
        this.syncTrigger = syncTrigger;
        this.tagFilter = tagFilter;
        this.targetInstanceId = targetInstanceId;
        this.targetNamespaceName = targetNamespaceName;
        this.targetRegionId = targetRegionId;
        this.targetRepoName = targetRepoName;
    }

    /**
     * @return ID of Container Registry Enterprise Edition sync rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of Container Registry Enterprise Edition local instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return Name of Container Registry Enterprise Edition sync rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Name of Container Registry Enterprise Edition local namespace.
     * 
     */
    public String namespaceName() {
        return this.namespaceName;
    }
    /**
     * @return Region of Container Registry Enterprise Edition local instance.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return Name of Container Registry Enterprise Edition local repo.
     * 
     */
    public String repoName() {
        return this.repoName;
    }
    /**
     * @return `FROM` or `TO`, the direction of synchronization. `FROM` indicates that the local instance is the source instance. `TO` indicates that the local instance is the target instance to be synchronized.
     * 
     */
    public String syncDirection() {
        return this.syncDirection;
    }
    /**
     * @return `REPO` or `NAMESPACE`,the scope that the synchronization rule applies.
     * 
     */
    public String syncScope() {
        return this.syncScope;
    }
    /**
     * @return `PASSIVE` or `INITIATIVE`, the policy configured to trigger the synchronization rule.
     * 
     */
    public String syncTrigger() {
        return this.syncTrigger;
    }
    /**
     * @return The regular expression used to filter image tags for synchronization in the source repository.
     * 
     */
    public String tagFilter() {
        return this.tagFilter;
    }
    /**
     * @return ID of Container Registry Enterprise Edition target instance.
     * 
     */
    public String targetInstanceId() {
        return this.targetInstanceId;
    }
    /**
     * @return Name of Container Registry Enterprise Edition target namespace.
     * 
     */
    public String targetNamespaceName() {
        return this.targetNamespaceName;
    }
    /**
     * @return Region of Container Registry Enterprise Edition target instance.
     * 
     */
    public String targetRegionId() {
        return this.targetRegionId;
    }
    /**
     * @return Name of Container Registry Enterprise Edition target repo.
     * 
     */
    public String targetRepoName() {
        return this.targetRepoName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryEnterpriseSyncRulesRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String id;
        private String instanceId;
        private String name;
        private String namespaceName;
        private String regionId;
        private String repoName;
        private String syncDirection;
        private String syncScope;
        private String syncTrigger;
        private String tagFilter;
        private String targetInstanceId;
        private String targetNamespaceName;
        private String targetRegionId;
        private String targetRepoName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRegistryEnterpriseSyncRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.name = defaults.name;
    	      this.namespaceName = defaults.namespaceName;
    	      this.regionId = defaults.regionId;
    	      this.repoName = defaults.repoName;
    	      this.syncDirection = defaults.syncDirection;
    	      this.syncScope = defaults.syncScope;
    	      this.syncTrigger = defaults.syncTrigger;
    	      this.tagFilter = defaults.tagFilter;
    	      this.targetInstanceId = defaults.targetInstanceId;
    	      this.targetNamespaceName = defaults.targetNamespaceName;
    	      this.targetRegionId = defaults.targetRegionId;
    	      this.targetRepoName = defaults.targetRepoName;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder namespaceName(String namespaceName) {
            this.namespaceName = Objects.requireNonNull(namespaceName);
            return this;
        }
        public Builder regionId(String regionId) {
            this.regionId = Objects.requireNonNull(regionId);
            return this;
        }
        public Builder repoName(String repoName) {
            this.repoName = Objects.requireNonNull(repoName);
            return this;
        }
        public Builder syncDirection(String syncDirection) {
            this.syncDirection = Objects.requireNonNull(syncDirection);
            return this;
        }
        public Builder syncScope(String syncScope) {
            this.syncScope = Objects.requireNonNull(syncScope);
            return this;
        }
        public Builder syncTrigger(String syncTrigger) {
            this.syncTrigger = Objects.requireNonNull(syncTrigger);
            return this;
        }
        public Builder tagFilter(String tagFilter) {
            this.tagFilter = Objects.requireNonNull(tagFilter);
            return this;
        }
        public Builder targetInstanceId(String targetInstanceId) {
            this.targetInstanceId = Objects.requireNonNull(targetInstanceId);
            return this;
        }
        public Builder targetNamespaceName(String targetNamespaceName) {
            this.targetNamespaceName = Objects.requireNonNull(targetNamespaceName);
            return this;
        }
        public Builder targetRegionId(String targetRegionId) {
            this.targetRegionId = Objects.requireNonNull(targetRegionId);
            return this;
        }
        public Builder targetRepoName(String targetRepoName) {
            this.targetRepoName = Objects.requireNonNull(targetRepoName);
            return this;
        }        public GetRegistryEnterpriseSyncRulesRule build() {
            return new GetRegistryEnterpriseSyncRulesRule(id, instanceId, name, namespaceName, regionId, repoName, syncDirection, syncScope, syncTrigger, tagFilter, targetInstanceId, targetNamespaceName, targetRegionId, targetRepoName);
        }
    }
}
