// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.alicloud.ess.outputs.EciScalingConfigurationContainerEnvironmentVar;
import com.pulumi.alicloud.ess.outputs.EciScalingConfigurationContainerPort;
import com.pulumi.alicloud.ess.outputs.EciScalingConfigurationContainerVolumeMount;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EciScalingConfigurationContainer {
    /**
     * @return The arguments passed to the commands.
     * 
     */
    private final @Nullable List<String> args;
    /**
     * @return The commands run by the init container.
     * 
     */
    private final @Nullable List<String> commands;
    /**
     * @return The amount of CPU resources allocated to the container group.
     * 
     */
    private final @Nullable Double cpu;
    /**
     * @return The structure of environmentVars.
     * See Block_environment_var_in_init_container below for details.
     * See Block_environment_var_in_container below for details.
     * 
     */
    private final @Nullable List<EciScalingConfigurationContainerEnvironmentVar> environmentVars;
    /**
     * @return The number GPUs.
     * 
     */
    private final @Nullable Integer gpu;
    /**
     * @return The image of the container.
     * 
     */
    private final @Nullable String image;
    /**
     * @return The restart policy of the image.
     * 
     */
    private final @Nullable String imagePullPolicy;
    /**
     * @return Commands that you want to run in containers when you use the CLI to perform liveness probes.
     * 
     */
    private final @Nullable List<String> livenessProbeExecCommands;
    /**
     * @return The minimum number of consecutive failures for the liveness probe to be considered failed after having been successful. Default value: 3.
     * 
     */
    private final @Nullable Integer livenessProbeFailureThreshold;
    /**
     * @return The path to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
     * 
     */
    private final @Nullable String livenessProbeHttpGetPath;
    /**
     * @return The port to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
     * 
     */
    private final @Nullable Integer livenessProbeHttpGetPort;
    /**
     * @return The protocol type of HTTP GET requests when you use HTTP requests for liveness probes.Valid values:HTTP and HTTPS.
     * 
     */
    private final @Nullable String livenessProbeHttpGetScheme;
    /**
     * @return The number of seconds after container has started before liveness probes are initiated.
     * 
     */
    private final @Nullable Integer livenessProbeInitialDelaySeconds;
    /**
     * @return The interval at which the liveness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
     * 
     */
    private final @Nullable Integer livenessProbePeriodSeconds;
    /**
     * @return The minimum number of consecutive successes for the liveness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
     * 
     */
    private final @Nullable Integer livenessProbeSuccessThreshold;
    /**
     * @return The port detected by TCP sockets when you use TCP sockets to perform liveness probes.
     * 
     */
    private final @Nullable Integer livenessProbeTcpSocketPort;
    /**
     * @return The timeout period for the liveness probe. Unit: seconds. Default value: 1. Minimum value: 1.
     * 
     */
    private final @Nullable Integer livenessProbeTimeoutSeconds;
    /**
     * @return The amount of memory resources allocated to the container group.
     * 
     */
    private final @Nullable Double memory;
    /**
     * @return The name of the volume.
     * 
     */
    private final @Nullable String name;
    /**
     * @return The structure of port. See Block_port_in_init_container below
     * for details.
     * 
     */
    private final @Nullable List<EciScalingConfigurationContainerPort> ports;
    /**
     * @return Commands that you want to run in containers when you use the CLI to perform readiness probes.
     * 
     */
    private final @Nullable List<String> readinessProbeExecCommands;
    /**
     * @return The minimum number of consecutive failures for the readiness probe to be considered failed after having been successful. Default value: 3.
     * 
     */
    private final @Nullable Integer readinessProbeFailureThreshold;
    /**
     * @return The path to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
     * 
     */
    private final @Nullable String readinessProbeHttpGetPath;
    /**
     * @return The port to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
     * 
     */
    private final @Nullable Integer readinessProbeHttpGetPort;
    /**
     * @return The protocol type of HTTP GET requests when you use HTTP requests for readiness probes. Valid values: HTTP and HTTPS.
     * 
     */
    private final @Nullable String readinessProbeHttpGetScheme;
    /**
     * @return The number of seconds after container N has started before readiness probes are initiated.
     * 
     */
    private final @Nullable Integer readinessProbeInitialDelaySeconds;
    /**
     * @return The interval at which the readiness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
     * 
     */
    private final @Nullable Integer readinessProbePeriodSeconds;
    /**
     * @return The minimum number of consecutive successes for the readiness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
     * 
     */
    private final @Nullable Integer readinessProbeSuccessThreshold;
    /**
     * @return The port detected by Transmission Control Protocol (TCP) sockets when you use TCP sockets to perform readiness probes.
     * 
     */
    private final @Nullable Integer readinessProbeTcpSocketPort;
    /**
     * @return The timeout period for the readiness probe. Unit: seconds. Default value: 1. Minimum value: 1.
     * 
     */
    private final @Nullable Integer readinessProbeTimeoutSeconds;
    /**
     * @return The structure of volumeMounts.
     * See Block_volume_mount_in_init_container below for details.
     * See Block_volume_mount_in_container below for details.
     * 
     */
    private final @Nullable List<EciScalingConfigurationContainerVolumeMount> volumeMounts;
    /**
     * @return The working directory of the container.
     * 
     */
    private final @Nullable String workingDir;

    @CustomType.Constructor
    private EciScalingConfigurationContainer(
        @CustomType.Parameter("args") @Nullable List<String> args,
        @CustomType.Parameter("commands") @Nullable List<String> commands,
        @CustomType.Parameter("cpu") @Nullable Double cpu,
        @CustomType.Parameter("environmentVars") @Nullable List<EciScalingConfigurationContainerEnvironmentVar> environmentVars,
        @CustomType.Parameter("gpu") @Nullable Integer gpu,
        @CustomType.Parameter("image") @Nullable String image,
        @CustomType.Parameter("imagePullPolicy") @Nullable String imagePullPolicy,
        @CustomType.Parameter("livenessProbeExecCommands") @Nullable List<String> livenessProbeExecCommands,
        @CustomType.Parameter("livenessProbeFailureThreshold") @Nullable Integer livenessProbeFailureThreshold,
        @CustomType.Parameter("livenessProbeHttpGetPath") @Nullable String livenessProbeHttpGetPath,
        @CustomType.Parameter("livenessProbeHttpGetPort") @Nullable Integer livenessProbeHttpGetPort,
        @CustomType.Parameter("livenessProbeHttpGetScheme") @Nullable String livenessProbeHttpGetScheme,
        @CustomType.Parameter("livenessProbeInitialDelaySeconds") @Nullable Integer livenessProbeInitialDelaySeconds,
        @CustomType.Parameter("livenessProbePeriodSeconds") @Nullable Integer livenessProbePeriodSeconds,
        @CustomType.Parameter("livenessProbeSuccessThreshold") @Nullable Integer livenessProbeSuccessThreshold,
        @CustomType.Parameter("livenessProbeTcpSocketPort") @Nullable Integer livenessProbeTcpSocketPort,
        @CustomType.Parameter("livenessProbeTimeoutSeconds") @Nullable Integer livenessProbeTimeoutSeconds,
        @CustomType.Parameter("memory") @Nullable Double memory,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("ports") @Nullable List<EciScalingConfigurationContainerPort> ports,
        @CustomType.Parameter("readinessProbeExecCommands") @Nullable List<String> readinessProbeExecCommands,
        @CustomType.Parameter("readinessProbeFailureThreshold") @Nullable Integer readinessProbeFailureThreshold,
        @CustomType.Parameter("readinessProbeHttpGetPath") @Nullable String readinessProbeHttpGetPath,
        @CustomType.Parameter("readinessProbeHttpGetPort") @Nullable Integer readinessProbeHttpGetPort,
        @CustomType.Parameter("readinessProbeHttpGetScheme") @Nullable String readinessProbeHttpGetScheme,
        @CustomType.Parameter("readinessProbeInitialDelaySeconds") @Nullable Integer readinessProbeInitialDelaySeconds,
        @CustomType.Parameter("readinessProbePeriodSeconds") @Nullable Integer readinessProbePeriodSeconds,
        @CustomType.Parameter("readinessProbeSuccessThreshold") @Nullable Integer readinessProbeSuccessThreshold,
        @CustomType.Parameter("readinessProbeTcpSocketPort") @Nullable Integer readinessProbeTcpSocketPort,
        @CustomType.Parameter("readinessProbeTimeoutSeconds") @Nullable Integer readinessProbeTimeoutSeconds,
        @CustomType.Parameter("volumeMounts") @Nullable List<EciScalingConfigurationContainerVolumeMount> volumeMounts,
        @CustomType.Parameter("workingDir") @Nullable String workingDir) {
        this.args = args;
        this.commands = commands;
        this.cpu = cpu;
        this.environmentVars = environmentVars;
        this.gpu = gpu;
        this.image = image;
        this.imagePullPolicy = imagePullPolicy;
        this.livenessProbeExecCommands = livenessProbeExecCommands;
        this.livenessProbeFailureThreshold = livenessProbeFailureThreshold;
        this.livenessProbeHttpGetPath = livenessProbeHttpGetPath;
        this.livenessProbeHttpGetPort = livenessProbeHttpGetPort;
        this.livenessProbeHttpGetScheme = livenessProbeHttpGetScheme;
        this.livenessProbeInitialDelaySeconds = livenessProbeInitialDelaySeconds;
        this.livenessProbePeriodSeconds = livenessProbePeriodSeconds;
        this.livenessProbeSuccessThreshold = livenessProbeSuccessThreshold;
        this.livenessProbeTcpSocketPort = livenessProbeTcpSocketPort;
        this.livenessProbeTimeoutSeconds = livenessProbeTimeoutSeconds;
        this.memory = memory;
        this.name = name;
        this.ports = ports;
        this.readinessProbeExecCommands = readinessProbeExecCommands;
        this.readinessProbeFailureThreshold = readinessProbeFailureThreshold;
        this.readinessProbeHttpGetPath = readinessProbeHttpGetPath;
        this.readinessProbeHttpGetPort = readinessProbeHttpGetPort;
        this.readinessProbeHttpGetScheme = readinessProbeHttpGetScheme;
        this.readinessProbeInitialDelaySeconds = readinessProbeInitialDelaySeconds;
        this.readinessProbePeriodSeconds = readinessProbePeriodSeconds;
        this.readinessProbeSuccessThreshold = readinessProbeSuccessThreshold;
        this.readinessProbeTcpSocketPort = readinessProbeTcpSocketPort;
        this.readinessProbeTimeoutSeconds = readinessProbeTimeoutSeconds;
        this.volumeMounts = volumeMounts;
        this.workingDir = workingDir;
    }

    /**
     * @return The arguments passed to the commands.
     * 
     */
    public List<String> args() {
        return this.args == null ? List.of() : this.args;
    }
    /**
     * @return The commands run by the init container.
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return The amount of CPU resources allocated to the container group.
     * 
     */
    public Optional<Double> cpu() {
        return Optional.ofNullable(this.cpu);
    }
    /**
     * @return The structure of environmentVars.
     * See Block_environment_var_in_init_container below for details.
     * See Block_environment_var_in_container below for details.
     * 
     */
    public List<EciScalingConfigurationContainerEnvironmentVar> environmentVars() {
        return this.environmentVars == null ? List.of() : this.environmentVars;
    }
    /**
     * @return The number GPUs.
     * 
     */
    public Optional<Integer> gpu() {
        return Optional.ofNullable(this.gpu);
    }
    /**
     * @return The image of the container.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return The restart policy of the image.
     * 
     */
    public Optional<String> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }
    /**
     * @return Commands that you want to run in containers when you use the CLI to perform liveness probes.
     * 
     */
    public List<String> livenessProbeExecCommands() {
        return this.livenessProbeExecCommands == null ? List.of() : this.livenessProbeExecCommands;
    }
    /**
     * @return The minimum number of consecutive failures for the liveness probe to be considered failed after having been successful. Default value: 3.
     * 
     */
    public Optional<Integer> livenessProbeFailureThreshold() {
        return Optional.ofNullable(this.livenessProbeFailureThreshold);
    }
    /**
     * @return The path to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
     * 
     */
    public Optional<String> livenessProbeHttpGetPath() {
        return Optional.ofNullable(this.livenessProbeHttpGetPath);
    }
    /**
     * @return The port to which HTTP GET requests are sent when you use HTTP requests to perform liveness probes.
     * 
     */
    public Optional<Integer> livenessProbeHttpGetPort() {
        return Optional.ofNullable(this.livenessProbeHttpGetPort);
    }
    /**
     * @return The protocol type of HTTP GET requests when you use HTTP requests for liveness probes.Valid values:HTTP and HTTPS.
     * 
     */
    public Optional<String> livenessProbeHttpGetScheme() {
        return Optional.ofNullable(this.livenessProbeHttpGetScheme);
    }
    /**
     * @return The number of seconds after container has started before liveness probes are initiated.
     * 
     */
    public Optional<Integer> livenessProbeInitialDelaySeconds() {
        return Optional.ofNullable(this.livenessProbeInitialDelaySeconds);
    }
    /**
     * @return The interval at which the liveness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
     * 
     */
    public Optional<Integer> livenessProbePeriodSeconds() {
        return Optional.ofNullable(this.livenessProbePeriodSeconds);
    }
    /**
     * @return The minimum number of consecutive successes for the liveness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
     * 
     */
    public Optional<Integer> livenessProbeSuccessThreshold() {
        return Optional.ofNullable(this.livenessProbeSuccessThreshold);
    }
    /**
     * @return The port detected by TCP sockets when you use TCP sockets to perform liveness probes.
     * 
     */
    public Optional<Integer> livenessProbeTcpSocketPort() {
        return Optional.ofNullable(this.livenessProbeTcpSocketPort);
    }
    /**
     * @return The timeout period for the liveness probe. Unit: seconds. Default value: 1. Minimum value: 1.
     * 
     */
    public Optional<Integer> livenessProbeTimeoutSeconds() {
        return Optional.ofNullable(this.livenessProbeTimeoutSeconds);
    }
    /**
     * @return The amount of memory resources allocated to the container group.
     * 
     */
    public Optional<Double> memory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * @return The name of the volume.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The structure of port. See Block_port_in_init_container below
     * for details.
     * 
     */
    public List<EciScalingConfigurationContainerPort> ports() {
        return this.ports == null ? List.of() : this.ports;
    }
    /**
     * @return Commands that you want to run in containers when you use the CLI to perform readiness probes.
     * 
     */
    public List<String> readinessProbeExecCommands() {
        return this.readinessProbeExecCommands == null ? List.of() : this.readinessProbeExecCommands;
    }
    /**
     * @return The minimum number of consecutive failures for the readiness probe to be considered failed after having been successful. Default value: 3.
     * 
     */
    public Optional<Integer> readinessProbeFailureThreshold() {
        return Optional.ofNullable(this.readinessProbeFailureThreshold);
    }
    /**
     * @return The path to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
     * 
     */
    public Optional<String> readinessProbeHttpGetPath() {
        return Optional.ofNullable(this.readinessProbeHttpGetPath);
    }
    /**
     * @return The port to which HTTP GET requests are sent when you use HTTP requests to perform readiness probes.
     * 
     */
    public Optional<Integer> readinessProbeHttpGetPort() {
        return Optional.ofNullable(this.readinessProbeHttpGetPort);
    }
    /**
     * @return The protocol type of HTTP GET requests when you use HTTP requests for readiness probes. Valid values: HTTP and HTTPS.
     * 
     */
    public Optional<String> readinessProbeHttpGetScheme() {
        return Optional.ofNullable(this.readinessProbeHttpGetScheme);
    }
    /**
     * @return The number of seconds after container N has started before readiness probes are initiated.
     * 
     */
    public Optional<Integer> readinessProbeInitialDelaySeconds() {
        return Optional.ofNullable(this.readinessProbeInitialDelaySeconds);
    }
    /**
     * @return The interval at which the readiness probe is performed. Unit: seconds. Default value: 10. Minimum value: 1.
     * 
     */
    public Optional<Integer> readinessProbePeriodSeconds() {
        return Optional.ofNullable(this.readinessProbePeriodSeconds);
    }
    /**
     * @return The minimum number of consecutive successes for the readiness probe to be considered successful after having failed. Default value: 1. Set the value to 1.
     * 
     */
    public Optional<Integer> readinessProbeSuccessThreshold() {
        return Optional.ofNullable(this.readinessProbeSuccessThreshold);
    }
    /**
     * @return The port detected by Transmission Control Protocol (TCP) sockets when you use TCP sockets to perform readiness probes.
     * 
     */
    public Optional<Integer> readinessProbeTcpSocketPort() {
        return Optional.ofNullable(this.readinessProbeTcpSocketPort);
    }
    /**
     * @return The timeout period for the readiness probe. Unit: seconds. Default value: 1. Minimum value: 1.
     * 
     */
    public Optional<Integer> readinessProbeTimeoutSeconds() {
        return Optional.ofNullable(this.readinessProbeTimeoutSeconds);
    }
    /**
     * @return The structure of volumeMounts.
     * See Block_volume_mount_in_init_container below for details.
     * See Block_volume_mount_in_container below for details.
     * 
     */
    public List<EciScalingConfigurationContainerVolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }
    /**
     * @return The working directory of the container.
     * 
     */
    public Optional<String> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EciScalingConfigurationContainer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> args;
        private @Nullable List<String> commands;
        private @Nullable Double cpu;
        private @Nullable List<EciScalingConfigurationContainerEnvironmentVar> environmentVars;
        private @Nullable Integer gpu;
        private @Nullable String image;
        private @Nullable String imagePullPolicy;
        private @Nullable List<String> livenessProbeExecCommands;
        private @Nullable Integer livenessProbeFailureThreshold;
        private @Nullable String livenessProbeHttpGetPath;
        private @Nullable Integer livenessProbeHttpGetPort;
        private @Nullable String livenessProbeHttpGetScheme;
        private @Nullable Integer livenessProbeInitialDelaySeconds;
        private @Nullable Integer livenessProbePeriodSeconds;
        private @Nullable Integer livenessProbeSuccessThreshold;
        private @Nullable Integer livenessProbeTcpSocketPort;
        private @Nullable Integer livenessProbeTimeoutSeconds;
        private @Nullable Double memory;
        private @Nullable String name;
        private @Nullable List<EciScalingConfigurationContainerPort> ports;
        private @Nullable List<String> readinessProbeExecCommands;
        private @Nullable Integer readinessProbeFailureThreshold;
        private @Nullable String readinessProbeHttpGetPath;
        private @Nullable Integer readinessProbeHttpGetPort;
        private @Nullable String readinessProbeHttpGetScheme;
        private @Nullable Integer readinessProbeInitialDelaySeconds;
        private @Nullable Integer readinessProbePeriodSeconds;
        private @Nullable Integer readinessProbeSuccessThreshold;
        private @Nullable Integer readinessProbeTcpSocketPort;
        private @Nullable Integer readinessProbeTimeoutSeconds;
        private @Nullable List<EciScalingConfigurationContainerVolumeMount> volumeMounts;
        private @Nullable String workingDir;

        public Builder() {
    	      // Empty
        }

        public Builder(EciScalingConfigurationContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.commands = defaults.commands;
    	      this.cpu = defaults.cpu;
    	      this.environmentVars = defaults.environmentVars;
    	      this.gpu = defaults.gpu;
    	      this.image = defaults.image;
    	      this.imagePullPolicy = defaults.imagePullPolicy;
    	      this.livenessProbeExecCommands = defaults.livenessProbeExecCommands;
    	      this.livenessProbeFailureThreshold = defaults.livenessProbeFailureThreshold;
    	      this.livenessProbeHttpGetPath = defaults.livenessProbeHttpGetPath;
    	      this.livenessProbeHttpGetPort = defaults.livenessProbeHttpGetPort;
    	      this.livenessProbeHttpGetScheme = defaults.livenessProbeHttpGetScheme;
    	      this.livenessProbeInitialDelaySeconds = defaults.livenessProbeInitialDelaySeconds;
    	      this.livenessProbePeriodSeconds = defaults.livenessProbePeriodSeconds;
    	      this.livenessProbeSuccessThreshold = defaults.livenessProbeSuccessThreshold;
    	      this.livenessProbeTcpSocketPort = defaults.livenessProbeTcpSocketPort;
    	      this.livenessProbeTimeoutSeconds = defaults.livenessProbeTimeoutSeconds;
    	      this.memory = defaults.memory;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.readinessProbeExecCommands = defaults.readinessProbeExecCommands;
    	      this.readinessProbeFailureThreshold = defaults.readinessProbeFailureThreshold;
    	      this.readinessProbeHttpGetPath = defaults.readinessProbeHttpGetPath;
    	      this.readinessProbeHttpGetPort = defaults.readinessProbeHttpGetPort;
    	      this.readinessProbeHttpGetScheme = defaults.readinessProbeHttpGetScheme;
    	      this.readinessProbeInitialDelaySeconds = defaults.readinessProbeInitialDelaySeconds;
    	      this.readinessProbePeriodSeconds = defaults.readinessProbePeriodSeconds;
    	      this.readinessProbeSuccessThreshold = defaults.readinessProbeSuccessThreshold;
    	      this.readinessProbeTcpSocketPort = defaults.readinessProbeTcpSocketPort;
    	      this.readinessProbeTimeoutSeconds = defaults.readinessProbeTimeoutSeconds;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDir = defaults.workingDir;
        }

        public Builder args(@Nullable List<String> args) {
            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        public Builder commands(@Nullable List<String> commands) {
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        public Builder cpu(@Nullable Double cpu) {
            this.cpu = cpu;
            return this;
        }
        public Builder environmentVars(@Nullable List<EciScalingConfigurationContainerEnvironmentVar> environmentVars) {
            this.environmentVars = environmentVars;
            return this;
        }
        public Builder environmentVars(EciScalingConfigurationContainerEnvironmentVar... environmentVars) {
            return environmentVars(List.of(environmentVars));
        }
        public Builder gpu(@Nullable Integer gpu) {
            this.gpu = gpu;
            return this;
        }
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        public Builder imagePullPolicy(@Nullable String imagePullPolicy) {
            this.imagePullPolicy = imagePullPolicy;
            return this;
        }
        public Builder livenessProbeExecCommands(@Nullable List<String> livenessProbeExecCommands) {
            this.livenessProbeExecCommands = livenessProbeExecCommands;
            return this;
        }
        public Builder livenessProbeExecCommands(String... livenessProbeExecCommands) {
            return livenessProbeExecCommands(List.of(livenessProbeExecCommands));
        }
        public Builder livenessProbeFailureThreshold(@Nullable Integer livenessProbeFailureThreshold) {
            this.livenessProbeFailureThreshold = livenessProbeFailureThreshold;
            return this;
        }
        public Builder livenessProbeHttpGetPath(@Nullable String livenessProbeHttpGetPath) {
            this.livenessProbeHttpGetPath = livenessProbeHttpGetPath;
            return this;
        }
        public Builder livenessProbeHttpGetPort(@Nullable Integer livenessProbeHttpGetPort) {
            this.livenessProbeHttpGetPort = livenessProbeHttpGetPort;
            return this;
        }
        public Builder livenessProbeHttpGetScheme(@Nullable String livenessProbeHttpGetScheme) {
            this.livenessProbeHttpGetScheme = livenessProbeHttpGetScheme;
            return this;
        }
        public Builder livenessProbeInitialDelaySeconds(@Nullable Integer livenessProbeInitialDelaySeconds) {
            this.livenessProbeInitialDelaySeconds = livenessProbeInitialDelaySeconds;
            return this;
        }
        public Builder livenessProbePeriodSeconds(@Nullable Integer livenessProbePeriodSeconds) {
            this.livenessProbePeriodSeconds = livenessProbePeriodSeconds;
            return this;
        }
        public Builder livenessProbeSuccessThreshold(@Nullable Integer livenessProbeSuccessThreshold) {
            this.livenessProbeSuccessThreshold = livenessProbeSuccessThreshold;
            return this;
        }
        public Builder livenessProbeTcpSocketPort(@Nullable Integer livenessProbeTcpSocketPort) {
            this.livenessProbeTcpSocketPort = livenessProbeTcpSocketPort;
            return this;
        }
        public Builder livenessProbeTimeoutSeconds(@Nullable Integer livenessProbeTimeoutSeconds) {
            this.livenessProbeTimeoutSeconds = livenessProbeTimeoutSeconds;
            return this;
        }
        public Builder memory(@Nullable Double memory) {
            this.memory = memory;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder ports(@Nullable List<EciScalingConfigurationContainerPort> ports) {
            this.ports = ports;
            return this;
        }
        public Builder ports(EciScalingConfigurationContainerPort... ports) {
            return ports(List.of(ports));
        }
        public Builder readinessProbeExecCommands(@Nullable List<String> readinessProbeExecCommands) {
            this.readinessProbeExecCommands = readinessProbeExecCommands;
            return this;
        }
        public Builder readinessProbeExecCommands(String... readinessProbeExecCommands) {
            return readinessProbeExecCommands(List.of(readinessProbeExecCommands));
        }
        public Builder readinessProbeFailureThreshold(@Nullable Integer readinessProbeFailureThreshold) {
            this.readinessProbeFailureThreshold = readinessProbeFailureThreshold;
            return this;
        }
        public Builder readinessProbeHttpGetPath(@Nullable String readinessProbeHttpGetPath) {
            this.readinessProbeHttpGetPath = readinessProbeHttpGetPath;
            return this;
        }
        public Builder readinessProbeHttpGetPort(@Nullable Integer readinessProbeHttpGetPort) {
            this.readinessProbeHttpGetPort = readinessProbeHttpGetPort;
            return this;
        }
        public Builder readinessProbeHttpGetScheme(@Nullable String readinessProbeHttpGetScheme) {
            this.readinessProbeHttpGetScheme = readinessProbeHttpGetScheme;
            return this;
        }
        public Builder readinessProbeInitialDelaySeconds(@Nullable Integer readinessProbeInitialDelaySeconds) {
            this.readinessProbeInitialDelaySeconds = readinessProbeInitialDelaySeconds;
            return this;
        }
        public Builder readinessProbePeriodSeconds(@Nullable Integer readinessProbePeriodSeconds) {
            this.readinessProbePeriodSeconds = readinessProbePeriodSeconds;
            return this;
        }
        public Builder readinessProbeSuccessThreshold(@Nullable Integer readinessProbeSuccessThreshold) {
            this.readinessProbeSuccessThreshold = readinessProbeSuccessThreshold;
            return this;
        }
        public Builder readinessProbeTcpSocketPort(@Nullable Integer readinessProbeTcpSocketPort) {
            this.readinessProbeTcpSocketPort = readinessProbeTcpSocketPort;
            return this;
        }
        public Builder readinessProbeTimeoutSeconds(@Nullable Integer readinessProbeTimeoutSeconds) {
            this.readinessProbeTimeoutSeconds = readinessProbeTimeoutSeconds;
            return this;
        }
        public Builder volumeMounts(@Nullable List<EciScalingConfigurationContainerVolumeMount> volumeMounts) {
            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(EciScalingConfigurationContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        public Builder workingDir(@Nullable String workingDir) {
            this.workingDir = workingDir;
            return this;
        }        public EciScalingConfigurationContainer build() {
            return new EciScalingConfigurationContainer(args, commands, cpu, environmentVars, gpu, image, imagePullPolicy, livenessProbeExecCommands, livenessProbeFailureThreshold, livenessProbeHttpGetPath, livenessProbeHttpGetPort, livenessProbeHttpGetScheme, livenessProbeInitialDelaySeconds, livenessProbePeriodSeconds, livenessProbeSuccessThreshold, livenessProbeTcpSocketPort, livenessProbeTimeoutSeconds, memory, name, ports, readinessProbeExecCommands, readinessProbeFailureThreshold, readinessProbeHttpGetPath, readinessProbeHttpGetPort, readinessProbeHttpGetScheme, readinessProbeInitialDelaySeconds, readinessProbePeriodSeconds, readinessProbeSuccessThreshold, readinessProbeTcpSocketPort, readinessProbeTimeoutSeconds, volumeMounts, workingDir);
        }
    }
}
