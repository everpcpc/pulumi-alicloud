// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;


public final class RdsCloneDbInstanceServerlessConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RdsCloneDbInstanceServerlessConfigArgs Empty = new RdsCloneDbInstanceServerlessConfigArgs();

    /**
     * Specifies whether to enable the smart startup and stop feature for the serverless instance. After the smart startup and stop feature is enabled, if no connections to the instance are established within 10 minutes, the instance is stopped. After a connection is established to the instance, the instance is automatically woken up. Valid values:
     * - true: enables the feature.
     * - false: disables the feature. This is the default value.
     * 
     */
    @Import(name="autoPause", required=true)
    private Output<Boolean> autoPause;

    /**
     * @return Specifies whether to enable the smart startup and stop feature for the serverless instance. After the smart startup and stop feature is enabled, if no connections to the instance are established within 10 minutes, the instance is stopped. After a connection is established to the instance, the instance is automatically woken up. Valid values:
     * - true: enables the feature.
     * - false: disables the feature. This is the default value.
     * 
     */
    public Output<Boolean> autoPause() {
        return this.autoPause;
    }

    /**
     * The maximum number of RDS Capacity Units (RCUs). Valid values: 0.5 to 8. The value of this parameter must be greater than or equal to the value of the `min_capacity` parameter.
     * 
     */
    @Import(name="maxCapacity", required=true)
    private Output<Double> maxCapacity;

    /**
     * @return The maximum number of RDS Capacity Units (RCUs). Valid values: 0.5 to 8. The value of this parameter must be greater than or equal to the value of the `min_capacity` parameter.
     * 
     */
    public Output<Double> maxCapacity() {
        return this.maxCapacity;
    }

    /**
     * The minimum number of RCUs. Valid values: 0.5 to 8. The value of this parameter must be less than or equal to the value of the `max_capacity` parameter.
     * 
     */
    @Import(name="minCapacity", required=true)
    private Output<Double> minCapacity;

    /**
     * @return The minimum number of RCUs. Valid values: 0.5 to 8. The value of this parameter must be less than or equal to the value of the `max_capacity` parameter.
     * 
     */
    public Output<Double> minCapacity() {
        return this.minCapacity;
    }

    /**
     * Specifies whether to enable the forced scaling feature for the serverless instance. If you set this parameter to true, a transient connection that lasts approximately 1 minute occurs during the forced scaling process. Process with caution. The RCU scaling for a serverless instance immediately takes effect. In some cases, such as the execution of large transactions, the scaling does not immediately take effect. In this case, you can enable this feature to forcefully scale the RCUs of the instance. Valid values:
     * - true: enables the feature.
     * - false: disables the feature. This is the default value.
     * 
     */
    @Import(name="switchForce", required=true)
    private Output<Boolean> switchForce;

    /**
     * @return Specifies whether to enable the forced scaling feature for the serverless instance. If you set this parameter to true, a transient connection that lasts approximately 1 minute occurs during the forced scaling process. Process with caution. The RCU scaling for a serverless instance immediately takes effect. In some cases, such as the execution of large transactions, the scaling does not immediately take effect. In this case, you can enable this feature to forcefully scale the RCUs of the instance. Valid values:
     * - true: enables the feature.
     * - false: disables the feature. This is the default value.
     * 
     */
    public Output<Boolean> switchForce() {
        return this.switchForce;
    }

    private RdsCloneDbInstanceServerlessConfigArgs() {}

    private RdsCloneDbInstanceServerlessConfigArgs(RdsCloneDbInstanceServerlessConfigArgs $) {
        this.autoPause = $.autoPause;
        this.maxCapacity = $.maxCapacity;
        this.minCapacity = $.minCapacity;
        this.switchForce = $.switchForce;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RdsCloneDbInstanceServerlessConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RdsCloneDbInstanceServerlessConfigArgs $;

        public Builder() {
            $ = new RdsCloneDbInstanceServerlessConfigArgs();
        }

        public Builder(RdsCloneDbInstanceServerlessConfigArgs defaults) {
            $ = new RdsCloneDbInstanceServerlessConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoPause Specifies whether to enable the smart startup and stop feature for the serverless instance. After the smart startup and stop feature is enabled, if no connections to the instance are established within 10 minutes, the instance is stopped. After a connection is established to the instance, the instance is automatically woken up. Valid values:
         * - true: enables the feature.
         * - false: disables the feature. This is the default value.
         * 
         * @return builder
         * 
         */
        public Builder autoPause(Output<Boolean> autoPause) {
            $.autoPause = autoPause;
            return this;
        }

        /**
         * @param autoPause Specifies whether to enable the smart startup and stop feature for the serverless instance. After the smart startup and stop feature is enabled, if no connections to the instance are established within 10 minutes, the instance is stopped. After a connection is established to the instance, the instance is automatically woken up. Valid values:
         * - true: enables the feature.
         * - false: disables the feature. This is the default value.
         * 
         * @return builder
         * 
         */
        public Builder autoPause(Boolean autoPause) {
            return autoPause(Output.of(autoPause));
        }

        /**
         * @param maxCapacity The maximum number of RDS Capacity Units (RCUs). Valid values: 0.5 to 8. The value of this parameter must be greater than or equal to the value of the `min_capacity` parameter.
         * 
         * @return builder
         * 
         */
        public Builder maxCapacity(Output<Double> maxCapacity) {
            $.maxCapacity = maxCapacity;
            return this;
        }

        /**
         * @param maxCapacity The maximum number of RDS Capacity Units (RCUs). Valid values: 0.5 to 8. The value of this parameter must be greater than or equal to the value of the `min_capacity` parameter.
         * 
         * @return builder
         * 
         */
        public Builder maxCapacity(Double maxCapacity) {
            return maxCapacity(Output.of(maxCapacity));
        }

        /**
         * @param minCapacity The minimum number of RCUs. Valid values: 0.5 to 8. The value of this parameter must be less than or equal to the value of the `max_capacity` parameter.
         * 
         * @return builder
         * 
         */
        public Builder minCapacity(Output<Double> minCapacity) {
            $.minCapacity = minCapacity;
            return this;
        }

        /**
         * @param minCapacity The minimum number of RCUs. Valid values: 0.5 to 8. The value of this parameter must be less than or equal to the value of the `max_capacity` parameter.
         * 
         * @return builder
         * 
         */
        public Builder minCapacity(Double minCapacity) {
            return minCapacity(Output.of(minCapacity));
        }

        /**
         * @param switchForce Specifies whether to enable the forced scaling feature for the serverless instance. If you set this parameter to true, a transient connection that lasts approximately 1 minute occurs during the forced scaling process. Process with caution. The RCU scaling for a serverless instance immediately takes effect. In some cases, such as the execution of large transactions, the scaling does not immediately take effect. In this case, you can enable this feature to forcefully scale the RCUs of the instance. Valid values:
         * - true: enables the feature.
         * - false: disables the feature. This is the default value.
         * 
         * @return builder
         * 
         */
        public Builder switchForce(Output<Boolean> switchForce) {
            $.switchForce = switchForce;
            return this;
        }

        /**
         * @param switchForce Specifies whether to enable the forced scaling feature for the serverless instance. If you set this parameter to true, a transient connection that lasts approximately 1 minute occurs during the forced scaling process. Process with caution. The RCU scaling for a serverless instance immediately takes effect. In some cases, such as the execution of large transactions, the scaling does not immediately take effect. In this case, you can enable this feature to forcefully scale the RCUs of the instance. Valid values:
         * - true: enables the feature.
         * - false: disables the feature. This is the default value.
         * 
         * @return builder
         * 
         */
        public Builder switchForce(Boolean switchForce) {
            return switchForce(Output.of(switchForce));
        }

        public RdsCloneDbInstanceServerlessConfigArgs build() {
            $.autoPause = Objects.requireNonNull($.autoPause, "expected parameter 'autoPause' to be non-null");
            $.maxCapacity = Objects.requireNonNull($.maxCapacity, "expected parameter 'maxCapacity' to be non-null");
            $.minCapacity = Objects.requireNonNull($.minCapacity, "expected parameter 'minCapacity' to be non-null");
            $.switchForce = Objects.requireNonNull($.switchForce, "expected parameter 'switchForce' to be non-null");
            return $;
        }
    }

}
