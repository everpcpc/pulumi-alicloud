// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.alicloud.vpc.inputs.PrefixListEntryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrefixListState extends com.pulumi.resources.ResourceArgs {

    public static final PrefixListState Empty = new PrefixListState();

    /**
     * The CIDR address block list of the prefix list. See the following `Block entrys`.
     * 
     */
    @Import(name="entrys")
    private @Nullable Output<List<PrefixListEntryArgs>> entrys;

    /**
     * @return The CIDR address block list of the prefix list. See the following `Block entrys`.
     * 
     */
    public Optional<Output<List<PrefixListEntryArgs>>> entrys() {
        return Optional.ofNullable(this.entrys);
    }

    /**
     * The IP version of the prefix list. Valid values: `IPV4`, `IPV6`.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return The IP version of the prefix list. Valid values: `IPV4`, `IPV6`.
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The maximum number of entries for CIDR address blocks in the prefix list.
     * 
     */
    @Import(name="maxEntries")
    private @Nullable Output<Integer> maxEntries;

    /**
     * @return The maximum number of entries for CIDR address blocks in the prefix list.
     * 
     */
    public Optional<Output<Integer>> maxEntries() {
        return Optional.ofNullable(this.maxEntries);
    }

    /**
     * The description of the prefix list. It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="prefixListDescription")
    private @Nullable Output<String> prefixListDescription;

    /**
     * @return The description of the prefix list. It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> prefixListDescription() {
        return Optional.ofNullable(this.prefixListDescription);
    }

    /**
     * The name of the prefix list. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
     * 
     */
    @Import(name="prefixListName")
    private @Nullable Output<String> prefixListName;

    /**
     * @return The name of the prefix list. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
     * 
     */
    public Optional<Output<String>> prefixListName() {
        return Optional.ofNullable(this.prefixListName);
    }

    private PrefixListState() {}

    private PrefixListState(PrefixListState $) {
        this.entrys = $.entrys;
        this.ipVersion = $.ipVersion;
        this.maxEntries = $.maxEntries;
        this.prefixListDescription = $.prefixListDescription;
        this.prefixListName = $.prefixListName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrefixListState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrefixListState $;

        public Builder() {
            $ = new PrefixListState();
        }

        public Builder(PrefixListState defaults) {
            $ = new PrefixListState(Objects.requireNonNull(defaults));
        }

        /**
         * @param entrys The CIDR address block list of the prefix list. See the following `Block entrys`.
         * 
         * @return builder
         * 
         */
        public Builder entrys(@Nullable Output<List<PrefixListEntryArgs>> entrys) {
            $.entrys = entrys;
            return this;
        }

        /**
         * @param entrys The CIDR address block list of the prefix list. See the following `Block entrys`.
         * 
         * @return builder
         * 
         */
        public Builder entrys(List<PrefixListEntryArgs> entrys) {
            return entrys(Output.of(entrys));
        }

        /**
         * @param entrys The CIDR address block list of the prefix list. See the following `Block entrys`.
         * 
         * @return builder
         * 
         */
        public Builder entrys(PrefixListEntryArgs... entrys) {
            return entrys(List.of(entrys));
        }

        /**
         * @param ipVersion The IP version of the prefix list. Valid values: `IPV4`, `IPV6`.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version of the prefix list. Valid values: `IPV4`, `IPV6`.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param maxEntries The maximum number of entries for CIDR address blocks in the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder maxEntries(@Nullable Output<Integer> maxEntries) {
            $.maxEntries = maxEntries;
            return this;
        }

        /**
         * @param maxEntries The maximum number of entries for CIDR address blocks in the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder maxEntries(Integer maxEntries) {
            return maxEntries(Output.of(maxEntries));
        }

        /**
         * @param prefixListDescription The description of the prefix list. It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder prefixListDescription(@Nullable Output<String> prefixListDescription) {
            $.prefixListDescription = prefixListDescription;
            return this;
        }

        /**
         * @param prefixListDescription The description of the prefix list. It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder prefixListDescription(String prefixListDescription) {
            return prefixListDescription(Output.of(prefixListDescription));
        }

        /**
         * @param prefixListName The name of the prefix list. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder prefixListName(@Nullable Output<String> prefixListName) {
            $.prefixListName = prefixListName;
            return this;
        }

        /**
         * @param prefixListName The name of the prefix list. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder prefixListName(String prefixListName) {
            return prefixListName(Output.of(prefixListName));
        }

        public PrefixListState build() {
            return $;
        }
    }

}
