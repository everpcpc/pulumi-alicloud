// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBgpPeersPeer {
    /**
     * @return The authentication key of the BGP group.
     * 
     */
    private final String authKey;
    /**
     * @return The BFD hop count.
     * 
     */
    private final Integer bfdMultiHop;
    /**
     * @return The ID of the BGP group.
     * 
     */
    private final String bgpGroupId;
    /**
     * @return The ID of the BGP neighbor.
     * 
     */
    private final String bgpPeerId;
    /**
     * @return The name of the BGP neighbor.
     * 
     */
    private final String bgpPeerName;
    /**
     * @return The status of the BGP connection.
     * 
     */
    private final String bgpStatus;
    /**
     * @return The description of the BGP group.
     * 
     */
    private final String description;
    /**
     * @return Indicates whether the Bidirectional Forwarding Detection (BFD) protocol is enabled.
     * 
     */
    private final Boolean enableBfd;
    /**
     * @return The hold time.
     * 
     */
    private final String hold;
    /**
     * @return The ID of the Bgp Peer.
     * 
     */
    private final String id;
    /**
     * @return The IP version.
     * 
     */
    private final String ipVersion;
    /**
     * @return Indicates whether a fake AS number is used.
     * 
     */
    private final Boolean isFake;
    /**
     * @return The keepalive time.
     * 
     */
    private final String keepalive;
    /**
     * @return The AS number of the device on the Alibaba Cloud side.
     * 
     */
    private final String localAsn;
    /**
     * @return The autonomous system (AS) number of the BGP peer.
     * 
     */
    private final String peerAsn;
    /**
     * @return The IP address of the BGP neighbor.
     * 
     */
    private final String peerIpAddress;
    /**
     * @return The limit on routes.
     * 
     */
    private final String routeLimit;
    /**
     * @return The ID of the router.
     * 
     */
    private final String routerId;
    /**
     * @return The status of the BGP peer.
     * 
     */
    private final String status;

    @CustomType.Constructor
    private GetBgpPeersPeer(
        @CustomType.Parameter("authKey") String authKey,
        @CustomType.Parameter("bfdMultiHop") Integer bfdMultiHop,
        @CustomType.Parameter("bgpGroupId") String bgpGroupId,
        @CustomType.Parameter("bgpPeerId") String bgpPeerId,
        @CustomType.Parameter("bgpPeerName") String bgpPeerName,
        @CustomType.Parameter("bgpStatus") String bgpStatus,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enableBfd") Boolean enableBfd,
        @CustomType.Parameter("hold") String hold,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ipVersion") String ipVersion,
        @CustomType.Parameter("isFake") Boolean isFake,
        @CustomType.Parameter("keepalive") String keepalive,
        @CustomType.Parameter("localAsn") String localAsn,
        @CustomType.Parameter("peerAsn") String peerAsn,
        @CustomType.Parameter("peerIpAddress") String peerIpAddress,
        @CustomType.Parameter("routeLimit") String routeLimit,
        @CustomType.Parameter("routerId") String routerId,
        @CustomType.Parameter("status") String status) {
        this.authKey = authKey;
        this.bfdMultiHop = bfdMultiHop;
        this.bgpGroupId = bgpGroupId;
        this.bgpPeerId = bgpPeerId;
        this.bgpPeerName = bgpPeerName;
        this.bgpStatus = bgpStatus;
        this.description = description;
        this.enableBfd = enableBfd;
        this.hold = hold;
        this.id = id;
        this.ipVersion = ipVersion;
        this.isFake = isFake;
        this.keepalive = keepalive;
        this.localAsn = localAsn;
        this.peerAsn = peerAsn;
        this.peerIpAddress = peerIpAddress;
        this.routeLimit = routeLimit;
        this.routerId = routerId;
        this.status = status;
    }

    /**
     * @return The authentication key of the BGP group.
     * 
     */
    public String authKey() {
        return this.authKey;
    }
    /**
     * @return The BFD hop count.
     * 
     */
    public Integer bfdMultiHop() {
        return this.bfdMultiHop;
    }
    /**
     * @return The ID of the BGP group.
     * 
     */
    public String bgpGroupId() {
        return this.bgpGroupId;
    }
    /**
     * @return The ID of the BGP neighbor.
     * 
     */
    public String bgpPeerId() {
        return this.bgpPeerId;
    }
    /**
     * @return The name of the BGP neighbor.
     * 
     */
    public String bgpPeerName() {
        return this.bgpPeerName;
    }
    /**
     * @return The status of the BGP connection.
     * 
     */
    public String bgpStatus() {
        return this.bgpStatus;
    }
    /**
     * @return The description of the BGP group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Indicates whether the Bidirectional Forwarding Detection (BFD) protocol is enabled.
     * 
     */
    public Boolean enableBfd() {
        return this.enableBfd;
    }
    /**
     * @return The hold time.
     * 
     */
    public String hold() {
        return this.hold;
    }
    /**
     * @return The ID of the Bgp Peer.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The IP version.
     * 
     */
    public String ipVersion() {
        return this.ipVersion;
    }
    /**
     * @return Indicates whether a fake AS number is used.
     * 
     */
    public Boolean isFake() {
        return this.isFake;
    }
    /**
     * @return The keepalive time.
     * 
     */
    public String keepalive() {
        return this.keepalive;
    }
    /**
     * @return The AS number of the device on the Alibaba Cloud side.
     * 
     */
    public String localAsn() {
        return this.localAsn;
    }
    /**
     * @return The autonomous system (AS) number of the BGP peer.
     * 
     */
    public String peerAsn() {
        return this.peerAsn;
    }
    /**
     * @return The IP address of the BGP neighbor.
     * 
     */
    public String peerIpAddress() {
        return this.peerIpAddress;
    }
    /**
     * @return The limit on routes.
     * 
     */
    public String routeLimit() {
        return this.routeLimit;
    }
    /**
     * @return The ID of the router.
     * 
     */
    public String routerId() {
        return this.routerId;
    }
    /**
     * @return The status of the BGP peer.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBgpPeersPeer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String authKey;
        private Integer bfdMultiHop;
        private String bgpGroupId;
        private String bgpPeerId;
        private String bgpPeerName;
        private String bgpStatus;
        private String description;
        private Boolean enableBfd;
        private String hold;
        private String id;
        private String ipVersion;
        private Boolean isFake;
        private String keepalive;
        private String localAsn;
        private String peerAsn;
        private String peerIpAddress;
        private String routeLimit;
        private String routerId;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBgpPeersPeer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authKey = defaults.authKey;
    	      this.bfdMultiHop = defaults.bfdMultiHop;
    	      this.bgpGroupId = defaults.bgpGroupId;
    	      this.bgpPeerId = defaults.bgpPeerId;
    	      this.bgpPeerName = defaults.bgpPeerName;
    	      this.bgpStatus = defaults.bgpStatus;
    	      this.description = defaults.description;
    	      this.enableBfd = defaults.enableBfd;
    	      this.hold = defaults.hold;
    	      this.id = defaults.id;
    	      this.ipVersion = defaults.ipVersion;
    	      this.isFake = defaults.isFake;
    	      this.keepalive = defaults.keepalive;
    	      this.localAsn = defaults.localAsn;
    	      this.peerAsn = defaults.peerAsn;
    	      this.peerIpAddress = defaults.peerIpAddress;
    	      this.routeLimit = defaults.routeLimit;
    	      this.routerId = defaults.routerId;
    	      this.status = defaults.status;
        }

        public Builder authKey(String authKey) {
            this.authKey = Objects.requireNonNull(authKey);
            return this;
        }
        public Builder bfdMultiHop(Integer bfdMultiHop) {
            this.bfdMultiHop = Objects.requireNonNull(bfdMultiHop);
            return this;
        }
        public Builder bgpGroupId(String bgpGroupId) {
            this.bgpGroupId = Objects.requireNonNull(bgpGroupId);
            return this;
        }
        public Builder bgpPeerId(String bgpPeerId) {
            this.bgpPeerId = Objects.requireNonNull(bgpPeerId);
            return this;
        }
        public Builder bgpPeerName(String bgpPeerName) {
            this.bgpPeerName = Objects.requireNonNull(bgpPeerName);
            return this;
        }
        public Builder bgpStatus(String bgpStatus) {
            this.bgpStatus = Objects.requireNonNull(bgpStatus);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enableBfd(Boolean enableBfd) {
            this.enableBfd = Objects.requireNonNull(enableBfd);
            return this;
        }
        public Builder hold(String hold) {
            this.hold = Objects.requireNonNull(hold);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ipVersion(String ipVersion) {
            this.ipVersion = Objects.requireNonNull(ipVersion);
            return this;
        }
        public Builder isFake(Boolean isFake) {
            this.isFake = Objects.requireNonNull(isFake);
            return this;
        }
        public Builder keepalive(String keepalive) {
            this.keepalive = Objects.requireNonNull(keepalive);
            return this;
        }
        public Builder localAsn(String localAsn) {
            this.localAsn = Objects.requireNonNull(localAsn);
            return this;
        }
        public Builder peerAsn(String peerAsn) {
            this.peerAsn = Objects.requireNonNull(peerAsn);
            return this;
        }
        public Builder peerIpAddress(String peerIpAddress) {
            this.peerIpAddress = Objects.requireNonNull(peerIpAddress);
            return this;
        }
        public Builder routeLimit(String routeLimit) {
            this.routeLimit = Objects.requireNonNull(routeLimit);
            return this;
        }
        public Builder routerId(String routerId) {
            this.routerId = Objects.requireNonNull(routerId);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetBgpPeersPeer build() {
            return new GetBgpPeersPeer(authKey, bfdMultiHop, bgpGroupId, bgpPeerId, bgpPeerName, bgpStatus, description, enableBfd, hold, id, ipVersion, isFake, keepalive, localAsn, peerAsn, peerIpAddress, routeLimit, routerId, status);
        }
    }
}
