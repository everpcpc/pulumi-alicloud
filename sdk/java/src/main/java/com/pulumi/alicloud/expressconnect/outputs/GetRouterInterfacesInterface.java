// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRouterInterfacesInterface {
    /**
     * @return The access point ID to which the VBR belongs.
     * 
     */
    private final String accessPointId;
    /**
     * @return The bandwidth of the resource.
     * 
     */
    private final Integer bandwidth;
    /**
     * @return The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
     * 
     */
    private final String businessStatus;
    /**
     * @return The connected time of the resource.
     * 
     */
    private final String connectedTime;
    /**
     * @return The creation time of the resource
     * 
     */
    private final String createTime;
    /**
     * @return The cross border of the resource.
     * 
     */
    private final Boolean crossBorder;
    /**
     * @return The description of the router interface.
     * 
     */
    private final String description;
    /**
     * @return The end time of the resource.
     * 
     */
    private final String endTime;
    /**
     * @return The has reservation data of the resource.
     * 
     */
    private final String hasReservationData;
    /**
     * @return The hc rate of the resource.
     * 
     */
    private final Integer hcRate;
    /**
     * @return The hc threshold of the resource.
     * 
     */
    private final String hcThreshold;
    /**
     * @return The health check source IP address, must be an unused IP within the local VPC.
     * 
     */
    private final String healthCheckSourceIp;
    /**
     * @return The IP address for health screening purposes.
     * 
     */
    private final String healthCheckTargetIp;
    private final String id;
    /**
     * @return The Access point ID to which the other end belongs.
     * 
     */
    private final String oppositeAccessPointId;
    /**
     * @return The opposite bandwidth of the router on the other side.
     * 
     */
    private final Integer oppositeBandwidth;
    /**
     * @return The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
     * 
     */
    private final String oppositeInterfaceBusinessStatus;
    /**
     * @return The Interface ID of the router at the other end.
     * 
     */
    private final String oppositeInterfaceId;
    /**
     * @return The AliCloud account ID of the owner of the router interface on the other end.
     * 
     */
    private final String oppositeInterfaceOwnerId;
    /**
     * @return The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
     * 
     */
    private final String oppositeInterfaceSpec;
    /**
     * @return The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
     * 
     */
    private final String oppositeInterfaceStatus;
    /**
     * @return The geographical ID of the location of the receiving end of the connection.
     * 
     */
    private final String oppositeRegionId;
    /**
     * @return The id of the router at the other end.
     * 
     */
    private final String oppositeRouterId;
    /**
     * @return The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
     * 
     */
    private final String oppositeRouterType;
    /**
     * @return The opposite vpc instance id of the router on the other side.
     * 
     */
    private final String oppositeVpcInstanceId;
    /**
     * @return The payment methods for router interfaces. Valid Values: `PrePaid`, `PostPaid`.
     * 
     */
    private final String paymentType;
    /**
     * @return The reservation active time of the resource.
     * 
     */
    private final String reservationActiveTime;
    /**
     * @return The reservation bandwidth of the resource.
     * 
     */
    private final String reservationBandwidth;
    /**
     * @return The reservation internet charge type of the resource.
     * 
     */
    private final String reservationInternetChargeType;
    /**
     * @return The reservation order type of the resource.
     * 
     */
    private final String reservationOrderType;
    /**
     * @return The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
     * 
     */
    private final String role;
    /**
     * @return The router id associated with the router interface.
     * 
     */
    private final String routerId;
    /**
     * @return The first ID of the resource.
     * 
     */
    private final String routerInterfaceId;
    /**
     * @return The name of the resource.
     * 
     */
    private final String routerInterfaceName;
    /**
     * @return The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
     * 
     */
    private final String routerType;
    /**
     * @return The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
     * 
     */
    private final String spec;
    /**
     * @return The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
     * 
     */
    private final String status;
    /**
     * @return The vpc instance id of the resource.
     * 
     */
    private final String vpcInstanceId;

    @CustomType.Constructor
    private GetRouterInterfacesInterface(
        @CustomType.Parameter("accessPointId") String accessPointId,
        @CustomType.Parameter("bandwidth") Integer bandwidth,
        @CustomType.Parameter("businessStatus") String businessStatus,
        @CustomType.Parameter("connectedTime") String connectedTime,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("crossBorder") Boolean crossBorder,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("endTime") String endTime,
        @CustomType.Parameter("hasReservationData") String hasReservationData,
        @CustomType.Parameter("hcRate") Integer hcRate,
        @CustomType.Parameter("hcThreshold") String hcThreshold,
        @CustomType.Parameter("healthCheckSourceIp") String healthCheckSourceIp,
        @CustomType.Parameter("healthCheckTargetIp") String healthCheckTargetIp,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("oppositeAccessPointId") String oppositeAccessPointId,
        @CustomType.Parameter("oppositeBandwidth") Integer oppositeBandwidth,
        @CustomType.Parameter("oppositeInterfaceBusinessStatus") String oppositeInterfaceBusinessStatus,
        @CustomType.Parameter("oppositeInterfaceId") String oppositeInterfaceId,
        @CustomType.Parameter("oppositeInterfaceOwnerId") String oppositeInterfaceOwnerId,
        @CustomType.Parameter("oppositeInterfaceSpec") String oppositeInterfaceSpec,
        @CustomType.Parameter("oppositeInterfaceStatus") String oppositeInterfaceStatus,
        @CustomType.Parameter("oppositeRegionId") String oppositeRegionId,
        @CustomType.Parameter("oppositeRouterId") String oppositeRouterId,
        @CustomType.Parameter("oppositeRouterType") String oppositeRouterType,
        @CustomType.Parameter("oppositeVpcInstanceId") String oppositeVpcInstanceId,
        @CustomType.Parameter("paymentType") String paymentType,
        @CustomType.Parameter("reservationActiveTime") String reservationActiveTime,
        @CustomType.Parameter("reservationBandwidth") String reservationBandwidth,
        @CustomType.Parameter("reservationInternetChargeType") String reservationInternetChargeType,
        @CustomType.Parameter("reservationOrderType") String reservationOrderType,
        @CustomType.Parameter("role") String role,
        @CustomType.Parameter("routerId") String routerId,
        @CustomType.Parameter("routerInterfaceId") String routerInterfaceId,
        @CustomType.Parameter("routerInterfaceName") String routerInterfaceName,
        @CustomType.Parameter("routerType") String routerType,
        @CustomType.Parameter("spec") String spec,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("vpcInstanceId") String vpcInstanceId) {
        this.accessPointId = accessPointId;
        this.bandwidth = bandwidth;
        this.businessStatus = businessStatus;
        this.connectedTime = connectedTime;
        this.createTime = createTime;
        this.crossBorder = crossBorder;
        this.description = description;
        this.endTime = endTime;
        this.hasReservationData = hasReservationData;
        this.hcRate = hcRate;
        this.hcThreshold = hcThreshold;
        this.healthCheckSourceIp = healthCheckSourceIp;
        this.healthCheckTargetIp = healthCheckTargetIp;
        this.id = id;
        this.oppositeAccessPointId = oppositeAccessPointId;
        this.oppositeBandwidth = oppositeBandwidth;
        this.oppositeInterfaceBusinessStatus = oppositeInterfaceBusinessStatus;
        this.oppositeInterfaceId = oppositeInterfaceId;
        this.oppositeInterfaceOwnerId = oppositeInterfaceOwnerId;
        this.oppositeInterfaceSpec = oppositeInterfaceSpec;
        this.oppositeInterfaceStatus = oppositeInterfaceStatus;
        this.oppositeRegionId = oppositeRegionId;
        this.oppositeRouterId = oppositeRouterId;
        this.oppositeRouterType = oppositeRouterType;
        this.oppositeVpcInstanceId = oppositeVpcInstanceId;
        this.paymentType = paymentType;
        this.reservationActiveTime = reservationActiveTime;
        this.reservationBandwidth = reservationBandwidth;
        this.reservationInternetChargeType = reservationInternetChargeType;
        this.reservationOrderType = reservationOrderType;
        this.role = role;
        this.routerId = routerId;
        this.routerInterfaceId = routerInterfaceId;
        this.routerInterfaceName = routerInterfaceName;
        this.routerType = routerType;
        this.spec = spec;
        this.status = status;
        this.vpcInstanceId = vpcInstanceId;
    }

    /**
     * @return The access point ID to which the VBR belongs.
     * 
     */
    public String accessPointId() {
        return this.accessPointId;
    }
    /**
     * @return The bandwidth of the resource.
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
     * 
     */
    public String businessStatus() {
        return this.businessStatus;
    }
    /**
     * @return The connected time of the resource.
     * 
     */
    public String connectedTime() {
        return this.connectedTime;
    }
    /**
     * @return The creation time of the resource
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The cross border of the resource.
     * 
     */
    public Boolean crossBorder() {
        return this.crossBorder;
    }
    /**
     * @return The description of the router interface.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The end time of the resource.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return The has reservation data of the resource.
     * 
     */
    public String hasReservationData() {
        return this.hasReservationData;
    }
    /**
     * @return The hc rate of the resource.
     * 
     */
    public Integer hcRate() {
        return this.hcRate;
    }
    /**
     * @return The hc threshold of the resource.
     * 
     */
    public String hcThreshold() {
        return this.hcThreshold;
    }
    /**
     * @return The health check source IP address, must be an unused IP within the local VPC.
     * 
     */
    public String healthCheckSourceIp() {
        return this.healthCheckSourceIp;
    }
    /**
     * @return The IP address for health screening purposes.
     * 
     */
    public String healthCheckTargetIp() {
        return this.healthCheckTargetIp;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The Access point ID to which the other end belongs.
     * 
     */
    public String oppositeAccessPointId() {
        return this.oppositeAccessPointId;
    }
    /**
     * @return The opposite bandwidth of the router on the other side.
     * 
     */
    public Integer oppositeBandwidth() {
        return this.oppositeBandwidth;
    }
    /**
     * @return The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
     * 
     */
    public String oppositeInterfaceBusinessStatus() {
        return this.oppositeInterfaceBusinessStatus;
    }
    /**
     * @return The Interface ID of the router at the other end.
     * 
     */
    public String oppositeInterfaceId() {
        return this.oppositeInterfaceId;
    }
    /**
     * @return The AliCloud account ID of the owner of the router interface on the other end.
     * 
     */
    public String oppositeInterfaceOwnerId() {
        return this.oppositeInterfaceOwnerId;
    }
    /**
     * @return The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
     * 
     */
    public String oppositeInterfaceSpec() {
        return this.oppositeInterfaceSpec;
    }
    /**
     * @return The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
     * 
     */
    public String oppositeInterfaceStatus() {
        return this.oppositeInterfaceStatus;
    }
    /**
     * @return The geographical ID of the location of the receiving end of the connection.
     * 
     */
    public String oppositeRegionId() {
        return this.oppositeRegionId;
    }
    /**
     * @return The id of the router at the other end.
     * 
     */
    public String oppositeRouterId() {
        return this.oppositeRouterId;
    }
    /**
     * @return The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
     * 
     */
    public String oppositeRouterType() {
        return this.oppositeRouterType;
    }
    /**
     * @return The opposite vpc instance id of the router on the other side.
     * 
     */
    public String oppositeVpcInstanceId() {
        return this.oppositeVpcInstanceId;
    }
    /**
     * @return The payment methods for router interfaces. Valid Values: `PrePaid`, `PostPaid`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The reservation active time of the resource.
     * 
     */
    public String reservationActiveTime() {
        return this.reservationActiveTime;
    }
    /**
     * @return The reservation bandwidth of the resource.
     * 
     */
    public String reservationBandwidth() {
        return this.reservationBandwidth;
    }
    /**
     * @return The reservation internet charge type of the resource.
     * 
     */
    public String reservationInternetChargeType() {
        return this.reservationInternetChargeType;
    }
    /**
     * @return The reservation order type of the resource.
     * 
     */
    public String reservationOrderType() {
        return this.reservationOrderType;
    }
    /**
     * @return The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The router id associated with the router interface.
     * 
     */
    public String routerId() {
        return this.routerId;
    }
    /**
     * @return The first ID of the resource.
     * 
     */
    public String routerInterfaceId() {
        return this.routerInterfaceId;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String routerInterfaceName() {
        return this.routerInterfaceName;
    }
    /**
     * @return The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
     * 
     */
    public String routerType() {
        return this.routerType;
    }
    /**
     * @return The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
     * 
     */
    public String spec() {
        return this.spec;
    }
    /**
     * @return The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The vpc instance id of the resource.
     * 
     */
    public String vpcInstanceId() {
        return this.vpcInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouterInterfacesInterface defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessPointId;
        private Integer bandwidth;
        private String businessStatus;
        private String connectedTime;
        private String createTime;
        private Boolean crossBorder;
        private String description;
        private String endTime;
        private String hasReservationData;
        private Integer hcRate;
        private String hcThreshold;
        private String healthCheckSourceIp;
        private String healthCheckTargetIp;
        private String id;
        private String oppositeAccessPointId;
        private Integer oppositeBandwidth;
        private String oppositeInterfaceBusinessStatus;
        private String oppositeInterfaceId;
        private String oppositeInterfaceOwnerId;
        private String oppositeInterfaceSpec;
        private String oppositeInterfaceStatus;
        private String oppositeRegionId;
        private String oppositeRouterId;
        private String oppositeRouterType;
        private String oppositeVpcInstanceId;
        private String paymentType;
        private String reservationActiveTime;
        private String reservationBandwidth;
        private String reservationInternetChargeType;
        private String reservationOrderType;
        private String role;
        private String routerId;
        private String routerInterfaceId;
        private String routerInterfaceName;
        private String routerType;
        private String spec;
        private String status;
        private String vpcInstanceId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRouterInterfacesInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPointId = defaults.accessPointId;
    	      this.bandwidth = defaults.bandwidth;
    	      this.businessStatus = defaults.businessStatus;
    	      this.connectedTime = defaults.connectedTime;
    	      this.createTime = defaults.createTime;
    	      this.crossBorder = defaults.crossBorder;
    	      this.description = defaults.description;
    	      this.endTime = defaults.endTime;
    	      this.hasReservationData = defaults.hasReservationData;
    	      this.hcRate = defaults.hcRate;
    	      this.hcThreshold = defaults.hcThreshold;
    	      this.healthCheckSourceIp = defaults.healthCheckSourceIp;
    	      this.healthCheckTargetIp = defaults.healthCheckTargetIp;
    	      this.id = defaults.id;
    	      this.oppositeAccessPointId = defaults.oppositeAccessPointId;
    	      this.oppositeBandwidth = defaults.oppositeBandwidth;
    	      this.oppositeInterfaceBusinessStatus = defaults.oppositeInterfaceBusinessStatus;
    	      this.oppositeInterfaceId = defaults.oppositeInterfaceId;
    	      this.oppositeInterfaceOwnerId = defaults.oppositeInterfaceOwnerId;
    	      this.oppositeInterfaceSpec = defaults.oppositeInterfaceSpec;
    	      this.oppositeInterfaceStatus = defaults.oppositeInterfaceStatus;
    	      this.oppositeRegionId = defaults.oppositeRegionId;
    	      this.oppositeRouterId = defaults.oppositeRouterId;
    	      this.oppositeRouterType = defaults.oppositeRouterType;
    	      this.oppositeVpcInstanceId = defaults.oppositeVpcInstanceId;
    	      this.paymentType = defaults.paymentType;
    	      this.reservationActiveTime = defaults.reservationActiveTime;
    	      this.reservationBandwidth = defaults.reservationBandwidth;
    	      this.reservationInternetChargeType = defaults.reservationInternetChargeType;
    	      this.reservationOrderType = defaults.reservationOrderType;
    	      this.role = defaults.role;
    	      this.routerId = defaults.routerId;
    	      this.routerInterfaceId = defaults.routerInterfaceId;
    	      this.routerInterfaceName = defaults.routerInterfaceName;
    	      this.routerType = defaults.routerType;
    	      this.spec = defaults.spec;
    	      this.status = defaults.status;
    	      this.vpcInstanceId = defaults.vpcInstanceId;
        }

        public Builder accessPointId(String accessPointId) {
            this.accessPointId = Objects.requireNonNull(accessPointId);
            return this;
        }
        public Builder bandwidth(Integer bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        public Builder businessStatus(String businessStatus) {
            this.businessStatus = Objects.requireNonNull(businessStatus);
            return this;
        }
        public Builder connectedTime(String connectedTime) {
            this.connectedTime = Objects.requireNonNull(connectedTime);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder crossBorder(Boolean crossBorder) {
            this.crossBorder = Objects.requireNonNull(crossBorder);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        public Builder hasReservationData(String hasReservationData) {
            this.hasReservationData = Objects.requireNonNull(hasReservationData);
            return this;
        }
        public Builder hcRate(Integer hcRate) {
            this.hcRate = Objects.requireNonNull(hcRate);
            return this;
        }
        public Builder hcThreshold(String hcThreshold) {
            this.hcThreshold = Objects.requireNonNull(hcThreshold);
            return this;
        }
        public Builder healthCheckSourceIp(String healthCheckSourceIp) {
            this.healthCheckSourceIp = Objects.requireNonNull(healthCheckSourceIp);
            return this;
        }
        public Builder healthCheckTargetIp(String healthCheckTargetIp) {
            this.healthCheckTargetIp = Objects.requireNonNull(healthCheckTargetIp);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder oppositeAccessPointId(String oppositeAccessPointId) {
            this.oppositeAccessPointId = Objects.requireNonNull(oppositeAccessPointId);
            return this;
        }
        public Builder oppositeBandwidth(Integer oppositeBandwidth) {
            this.oppositeBandwidth = Objects.requireNonNull(oppositeBandwidth);
            return this;
        }
        public Builder oppositeInterfaceBusinessStatus(String oppositeInterfaceBusinessStatus) {
            this.oppositeInterfaceBusinessStatus = Objects.requireNonNull(oppositeInterfaceBusinessStatus);
            return this;
        }
        public Builder oppositeInterfaceId(String oppositeInterfaceId) {
            this.oppositeInterfaceId = Objects.requireNonNull(oppositeInterfaceId);
            return this;
        }
        public Builder oppositeInterfaceOwnerId(String oppositeInterfaceOwnerId) {
            this.oppositeInterfaceOwnerId = Objects.requireNonNull(oppositeInterfaceOwnerId);
            return this;
        }
        public Builder oppositeInterfaceSpec(String oppositeInterfaceSpec) {
            this.oppositeInterfaceSpec = Objects.requireNonNull(oppositeInterfaceSpec);
            return this;
        }
        public Builder oppositeInterfaceStatus(String oppositeInterfaceStatus) {
            this.oppositeInterfaceStatus = Objects.requireNonNull(oppositeInterfaceStatus);
            return this;
        }
        public Builder oppositeRegionId(String oppositeRegionId) {
            this.oppositeRegionId = Objects.requireNonNull(oppositeRegionId);
            return this;
        }
        public Builder oppositeRouterId(String oppositeRouterId) {
            this.oppositeRouterId = Objects.requireNonNull(oppositeRouterId);
            return this;
        }
        public Builder oppositeRouterType(String oppositeRouterType) {
            this.oppositeRouterType = Objects.requireNonNull(oppositeRouterType);
            return this;
        }
        public Builder oppositeVpcInstanceId(String oppositeVpcInstanceId) {
            this.oppositeVpcInstanceId = Objects.requireNonNull(oppositeVpcInstanceId);
            return this;
        }
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        public Builder reservationActiveTime(String reservationActiveTime) {
            this.reservationActiveTime = Objects.requireNonNull(reservationActiveTime);
            return this;
        }
        public Builder reservationBandwidth(String reservationBandwidth) {
            this.reservationBandwidth = Objects.requireNonNull(reservationBandwidth);
            return this;
        }
        public Builder reservationInternetChargeType(String reservationInternetChargeType) {
            this.reservationInternetChargeType = Objects.requireNonNull(reservationInternetChargeType);
            return this;
        }
        public Builder reservationOrderType(String reservationOrderType) {
            this.reservationOrderType = Objects.requireNonNull(reservationOrderType);
            return this;
        }
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder routerId(String routerId) {
            this.routerId = Objects.requireNonNull(routerId);
            return this;
        }
        public Builder routerInterfaceId(String routerInterfaceId) {
            this.routerInterfaceId = Objects.requireNonNull(routerInterfaceId);
            return this;
        }
        public Builder routerInterfaceName(String routerInterfaceName) {
            this.routerInterfaceName = Objects.requireNonNull(routerInterfaceName);
            return this;
        }
        public Builder routerType(String routerType) {
            this.routerType = Objects.requireNonNull(routerType);
            return this;
        }
        public Builder spec(String spec) {
            this.spec = Objects.requireNonNull(spec);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder vpcInstanceId(String vpcInstanceId) {
            this.vpcInstanceId = Objects.requireNonNull(vpcInstanceId);
            return this;
        }        public GetRouterInterfacesInterface build() {
            return new GetRouterInterfacesInterface(accessPointId, bandwidth, businessStatus, connectedTime, createTime, crossBorder, description, endTime, hasReservationData, hcRate, hcThreshold, healthCheckSourceIp, healthCheckTargetIp, id, oppositeAccessPointId, oppositeBandwidth, oppositeInterfaceBusinessStatus, oppositeInterfaceId, oppositeInterfaceOwnerId, oppositeInterfaceSpec, oppositeInterfaceStatus, oppositeRegionId, oppositeRouterId, oppositeRouterType, oppositeVpcInstanceId, paymentType, reservationActiveTime, reservationBandwidth, reservationInternetChargeType, reservationOrderType, role, routerId, routerInterfaceId, routerInterfaceName, routerType, spec, status, vpcInstanceId);
        }
    }
}
