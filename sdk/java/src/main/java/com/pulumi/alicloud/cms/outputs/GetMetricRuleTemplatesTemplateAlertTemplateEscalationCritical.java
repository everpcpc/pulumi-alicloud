// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMetricRuleTemplatesTemplateAlertTemplateEscalationCritical {
    /**
     * @return The comparison operator of the threshold for warn-level alerts.Valid values: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanOrEqualToThreshold`, `LessThanThreshold`, `NotEqualToThreshold`, `GreaterThanYesterday`, `LessThanYesterday`, `GreaterThanLastWeek`, `LessThanLastWeek`, `GreaterThanLastPeriod`, `LessThanLastPeriod`.
     * 
     */
    private final String comparisonOperator;
    /**
     * @return The statistical aggregation method for warn-level alerts.
     * 
     */
    private final String statistics;
    /**
     * @return The threshold for warn-level alerts.
     * 
     */
    private final String threshold;
    /**
     * @return The consecutive number of times for which the metric value is measured before a warn-level
     * alert is triggered.
     * 
     */
    private final String times;

    @CustomType.Constructor
    private GetMetricRuleTemplatesTemplateAlertTemplateEscalationCritical(
        @CustomType.Parameter("comparisonOperator") String comparisonOperator,
        @CustomType.Parameter("statistics") String statistics,
        @CustomType.Parameter("threshold") String threshold,
        @CustomType.Parameter("times") String times) {
        this.comparisonOperator = comparisonOperator;
        this.statistics = statistics;
        this.threshold = threshold;
        this.times = times;
    }

    /**
     * @return The comparison operator of the threshold for warn-level alerts.Valid values: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanOrEqualToThreshold`, `LessThanThreshold`, `NotEqualToThreshold`, `GreaterThanYesterday`, `LessThanYesterday`, `GreaterThanLastWeek`, `LessThanLastWeek`, `GreaterThanLastPeriod`, `LessThanLastPeriod`.
     * 
     */
    public String comparisonOperator() {
        return this.comparisonOperator;
    }
    /**
     * @return The statistical aggregation method for warn-level alerts.
     * 
     */
    public String statistics() {
        return this.statistics;
    }
    /**
     * @return The threshold for warn-level alerts.
     * 
     */
    public String threshold() {
        return this.threshold;
    }
    /**
     * @return The consecutive number of times for which the metric value is measured before a warn-level
     * alert is triggered.
     * 
     */
    public String times() {
        return this.times;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricRuleTemplatesTemplateAlertTemplateEscalationCritical defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String comparisonOperator;
        private String statistics;
        private String threshold;
        private String times;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMetricRuleTemplatesTemplateAlertTemplateEscalationCritical defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.statistics = defaults.statistics;
    	      this.threshold = defaults.threshold;
    	      this.times = defaults.times;
        }

        public Builder comparisonOperator(String comparisonOperator) {
            this.comparisonOperator = Objects.requireNonNull(comparisonOperator);
            return this;
        }
        public Builder statistics(String statistics) {
            this.statistics = Objects.requireNonNull(statistics);
            return this;
        }
        public Builder threshold(String threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public Builder times(String times) {
            this.times = Objects.requireNonNull(times);
            return this;
        }        public GetMetricRuleTemplatesTemplateAlertTemplateEscalationCritical build() {
            return new GetMetricRuleTemplatesTemplateAlertTemplateEscalationCritical(comparisonOperator, statistics, threshold, times);
        }
    }
}
