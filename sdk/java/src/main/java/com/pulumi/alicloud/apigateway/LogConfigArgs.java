// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class LogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogConfigArgs Empty = new LogConfigArgs();

    /**
     * The type the of log. Valid values: `PROVIDER`.
     * 
     */
    @Import(name="logType", required=true)
    private Output<String> logType;

    /**
     * @return The type the of log. Valid values: `PROVIDER`.
     * 
     */
    public Output<String> logType() {
        return this.logType;
    }

    /**
     * The name of the Log Store.
     * 
     */
    @Import(name="slsLogStore", required=true)
    private Output<String> slsLogStore;

    /**
     * @return The name of the Log Store.
     * 
     */
    public Output<String> slsLogStore() {
        return this.slsLogStore;
    }

    /**
     * The name of the Project.
     * 
     */
    @Import(name="slsProject", required=true)
    private Output<String> slsProject;

    /**
     * @return The name of the Project.
     * 
     */
    public Output<String> slsProject() {
        return this.slsProject;
    }

    private LogConfigArgs() {}

    private LogConfigArgs(LogConfigArgs $) {
        this.logType = $.logType;
        this.slsLogStore = $.slsLogStore;
        this.slsProject = $.slsProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogConfigArgs $;

        public Builder() {
            $ = new LogConfigArgs();
        }

        public Builder(LogConfigArgs defaults) {
            $ = new LogConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logType The type the of log. Valid values: `PROVIDER`.
         * 
         * @return builder
         * 
         */
        public Builder logType(Output<String> logType) {
            $.logType = logType;
            return this;
        }

        /**
         * @param logType The type the of log. Valid values: `PROVIDER`.
         * 
         * @return builder
         * 
         */
        public Builder logType(String logType) {
            return logType(Output.of(logType));
        }

        /**
         * @param slsLogStore The name of the Log Store.
         * 
         * @return builder
         * 
         */
        public Builder slsLogStore(Output<String> slsLogStore) {
            $.slsLogStore = slsLogStore;
            return this;
        }

        /**
         * @param slsLogStore The name of the Log Store.
         * 
         * @return builder
         * 
         */
        public Builder slsLogStore(String slsLogStore) {
            return slsLogStore(Output.of(slsLogStore));
        }

        /**
         * @param slsProject The name of the Project.
         * 
         * @return builder
         * 
         */
        public Builder slsProject(Output<String> slsProject) {
            $.slsProject = slsProject;
            return this;
        }

        /**
         * @param slsProject The name of the Project.
         * 
         * @return builder
         * 
         */
        public Builder slsProject(String slsProject) {
            return slsProject(Output.of(slsProject));
        }

        public LogConfigArgs build() {
            $.logType = Objects.requireNonNull($.logType, "expected parameter 'logType' to be non-null");
            $.slsLogStore = Objects.requireNonNull($.slsLogStore, "expected parameter 'slsLogStore' to be non-null");
            $.slsProject = Objects.requireNonNull($.slsProject, "expected parameter 'slsProject' to be non-null");
            return $;
        }
    }

}
