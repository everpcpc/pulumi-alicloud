// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.brain.outputs;

import com.pulumi.alicloud.brain.outputs.GetIndustrialPidLoopsLoop;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIndustrialPidLoopsResult {
    private final @Nullable Boolean enableDetails;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final List<String> ids;
    private final List<GetIndustrialPidLoopsLoop> loops;
    private final @Nullable String nameRegex;
    private final List<String> names;
    private final @Nullable String outputFile;
    private final @Nullable String pidLoopName;
    private final String pidProjectId;
    private final @Nullable String status;

    @CustomType.Constructor
    private GetIndustrialPidLoopsResult(
        @CustomType.Parameter("enableDetails") @Nullable Boolean enableDetails,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ids") List<String> ids,
        @CustomType.Parameter("loops") List<GetIndustrialPidLoopsLoop> loops,
        @CustomType.Parameter("nameRegex") @Nullable String nameRegex,
        @CustomType.Parameter("names") List<String> names,
        @CustomType.Parameter("outputFile") @Nullable String outputFile,
        @CustomType.Parameter("pidLoopName") @Nullable String pidLoopName,
        @CustomType.Parameter("pidProjectId") String pidProjectId,
        @CustomType.Parameter("status") @Nullable String status) {
        this.enableDetails = enableDetails;
        this.id = id;
        this.ids = ids;
        this.loops = loops;
        this.nameRegex = nameRegex;
        this.names = names;
        this.outputFile = outputFile;
        this.pidLoopName = pidLoopName;
        this.pidProjectId = pidProjectId;
        this.status = status;
    }

    public Optional<Boolean> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ids() {
        return this.ids;
    }
    public List<GetIndustrialPidLoopsLoop> loops() {
        return this.loops;
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    public List<String> names() {
        return this.names;
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<String> pidLoopName() {
        return Optional.ofNullable(this.pidLoopName);
    }
    public String pidProjectId() {
        return this.pidProjectId;
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIndustrialPidLoopsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean enableDetails;
        private String id;
        private List<String> ids;
        private List<GetIndustrialPidLoopsLoop> loops;
        private @Nullable String nameRegex;
        private List<String> names;
        private @Nullable String outputFile;
        private @Nullable String pidLoopName;
        private String pidProjectId;
        private @Nullable String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetIndustrialPidLoopsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableDetails = defaults.enableDetails;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.loops = defaults.loops;
    	      this.nameRegex = defaults.nameRegex;
    	      this.names = defaults.names;
    	      this.outputFile = defaults.outputFile;
    	      this.pidLoopName = defaults.pidLoopName;
    	      this.pidProjectId = defaults.pidProjectId;
    	      this.status = defaults.status;
        }

        public Builder enableDetails(@Nullable Boolean enableDetails) {
            this.enableDetails = enableDetails;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ids(List<String> ids) {
            this.ids = Objects.requireNonNull(ids);
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        public Builder loops(List<GetIndustrialPidLoopsLoop> loops) {
            this.loops = Objects.requireNonNull(loops);
            return this;
        }
        public Builder loops(GetIndustrialPidLoopsLoop... loops) {
            return loops(List.of(loops));
        }
        public Builder nameRegex(@Nullable String nameRegex) {
            this.nameRegex = nameRegex;
            return this;
        }
        public Builder names(List<String> names) {
            this.names = Objects.requireNonNull(names);
            return this;
        }
        public Builder names(String... names) {
            return names(List.of(names));
        }
        public Builder outputFile(@Nullable String outputFile) {
            this.outputFile = outputFile;
            return this;
        }
        public Builder pidLoopName(@Nullable String pidLoopName) {
            this.pidLoopName = pidLoopName;
            return this;
        }
        public Builder pidProjectId(String pidProjectId) {
            this.pidProjectId = Objects.requireNonNull(pidProjectId);
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }        public GetIndustrialPidLoopsResult build() {
            return new GetIndustrialPidLoopsResult(enableDetails, id, ids, loops, nameRegex, names, outputFile, pidLoopName, pidProjectId, status);
        }
    }
}
