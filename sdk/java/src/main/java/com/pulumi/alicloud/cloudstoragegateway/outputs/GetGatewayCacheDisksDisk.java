// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudstoragegateway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayCacheDisksDisk {
    /**
     * @return The category of eht cache disk.
     * 
     */
    private final String cacheDiskCategory;
    /**
     * @return The size of the cache disk.
     * 
     */
    private final Integer cacheDiskSizeInGb;
    /**
     * @return The ID of the cache disk.
     * 
     */
    private final String cacheId;
    /**
     * @return The expiration time. Time stamp in seconds (s).
     * 
     */
    private final Integer expiredTime;
    /**
     * @return The ID of the gateway.
     * 
     */
    private final String gatewayId;
    /**
     * @return The ID of the Gateway Cache Disk.
     * 
     */
    private final String id;
    /**
     * @return Per second of the input output.
     * 
     */
    private final Integer iops;
    /**
     * @return Whether it is used.
     * 
     */
    private final Boolean isUsed;
    /**
     * @return The cache disk inside the device name.
     * 
     */
    private final String localFilePath;
    /**
     * @return A renewal link of the cache disk.
     * 
     */
    private final String renewUrl;
    /**
     * @return The status of the resource.
     * 
     */
    private final Integer status;

    @CustomType.Constructor
    private GetGatewayCacheDisksDisk(
        @CustomType.Parameter("cacheDiskCategory") String cacheDiskCategory,
        @CustomType.Parameter("cacheDiskSizeInGb") Integer cacheDiskSizeInGb,
        @CustomType.Parameter("cacheId") String cacheId,
        @CustomType.Parameter("expiredTime") Integer expiredTime,
        @CustomType.Parameter("gatewayId") String gatewayId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("iops") Integer iops,
        @CustomType.Parameter("isUsed") Boolean isUsed,
        @CustomType.Parameter("localFilePath") String localFilePath,
        @CustomType.Parameter("renewUrl") String renewUrl,
        @CustomType.Parameter("status") Integer status) {
        this.cacheDiskCategory = cacheDiskCategory;
        this.cacheDiskSizeInGb = cacheDiskSizeInGb;
        this.cacheId = cacheId;
        this.expiredTime = expiredTime;
        this.gatewayId = gatewayId;
        this.id = id;
        this.iops = iops;
        this.isUsed = isUsed;
        this.localFilePath = localFilePath;
        this.renewUrl = renewUrl;
        this.status = status;
    }

    /**
     * @return The category of eht cache disk.
     * 
     */
    public String cacheDiskCategory() {
        return this.cacheDiskCategory;
    }
    /**
     * @return The size of the cache disk.
     * 
     */
    public Integer cacheDiskSizeInGb() {
        return this.cacheDiskSizeInGb;
    }
    /**
     * @return The ID of the cache disk.
     * 
     */
    public String cacheId() {
        return this.cacheId;
    }
    /**
     * @return The expiration time. Time stamp in seconds (s).
     * 
     */
    public Integer expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The ID of the gateway.
     * 
     */
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return The ID of the Gateway Cache Disk.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Per second of the input output.
     * 
     */
    public Integer iops() {
        return this.iops;
    }
    /**
     * @return Whether it is used.
     * 
     */
    public Boolean isUsed() {
        return this.isUsed;
    }
    /**
     * @return The cache disk inside the device name.
     * 
     */
    public String localFilePath() {
        return this.localFilePath;
    }
    /**
     * @return A renewal link of the cache disk.
     * 
     */
    public String renewUrl() {
        return this.renewUrl;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public Integer status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayCacheDisksDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String cacheDiskCategory;
        private Integer cacheDiskSizeInGb;
        private String cacheId;
        private Integer expiredTime;
        private String gatewayId;
        private String id;
        private Integer iops;
        private Boolean isUsed;
        private String localFilePath;
        private String renewUrl;
        private Integer status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetGatewayCacheDisksDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheDiskCategory = defaults.cacheDiskCategory;
    	      this.cacheDiskSizeInGb = defaults.cacheDiskSizeInGb;
    	      this.cacheId = defaults.cacheId;
    	      this.expiredTime = defaults.expiredTime;
    	      this.gatewayId = defaults.gatewayId;
    	      this.id = defaults.id;
    	      this.iops = defaults.iops;
    	      this.isUsed = defaults.isUsed;
    	      this.localFilePath = defaults.localFilePath;
    	      this.renewUrl = defaults.renewUrl;
    	      this.status = defaults.status;
        }

        public Builder cacheDiskCategory(String cacheDiskCategory) {
            this.cacheDiskCategory = Objects.requireNonNull(cacheDiskCategory);
            return this;
        }
        public Builder cacheDiskSizeInGb(Integer cacheDiskSizeInGb) {
            this.cacheDiskSizeInGb = Objects.requireNonNull(cacheDiskSizeInGb);
            return this;
        }
        public Builder cacheId(String cacheId) {
            this.cacheId = Objects.requireNonNull(cacheId);
            return this;
        }
        public Builder expiredTime(Integer expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = Objects.requireNonNull(gatewayId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder iops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }
        public Builder isUsed(Boolean isUsed) {
            this.isUsed = Objects.requireNonNull(isUsed);
            return this;
        }
        public Builder localFilePath(String localFilePath) {
            this.localFilePath = Objects.requireNonNull(localFilePath);
            return this;
        }
        public Builder renewUrl(String renewUrl) {
            this.renewUrl = Objects.requireNonNull(renewUrl);
            return this;
        }
        public Builder status(Integer status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetGatewayCacheDisksDisk build() {
            return new GetGatewayCacheDisksDisk(cacheDiskCategory, cacheDiskSizeInGb, cacheId, expiredTime, gatewayId, id, iops, isUsed, localFilePath, renewUrl, status);
        }
    }
}
