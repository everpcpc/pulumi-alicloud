// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCrossRegionBackupsBackup {
    /**
     * @return The time when the cross-region data backup file was generated.
     * 
     */
    private final String backupEndTime;
    /**
     * @return The method that is used to generate the cross-region data backup file. Valid values:
     * `L` - logical backup.
     * `P` - physical backup.
     * 
     */
    private final String backupMethod;
    /**
     * @return The level at which the cross-region data backup file is generated.
     * `0` - instance-level backup.
     * `1` - database-level backup.
     * 
     */
    private final String backupSetScale;
    /**
     * @return TThe status of the cross-region data backup. Valid values:
     * `0` - The cross-region data backup is successful.
     * `1` - The cross-region data backup failed.
     * 
     */
    private final Integer backupSetStatus;
    /**
     * @return The time when the cross-region data backup started.
     * 
     */
    private final String backupStartTime;
    /**
     * @return The type of the cross-region data backup. Valid values:F: full data backup
     * `F` - full data backup.
     * `I` - incremental data backup.
     * 
     */
    private final String backupType;
    /**
     * @return The RDS edition of the instance. Valid values:
     * `Basic` - Basic Edition.
     * `HighAvailability` - High-availability Edition.
     * `Finance` - Enterprise Edition. This edition is supported only by the China site (aliyun.com).
     * 
     */
    private final String category;
    /**
     * @return The point in time that is indicated by the data in the cross-region data backup file.
     * 
     */
    private final String consistentTime;
    /**
     * @return The external URL from which you can download the cross-region data backup file.
     * 
     */
    private final String crossBackupDownloadLink;
    /**
     * @return The ID of the cross-region data backup file.
     * 
     */
    private final String crossBackupId;
    /**
     * @return The ID of the destination region where the cross-region data backup file of the instance is stored.
     * 
     */
    private final String crossBackupRegion;
    /**
     * @return The name of the compressed package that contains the cross-region data backup file.
     * 
     */
    private final String crossBackupSetFile;
    /**
     * @return The location where the cross-region data backup file is stored.
     * 
     */
    private final String crossBackupSetLocation;
    /**
     * @return The size of the cross-region data backup file. Unit: bytes.
     * 
     */
    private final Integer crossBackupSetSize;
    /**
     * @return The storage type.
     * 
     */
    private final String dbInstanceStorageType;
    /**
     * @return The engine of the database.
     * 
     */
    private final String engine;
    /**
     * @return The version of the database engine.
     * 
     */
    private final String engineVersion;
    /**
     * @return The ID of the cross-region data backup file.
     * 
     */
    private final String id;
    /**
     * @return The ID of the instance. This parameter is used to determine whether the instance that generates the cross-region data backup file is a primary or secondary instance.
     * 
     */
    private final Integer instanceId;
    /**
     * @return The start time to which data can be restored. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    private final String recoveryBeginTime;
    /**
     * @return The end time to which data can be restored. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    private final String recoveryEndTime;
    /**
     * @return An array that consists of the regions to which the cross-region data backup file can be restored.
     * 
     */
    private final List<String> restoreRegions;

    @CustomType.Constructor
    private GetCrossRegionBackupsBackup(
        @CustomType.Parameter("backupEndTime") String backupEndTime,
        @CustomType.Parameter("backupMethod") String backupMethod,
        @CustomType.Parameter("backupSetScale") String backupSetScale,
        @CustomType.Parameter("backupSetStatus") Integer backupSetStatus,
        @CustomType.Parameter("backupStartTime") String backupStartTime,
        @CustomType.Parameter("backupType") String backupType,
        @CustomType.Parameter("category") String category,
        @CustomType.Parameter("consistentTime") String consistentTime,
        @CustomType.Parameter("crossBackupDownloadLink") String crossBackupDownloadLink,
        @CustomType.Parameter("crossBackupId") String crossBackupId,
        @CustomType.Parameter("crossBackupRegion") String crossBackupRegion,
        @CustomType.Parameter("crossBackupSetFile") String crossBackupSetFile,
        @CustomType.Parameter("crossBackupSetLocation") String crossBackupSetLocation,
        @CustomType.Parameter("crossBackupSetSize") Integer crossBackupSetSize,
        @CustomType.Parameter("dbInstanceStorageType") String dbInstanceStorageType,
        @CustomType.Parameter("engine") String engine,
        @CustomType.Parameter("engineVersion") String engineVersion,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceId") Integer instanceId,
        @CustomType.Parameter("recoveryBeginTime") String recoveryBeginTime,
        @CustomType.Parameter("recoveryEndTime") String recoveryEndTime,
        @CustomType.Parameter("restoreRegions") List<String> restoreRegions) {
        this.backupEndTime = backupEndTime;
        this.backupMethod = backupMethod;
        this.backupSetScale = backupSetScale;
        this.backupSetStatus = backupSetStatus;
        this.backupStartTime = backupStartTime;
        this.backupType = backupType;
        this.category = category;
        this.consistentTime = consistentTime;
        this.crossBackupDownloadLink = crossBackupDownloadLink;
        this.crossBackupId = crossBackupId;
        this.crossBackupRegion = crossBackupRegion;
        this.crossBackupSetFile = crossBackupSetFile;
        this.crossBackupSetLocation = crossBackupSetLocation;
        this.crossBackupSetSize = crossBackupSetSize;
        this.dbInstanceStorageType = dbInstanceStorageType;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.id = id;
        this.instanceId = instanceId;
        this.recoveryBeginTime = recoveryBeginTime;
        this.recoveryEndTime = recoveryEndTime;
        this.restoreRegions = restoreRegions;
    }

    /**
     * @return The time when the cross-region data backup file was generated.
     * 
     */
    public String backupEndTime() {
        return this.backupEndTime;
    }
    /**
     * @return The method that is used to generate the cross-region data backup file. Valid values:
     * `L` - logical backup.
     * `P` - physical backup.
     * 
     */
    public String backupMethod() {
        return this.backupMethod;
    }
    /**
     * @return The level at which the cross-region data backup file is generated.
     * `0` - instance-level backup.
     * `1` - database-level backup.
     * 
     */
    public String backupSetScale() {
        return this.backupSetScale;
    }
    /**
     * @return TThe status of the cross-region data backup. Valid values:
     * `0` - The cross-region data backup is successful.
     * `1` - The cross-region data backup failed.
     * 
     */
    public Integer backupSetStatus() {
        return this.backupSetStatus;
    }
    /**
     * @return The time when the cross-region data backup started.
     * 
     */
    public String backupStartTime() {
        return this.backupStartTime;
    }
    /**
     * @return The type of the cross-region data backup. Valid values:F: full data backup
     * `F` - full data backup.
     * `I` - incremental data backup.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return The RDS edition of the instance. Valid values:
     * `Basic` - Basic Edition.
     * `HighAvailability` - High-availability Edition.
     * `Finance` - Enterprise Edition. This edition is supported only by the China site (aliyun.com).
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return The point in time that is indicated by the data in the cross-region data backup file.
     * 
     */
    public String consistentTime() {
        return this.consistentTime;
    }
    /**
     * @return The external URL from which you can download the cross-region data backup file.
     * 
     */
    public String crossBackupDownloadLink() {
        return this.crossBackupDownloadLink;
    }
    /**
     * @return The ID of the cross-region data backup file.
     * 
     */
    public String crossBackupId() {
        return this.crossBackupId;
    }
    /**
     * @return The ID of the destination region where the cross-region data backup file of the instance is stored.
     * 
     */
    public String crossBackupRegion() {
        return this.crossBackupRegion;
    }
    /**
     * @return The name of the compressed package that contains the cross-region data backup file.
     * 
     */
    public String crossBackupSetFile() {
        return this.crossBackupSetFile;
    }
    /**
     * @return The location where the cross-region data backup file is stored.
     * 
     */
    public String crossBackupSetLocation() {
        return this.crossBackupSetLocation;
    }
    /**
     * @return The size of the cross-region data backup file. Unit: bytes.
     * 
     */
    public Integer crossBackupSetSize() {
        return this.crossBackupSetSize;
    }
    /**
     * @return The storage type.
     * 
     */
    public String dbInstanceStorageType() {
        return this.dbInstanceStorageType;
    }
    /**
     * @return The engine of the database.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The version of the database engine.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The ID of the cross-region data backup file.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the instance. This parameter is used to determine whether the instance that generates the cross-region data backup file is a primary or secondary instance.
     * 
     */
    public Integer instanceId() {
        return this.instanceId;
    }
    /**
     * @return The start time to which data can be restored. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public String recoveryBeginTime() {
        return this.recoveryBeginTime;
    }
    /**
     * @return The end time to which data can be restored. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public String recoveryEndTime() {
        return this.recoveryEndTime;
    }
    /**
     * @return An array that consists of the regions to which the cross-region data backup file can be restored.
     * 
     */
    public List<String> restoreRegions() {
        return this.restoreRegions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCrossRegionBackupsBackup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String backupEndTime;
        private String backupMethod;
        private String backupSetScale;
        private Integer backupSetStatus;
        private String backupStartTime;
        private String backupType;
        private String category;
        private String consistentTime;
        private String crossBackupDownloadLink;
        private String crossBackupId;
        private String crossBackupRegion;
        private String crossBackupSetFile;
        private String crossBackupSetLocation;
        private Integer crossBackupSetSize;
        private String dbInstanceStorageType;
        private String engine;
        private String engineVersion;
        private String id;
        private Integer instanceId;
        private String recoveryBeginTime;
        private String recoveryEndTime;
        private List<String> restoreRegions;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCrossRegionBackupsBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupEndTime = defaults.backupEndTime;
    	      this.backupMethod = defaults.backupMethod;
    	      this.backupSetScale = defaults.backupSetScale;
    	      this.backupSetStatus = defaults.backupSetStatus;
    	      this.backupStartTime = defaults.backupStartTime;
    	      this.backupType = defaults.backupType;
    	      this.category = defaults.category;
    	      this.consistentTime = defaults.consistentTime;
    	      this.crossBackupDownloadLink = defaults.crossBackupDownloadLink;
    	      this.crossBackupId = defaults.crossBackupId;
    	      this.crossBackupRegion = defaults.crossBackupRegion;
    	      this.crossBackupSetFile = defaults.crossBackupSetFile;
    	      this.crossBackupSetLocation = defaults.crossBackupSetLocation;
    	      this.crossBackupSetSize = defaults.crossBackupSetSize;
    	      this.dbInstanceStorageType = defaults.dbInstanceStorageType;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.recoveryBeginTime = defaults.recoveryBeginTime;
    	      this.recoveryEndTime = defaults.recoveryEndTime;
    	      this.restoreRegions = defaults.restoreRegions;
        }

        public Builder backupEndTime(String backupEndTime) {
            this.backupEndTime = Objects.requireNonNull(backupEndTime);
            return this;
        }
        public Builder backupMethod(String backupMethod) {
            this.backupMethod = Objects.requireNonNull(backupMethod);
            return this;
        }
        public Builder backupSetScale(String backupSetScale) {
            this.backupSetScale = Objects.requireNonNull(backupSetScale);
            return this;
        }
        public Builder backupSetStatus(Integer backupSetStatus) {
            this.backupSetStatus = Objects.requireNonNull(backupSetStatus);
            return this;
        }
        public Builder backupStartTime(String backupStartTime) {
            this.backupStartTime = Objects.requireNonNull(backupStartTime);
            return this;
        }
        public Builder backupType(String backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        public Builder consistentTime(String consistentTime) {
            this.consistentTime = Objects.requireNonNull(consistentTime);
            return this;
        }
        public Builder crossBackupDownloadLink(String crossBackupDownloadLink) {
            this.crossBackupDownloadLink = Objects.requireNonNull(crossBackupDownloadLink);
            return this;
        }
        public Builder crossBackupId(String crossBackupId) {
            this.crossBackupId = Objects.requireNonNull(crossBackupId);
            return this;
        }
        public Builder crossBackupRegion(String crossBackupRegion) {
            this.crossBackupRegion = Objects.requireNonNull(crossBackupRegion);
            return this;
        }
        public Builder crossBackupSetFile(String crossBackupSetFile) {
            this.crossBackupSetFile = Objects.requireNonNull(crossBackupSetFile);
            return this;
        }
        public Builder crossBackupSetLocation(String crossBackupSetLocation) {
            this.crossBackupSetLocation = Objects.requireNonNull(crossBackupSetLocation);
            return this;
        }
        public Builder crossBackupSetSize(Integer crossBackupSetSize) {
            this.crossBackupSetSize = Objects.requireNonNull(crossBackupSetSize);
            return this;
        }
        public Builder dbInstanceStorageType(String dbInstanceStorageType) {
            this.dbInstanceStorageType = Objects.requireNonNull(dbInstanceStorageType);
            return this;
        }
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        public Builder engineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceId(Integer instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder recoveryBeginTime(String recoveryBeginTime) {
            this.recoveryBeginTime = Objects.requireNonNull(recoveryBeginTime);
            return this;
        }
        public Builder recoveryEndTime(String recoveryEndTime) {
            this.recoveryEndTime = Objects.requireNonNull(recoveryEndTime);
            return this;
        }
        public Builder restoreRegions(List<String> restoreRegions) {
            this.restoreRegions = Objects.requireNonNull(restoreRegions);
            return this;
        }
        public Builder restoreRegions(String... restoreRegions) {
            return restoreRegions(List.of(restoreRegions));
        }        public GetCrossRegionBackupsBackup build() {
            return new GetCrossRegionBackupsBackup(backupEndTime, backupMethod, backupSetScale, backupSetStatus, backupStartTime, backupType, category, consistentTime, crossBackupDownloadLink, crossBackupId, crossBackupRegion, crossBackupSetFile, crossBackupSetLocation, crossBackupSetSize, dbInstanceStorageType, engine, engineVersion, id, instanceId, recoveryBeginTime, recoveryEndTime, restoreRegions);
        }
    }
}
