// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayVpnAttachmentHealthCheckConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayVpnAttachmentHealthCheckConfigArgs Empty = new GatewayVpnAttachmentHealthCheckConfigArgs();

    /**
     * The destination IP address that is used for health checks.
     * 
     */
    @Import(name="dip")
    private @Nullable Output<String> dip;

    /**
     * @return The destination IP address that is used for health checks.
     * 
     */
    public Optional<Output<String>> dip() {
        return Optional.ofNullable(this.dip);
    }

    /**
     * Whether to enable BGP.
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    /**
     * @return Whether to enable BGP.
     * 
     */
    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * The interval between two consecutive health checks. Unit: seconds.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The interval between two consecutive health checks. Unit: seconds.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Whether to revoke the published route when the health check fails. Valid values: `revoke_route` or `reserve_route`.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return Whether to revoke the published route when the health check fails. Valid values: `revoke_route` or `reserve_route`.
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The maximum number of health check retries.
     * 
     */
    @Import(name="retry")
    private @Nullable Output<Integer> retry;

    /**
     * @return The maximum number of health check retries.
     * 
     */
    public Optional<Output<Integer>> retry() {
        return Optional.ofNullable(this.retry);
    }

    /**
     * The source IP address that is used for health checks.
     * 
     */
    @Import(name="sip")
    private @Nullable Output<String> sip;

    /**
     * @return The source IP address that is used for health checks.
     * 
     */
    public Optional<Output<String>> sip() {
        return Optional.ofNullable(this.sip);
    }

    private GatewayVpnAttachmentHealthCheckConfigArgs() {}

    private GatewayVpnAttachmentHealthCheckConfigArgs(GatewayVpnAttachmentHealthCheckConfigArgs $) {
        this.dip = $.dip;
        this.enable = $.enable;
        this.interval = $.interval;
        this.policy = $.policy;
        this.retry = $.retry;
        this.sip = $.sip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayVpnAttachmentHealthCheckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayVpnAttachmentHealthCheckConfigArgs $;

        public Builder() {
            $ = new GatewayVpnAttachmentHealthCheckConfigArgs();
        }

        public Builder(GatewayVpnAttachmentHealthCheckConfigArgs defaults) {
            $ = new GatewayVpnAttachmentHealthCheckConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dip The destination IP address that is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder dip(@Nullable Output<String> dip) {
            $.dip = dip;
            return this;
        }

        /**
         * @param dip The destination IP address that is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder dip(String dip) {
            return dip(Output.of(dip));
        }

        /**
         * @param enable Whether to enable BGP.
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Whether to enable BGP.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param interval The interval between two consecutive health checks. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval between two consecutive health checks. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param policy Whether to revoke the published route when the health check fails. Valid values: `revoke_route` or `reserve_route`.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy Whether to revoke the published route when the health check fails. Valid values: `revoke_route` or `reserve_route`.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param retry The maximum number of health check retries.
         * 
         * @return builder
         * 
         */
        public Builder retry(@Nullable Output<Integer> retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param retry The maximum number of health check retries.
         * 
         * @return builder
         * 
         */
        public Builder retry(Integer retry) {
            return retry(Output.of(retry));
        }

        /**
         * @param sip The source IP address that is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder sip(@Nullable Output<String> sip) {
            $.sip = sip;
            return this;
        }

        /**
         * @param sip The source IP address that is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder sip(String sip) {
            return sip(Output.of(sip));
        }

        public GatewayVpnAttachmentHealthCheckConfigArgs build() {
            return $;
        }
    }

}
