// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetKubernetesAddonsAddonArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetKubernetesAddonsAddonArgs Empty = new GetKubernetesAddonsAddonArgs();

    /**
     * The current custom configuration of the addon. **Note:** Available in v1.166.0+
     * 
     */
    @Import(name="currentConfig", required=true)
    private Output<String> currentConfig;

    /**
     * @return The current custom configuration of the addon. **Note:** Available in v1.166.0+
     * 
     */
    public Output<String> currentConfig() {
        return this.currentConfig;
    }

    /**
     * The current version of addon, if this field is an empty string, it means that the addon is not installed.
     * 
     */
    @Import(name="currentVersion", required=true)
    private Output<String> currentVersion;

    /**
     * @return The current version of addon, if this field is an empty string, it means that the addon is not installed.
     * 
     */
    public Output<String> currentVersion() {
        return this.currentVersion;
    }

    /**
     * The name of addon.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of addon.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The next version of this addon can be upgraded to.
     * 
     */
    @Import(name="nextVersion", required=true)
    private Output<String> nextVersion;

    /**
     * @return The next version of this addon can be upgraded to.
     * 
     */
    public Output<String> nextVersion() {
        return this.nextVersion;
    }

    /**
     * Whether the addon is a system addon.
     * 
     */
    @Import(name="required", required=true)
    private Output<Boolean> required;

    /**
     * @return Whether the addon is a system addon.
     * 
     */
    public Output<Boolean> required() {
        return this.required;
    }

    private GetKubernetesAddonsAddonArgs() {}

    private GetKubernetesAddonsAddonArgs(GetKubernetesAddonsAddonArgs $) {
        this.currentConfig = $.currentConfig;
        this.currentVersion = $.currentVersion;
        this.name = $.name;
        this.nextVersion = $.nextVersion;
        this.required = $.required;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetKubernetesAddonsAddonArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetKubernetesAddonsAddonArgs $;

        public Builder() {
            $ = new GetKubernetesAddonsAddonArgs();
        }

        public Builder(GetKubernetesAddonsAddonArgs defaults) {
            $ = new GetKubernetesAddonsAddonArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentConfig The current custom configuration of the addon. **Note:** Available in v1.166.0+
         * 
         * @return builder
         * 
         */
        public Builder currentConfig(Output<String> currentConfig) {
            $.currentConfig = currentConfig;
            return this;
        }

        /**
         * @param currentConfig The current custom configuration of the addon. **Note:** Available in v1.166.0+
         * 
         * @return builder
         * 
         */
        public Builder currentConfig(String currentConfig) {
            return currentConfig(Output.of(currentConfig));
        }

        /**
         * @param currentVersion The current version of addon, if this field is an empty string, it means that the addon is not installed.
         * 
         * @return builder
         * 
         */
        public Builder currentVersion(Output<String> currentVersion) {
            $.currentVersion = currentVersion;
            return this;
        }

        /**
         * @param currentVersion The current version of addon, if this field is an empty string, it means that the addon is not installed.
         * 
         * @return builder
         * 
         */
        public Builder currentVersion(String currentVersion) {
            return currentVersion(Output.of(currentVersion));
        }

        /**
         * @param name The name of addon.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of addon.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nextVersion The next version of this addon can be upgraded to.
         * 
         * @return builder
         * 
         */
        public Builder nextVersion(Output<String> nextVersion) {
            $.nextVersion = nextVersion;
            return this;
        }

        /**
         * @param nextVersion The next version of this addon can be upgraded to.
         * 
         * @return builder
         * 
         */
        public Builder nextVersion(String nextVersion) {
            return nextVersion(Output.of(nextVersion));
        }

        /**
         * @param required Whether the addon is a system addon.
         * 
         * @return builder
         * 
         */
        public Builder required(Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Whether the addon is a system addon.
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        public GetKubernetesAddonsAddonArgs build() {
            $.currentConfig = Objects.requireNonNull($.currentConfig, "expected parameter 'currentConfig' to be non-null");
            $.currentVersion = Objects.requireNonNull($.currentVersion, "expected parameter 'currentVersion' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.nextVersion = Objects.requireNonNull($.nextVersion, "expected parameter 'nextVersion' to be non-null");
            $.required = Objects.requireNonNull($.required, "expected parameter 'required' to be non-null");
            return $;
        }
    }

}
