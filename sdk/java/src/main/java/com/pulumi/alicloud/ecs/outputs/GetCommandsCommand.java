// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCommandsCommand {
    /**
     * @return The Base64-encoded content of the command.
     * 
     */
    private final String commandContent;
    /**
     * @return The ID of the Command.
     * 
     */
    private final String commandId;
    /**
     * @return The description of command.
     * 
     */
    private final String description;
    /**
     * @return Specifies whether to use custom parameters in the command to be created.
     * 
     */
    private final Boolean enableParameter;
    /**
     * @return The ID of the Command.
     * 
     */
    private final String id;
    /**
     * @return The name of the command
     * 
     */
    private final String name;
    /**
     * @return A list of custom parameter names which are parsed from the command content specified when the command was being created.
     * 
     */
    private final List<String> parameterNames;
    /**
     * @return The timeout period that is specified for the command to be run on ECS instances.
     * 
     */
    private final Integer timeout;
    /**
     * @return The command type.
     * 
     */
    private final String type;
    /**
     * @return The execution path of the command in the ECS instance.
     * 
     */
    private final String workingDir;

    @CustomType.Constructor
    private GetCommandsCommand(
        @CustomType.Parameter("commandContent") String commandContent,
        @CustomType.Parameter("commandId") String commandId,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enableParameter") Boolean enableParameter,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("parameterNames") List<String> parameterNames,
        @CustomType.Parameter("timeout") Integer timeout,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("workingDir") String workingDir) {
        this.commandContent = commandContent;
        this.commandId = commandId;
        this.description = description;
        this.enableParameter = enableParameter;
        this.id = id;
        this.name = name;
        this.parameterNames = parameterNames;
        this.timeout = timeout;
        this.type = type;
        this.workingDir = workingDir;
    }

    /**
     * @return The Base64-encoded content of the command.
     * 
     */
    public String commandContent() {
        return this.commandContent;
    }
    /**
     * @return The ID of the Command.
     * 
     */
    public String commandId() {
        return this.commandId;
    }
    /**
     * @return The description of command.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Specifies whether to use custom parameters in the command to be created.
     * 
     */
    public Boolean enableParameter() {
        return this.enableParameter;
    }
    /**
     * @return The ID of the Command.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the command
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of custom parameter names which are parsed from the command content specified when the command was being created.
     * 
     */
    public List<String> parameterNames() {
        return this.parameterNames;
    }
    /**
     * @return The timeout period that is specified for the command to be run on ECS instances.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return The command type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The execution path of the command in the ECS instance.
     * 
     */
    public String workingDir() {
        return this.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCommandsCommand defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String commandContent;
        private String commandId;
        private String description;
        private Boolean enableParameter;
        private String id;
        private String name;
        private List<String> parameterNames;
        private Integer timeout;
        private String type;
        private String workingDir;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCommandsCommand defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commandContent = defaults.commandContent;
    	      this.commandId = defaults.commandId;
    	      this.description = defaults.description;
    	      this.enableParameter = defaults.enableParameter;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.parameterNames = defaults.parameterNames;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
    	      this.workingDir = defaults.workingDir;
        }

        public Builder commandContent(String commandContent) {
            this.commandContent = Objects.requireNonNull(commandContent);
            return this;
        }
        public Builder commandId(String commandId) {
            this.commandId = Objects.requireNonNull(commandId);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enableParameter(Boolean enableParameter) {
            this.enableParameter = Objects.requireNonNull(enableParameter);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder parameterNames(List<String> parameterNames) {
            this.parameterNames = Objects.requireNonNull(parameterNames);
            return this;
        }
        public Builder parameterNames(String... parameterNames) {
            return parameterNames(List.of(parameterNames));
        }
        public Builder timeout(Integer timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder workingDir(String workingDir) {
            this.workingDir = Objects.requireNonNull(workingDir);
            return this;
        }        public GetCommandsCommand build() {
            return new GetCommandsCommand(commandContent, commandId, description, enableParameter, id, name, parameterNames, timeout, type, workingDir);
        }
    }
}
