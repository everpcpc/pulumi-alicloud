// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsDomainListen {
    /**
     * @return The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    private final String certId;
    /**
     * @return The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    private final Integer cipherSuite;
    /**
     * @return The specific custom encryption suite to add.
     * 
     */
    private final List<String> customCiphers;
    /**
     * @return Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    private final Boolean enableTlsv3;
    /**
     * @return Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used).
     * 
     */
    private final Boolean exclusiveIp;
    /**
     * @return Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `https_ports` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol).
     * 
     */
    private final Boolean focusHttps;
    /**
     * @return Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    private final Boolean http2Enabled;
    /**
     * @return The listening port of the HTTP protocol.
     * 
     */
    private final List<Integer> httpPorts;
    /**
     * @return The listening port of the HTTPS protocol.
     * 
     */
    private final List<Integer> httpsPorts;
    /**
     * @return Whether IPv6 is turned on.
     * 
     */
    private final Boolean ipv6Enabled;
    /**
     * @return The type of protection resource to use.
     * 
     */
    private final String protectionResource;
    /**
     * @return The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    private final String tlsVersion;
    /**
     * @return WAF obtains the real IP address of the client.
     * 
     */
    private final Integer xffHeaderMode;
    /**
     * @return Set the list of custom fields used to obtain the client IP address.
     * 
     */
    private final List<String> xffHeaders;

    @CustomType.Constructor
    private GetDomainsDomainListen(
        @CustomType.Parameter("certId") String certId,
        @CustomType.Parameter("cipherSuite") Integer cipherSuite,
        @CustomType.Parameter("customCiphers") List<String> customCiphers,
        @CustomType.Parameter("enableTlsv3") Boolean enableTlsv3,
        @CustomType.Parameter("exclusiveIp") Boolean exclusiveIp,
        @CustomType.Parameter("focusHttps") Boolean focusHttps,
        @CustomType.Parameter("http2Enabled") Boolean http2Enabled,
        @CustomType.Parameter("httpPorts") List<Integer> httpPorts,
        @CustomType.Parameter("httpsPorts") List<Integer> httpsPorts,
        @CustomType.Parameter("ipv6Enabled") Boolean ipv6Enabled,
        @CustomType.Parameter("protectionResource") String protectionResource,
        @CustomType.Parameter("tlsVersion") String tlsVersion,
        @CustomType.Parameter("xffHeaderMode") Integer xffHeaderMode,
        @CustomType.Parameter("xffHeaders") List<String> xffHeaders) {
        this.certId = certId;
        this.cipherSuite = cipherSuite;
        this.customCiphers = customCiphers;
        this.enableTlsv3 = enableTlsv3;
        this.exclusiveIp = exclusiveIp;
        this.focusHttps = focusHttps;
        this.http2Enabled = http2Enabled;
        this.httpPorts = httpPorts;
        this.httpsPorts = httpsPorts;
        this.ipv6Enabled = ipv6Enabled;
        this.protectionResource = protectionResource;
        this.tlsVersion = tlsVersion;
        this.xffHeaderMode = xffHeaderMode;
        this.xffHeaders = xffHeaders;
    }

    /**
     * @return The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    public String certId() {
        return this.certId;
    }
    /**
     * @return The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    public Integer cipherSuite() {
        return this.cipherSuite;
    }
    /**
     * @return The specific custom encryption suite to add.
     * 
     */
    public List<String> customCiphers() {
        return this.customCiphers;
    }
    /**
     * @return Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    public Boolean enableTlsv3() {
        return this.enableTlsv3;
    }
    /**
     * @return Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used).
     * 
     */
    public Boolean exclusiveIp() {
        return this.exclusiveIp;
    }
    /**
     * @return Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `https_ports` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol).
     * 
     */
    public Boolean focusHttps() {
        return this.focusHttps;
    }
    /**
     * @return Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    public Boolean http2Enabled() {
        return this.http2Enabled;
    }
    /**
     * @return The listening port of the HTTP protocol.
     * 
     */
    public List<Integer> httpPorts() {
        return this.httpPorts;
    }
    /**
     * @return The listening port of the HTTPS protocol.
     * 
     */
    public List<Integer> httpsPorts() {
        return this.httpsPorts;
    }
    /**
     * @return Whether IPv6 is turned on.
     * 
     */
    public Boolean ipv6Enabled() {
        return this.ipv6Enabled;
    }
    /**
     * @return The type of protection resource to use.
     * 
     */
    public String protectionResource() {
        return this.protectionResource;
    }
    /**
     * @return The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
     * 
     */
    public String tlsVersion() {
        return this.tlsVersion;
    }
    /**
     * @return WAF obtains the real IP address of the client.
     * 
     */
    public Integer xffHeaderMode() {
        return this.xffHeaderMode;
    }
    /**
     * @return Set the list of custom fields used to obtain the client IP address.
     * 
     */
    public List<String> xffHeaders() {
        return this.xffHeaders;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsDomainListen defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certId;
        private Integer cipherSuite;
        private List<String> customCiphers;
        private Boolean enableTlsv3;
        private Boolean exclusiveIp;
        private Boolean focusHttps;
        private Boolean http2Enabled;
        private List<Integer> httpPorts;
        private List<Integer> httpsPorts;
        private Boolean ipv6Enabled;
        private String protectionResource;
        private String tlsVersion;
        private Integer xffHeaderMode;
        private List<String> xffHeaders;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDomainsDomainListen defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certId = defaults.certId;
    	      this.cipherSuite = defaults.cipherSuite;
    	      this.customCiphers = defaults.customCiphers;
    	      this.enableTlsv3 = defaults.enableTlsv3;
    	      this.exclusiveIp = defaults.exclusiveIp;
    	      this.focusHttps = defaults.focusHttps;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.httpPorts = defaults.httpPorts;
    	      this.httpsPorts = defaults.httpsPorts;
    	      this.ipv6Enabled = defaults.ipv6Enabled;
    	      this.protectionResource = defaults.protectionResource;
    	      this.tlsVersion = defaults.tlsVersion;
    	      this.xffHeaderMode = defaults.xffHeaderMode;
    	      this.xffHeaders = defaults.xffHeaders;
        }

        public Builder certId(String certId) {
            this.certId = Objects.requireNonNull(certId);
            return this;
        }
        public Builder cipherSuite(Integer cipherSuite) {
            this.cipherSuite = Objects.requireNonNull(cipherSuite);
            return this;
        }
        public Builder customCiphers(List<String> customCiphers) {
            this.customCiphers = Objects.requireNonNull(customCiphers);
            return this;
        }
        public Builder customCiphers(String... customCiphers) {
            return customCiphers(List.of(customCiphers));
        }
        public Builder enableTlsv3(Boolean enableTlsv3) {
            this.enableTlsv3 = Objects.requireNonNull(enableTlsv3);
            return this;
        }
        public Builder exclusiveIp(Boolean exclusiveIp) {
            this.exclusiveIp = Objects.requireNonNull(exclusiveIp);
            return this;
        }
        public Builder focusHttps(Boolean focusHttps) {
            this.focusHttps = Objects.requireNonNull(focusHttps);
            return this;
        }
        public Builder http2Enabled(Boolean http2Enabled) {
            this.http2Enabled = Objects.requireNonNull(http2Enabled);
            return this;
        }
        public Builder httpPorts(List<Integer> httpPorts) {
            this.httpPorts = Objects.requireNonNull(httpPorts);
            return this;
        }
        public Builder httpPorts(Integer... httpPorts) {
            return httpPorts(List.of(httpPorts));
        }
        public Builder httpsPorts(List<Integer> httpsPorts) {
            this.httpsPorts = Objects.requireNonNull(httpsPorts);
            return this;
        }
        public Builder httpsPorts(Integer... httpsPorts) {
            return httpsPorts(List.of(httpsPorts));
        }
        public Builder ipv6Enabled(Boolean ipv6Enabled) {
            this.ipv6Enabled = Objects.requireNonNull(ipv6Enabled);
            return this;
        }
        public Builder protectionResource(String protectionResource) {
            this.protectionResource = Objects.requireNonNull(protectionResource);
            return this;
        }
        public Builder tlsVersion(String tlsVersion) {
            this.tlsVersion = Objects.requireNonNull(tlsVersion);
            return this;
        }
        public Builder xffHeaderMode(Integer xffHeaderMode) {
            this.xffHeaderMode = Objects.requireNonNull(xffHeaderMode);
            return this;
        }
        public Builder xffHeaders(List<String> xffHeaders) {
            this.xffHeaders = Objects.requireNonNull(xffHeaders);
            return this;
        }
        public Builder xffHeaders(String... xffHeaders) {
            return xffHeaders(List.of(xffHeaders));
        }        public GetDomainsDomainListen build() {
            return new GetDomainsDomainListen(certId, cipherSuite, customCiphers, enableTlsv3, exclusiveIp, focusHttps, http2Enabled, httpPorts, httpsPorts, ipv6Enabled, protectionResource, tlsVersion, xffHeaderMode, xffHeaders);
        }
    }
}
