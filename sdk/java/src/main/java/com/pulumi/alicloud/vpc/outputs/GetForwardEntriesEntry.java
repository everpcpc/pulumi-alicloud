// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetForwardEntriesEntry {
    /**
     * @return The public IP address.
     * 
     */
    private final String externalIp;
    /**
     * @return The public port.
     * 
     */
    private final String externalPort;
    /**
     * @return The forward entry ID.
     * 
     */
    private final String forwardEntryId;
    /**
     * @return The name of forward entry.
     * 
     */
    private final String forwardEntryName;
    /**
     * @return The ID of the Forward Entry.
     * 
     */
    private final String id;
    /**
     * @return The private IP address.
     * 
     */
    private final String internalIp;
    /**
     * @return The internal port.
     * 
     */
    private final String internalPort;
    /**
     * @return The ip protocol. Valid values: `any`,`tcp` and `udp`.
     * 
     */
    private final String ipProtocol;
    /**
     * @return The forward entry name.
     * 
     */
    private final String name;
    /**
     * @return The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
     * 
     */
    private final String status;

    @CustomType.Constructor
    private GetForwardEntriesEntry(
        @CustomType.Parameter("externalIp") String externalIp,
        @CustomType.Parameter("externalPort") String externalPort,
        @CustomType.Parameter("forwardEntryId") String forwardEntryId,
        @CustomType.Parameter("forwardEntryName") String forwardEntryName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("internalIp") String internalIp,
        @CustomType.Parameter("internalPort") String internalPort,
        @CustomType.Parameter("ipProtocol") String ipProtocol,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("status") String status) {
        this.externalIp = externalIp;
        this.externalPort = externalPort;
        this.forwardEntryId = forwardEntryId;
        this.forwardEntryName = forwardEntryName;
        this.id = id;
        this.internalIp = internalIp;
        this.internalPort = internalPort;
        this.ipProtocol = ipProtocol;
        this.name = name;
        this.status = status;
    }

    /**
     * @return The public IP address.
     * 
     */
    public String externalIp() {
        return this.externalIp;
    }
    /**
     * @return The public port.
     * 
     */
    public String externalPort() {
        return this.externalPort;
    }
    /**
     * @return The forward entry ID.
     * 
     */
    public String forwardEntryId() {
        return this.forwardEntryId;
    }
    /**
     * @return The name of forward entry.
     * 
     */
    public String forwardEntryName() {
        return this.forwardEntryName;
    }
    /**
     * @return The ID of the Forward Entry.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The private IP address.
     * 
     */
    public String internalIp() {
        return this.internalIp;
    }
    /**
     * @return The internal port.
     * 
     */
    public String internalPort() {
        return this.internalPort;
    }
    /**
     * @return The ip protocol. Valid values: `any`,`tcp` and `udp`.
     * 
     */
    public String ipProtocol() {
        return this.ipProtocol;
    }
    /**
     * @return The forward entry name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetForwardEntriesEntry defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String externalIp;
        private String externalPort;
        private String forwardEntryId;
        private String forwardEntryName;
        private String id;
        private String internalIp;
        private String internalPort;
        private String ipProtocol;
        private String name;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetForwardEntriesEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.externalIp = defaults.externalIp;
    	      this.externalPort = defaults.externalPort;
    	      this.forwardEntryId = defaults.forwardEntryId;
    	      this.forwardEntryName = defaults.forwardEntryName;
    	      this.id = defaults.id;
    	      this.internalIp = defaults.internalIp;
    	      this.internalPort = defaults.internalPort;
    	      this.ipProtocol = defaults.ipProtocol;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
        }

        public Builder externalIp(String externalIp) {
            this.externalIp = Objects.requireNonNull(externalIp);
            return this;
        }
        public Builder externalPort(String externalPort) {
            this.externalPort = Objects.requireNonNull(externalPort);
            return this;
        }
        public Builder forwardEntryId(String forwardEntryId) {
            this.forwardEntryId = Objects.requireNonNull(forwardEntryId);
            return this;
        }
        public Builder forwardEntryName(String forwardEntryName) {
            this.forwardEntryName = Objects.requireNonNull(forwardEntryName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder internalIp(String internalIp) {
            this.internalIp = Objects.requireNonNull(internalIp);
            return this;
        }
        public Builder internalPort(String internalPort) {
            this.internalPort = Objects.requireNonNull(internalPort);
            return this;
        }
        public Builder ipProtocol(String ipProtocol) {
            this.ipProtocol = Objects.requireNonNull(ipProtocol);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetForwardEntriesEntry build() {
            return new GetForwardEntriesEntry(externalIp, externalPort, forwardEntryId, forwardEntryName, id, internalIp, internalPort, ipProtocol, name, status);
        }
    }
}
