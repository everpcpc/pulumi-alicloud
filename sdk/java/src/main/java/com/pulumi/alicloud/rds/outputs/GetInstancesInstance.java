// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.outputs;

import com.pulumi.alicloud.rds.outputs.GetInstancesInstanceParameter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return (Available in 1.124.1+) The method that is used to verify the identities of clients. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - cert
     * - perfer
     * - verify-ca
     * - verify-full (supported only when the instance runs PostgreSQL 12 or later)
     * 
     */
    private final String acl;
    /**
     * @return Availability zone.
     * 
     */
    private final String availabilityZone;
    /**
     * @return (Available in 1.124.1+) The type of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - aliyun: a cloud certificate
     * - custom: a custom certificate
     * 
     */
    private final String caType;
    /**
     * @return Billing method. Value options: `Postpaid` for Pay-As-You-Go and `Prepaid` for subscription.
     * 
     */
    private final String chargeType;
    /**
     * @return (Available in 1.124.1+) The public key of the CA that issues client certificates. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private final String clientCaCert;
    private final String clientCaCertExpireTime;
    /**
     * @return (Available in 1.124.1+) The certificate revocation list (CRL) that contains revoked client certificates. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private final String clientCertRevocationList;
    /**
     * @return `Standard` for standard access mode and `Safe` for high security access mode.
     * 
     */
    private final String connectionMode;
    /**
     * @return (Available in 1.70.3+) RDS database connection string.
     * 
     */
    private final String connectionString;
    /**
     * @return Creation time of the instance.
     * 
     */
    private final String createTime;
    /**
     * @return (Available in 1.124.3+) The creator of the encryption key.
     * 
     */
    private final String creator;
    /**
     * @return (Available in 1.70.3+) The storage type of the instance.
     * 
     */
    private final String dbInstanceStorageType;
    /**
     * @return `Primary` for primary instance, `Readonly` for read-only instance, `Guard` for disaster recovery instance, and `Temp` for temporary instance.
     * 
     */
    private final String dbType;
    /**
     * @return (Available in 1.124.3+) The estimated time when the encryption key will be deleted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    private final String deleteDate;
    /**
     * @return (Available in 1.167.0+) Indicates whether the release protection feature is enabled for the instance. Valid values:
     * * **true**: The release protection feature is enabled.
     * * **false**: The release protection feature is disabled.
     * 
     */
    private final Boolean deletionProtection;
    /**
     * @return (Available in 1.124.3+) The description of the encryption key.
     * 
     */
    private final String description;
    /**
     * @return (Available in 1.124.3+) The ID of the encryption key.
     * 
     */
    private final String encryptionKey;
    /**
     * @return (Available in 1.124.3+) The status of the encryption key. Valid values:
     * - Enabled
     * - Disabled
     * 
     */
    private final String encryptionKeyStatus;
    /**
     * @return Database type. Options are `MySQL`, `SQLServer`, `PostgreSQL` and `PPAS`. If no value is specified, all types are returned.
     * 
     */
    private final String engine;
    /**
     * @return Database version.
     * 
     */
    private final String engineVersion;
    /**
     * @return Expiration time. Pay-As-You-Go instances never expire.
     * 
     */
    private final String expireTime;
    /**
     * @return If a disaster recovery instance is attached to the current instance, the ID of the disaster recovery instance applies.
     * 
     */
    private final String guardInstanceId;
    /**
     * @return The ID of the RDS instance.
     * 
     */
    private final String id;
    /**
     * @return (Available in 1.70.3+) User-defined DB instance storage space.
     * 
     */
    private final Integer instanceStorage;
    /**
     * @return Sizing of the RDS instance.
     * 
     */
    private final String instanceType;
    /**
     * @return (Available in 1.124.3+) The purpose of the encryption key.
     * 
     */
    private final String keyUsage;
    /**
     * @return (Available in 1.124.1+) The status of the SSL link. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - success
     * - setting
     * - failed
     * 
     */
    private final String lastModifyStatus;
    /**
     * @return ID of the primary instance. If this parameter is not returned, the current instance is a primary instance.
     * 
     */
    private final String masterInstanceId;
    /**
     * @return (Available in 1.101.0+) The master zone of the instance.
     * 
     */
    private final String masterZone;
    /**
     * @return (Available in 1.124.3+) The time when the encryption key expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    private final String materialExpireTime;
    /**
     * @return (Available in 1.124.1+) The reason why the SSL link stays in the current state. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private final String modifyStatusReason;
    /**
     * @return The name of the RDS instance.
     * 
     */
    private final String name;
    /**
     * @return `Internet` for public network or `Intranet` for private network.
     * 
     */
    private final String netType;
    /**
     * @return (Available in 1.124.3+) The source of the encryption key.
     * 
     */
    private final String origin;
    /**
     * @return (Available in 1.135.0+) Parameter list.
     * 
     */
    private final List<GetInstancesInstanceParameter> parameters;
    /**
     * @return (Available in 1.70.3+) RDS database connection port.
     * 
     */
    private final String port;
    /**
     * @return A list of IDs of read-only instances attached to the primary instance.
     * 
     */
    private final List<String> readonlyInstanceIds;
    /**
     * @return Region ID the instance belongs to.
     * 
     */
    private final String regionId;
    /**
     * @return (Available in 1.124.1+) The method that is used to verify the replication permission. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - cert
     * - perfer
     * - verify-ca
     * - verify-full (supported only when the instance runs PostgreSQL 12 or later)
     * 
     */
    private final String replicationAcl;
    /**
     * @return (Available in 1.124.1+) Indicates whether the server certificate needs to be updated.
     * - Valid values for ApsaraDB RDS for MySQL and ApsaraDB RDS for SQL Server:
     * - No
     * - Yes
     * - Valid values for ApsaraDB RDS for PostgreSQL:
     * - 0: no
     * - 1: yes
     * 
     */
    private final String requireUpdate;
    /**
     * @return (Available in 1.124.1+) The server certificate that needs to be updated. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private final String requireUpdateItem;
    /**
     * @return (Available in 1.124.1+) The reason why the server certificate needs to be updated. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private final String requireUpdateReason;
    /**
     * @return (Available in 1.124.1+) The URL of the CA that issues the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private final String serverCaUrl;
    /**
     * @return (Available in 1.124.1+) The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private final String serverCert;
    /**
     * @return (Available in 1.124.1+) The private key of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    private final String serverKey;
    /**
     * @return (Available in 1.124.1+) The time when the server certificate was created. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. In addition, this parameter is valid only when the CAType parameter is set to aliyun.
     * 
     */
    private final String sslCreateTime;
    /**
     * @return (Available in 1.124.1+) Indicates whether SSL encryption is enabled. Valid values:
     * - on: enabled
     * - off: disabled
     * 
     */
    private final String sslEnabled;
    /**
     * @return (Available in 1.124.1+) The time when the server certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    private final String sslExpireTime;
    /**
     * @return Status of the instance.
     * 
     */
    private final String status;
    /**
     * @return If a temporary instance is attached to the current instance, the ID of the temporary instance applies.
     * 
     */
    private final String tempInstanceId;
    /**
     * @return Used to retrieve instances belong to specified VPC.
     * 
     */
    private final String vpcId;
    /**
     * @return Used to retrieve instances belong to specified `vswitch` resources.
     * 
     */
    private final String vswitchId;
    /**
     * @return (Available in 1.101.0+) The region ID of the secondary instance if you create a secondary instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
     * 
     */
    private final String zoneIdSlaveA;
    /**
     * @return (Available in 1.101.0+) The region ID of the log instance if you create a log instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
     * 
     */
    private final String zoneIdSlaveB;

    @CustomType.Constructor
    private GetInstancesInstance(
        @CustomType.Parameter("acl") String acl,
        @CustomType.Parameter("availabilityZone") String availabilityZone,
        @CustomType.Parameter("caType") String caType,
        @CustomType.Parameter("chargeType") String chargeType,
        @CustomType.Parameter("clientCaCert") String clientCaCert,
        @CustomType.Parameter("clientCaCertExpireTime") String clientCaCertExpireTime,
        @CustomType.Parameter("clientCertRevocationList") String clientCertRevocationList,
        @CustomType.Parameter("connectionMode") String connectionMode,
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("creator") String creator,
        @CustomType.Parameter("dbInstanceStorageType") String dbInstanceStorageType,
        @CustomType.Parameter("dbType") String dbType,
        @CustomType.Parameter("deleteDate") String deleteDate,
        @CustomType.Parameter("deletionProtection") Boolean deletionProtection,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("encryptionKey") String encryptionKey,
        @CustomType.Parameter("encryptionKeyStatus") String encryptionKeyStatus,
        @CustomType.Parameter("engine") String engine,
        @CustomType.Parameter("engineVersion") String engineVersion,
        @CustomType.Parameter("expireTime") String expireTime,
        @CustomType.Parameter("guardInstanceId") String guardInstanceId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceStorage") Integer instanceStorage,
        @CustomType.Parameter("instanceType") String instanceType,
        @CustomType.Parameter("keyUsage") String keyUsage,
        @CustomType.Parameter("lastModifyStatus") String lastModifyStatus,
        @CustomType.Parameter("masterInstanceId") String masterInstanceId,
        @CustomType.Parameter("masterZone") String masterZone,
        @CustomType.Parameter("materialExpireTime") String materialExpireTime,
        @CustomType.Parameter("modifyStatusReason") String modifyStatusReason,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("netType") String netType,
        @CustomType.Parameter("origin") String origin,
        @CustomType.Parameter("parameters") List<GetInstancesInstanceParameter> parameters,
        @CustomType.Parameter("port") String port,
        @CustomType.Parameter("readonlyInstanceIds") List<String> readonlyInstanceIds,
        @CustomType.Parameter("regionId") String regionId,
        @CustomType.Parameter("replicationAcl") String replicationAcl,
        @CustomType.Parameter("requireUpdate") String requireUpdate,
        @CustomType.Parameter("requireUpdateItem") String requireUpdateItem,
        @CustomType.Parameter("requireUpdateReason") String requireUpdateReason,
        @CustomType.Parameter("serverCaUrl") String serverCaUrl,
        @CustomType.Parameter("serverCert") String serverCert,
        @CustomType.Parameter("serverKey") String serverKey,
        @CustomType.Parameter("sslCreateTime") String sslCreateTime,
        @CustomType.Parameter("sslEnabled") String sslEnabled,
        @CustomType.Parameter("sslExpireTime") String sslExpireTime,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tempInstanceId") String tempInstanceId,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchId") String vswitchId,
        @CustomType.Parameter("zoneIdSlaveA") String zoneIdSlaveA,
        @CustomType.Parameter("zoneIdSlaveB") String zoneIdSlaveB) {
        this.acl = acl;
        this.availabilityZone = availabilityZone;
        this.caType = caType;
        this.chargeType = chargeType;
        this.clientCaCert = clientCaCert;
        this.clientCaCertExpireTime = clientCaCertExpireTime;
        this.clientCertRevocationList = clientCertRevocationList;
        this.connectionMode = connectionMode;
        this.connectionString = connectionString;
        this.createTime = createTime;
        this.creator = creator;
        this.dbInstanceStorageType = dbInstanceStorageType;
        this.dbType = dbType;
        this.deleteDate = deleteDate;
        this.deletionProtection = deletionProtection;
        this.description = description;
        this.encryptionKey = encryptionKey;
        this.encryptionKeyStatus = encryptionKeyStatus;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.expireTime = expireTime;
        this.guardInstanceId = guardInstanceId;
        this.id = id;
        this.instanceStorage = instanceStorage;
        this.instanceType = instanceType;
        this.keyUsage = keyUsage;
        this.lastModifyStatus = lastModifyStatus;
        this.masterInstanceId = masterInstanceId;
        this.masterZone = masterZone;
        this.materialExpireTime = materialExpireTime;
        this.modifyStatusReason = modifyStatusReason;
        this.name = name;
        this.netType = netType;
        this.origin = origin;
        this.parameters = parameters;
        this.port = port;
        this.readonlyInstanceIds = readonlyInstanceIds;
        this.regionId = regionId;
        this.replicationAcl = replicationAcl;
        this.requireUpdate = requireUpdate;
        this.requireUpdateItem = requireUpdateItem;
        this.requireUpdateReason = requireUpdateReason;
        this.serverCaUrl = serverCaUrl;
        this.serverCert = serverCert;
        this.serverKey = serverKey;
        this.sslCreateTime = sslCreateTime;
        this.sslEnabled = sslEnabled;
        this.sslExpireTime = sslExpireTime;
        this.status = status;
        this.tempInstanceId = tempInstanceId;
        this.vpcId = vpcId;
        this.vswitchId = vswitchId;
        this.zoneIdSlaveA = zoneIdSlaveA;
        this.zoneIdSlaveB = zoneIdSlaveB;
    }

    /**
     * @return (Available in 1.124.1+) The method that is used to verify the identities of clients. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - cert
     * - perfer
     * - verify-ca
     * - verify-full (supported only when the instance runs PostgreSQL 12 or later)
     * 
     */
    public String acl() {
        return this.acl;
    }
    /**
     * @return Availability zone.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return (Available in 1.124.1+) The type of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - aliyun: a cloud certificate
     * - custom: a custom certificate
     * 
     */
    public String caType() {
        return this.caType;
    }
    /**
     * @return Billing method. Value options: `Postpaid` for Pay-As-You-Go and `Prepaid` for subscription.
     * 
     */
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return (Available in 1.124.1+) The public key of the CA that issues client certificates. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String clientCaCert() {
        return this.clientCaCert;
    }
    public String clientCaCertExpireTime() {
        return this.clientCaCertExpireTime;
    }
    /**
     * @return (Available in 1.124.1+) The certificate revocation list (CRL) that contains revoked client certificates. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String clientCertRevocationList() {
        return this.clientCertRevocationList;
    }
    /**
     * @return `Standard` for standard access mode and `Safe` for high security access mode.
     * 
     */
    public String connectionMode() {
        return this.connectionMode;
    }
    /**
     * @return (Available in 1.70.3+) RDS database connection string.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Creation time of the instance.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return (Available in 1.124.3+) The creator of the encryption key.
     * 
     */
    public String creator() {
        return this.creator;
    }
    /**
     * @return (Available in 1.70.3+) The storage type of the instance.
     * 
     */
    public String dbInstanceStorageType() {
        return this.dbInstanceStorageType;
    }
    /**
     * @return `Primary` for primary instance, `Readonly` for read-only instance, `Guard` for disaster recovery instance, and `Temp` for temporary instance.
     * 
     */
    public String dbType() {
        return this.dbType;
    }
    /**
     * @return (Available in 1.124.3+) The estimated time when the encryption key will be deleted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public String deleteDate() {
        return this.deleteDate;
    }
    /**
     * @return (Available in 1.167.0+) Indicates whether the release protection feature is enabled for the instance. Valid values:
     * * **true**: The release protection feature is enabled.
     * * **false**: The release protection feature is disabled.
     * 
     */
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * @return (Available in 1.124.3+) The description of the encryption key.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return (Available in 1.124.3+) The ID of the encryption key.
     * 
     */
    public String encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return (Available in 1.124.3+) The status of the encryption key. Valid values:
     * - Enabled
     * - Disabled
     * 
     */
    public String encryptionKeyStatus() {
        return this.encryptionKeyStatus;
    }
    /**
     * @return Database type. Options are `MySQL`, `SQLServer`, `PostgreSQL` and `PPAS`. If no value is specified, all types are returned.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return Database version.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return Expiration time. Pay-As-You-Go instances never expire.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return If a disaster recovery instance is attached to the current instance, the ID of the disaster recovery instance applies.
     * 
     */
    public String guardInstanceId() {
        return this.guardInstanceId;
    }
    /**
     * @return The ID of the RDS instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Available in 1.70.3+) User-defined DB instance storage space.
     * 
     */
    public Integer instanceStorage() {
        return this.instanceStorage;
    }
    /**
     * @return Sizing of the RDS instance.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return (Available in 1.124.3+) The purpose of the encryption key.
     * 
     */
    public String keyUsage() {
        return this.keyUsage;
    }
    /**
     * @return (Available in 1.124.1+) The status of the SSL link. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - success
     * - setting
     * - failed
     * 
     */
    public String lastModifyStatus() {
        return this.lastModifyStatus;
    }
    /**
     * @return ID of the primary instance. If this parameter is not returned, the current instance is a primary instance.
     * 
     */
    public String masterInstanceId() {
        return this.masterInstanceId;
    }
    /**
     * @return (Available in 1.101.0+) The master zone of the instance.
     * 
     */
    public String masterZone() {
        return this.masterZone;
    }
    /**
     * @return (Available in 1.124.3+) The time when the encryption key expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public String materialExpireTime() {
        return this.materialExpireTime;
    }
    /**
     * @return (Available in 1.124.1+) The reason why the SSL link stays in the current state. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String modifyStatusReason() {
        return this.modifyStatusReason;
    }
    /**
     * @return The name of the RDS instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return `Internet` for public network or `Intranet` for private network.
     * 
     */
    public String netType() {
        return this.netType;
    }
    /**
     * @return (Available in 1.124.3+) The source of the encryption key.
     * 
     */
    public String origin() {
        return this.origin;
    }
    /**
     * @return (Available in 1.135.0+) Parameter list.
     * 
     */
    public List<GetInstancesInstanceParameter> parameters() {
        return this.parameters;
    }
    /**
     * @return (Available in 1.70.3+) RDS database connection port.
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return A list of IDs of read-only instances attached to the primary instance.
     * 
     */
    public List<String> readonlyInstanceIds() {
        return this.readonlyInstanceIds;
    }
    /**
     * @return Region ID the instance belongs to.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return (Available in 1.124.1+) The method that is used to verify the replication permission. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. Valid values:
     * - cert
     * - perfer
     * - verify-ca
     * - verify-full (supported only when the instance runs PostgreSQL 12 or later)
     * 
     */
    public String replicationAcl() {
        return this.replicationAcl;
    }
    /**
     * @return (Available in 1.124.1+) Indicates whether the server certificate needs to be updated.
     * - Valid values for ApsaraDB RDS for MySQL and ApsaraDB RDS for SQL Server:
     * - No
     * - Yes
     * - Valid values for ApsaraDB RDS for PostgreSQL:
     * - 0: no
     * - 1: yes
     * 
     */
    public String requireUpdate() {
        return this.requireUpdate;
    }
    /**
     * @return (Available in 1.124.1+) The server certificate that needs to be updated. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String requireUpdateItem() {
        return this.requireUpdateItem;
    }
    /**
     * @return (Available in 1.124.1+) The reason why the server certificate needs to be updated. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String requireUpdateReason() {
        return this.requireUpdateReason;
    }
    /**
     * @return (Available in 1.124.1+) The URL of the CA that issues the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String serverCaUrl() {
        return this.serverCaUrl;
    }
    /**
     * @return (Available in 1.124.1+) The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String serverCert() {
        return this.serverCert;
    }
    /**
     * @return (Available in 1.124.1+) The private key of the server certificate. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs.
     * 
     */
    public String serverKey() {
        return this.serverKey;
    }
    /**
     * @return (Available in 1.124.1+) The time when the server certificate was created. This parameter is supported only when the instance runs PostgreSQL with standard or enhanced SSDs. In addition, this parameter is valid only when the CAType parameter is set to aliyun.
     * 
     */
    public String sslCreateTime() {
        return this.sslCreateTime;
    }
    /**
     * @return (Available in 1.124.1+) Indicates whether SSL encryption is enabled. Valid values:
     * - on: enabled
     * - off: disabled
     * 
     */
    public String sslEnabled() {
        return this.sslEnabled;
    }
    /**
     * @return (Available in 1.124.1+) The time when the server certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public String sslExpireTime() {
        return this.sslExpireTime;
    }
    /**
     * @return Status of the instance.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return If a temporary instance is attached to the current instance, the ID of the temporary instance applies.
     * 
     */
    public String tempInstanceId() {
        return this.tempInstanceId;
    }
    /**
     * @return Used to retrieve instances belong to specified VPC.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return Used to retrieve instances belong to specified `vswitch` resources.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return (Available in 1.101.0+) The region ID of the secondary instance if you create a secondary instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
     * 
     */
    public String zoneIdSlaveA() {
        return this.zoneIdSlaveA;
    }
    /**
     * @return (Available in 1.101.0+) The region ID of the log instance if you create a log instance. If you set this parameter to the same value as the ZoneId parameter, the instance is deployed in a single zone. Otherwise, the instance is deployed in multiple zones.
     * 
     */
    public String zoneIdSlaveB() {
        return this.zoneIdSlaveB;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String acl;
        private String availabilityZone;
        private String caType;
        private String chargeType;
        private String clientCaCert;
        private String clientCaCertExpireTime;
        private String clientCertRevocationList;
        private String connectionMode;
        private String connectionString;
        private String createTime;
        private String creator;
        private String dbInstanceStorageType;
        private String dbType;
        private String deleteDate;
        private Boolean deletionProtection;
        private String description;
        private String encryptionKey;
        private String encryptionKeyStatus;
        private String engine;
        private String engineVersion;
        private String expireTime;
        private String guardInstanceId;
        private String id;
        private Integer instanceStorage;
        private String instanceType;
        private String keyUsage;
        private String lastModifyStatus;
        private String masterInstanceId;
        private String masterZone;
        private String materialExpireTime;
        private String modifyStatusReason;
        private String name;
        private String netType;
        private String origin;
        private List<GetInstancesInstanceParameter> parameters;
        private String port;
        private List<String> readonlyInstanceIds;
        private String regionId;
        private String replicationAcl;
        private String requireUpdate;
        private String requireUpdateItem;
        private String requireUpdateReason;
        private String serverCaUrl;
        private String serverCert;
        private String serverKey;
        private String sslCreateTime;
        private String sslEnabled;
        private String sslExpireTime;
        private String status;
        private String tempInstanceId;
        private String vpcId;
        private String vswitchId;
        private String zoneIdSlaveA;
        private String zoneIdSlaveB;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.caType = defaults.caType;
    	      this.chargeType = defaults.chargeType;
    	      this.clientCaCert = defaults.clientCaCert;
    	      this.clientCaCertExpireTime = defaults.clientCaCertExpireTime;
    	      this.clientCertRevocationList = defaults.clientCertRevocationList;
    	      this.connectionMode = defaults.connectionMode;
    	      this.connectionString = defaults.connectionString;
    	      this.createTime = defaults.createTime;
    	      this.creator = defaults.creator;
    	      this.dbInstanceStorageType = defaults.dbInstanceStorageType;
    	      this.dbType = defaults.dbType;
    	      this.deleteDate = defaults.deleteDate;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.encryptionKeyStatus = defaults.encryptionKeyStatus;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.expireTime = defaults.expireTime;
    	      this.guardInstanceId = defaults.guardInstanceId;
    	      this.id = defaults.id;
    	      this.instanceStorage = defaults.instanceStorage;
    	      this.instanceType = defaults.instanceType;
    	      this.keyUsage = defaults.keyUsage;
    	      this.lastModifyStatus = defaults.lastModifyStatus;
    	      this.masterInstanceId = defaults.masterInstanceId;
    	      this.masterZone = defaults.masterZone;
    	      this.materialExpireTime = defaults.materialExpireTime;
    	      this.modifyStatusReason = defaults.modifyStatusReason;
    	      this.name = defaults.name;
    	      this.netType = defaults.netType;
    	      this.origin = defaults.origin;
    	      this.parameters = defaults.parameters;
    	      this.port = defaults.port;
    	      this.readonlyInstanceIds = defaults.readonlyInstanceIds;
    	      this.regionId = defaults.regionId;
    	      this.replicationAcl = defaults.replicationAcl;
    	      this.requireUpdate = defaults.requireUpdate;
    	      this.requireUpdateItem = defaults.requireUpdateItem;
    	      this.requireUpdateReason = defaults.requireUpdateReason;
    	      this.serverCaUrl = defaults.serverCaUrl;
    	      this.serverCert = defaults.serverCert;
    	      this.serverKey = defaults.serverKey;
    	      this.sslCreateTime = defaults.sslCreateTime;
    	      this.sslEnabled = defaults.sslEnabled;
    	      this.sslExpireTime = defaults.sslExpireTime;
    	      this.status = defaults.status;
    	      this.tempInstanceId = defaults.tempInstanceId;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneIdSlaveA = defaults.zoneIdSlaveA;
    	      this.zoneIdSlaveB = defaults.zoneIdSlaveB;
        }

        public Builder acl(String acl) {
            this.acl = Objects.requireNonNull(acl);
            return this;
        }
        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        public Builder caType(String caType) {
            this.caType = Objects.requireNonNull(caType);
            return this;
        }
        public Builder chargeType(String chargeType) {
            this.chargeType = Objects.requireNonNull(chargeType);
            return this;
        }
        public Builder clientCaCert(String clientCaCert) {
            this.clientCaCert = Objects.requireNonNull(clientCaCert);
            return this;
        }
        public Builder clientCaCertExpireTime(String clientCaCertExpireTime) {
            this.clientCaCertExpireTime = Objects.requireNonNull(clientCaCertExpireTime);
            return this;
        }
        public Builder clientCertRevocationList(String clientCertRevocationList) {
            this.clientCertRevocationList = Objects.requireNonNull(clientCertRevocationList);
            return this;
        }
        public Builder connectionMode(String connectionMode) {
            this.connectionMode = Objects.requireNonNull(connectionMode);
            return this;
        }
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder creator(String creator) {
            this.creator = Objects.requireNonNull(creator);
            return this;
        }
        public Builder dbInstanceStorageType(String dbInstanceStorageType) {
            this.dbInstanceStorageType = Objects.requireNonNull(dbInstanceStorageType);
            return this;
        }
        public Builder dbType(String dbType) {
            this.dbType = Objects.requireNonNull(dbType);
            return this;
        }
        public Builder deleteDate(String deleteDate) {
            this.deleteDate = Objects.requireNonNull(deleteDate);
            return this;
        }
        public Builder deletionProtection(Boolean deletionProtection) {
            this.deletionProtection = Objects.requireNonNull(deletionProtection);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder encryptionKey(String encryptionKey) {
            this.encryptionKey = Objects.requireNonNull(encryptionKey);
            return this;
        }
        public Builder encryptionKeyStatus(String encryptionKeyStatus) {
            this.encryptionKeyStatus = Objects.requireNonNull(encryptionKeyStatus);
            return this;
        }
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        public Builder engineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        public Builder guardInstanceId(String guardInstanceId) {
            this.guardInstanceId = Objects.requireNonNull(guardInstanceId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceStorage(Integer instanceStorage) {
            this.instanceStorage = Objects.requireNonNull(instanceStorage);
            return this;
        }
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        public Builder keyUsage(String keyUsage) {
            this.keyUsage = Objects.requireNonNull(keyUsage);
            return this;
        }
        public Builder lastModifyStatus(String lastModifyStatus) {
            this.lastModifyStatus = Objects.requireNonNull(lastModifyStatus);
            return this;
        }
        public Builder masterInstanceId(String masterInstanceId) {
            this.masterInstanceId = Objects.requireNonNull(masterInstanceId);
            return this;
        }
        public Builder masterZone(String masterZone) {
            this.masterZone = Objects.requireNonNull(masterZone);
            return this;
        }
        public Builder materialExpireTime(String materialExpireTime) {
            this.materialExpireTime = Objects.requireNonNull(materialExpireTime);
            return this;
        }
        public Builder modifyStatusReason(String modifyStatusReason) {
            this.modifyStatusReason = Objects.requireNonNull(modifyStatusReason);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder netType(String netType) {
            this.netType = Objects.requireNonNull(netType);
            return this;
        }
        public Builder origin(String origin) {
            this.origin = Objects.requireNonNull(origin);
            return this;
        }
        public Builder parameters(List<GetInstancesInstanceParameter> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        public Builder parameters(GetInstancesInstanceParameter... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder port(String port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder readonlyInstanceIds(List<String> readonlyInstanceIds) {
            this.readonlyInstanceIds = Objects.requireNonNull(readonlyInstanceIds);
            return this;
        }
        public Builder readonlyInstanceIds(String... readonlyInstanceIds) {
            return readonlyInstanceIds(List.of(readonlyInstanceIds));
        }
        public Builder regionId(String regionId) {
            this.regionId = Objects.requireNonNull(regionId);
            return this;
        }
        public Builder replicationAcl(String replicationAcl) {
            this.replicationAcl = Objects.requireNonNull(replicationAcl);
            return this;
        }
        public Builder requireUpdate(String requireUpdate) {
            this.requireUpdate = Objects.requireNonNull(requireUpdate);
            return this;
        }
        public Builder requireUpdateItem(String requireUpdateItem) {
            this.requireUpdateItem = Objects.requireNonNull(requireUpdateItem);
            return this;
        }
        public Builder requireUpdateReason(String requireUpdateReason) {
            this.requireUpdateReason = Objects.requireNonNull(requireUpdateReason);
            return this;
        }
        public Builder serverCaUrl(String serverCaUrl) {
            this.serverCaUrl = Objects.requireNonNull(serverCaUrl);
            return this;
        }
        public Builder serverCert(String serverCert) {
            this.serverCert = Objects.requireNonNull(serverCert);
            return this;
        }
        public Builder serverKey(String serverKey) {
            this.serverKey = Objects.requireNonNull(serverKey);
            return this;
        }
        public Builder sslCreateTime(String sslCreateTime) {
            this.sslCreateTime = Objects.requireNonNull(sslCreateTime);
            return this;
        }
        public Builder sslEnabled(String sslEnabled) {
            this.sslEnabled = Objects.requireNonNull(sslEnabled);
            return this;
        }
        public Builder sslExpireTime(String sslExpireTime) {
            this.sslExpireTime = Objects.requireNonNull(sslExpireTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tempInstanceId(String tempInstanceId) {
            this.tempInstanceId = Objects.requireNonNull(tempInstanceId);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        public Builder zoneIdSlaveA(String zoneIdSlaveA) {
            this.zoneIdSlaveA = Objects.requireNonNull(zoneIdSlaveA);
            return this;
        }
        public Builder zoneIdSlaveB(String zoneIdSlaveB) {
            this.zoneIdSlaveB = Objects.requireNonNull(zoneIdSlaveB);
            return this;
        }        public GetInstancesInstance build() {
            return new GetInstancesInstance(acl, availabilityZone, caType, chargeType, clientCaCert, clientCaCertExpireTime, clientCertRevocationList, connectionMode, connectionString, createTime, creator, dbInstanceStorageType, dbType, deleteDate, deletionProtection, description, encryptionKey, encryptionKeyStatus, engine, engineVersion, expireTime, guardInstanceId, id, instanceStorage, instanceType, keyUsage, lastModifyStatus, masterInstanceId, masterZone, materialExpireTime, modifyStatusReason, name, netType, origin, parameters, port, readonlyInstanceIds, regionId, replicationAcl, requireUpdate, requireUpdateItem, requireUpdateReason, serverCaUrl, serverCert, serverKey, sslCreateTime, sslEnabled, sslExpireTime, status, tempInstanceId, vpcId, vswitchId, zoneIdSlaveA, zoneIdSlaveB);
        }
    }
}
