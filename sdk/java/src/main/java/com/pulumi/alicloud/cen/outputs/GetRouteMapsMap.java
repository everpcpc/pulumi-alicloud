// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRouteMapsMap {
    /**
     * @return A match statement. It indicates the mode in which the as-path attribute is matched.
     * 
     */
    private final String asPathMatchMode;
    /**
     * @return The ID of the CEN instance.
     * 
     */
    private final String cenId;
    /**
     * @return The ID of the region to which the CEN instance belongs.
     * 
     */
    private final String cenRegionId;
    /**
     * @return A match statement. It indicates the mode in which the prefix attribute is matched.
     * 
     */
    private final String cidrMatchMode;
    /**
     * @return A match statement. It indicates the mode in which the community attribute is matched.
     * 
     */
    private final String communityMatchMode;
    /**
     * @return An action statement. It indicates the mode in which the community attribute is operated.
     * 
     */
    private final String communityOperateMode;
    /**
     * @return The description of the route map.
     * 
     */
    private final String description;
    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    private final List<String> destinationChildInstanceTypes;
    /**
     * @return A match statement that indicates the prefix list.
     * 
     */
    private final List<String> destinationCidrBlocks;
    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    private final List<String> destinationInstanceIds;
    /**
     * @return Indicates whether to enable the reverse match method of the DestinationInstanceIds match condition.
     * 
     */
    private final Boolean destinationInstanceIdsReverseMatch;
    /**
     * @return A match statement that indicates the list of IDs of the destination route tables.
     * 
     */
    private final List<String> destinationRouteTableIds;
    /**
     * @return The ID of the route map. It formats as `&lt;cen_id&gt;:&lt;route_map_id&gt;`. Before 1.161.0, it is `route_map_id`.
     * 
     */
    private final String id;
    /**
     * @return The action that is performed to a route if the route meets all the match conditions.
     * 
     */
    private final String mapResult;
    /**
     * @return A match statement that indicates the As path list.
     * 
     */
    private final List<String> matchAsns;
    /**
     * @return A match statement that indicates the community set.
     * 
     */
    private final List<String> matchCommunitySets;
    /**
     * @return The priority of the next route map that is associated with the current route map.
     * 
     */
    private final Integer nextPriority;
    /**
     * @return An action statement that operates the community attribute.
     * 
     */
    private final List<String> operateCommunitySets;
    /**
     * @return An action statement that modifies the preference of the route.
     * 
     */
    private final Integer preference;
    /**
     * @return Indicates AS Path prepending when a regional gateway receives or publishes a route.
     * 
     */
    private final List<String> prependAsPaths;
    /**
     * @return The priority of the route map.
     * 
     */
    private final Integer priority;
    /**
     * @return The ID of the route map.
     * 
     */
    private final String routeMapId;
    /**
     * @return A match statement that indicates the list of route types.
     * 
     */
    private final List<String> routeTypes;
    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    private final List<String> sourceChildInstanceTypes;
    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    private final List<String> sourceInstanceIds;
    /**
     * @return Indicates whether to enable the reverse match method of the SourceInstanceIds match condition.
     * 
     */
    private final Boolean sourceInstanceIdsReverseMatch;
    /**
     * @return A match statement that indicates the list of IDs of the source regions.
     * 
     */
    private final List<String> sourceRegionIds;
    /**
     * @return A match statement that indicates the list of IDs of the source route tables.
     * 
     */
    private final List<String> sourceRouteTableIds;
    /**
     * @return The status of the route map, including `Creating`, `Active` and `Deleting`.
     * 
     */
    private final String status;
    /**
     * @return The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
     * 
     */
    private final String transmitDirection;

    @CustomType.Constructor
    private GetRouteMapsMap(
        @CustomType.Parameter("asPathMatchMode") String asPathMatchMode,
        @CustomType.Parameter("cenId") String cenId,
        @CustomType.Parameter("cenRegionId") String cenRegionId,
        @CustomType.Parameter("cidrMatchMode") String cidrMatchMode,
        @CustomType.Parameter("communityMatchMode") String communityMatchMode,
        @CustomType.Parameter("communityOperateMode") String communityOperateMode,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("destinationChildInstanceTypes") List<String> destinationChildInstanceTypes,
        @CustomType.Parameter("destinationCidrBlocks") List<String> destinationCidrBlocks,
        @CustomType.Parameter("destinationInstanceIds") List<String> destinationInstanceIds,
        @CustomType.Parameter("destinationInstanceIdsReverseMatch") Boolean destinationInstanceIdsReverseMatch,
        @CustomType.Parameter("destinationRouteTableIds") List<String> destinationRouteTableIds,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("mapResult") String mapResult,
        @CustomType.Parameter("matchAsns") List<String> matchAsns,
        @CustomType.Parameter("matchCommunitySets") List<String> matchCommunitySets,
        @CustomType.Parameter("nextPriority") Integer nextPriority,
        @CustomType.Parameter("operateCommunitySets") List<String> operateCommunitySets,
        @CustomType.Parameter("preference") Integer preference,
        @CustomType.Parameter("prependAsPaths") List<String> prependAsPaths,
        @CustomType.Parameter("priority") Integer priority,
        @CustomType.Parameter("routeMapId") String routeMapId,
        @CustomType.Parameter("routeTypes") List<String> routeTypes,
        @CustomType.Parameter("sourceChildInstanceTypes") List<String> sourceChildInstanceTypes,
        @CustomType.Parameter("sourceInstanceIds") List<String> sourceInstanceIds,
        @CustomType.Parameter("sourceInstanceIdsReverseMatch") Boolean sourceInstanceIdsReverseMatch,
        @CustomType.Parameter("sourceRegionIds") List<String> sourceRegionIds,
        @CustomType.Parameter("sourceRouteTableIds") List<String> sourceRouteTableIds,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("transmitDirection") String transmitDirection) {
        this.asPathMatchMode = asPathMatchMode;
        this.cenId = cenId;
        this.cenRegionId = cenRegionId;
        this.cidrMatchMode = cidrMatchMode;
        this.communityMatchMode = communityMatchMode;
        this.communityOperateMode = communityOperateMode;
        this.description = description;
        this.destinationChildInstanceTypes = destinationChildInstanceTypes;
        this.destinationCidrBlocks = destinationCidrBlocks;
        this.destinationInstanceIds = destinationInstanceIds;
        this.destinationInstanceIdsReverseMatch = destinationInstanceIdsReverseMatch;
        this.destinationRouteTableIds = destinationRouteTableIds;
        this.id = id;
        this.mapResult = mapResult;
        this.matchAsns = matchAsns;
        this.matchCommunitySets = matchCommunitySets;
        this.nextPriority = nextPriority;
        this.operateCommunitySets = operateCommunitySets;
        this.preference = preference;
        this.prependAsPaths = prependAsPaths;
        this.priority = priority;
        this.routeMapId = routeMapId;
        this.routeTypes = routeTypes;
        this.sourceChildInstanceTypes = sourceChildInstanceTypes;
        this.sourceInstanceIds = sourceInstanceIds;
        this.sourceInstanceIdsReverseMatch = sourceInstanceIdsReverseMatch;
        this.sourceRegionIds = sourceRegionIds;
        this.sourceRouteTableIds = sourceRouteTableIds;
        this.status = status;
        this.transmitDirection = transmitDirection;
    }

    /**
     * @return A match statement. It indicates the mode in which the as-path attribute is matched.
     * 
     */
    public String asPathMatchMode() {
        return this.asPathMatchMode;
    }
    /**
     * @return The ID of the CEN instance.
     * 
     */
    public String cenId() {
        return this.cenId;
    }
    /**
     * @return The ID of the region to which the CEN instance belongs.
     * 
     */
    public String cenRegionId() {
        return this.cenRegionId;
    }
    /**
     * @return A match statement. It indicates the mode in which the prefix attribute is matched.
     * 
     */
    public String cidrMatchMode() {
        return this.cidrMatchMode;
    }
    /**
     * @return A match statement. It indicates the mode in which the community attribute is matched.
     * 
     */
    public String communityMatchMode() {
        return this.communityMatchMode;
    }
    /**
     * @return An action statement. It indicates the mode in which the community attribute is operated.
     * 
     */
    public String communityOperateMode() {
        return this.communityOperateMode;
    }
    /**
     * @return The description of the route map.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    public List<String> destinationChildInstanceTypes() {
        return this.destinationChildInstanceTypes;
    }
    /**
     * @return A match statement that indicates the prefix list.
     * 
     */
    public List<String> destinationCidrBlocks() {
        return this.destinationCidrBlocks;
    }
    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    public List<String> destinationInstanceIds() {
        return this.destinationInstanceIds;
    }
    /**
     * @return Indicates whether to enable the reverse match method of the DestinationInstanceIds match condition.
     * 
     */
    public Boolean destinationInstanceIdsReverseMatch() {
        return this.destinationInstanceIdsReverseMatch;
    }
    /**
     * @return A match statement that indicates the list of IDs of the destination route tables.
     * 
     */
    public List<String> destinationRouteTableIds() {
        return this.destinationRouteTableIds;
    }
    /**
     * @return The ID of the route map. It formats as `&lt;cen_id&gt;:&lt;route_map_id&gt;`. Before 1.161.0, it is `route_map_id`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The action that is performed to a route if the route meets all the match conditions.
     * 
     */
    public String mapResult() {
        return this.mapResult;
    }
    /**
     * @return A match statement that indicates the As path list.
     * 
     */
    public List<String> matchAsns() {
        return this.matchAsns;
    }
    /**
     * @return A match statement that indicates the community set.
     * 
     */
    public List<String> matchCommunitySets() {
        return this.matchCommunitySets;
    }
    /**
     * @return The priority of the next route map that is associated with the current route map.
     * 
     */
    public Integer nextPriority() {
        return this.nextPriority;
    }
    /**
     * @return An action statement that operates the community attribute.
     * 
     */
    public List<String> operateCommunitySets() {
        return this.operateCommunitySets;
    }
    /**
     * @return An action statement that modifies the preference of the route.
     * 
     */
    public Integer preference() {
        return this.preference;
    }
    /**
     * @return Indicates AS Path prepending when a regional gateway receives or publishes a route.
     * 
     */
    public List<String> prependAsPaths() {
        return this.prependAsPaths;
    }
    /**
     * @return The priority of the route map.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The ID of the route map.
     * 
     */
    public String routeMapId() {
        return this.routeMapId;
    }
    /**
     * @return A match statement that indicates the list of route types.
     * 
     */
    public List<String> routeTypes() {
        return this.routeTypes;
    }
    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    public List<String> sourceChildInstanceTypes() {
        return this.sourceChildInstanceTypes;
    }
    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    public List<String> sourceInstanceIds() {
        return this.sourceInstanceIds;
    }
    /**
     * @return Indicates whether to enable the reverse match method of the SourceInstanceIds match condition.
     * 
     */
    public Boolean sourceInstanceIdsReverseMatch() {
        return this.sourceInstanceIdsReverseMatch;
    }
    /**
     * @return A match statement that indicates the list of IDs of the source regions.
     * 
     */
    public List<String> sourceRegionIds() {
        return this.sourceRegionIds;
    }
    /**
     * @return A match statement that indicates the list of IDs of the source route tables.
     * 
     */
    public List<String> sourceRouteTableIds() {
        return this.sourceRouteTableIds;
    }
    /**
     * @return The status of the route map, including `Creating`, `Active` and `Deleting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
     * 
     */
    public String transmitDirection() {
        return this.transmitDirection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteMapsMap defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String asPathMatchMode;
        private String cenId;
        private String cenRegionId;
        private String cidrMatchMode;
        private String communityMatchMode;
        private String communityOperateMode;
        private String description;
        private List<String> destinationChildInstanceTypes;
        private List<String> destinationCidrBlocks;
        private List<String> destinationInstanceIds;
        private Boolean destinationInstanceIdsReverseMatch;
        private List<String> destinationRouteTableIds;
        private String id;
        private String mapResult;
        private List<String> matchAsns;
        private List<String> matchCommunitySets;
        private Integer nextPriority;
        private List<String> operateCommunitySets;
        private Integer preference;
        private List<String> prependAsPaths;
        private Integer priority;
        private String routeMapId;
        private List<String> routeTypes;
        private List<String> sourceChildInstanceTypes;
        private List<String> sourceInstanceIds;
        private Boolean sourceInstanceIdsReverseMatch;
        private List<String> sourceRegionIds;
        private List<String> sourceRouteTableIds;
        private String status;
        private String transmitDirection;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRouteMapsMap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asPathMatchMode = defaults.asPathMatchMode;
    	      this.cenId = defaults.cenId;
    	      this.cenRegionId = defaults.cenRegionId;
    	      this.cidrMatchMode = defaults.cidrMatchMode;
    	      this.communityMatchMode = defaults.communityMatchMode;
    	      this.communityOperateMode = defaults.communityOperateMode;
    	      this.description = defaults.description;
    	      this.destinationChildInstanceTypes = defaults.destinationChildInstanceTypes;
    	      this.destinationCidrBlocks = defaults.destinationCidrBlocks;
    	      this.destinationInstanceIds = defaults.destinationInstanceIds;
    	      this.destinationInstanceIdsReverseMatch = defaults.destinationInstanceIdsReverseMatch;
    	      this.destinationRouteTableIds = defaults.destinationRouteTableIds;
    	      this.id = defaults.id;
    	      this.mapResult = defaults.mapResult;
    	      this.matchAsns = defaults.matchAsns;
    	      this.matchCommunitySets = defaults.matchCommunitySets;
    	      this.nextPriority = defaults.nextPriority;
    	      this.operateCommunitySets = defaults.operateCommunitySets;
    	      this.preference = defaults.preference;
    	      this.prependAsPaths = defaults.prependAsPaths;
    	      this.priority = defaults.priority;
    	      this.routeMapId = defaults.routeMapId;
    	      this.routeTypes = defaults.routeTypes;
    	      this.sourceChildInstanceTypes = defaults.sourceChildInstanceTypes;
    	      this.sourceInstanceIds = defaults.sourceInstanceIds;
    	      this.sourceInstanceIdsReverseMatch = defaults.sourceInstanceIdsReverseMatch;
    	      this.sourceRegionIds = defaults.sourceRegionIds;
    	      this.sourceRouteTableIds = defaults.sourceRouteTableIds;
    	      this.status = defaults.status;
    	      this.transmitDirection = defaults.transmitDirection;
        }

        public Builder asPathMatchMode(String asPathMatchMode) {
            this.asPathMatchMode = Objects.requireNonNull(asPathMatchMode);
            return this;
        }
        public Builder cenId(String cenId) {
            this.cenId = Objects.requireNonNull(cenId);
            return this;
        }
        public Builder cenRegionId(String cenRegionId) {
            this.cenRegionId = Objects.requireNonNull(cenRegionId);
            return this;
        }
        public Builder cidrMatchMode(String cidrMatchMode) {
            this.cidrMatchMode = Objects.requireNonNull(cidrMatchMode);
            return this;
        }
        public Builder communityMatchMode(String communityMatchMode) {
            this.communityMatchMode = Objects.requireNonNull(communityMatchMode);
            return this;
        }
        public Builder communityOperateMode(String communityOperateMode) {
            this.communityOperateMode = Objects.requireNonNull(communityOperateMode);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder destinationChildInstanceTypes(List<String> destinationChildInstanceTypes) {
            this.destinationChildInstanceTypes = Objects.requireNonNull(destinationChildInstanceTypes);
            return this;
        }
        public Builder destinationChildInstanceTypes(String... destinationChildInstanceTypes) {
            return destinationChildInstanceTypes(List.of(destinationChildInstanceTypes));
        }
        public Builder destinationCidrBlocks(List<String> destinationCidrBlocks) {
            this.destinationCidrBlocks = Objects.requireNonNull(destinationCidrBlocks);
            return this;
        }
        public Builder destinationCidrBlocks(String... destinationCidrBlocks) {
            return destinationCidrBlocks(List.of(destinationCidrBlocks));
        }
        public Builder destinationInstanceIds(List<String> destinationInstanceIds) {
            this.destinationInstanceIds = Objects.requireNonNull(destinationInstanceIds);
            return this;
        }
        public Builder destinationInstanceIds(String... destinationInstanceIds) {
            return destinationInstanceIds(List.of(destinationInstanceIds));
        }
        public Builder destinationInstanceIdsReverseMatch(Boolean destinationInstanceIdsReverseMatch) {
            this.destinationInstanceIdsReverseMatch = Objects.requireNonNull(destinationInstanceIdsReverseMatch);
            return this;
        }
        public Builder destinationRouteTableIds(List<String> destinationRouteTableIds) {
            this.destinationRouteTableIds = Objects.requireNonNull(destinationRouteTableIds);
            return this;
        }
        public Builder destinationRouteTableIds(String... destinationRouteTableIds) {
            return destinationRouteTableIds(List.of(destinationRouteTableIds));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder mapResult(String mapResult) {
            this.mapResult = Objects.requireNonNull(mapResult);
            return this;
        }
        public Builder matchAsns(List<String> matchAsns) {
            this.matchAsns = Objects.requireNonNull(matchAsns);
            return this;
        }
        public Builder matchAsns(String... matchAsns) {
            return matchAsns(List.of(matchAsns));
        }
        public Builder matchCommunitySets(List<String> matchCommunitySets) {
            this.matchCommunitySets = Objects.requireNonNull(matchCommunitySets);
            return this;
        }
        public Builder matchCommunitySets(String... matchCommunitySets) {
            return matchCommunitySets(List.of(matchCommunitySets));
        }
        public Builder nextPriority(Integer nextPriority) {
            this.nextPriority = Objects.requireNonNull(nextPriority);
            return this;
        }
        public Builder operateCommunitySets(List<String> operateCommunitySets) {
            this.operateCommunitySets = Objects.requireNonNull(operateCommunitySets);
            return this;
        }
        public Builder operateCommunitySets(String... operateCommunitySets) {
            return operateCommunitySets(List.of(operateCommunitySets));
        }
        public Builder preference(Integer preference) {
            this.preference = Objects.requireNonNull(preference);
            return this;
        }
        public Builder prependAsPaths(List<String> prependAsPaths) {
            this.prependAsPaths = Objects.requireNonNull(prependAsPaths);
            return this;
        }
        public Builder prependAsPaths(String... prependAsPaths) {
            return prependAsPaths(List.of(prependAsPaths));
        }
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public Builder routeMapId(String routeMapId) {
            this.routeMapId = Objects.requireNonNull(routeMapId);
            return this;
        }
        public Builder routeTypes(List<String> routeTypes) {
            this.routeTypes = Objects.requireNonNull(routeTypes);
            return this;
        }
        public Builder routeTypes(String... routeTypes) {
            return routeTypes(List.of(routeTypes));
        }
        public Builder sourceChildInstanceTypes(List<String> sourceChildInstanceTypes) {
            this.sourceChildInstanceTypes = Objects.requireNonNull(sourceChildInstanceTypes);
            return this;
        }
        public Builder sourceChildInstanceTypes(String... sourceChildInstanceTypes) {
            return sourceChildInstanceTypes(List.of(sourceChildInstanceTypes));
        }
        public Builder sourceInstanceIds(List<String> sourceInstanceIds) {
            this.sourceInstanceIds = Objects.requireNonNull(sourceInstanceIds);
            return this;
        }
        public Builder sourceInstanceIds(String... sourceInstanceIds) {
            return sourceInstanceIds(List.of(sourceInstanceIds));
        }
        public Builder sourceInstanceIdsReverseMatch(Boolean sourceInstanceIdsReverseMatch) {
            this.sourceInstanceIdsReverseMatch = Objects.requireNonNull(sourceInstanceIdsReverseMatch);
            return this;
        }
        public Builder sourceRegionIds(List<String> sourceRegionIds) {
            this.sourceRegionIds = Objects.requireNonNull(sourceRegionIds);
            return this;
        }
        public Builder sourceRegionIds(String... sourceRegionIds) {
            return sourceRegionIds(List.of(sourceRegionIds));
        }
        public Builder sourceRouteTableIds(List<String> sourceRouteTableIds) {
            this.sourceRouteTableIds = Objects.requireNonNull(sourceRouteTableIds);
            return this;
        }
        public Builder sourceRouteTableIds(String... sourceRouteTableIds) {
            return sourceRouteTableIds(List.of(sourceRouteTableIds));
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder transmitDirection(String transmitDirection) {
            this.transmitDirection = Objects.requireNonNull(transmitDirection);
            return this;
        }        public GetRouteMapsMap build() {
            return new GetRouteMapsMap(asPathMatchMode, cenId, cenRegionId, cidrMatchMode, communityMatchMode, communityOperateMode, description, destinationChildInstanceTypes, destinationCidrBlocks, destinationInstanceIds, destinationInstanceIdsReverseMatch, destinationRouteTableIds, id, mapResult, matchAsns, matchCommunitySets, nextPriority, operateCommunitySets, preference, prependAsPaths, priority, routeMapId, routeTypes, sourceChildInstanceTypes, sourceInstanceIds, sourceInstanceIdsReverseMatch, sourceRegionIds, sourceRouteTableIds, status, transmitDirection);
        }
    }
}
