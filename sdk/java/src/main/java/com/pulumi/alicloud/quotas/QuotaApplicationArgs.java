// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.quotas;

import com.pulumi.alicloud.quotas.inputs.QuotaApplicationDimensionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuotaApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final QuotaApplicationArgs Empty = new QuotaApplicationArgs();

    /**
     * The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
     * 
     */
    @Import(name="auditMode")
    private @Nullable Output<String> auditMode;

    /**
     * @return The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
     * 
     */
    public Optional<Output<String>> auditMode() {
        return Optional.ofNullable(this.auditMode);
    }

    /**
     * The desire value of the quota application.
     * 
     */
    @Import(name="desireValue", required=true)
    private Output<Double> desireValue;

    /**
     * @return The desire value of the quota application.
     * 
     */
    public Output<Double> desireValue() {
        return this.desireValue;
    }

    /**
     * The quota dimensions.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<List<QuotaApplicationDimensionArgs>> dimensions;

    /**
     * @return The quota dimensions.
     * 
     */
    public Optional<Output<List<QuotaApplicationDimensionArgs>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * The notice type. Valid values: `0`, `1`, `2`, `3`.
     * 
     */
    @Import(name="noticeType")
    private @Nullable Output<Integer> noticeType;

    /**
     * @return The notice type. Valid values: `0`, `1`, `2`, `3`.
     * 
     */
    public Optional<Output<Integer>> noticeType() {
        return Optional.ofNullable(this.noticeType);
    }

    /**
     * The product code.
     * 
     */
    @Import(name="productCode", required=true)
    private Output<String> productCode;

    /**
     * @return The product code.
     * 
     */
    public Output<String> productCode() {
        return this.productCode;
    }

    /**
     * The ID of quota action.
     * 
     */
    @Import(name="quotaActionCode", required=true)
    private Output<String> quotaActionCode;

    /**
     * @return The ID of quota action.
     * 
     */
    public Output<String> quotaActionCode() {
        return this.quotaActionCode;
    }

    /**
     * The quota category. Valid values: `CommonQuota`, `FlowControl`.
     * 
     */
    @Import(name="quotaCategory")
    private @Nullable Output<String> quotaCategory;

    /**
     * @return The quota category. Valid values: `CommonQuota`, `FlowControl`.
     * 
     */
    public Optional<Output<String>> quotaCategory() {
        return Optional.ofNullable(this.quotaCategory);
    }

    /**
     * The reason of the quota application.
     * 
     */
    @Import(name="reason", required=true)
    private Output<String> reason;

    /**
     * @return The reason of the quota application.
     * 
     */
    public Output<String> reason() {
        return this.reason;
    }

    private QuotaApplicationArgs() {}

    private QuotaApplicationArgs(QuotaApplicationArgs $) {
        this.auditMode = $.auditMode;
        this.desireValue = $.desireValue;
        this.dimensions = $.dimensions;
        this.noticeType = $.noticeType;
        this.productCode = $.productCode;
        this.quotaActionCode = $.quotaActionCode;
        this.quotaCategory = $.quotaCategory;
        this.reason = $.reason;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuotaApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuotaApplicationArgs $;

        public Builder() {
            $ = new QuotaApplicationArgs();
        }

        public Builder(QuotaApplicationArgs defaults) {
            $ = new QuotaApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditMode The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
         * 
         * @return builder
         * 
         */
        public Builder auditMode(@Nullable Output<String> auditMode) {
            $.auditMode = auditMode;
            return this;
        }

        /**
         * @param auditMode The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
         * 
         * @return builder
         * 
         */
        public Builder auditMode(String auditMode) {
            return auditMode(Output.of(auditMode));
        }

        /**
         * @param desireValue The desire value of the quota application.
         * 
         * @return builder
         * 
         */
        public Builder desireValue(Output<Double> desireValue) {
            $.desireValue = desireValue;
            return this;
        }

        /**
         * @param desireValue The desire value of the quota application.
         * 
         * @return builder
         * 
         */
        public Builder desireValue(Double desireValue) {
            return desireValue(Output.of(desireValue));
        }

        /**
         * @param dimensions The quota dimensions.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<List<QuotaApplicationDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions The quota dimensions.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(List<QuotaApplicationDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param dimensions The quota dimensions.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(QuotaApplicationDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        /**
         * @param noticeType The notice type. Valid values: `0`, `1`, `2`, `3`.
         * 
         * @return builder
         * 
         */
        public Builder noticeType(@Nullable Output<Integer> noticeType) {
            $.noticeType = noticeType;
            return this;
        }

        /**
         * @param noticeType The notice type. Valid values: `0`, `1`, `2`, `3`.
         * 
         * @return builder
         * 
         */
        public Builder noticeType(Integer noticeType) {
            return noticeType(Output.of(noticeType));
        }

        /**
         * @param productCode The product code.
         * 
         * @return builder
         * 
         */
        public Builder productCode(Output<String> productCode) {
            $.productCode = productCode;
            return this;
        }

        /**
         * @param productCode The product code.
         * 
         * @return builder
         * 
         */
        public Builder productCode(String productCode) {
            return productCode(Output.of(productCode));
        }

        /**
         * @param quotaActionCode The ID of quota action.
         * 
         * @return builder
         * 
         */
        public Builder quotaActionCode(Output<String> quotaActionCode) {
            $.quotaActionCode = quotaActionCode;
            return this;
        }

        /**
         * @param quotaActionCode The ID of quota action.
         * 
         * @return builder
         * 
         */
        public Builder quotaActionCode(String quotaActionCode) {
            return quotaActionCode(Output.of(quotaActionCode));
        }

        /**
         * @param quotaCategory The quota category. Valid values: `CommonQuota`, `FlowControl`.
         * 
         * @return builder
         * 
         */
        public Builder quotaCategory(@Nullable Output<String> quotaCategory) {
            $.quotaCategory = quotaCategory;
            return this;
        }

        /**
         * @param quotaCategory The quota category. Valid values: `CommonQuota`, `FlowControl`.
         * 
         * @return builder
         * 
         */
        public Builder quotaCategory(String quotaCategory) {
            return quotaCategory(Output.of(quotaCategory));
        }

        /**
         * @param reason The reason of the quota application.
         * 
         * @return builder
         * 
         */
        public Builder reason(Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason The reason of the quota application.
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        public QuotaApplicationArgs build() {
            $.desireValue = Objects.requireNonNull($.desireValue, "expected parameter 'desireValue' to be non-null");
            $.productCode = Objects.requireNonNull($.productCode, "expected parameter 'productCode' to be non-null");
            $.quotaActionCode = Objects.requireNonNull($.quotaActionCode, "expected parameter 'quotaActionCode' to be non-null");
            $.reason = Objects.requireNonNull($.reason, "expected parameter 'reason' to be non-null");
            return $;
        }
    }

}
