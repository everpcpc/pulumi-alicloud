// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.alicloud.ecs.outputs.GetEcsDisksDisk;
import com.pulumi.alicloud.ecs.outputs.GetEcsDisksOperationLock;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEcsDisksResult {
    private final @Nullable List<String> additionalAttributes;
    private final @Nullable String autoSnapshotPolicyId;
    /**
     * @deprecated
     * Field &#39;availability_zone&#39; has been deprecated from provider version 1.122.0. New field &#39;zone_id&#39; instead
     * 
     */
    @Deprecated /* Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead */
    private final @Nullable String availabilityZone;
    private final @Nullable String category;
    private final @Nullable Boolean deleteAutoSnapshot;
    private final @Nullable Boolean deleteWithInstance;
    private final @Nullable String diskName;
    private final @Nullable String diskType;
    private final List<GetEcsDisksDisk> disks;
    private final @Nullable Boolean dryRun;
    private final @Nullable Boolean enableAutoSnapshot;
    private final @Nullable Boolean enableAutomatedSnapshotPolicy;
    private final @Nullable Boolean enableShared;
    private final @Nullable String encrypted;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final List<String> ids;
    private final @Nullable String instanceId;
    private final @Nullable String kmsKeyId;
    private final @Nullable String nameRegex;
    private final List<String> names;
    private final @Nullable List<GetEcsDisksOperationLock> operationLocks;
    private final @Nullable String outputFile;
    private final @Nullable Integer pageNumber;
    private final @Nullable Integer pageSize;
    private final @Nullable String paymentType;
    private final @Nullable Boolean portable;
    private final @Nullable String resourceGroupId;
    private final @Nullable String snapshotId;
    private final @Nullable String status;
    private final @Nullable Map<String,Object> tags;
    private final Integer totalCount;
    /**
     * @deprecated
     * Field &#39;type&#39; has been deprecated from provider version 1.122.0. New field &#39;disk_type&#39; instead.
     * 
     */
    @Deprecated /* Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead. */
    private final @Nullable String type;
    private final @Nullable String zoneId;

    @CustomType.Constructor
    private GetEcsDisksResult(
        @CustomType.Parameter("additionalAttributes") @Nullable List<String> additionalAttributes,
        @CustomType.Parameter("autoSnapshotPolicyId") @Nullable String autoSnapshotPolicyId,
        @CustomType.Parameter("availabilityZone") @Nullable String availabilityZone,
        @CustomType.Parameter("category") @Nullable String category,
        @CustomType.Parameter("deleteAutoSnapshot") @Nullable Boolean deleteAutoSnapshot,
        @CustomType.Parameter("deleteWithInstance") @Nullable Boolean deleteWithInstance,
        @CustomType.Parameter("diskName") @Nullable String diskName,
        @CustomType.Parameter("diskType") @Nullable String diskType,
        @CustomType.Parameter("disks") List<GetEcsDisksDisk> disks,
        @CustomType.Parameter("dryRun") @Nullable Boolean dryRun,
        @CustomType.Parameter("enableAutoSnapshot") @Nullable Boolean enableAutoSnapshot,
        @CustomType.Parameter("enableAutomatedSnapshotPolicy") @Nullable Boolean enableAutomatedSnapshotPolicy,
        @CustomType.Parameter("enableShared") @Nullable Boolean enableShared,
        @CustomType.Parameter("encrypted") @Nullable String encrypted,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ids") List<String> ids,
        @CustomType.Parameter("instanceId") @Nullable String instanceId,
        @CustomType.Parameter("kmsKeyId") @Nullable String kmsKeyId,
        @CustomType.Parameter("nameRegex") @Nullable String nameRegex,
        @CustomType.Parameter("names") List<String> names,
        @CustomType.Parameter("operationLocks") @Nullable List<GetEcsDisksOperationLock> operationLocks,
        @CustomType.Parameter("outputFile") @Nullable String outputFile,
        @CustomType.Parameter("pageNumber") @Nullable Integer pageNumber,
        @CustomType.Parameter("pageSize") @Nullable Integer pageSize,
        @CustomType.Parameter("paymentType") @Nullable String paymentType,
        @CustomType.Parameter("portable") @Nullable Boolean portable,
        @CustomType.Parameter("resourceGroupId") @Nullable String resourceGroupId,
        @CustomType.Parameter("snapshotId") @Nullable String snapshotId,
        @CustomType.Parameter("status") @Nullable String status,
        @CustomType.Parameter("tags") @Nullable Map<String,Object> tags,
        @CustomType.Parameter("totalCount") Integer totalCount,
        @CustomType.Parameter("type") @Nullable String type,
        @CustomType.Parameter("zoneId") @Nullable String zoneId) {
        this.additionalAttributes = additionalAttributes;
        this.autoSnapshotPolicyId = autoSnapshotPolicyId;
        this.availabilityZone = availabilityZone;
        this.category = category;
        this.deleteAutoSnapshot = deleteAutoSnapshot;
        this.deleteWithInstance = deleteWithInstance;
        this.diskName = diskName;
        this.diskType = diskType;
        this.disks = disks;
        this.dryRun = dryRun;
        this.enableAutoSnapshot = enableAutoSnapshot;
        this.enableAutomatedSnapshotPolicy = enableAutomatedSnapshotPolicy;
        this.enableShared = enableShared;
        this.encrypted = encrypted;
        this.id = id;
        this.ids = ids;
        this.instanceId = instanceId;
        this.kmsKeyId = kmsKeyId;
        this.nameRegex = nameRegex;
        this.names = names;
        this.operationLocks = operationLocks;
        this.outputFile = outputFile;
        this.pageNumber = pageNumber;
        this.pageSize = pageSize;
        this.paymentType = paymentType;
        this.portable = portable;
        this.resourceGroupId = resourceGroupId;
        this.snapshotId = snapshotId;
        this.status = status;
        this.tags = tags;
        this.totalCount = totalCount;
        this.type = type;
        this.zoneId = zoneId;
    }

    public List<String> additionalAttributes() {
        return this.additionalAttributes == null ? List.of() : this.additionalAttributes;
    }
    public Optional<String> autoSnapshotPolicyId() {
        return Optional.ofNullable(this.autoSnapshotPolicyId);
    }
    /**
     * @deprecated
     * Field &#39;availability_zone&#39; has been deprecated from provider version 1.122.0. New field &#39;zone_id&#39; instead
     * 
     */
    @Deprecated /* Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead */
    public Optional<String> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }
    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }
    public Optional<Boolean> deleteAutoSnapshot() {
        return Optional.ofNullable(this.deleteAutoSnapshot);
    }
    public Optional<Boolean> deleteWithInstance() {
        return Optional.ofNullable(this.deleteWithInstance);
    }
    public Optional<String> diskName() {
        return Optional.ofNullable(this.diskName);
    }
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    public List<GetEcsDisksDisk> disks() {
        return this.disks;
    }
    public Optional<Boolean> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }
    public Optional<Boolean> enableAutoSnapshot() {
        return Optional.ofNullable(this.enableAutoSnapshot);
    }
    public Optional<Boolean> enableAutomatedSnapshotPolicy() {
        return Optional.ofNullable(this.enableAutomatedSnapshotPolicy);
    }
    public Optional<Boolean> enableShared() {
        return Optional.ofNullable(this.enableShared);
    }
    public Optional<String> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ids() {
        return this.ids;
    }
    public Optional<String> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    public List<String> names() {
        return this.names;
    }
    public List<GetEcsDisksOperationLock> operationLocks() {
        return this.operationLocks == null ? List.of() : this.operationLocks;
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<Integer> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }
    public Optional<Integer> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }
    public Optional<String> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }
    public Optional<Boolean> portable() {
        return Optional.ofNullable(this.portable);
    }
    public Optional<String> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }
    public Optional<String> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Integer totalCount() {
        return this.totalCount;
    }
    /**
     * @deprecated
     * Field &#39;type&#39; has been deprecated from provider version 1.122.0. New field &#39;disk_type&#39; instead.
     * 
     */
    @Deprecated /* Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead. */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEcsDisksResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> additionalAttributes;
        private @Nullable String autoSnapshotPolicyId;
        private @Nullable String availabilityZone;
        private @Nullable String category;
        private @Nullable Boolean deleteAutoSnapshot;
        private @Nullable Boolean deleteWithInstance;
        private @Nullable String diskName;
        private @Nullable String diskType;
        private List<GetEcsDisksDisk> disks;
        private @Nullable Boolean dryRun;
        private @Nullable Boolean enableAutoSnapshot;
        private @Nullable Boolean enableAutomatedSnapshotPolicy;
        private @Nullable Boolean enableShared;
        private @Nullable String encrypted;
        private String id;
        private List<String> ids;
        private @Nullable String instanceId;
        private @Nullable String kmsKeyId;
        private @Nullable String nameRegex;
        private List<String> names;
        private @Nullable List<GetEcsDisksOperationLock> operationLocks;
        private @Nullable String outputFile;
        private @Nullable Integer pageNumber;
        private @Nullable Integer pageSize;
        private @Nullable String paymentType;
        private @Nullable Boolean portable;
        private @Nullable String resourceGroupId;
        private @Nullable String snapshotId;
        private @Nullable String status;
        private @Nullable Map<String,Object> tags;
        private Integer totalCount;
        private @Nullable String type;
        private @Nullable String zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEcsDisksResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalAttributes = defaults.additionalAttributes;
    	      this.autoSnapshotPolicyId = defaults.autoSnapshotPolicyId;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.category = defaults.category;
    	      this.deleteAutoSnapshot = defaults.deleteAutoSnapshot;
    	      this.deleteWithInstance = defaults.deleteWithInstance;
    	      this.diskName = defaults.diskName;
    	      this.diskType = defaults.diskType;
    	      this.disks = defaults.disks;
    	      this.dryRun = defaults.dryRun;
    	      this.enableAutoSnapshot = defaults.enableAutoSnapshot;
    	      this.enableAutomatedSnapshotPolicy = defaults.enableAutomatedSnapshotPolicy;
    	      this.enableShared = defaults.enableShared;
    	      this.encrypted = defaults.encrypted;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.instanceId = defaults.instanceId;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.nameRegex = defaults.nameRegex;
    	      this.names = defaults.names;
    	      this.operationLocks = defaults.operationLocks;
    	      this.outputFile = defaults.outputFile;
    	      this.pageNumber = defaults.pageNumber;
    	      this.pageSize = defaults.pageSize;
    	      this.paymentType = defaults.paymentType;
    	      this.portable = defaults.portable;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.snapshotId = defaults.snapshotId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.totalCount = defaults.totalCount;
    	      this.type = defaults.type;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder additionalAttributes(@Nullable List<String> additionalAttributes) {
            this.additionalAttributes = additionalAttributes;
            return this;
        }
        public Builder additionalAttributes(String... additionalAttributes) {
            return additionalAttributes(List.of(additionalAttributes));
        }
        public Builder autoSnapshotPolicyId(@Nullable String autoSnapshotPolicyId) {
            this.autoSnapshotPolicyId = autoSnapshotPolicyId;
            return this;
        }
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        public Builder category(@Nullable String category) {
            this.category = category;
            return this;
        }
        public Builder deleteAutoSnapshot(@Nullable Boolean deleteAutoSnapshot) {
            this.deleteAutoSnapshot = deleteAutoSnapshot;
            return this;
        }
        public Builder deleteWithInstance(@Nullable Boolean deleteWithInstance) {
            this.deleteWithInstance = deleteWithInstance;
            return this;
        }
        public Builder diskName(@Nullable String diskName) {
            this.diskName = diskName;
            return this;
        }
        public Builder diskType(@Nullable String diskType) {
            this.diskType = diskType;
            return this;
        }
        public Builder disks(List<GetEcsDisksDisk> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }
        public Builder disks(GetEcsDisksDisk... disks) {
            return disks(List.of(disks));
        }
        public Builder dryRun(@Nullable Boolean dryRun) {
            this.dryRun = dryRun;
            return this;
        }
        public Builder enableAutoSnapshot(@Nullable Boolean enableAutoSnapshot) {
            this.enableAutoSnapshot = enableAutoSnapshot;
            return this;
        }
        public Builder enableAutomatedSnapshotPolicy(@Nullable Boolean enableAutomatedSnapshotPolicy) {
            this.enableAutomatedSnapshotPolicy = enableAutomatedSnapshotPolicy;
            return this;
        }
        public Builder enableShared(@Nullable Boolean enableShared) {
            this.enableShared = enableShared;
            return this;
        }
        public Builder encrypted(@Nullable String encrypted) {
            this.encrypted = encrypted;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ids(List<String> ids) {
            this.ids = Objects.requireNonNull(ids);
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        public Builder instanceId(@Nullable String instanceId) {
            this.instanceId = instanceId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder nameRegex(@Nullable String nameRegex) {
            this.nameRegex = nameRegex;
            return this;
        }
        public Builder names(List<String> names) {
            this.names = Objects.requireNonNull(names);
            return this;
        }
        public Builder names(String... names) {
            return names(List.of(names));
        }
        public Builder operationLocks(@Nullable List<GetEcsDisksOperationLock> operationLocks) {
            this.operationLocks = operationLocks;
            return this;
        }
        public Builder operationLocks(GetEcsDisksOperationLock... operationLocks) {
            return operationLocks(List.of(operationLocks));
        }
        public Builder outputFile(@Nullable String outputFile) {
            this.outputFile = outputFile;
            return this;
        }
        public Builder pageNumber(@Nullable Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        public Builder pageSize(@Nullable Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        public Builder paymentType(@Nullable String paymentType) {
            this.paymentType = paymentType;
            return this;
        }
        public Builder portable(@Nullable Boolean portable) {
            this.portable = portable;
            return this;
        }
        public Builder resourceGroupId(@Nullable String resourceGroupId) {
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        public Builder snapshotId(@Nullable String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        public Builder totalCount(Integer totalCount) {
            this.totalCount = Objects.requireNonNull(totalCount);
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public Builder zoneId(@Nullable String zoneId) {
            this.zoneId = zoneId;
            return this;
        }        public GetEcsDisksResult build() {
            return new GetEcsDisksResult(additionalAttributes, autoSnapshotPolicyId, availabilityZone, category, deleteAutoSnapshot, deleteWithInstance, diskName, diskType, disks, dryRun, enableAutoSnapshot, enableAutomatedSnapshotPolicy, enableShared, encrypted, id, ids, instanceId, kmsKeyId, nameRegex, names, operationLocks, outputFile, pageNumber, pageSize, paymentType, portable, resourceGroupId, snapshotId, status, tags, totalCount, type, zoneId);
        }
    }
}
