// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emrv2.outputs;

import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupCostOptimizedConfig;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupDataDisk;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupSpotBidPrice;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupSubscriptionConfig;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupSystemDisk;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodeGroup {
    /**
     * @return Additional security Group IDS for Cluster, you can also specify this key for each node group.
     * 
     */
    private final @Nullable List<String> additionalSecurityGroupIds;
    /**
     * @return The detail cost optimized configuration of emr cluster.
     * 
     */
    private final @Nullable ClusterNodeGroupCostOptimizedConfig costOptimizedConfig;
    /**
     * @return Host Ecs data disks information in this node group.
     * 
     */
    private final List<ClusterNodeGroupDataDisk> dataDisks;
    /**
     * @return Enable emr cluster of task node graceful decommission, ’true’ or ‘false’ .
     * 
     */
    private final @Nullable Boolean gracefulShutdown;
    /**
     * @return Host Ecs instance types.
     * 
     */
    private final List<String> instanceTypes;
    /**
     * @return Host Ecs number in this node group.
     * 
     */
    private final Integer nodeCount;
    /**
     * @return The configuration effected which node group name of emr cluster.
     * 
     */
    private final String nodeGroupName;
    /**
     * @return The node group type of emr cluster, supported value: MASTER, CORE or TASK.
     * 
     */
    private final String nodeGroupType;
    /**
     * @return Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
     * 
     */
    private final @Nullable String paymentType;
    /**
     * @return The spot bid prices of a PayAsYouGo instance.
     * 
     */
    private final @Nullable List<ClusterNodeGroupSpotBidPrice> spotBidPrices;
    /**
     * @return Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
     * 
     */
    private final @Nullable Boolean spotInstanceRemedy;
    /**
     * @return The detail configuration of subscription payment type.
     * 
     */
    private final @Nullable ClusterNodeGroupSubscriptionConfig subscriptionConfig;
    /**
     * @return Host Ecs system disk information in this node group.
     * 
     */
    private final ClusterNodeGroupSystemDisk systemDisk;
    /**
     * @return Global vSwitch ids, you can also specify it in node group.
     * 
     */
    private final @Nullable List<String> vswitchIds;
    /**
     * @return Whether the node has a public IP address enabled.
     * 
     */
    private final @Nullable Boolean withPublicIp;

    @CustomType.Constructor
    private ClusterNodeGroup(
        @CustomType.Parameter("additionalSecurityGroupIds") @Nullable List<String> additionalSecurityGroupIds,
        @CustomType.Parameter("costOptimizedConfig") @Nullable ClusterNodeGroupCostOptimizedConfig costOptimizedConfig,
        @CustomType.Parameter("dataDisks") List<ClusterNodeGroupDataDisk> dataDisks,
        @CustomType.Parameter("gracefulShutdown") @Nullable Boolean gracefulShutdown,
        @CustomType.Parameter("instanceTypes") List<String> instanceTypes,
        @CustomType.Parameter("nodeCount") Integer nodeCount,
        @CustomType.Parameter("nodeGroupName") String nodeGroupName,
        @CustomType.Parameter("nodeGroupType") String nodeGroupType,
        @CustomType.Parameter("paymentType") @Nullable String paymentType,
        @CustomType.Parameter("spotBidPrices") @Nullable List<ClusterNodeGroupSpotBidPrice> spotBidPrices,
        @CustomType.Parameter("spotInstanceRemedy") @Nullable Boolean spotInstanceRemedy,
        @CustomType.Parameter("subscriptionConfig") @Nullable ClusterNodeGroupSubscriptionConfig subscriptionConfig,
        @CustomType.Parameter("systemDisk") ClusterNodeGroupSystemDisk systemDisk,
        @CustomType.Parameter("vswitchIds") @Nullable List<String> vswitchIds,
        @CustomType.Parameter("withPublicIp") @Nullable Boolean withPublicIp) {
        this.additionalSecurityGroupIds = additionalSecurityGroupIds;
        this.costOptimizedConfig = costOptimizedConfig;
        this.dataDisks = dataDisks;
        this.gracefulShutdown = gracefulShutdown;
        this.instanceTypes = instanceTypes;
        this.nodeCount = nodeCount;
        this.nodeGroupName = nodeGroupName;
        this.nodeGroupType = nodeGroupType;
        this.paymentType = paymentType;
        this.spotBidPrices = spotBidPrices;
        this.spotInstanceRemedy = spotInstanceRemedy;
        this.subscriptionConfig = subscriptionConfig;
        this.systemDisk = systemDisk;
        this.vswitchIds = vswitchIds;
        this.withPublicIp = withPublicIp;
    }

    /**
     * @return Additional security Group IDS for Cluster, you can also specify this key for each node group.
     * 
     */
    public List<String> additionalSecurityGroupIds() {
        return this.additionalSecurityGroupIds == null ? List.of() : this.additionalSecurityGroupIds;
    }
    /**
     * @return The detail cost optimized configuration of emr cluster.
     * 
     */
    public Optional<ClusterNodeGroupCostOptimizedConfig> costOptimizedConfig() {
        return Optional.ofNullable(this.costOptimizedConfig);
    }
    /**
     * @return Host Ecs data disks information in this node group.
     * 
     */
    public List<ClusterNodeGroupDataDisk> dataDisks() {
        return this.dataDisks;
    }
    /**
     * @return Enable emr cluster of task node graceful decommission, ’true’ or ‘false’ .
     * 
     */
    public Optional<Boolean> gracefulShutdown() {
        return Optional.ofNullable(this.gracefulShutdown);
    }
    /**
     * @return Host Ecs instance types.
     * 
     */
    public List<String> instanceTypes() {
        return this.instanceTypes;
    }
    /**
     * @return Host Ecs number in this node group.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The configuration effected which node group name of emr cluster.
     * 
     */
    public String nodeGroupName() {
        return this.nodeGroupName;
    }
    /**
     * @return The node group type of emr cluster, supported value: MASTER, CORE or TASK.
     * 
     */
    public String nodeGroupType() {
        return this.nodeGroupType;
    }
    /**
     * @return Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
     * 
     */
    public Optional<String> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }
    /**
     * @return The spot bid prices of a PayAsYouGo instance.
     * 
     */
    public List<ClusterNodeGroupSpotBidPrice> spotBidPrices() {
        return this.spotBidPrices == null ? List.of() : this.spotBidPrices;
    }
    /**
     * @return Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
     * 
     */
    public Optional<Boolean> spotInstanceRemedy() {
        return Optional.ofNullable(this.spotInstanceRemedy);
    }
    /**
     * @return The detail configuration of subscription payment type.
     * 
     */
    public Optional<ClusterNodeGroupSubscriptionConfig> subscriptionConfig() {
        return Optional.ofNullable(this.subscriptionConfig);
    }
    /**
     * @return Host Ecs system disk information in this node group.
     * 
     */
    public ClusterNodeGroupSystemDisk systemDisk() {
        return this.systemDisk;
    }
    /**
     * @return Global vSwitch ids, you can also specify it in node group.
     * 
     */
    public List<String> vswitchIds() {
        return this.vswitchIds == null ? List.of() : this.vswitchIds;
    }
    /**
     * @return Whether the node has a public IP address enabled.
     * 
     */
    public Optional<Boolean> withPublicIp() {
        return Optional.ofNullable(this.withPublicIp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodeGroup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> additionalSecurityGroupIds;
        private @Nullable ClusterNodeGroupCostOptimizedConfig costOptimizedConfig;
        private List<ClusterNodeGroupDataDisk> dataDisks;
        private @Nullable Boolean gracefulShutdown;
        private List<String> instanceTypes;
        private Integer nodeCount;
        private String nodeGroupName;
        private String nodeGroupType;
        private @Nullable String paymentType;
        private @Nullable List<ClusterNodeGroupSpotBidPrice> spotBidPrices;
        private @Nullable Boolean spotInstanceRemedy;
        private @Nullable ClusterNodeGroupSubscriptionConfig subscriptionConfig;
        private ClusterNodeGroupSystemDisk systemDisk;
        private @Nullable List<String> vswitchIds;
        private @Nullable Boolean withPublicIp;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterNodeGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalSecurityGroupIds = defaults.additionalSecurityGroupIds;
    	      this.costOptimizedConfig = defaults.costOptimizedConfig;
    	      this.dataDisks = defaults.dataDisks;
    	      this.gracefulShutdown = defaults.gracefulShutdown;
    	      this.instanceTypes = defaults.instanceTypes;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nodeGroupName = defaults.nodeGroupName;
    	      this.nodeGroupType = defaults.nodeGroupType;
    	      this.paymentType = defaults.paymentType;
    	      this.spotBidPrices = defaults.spotBidPrices;
    	      this.spotInstanceRemedy = defaults.spotInstanceRemedy;
    	      this.subscriptionConfig = defaults.subscriptionConfig;
    	      this.systemDisk = defaults.systemDisk;
    	      this.vswitchIds = defaults.vswitchIds;
    	      this.withPublicIp = defaults.withPublicIp;
        }

        public Builder additionalSecurityGroupIds(@Nullable List<String> additionalSecurityGroupIds) {
            this.additionalSecurityGroupIds = additionalSecurityGroupIds;
            return this;
        }
        public Builder additionalSecurityGroupIds(String... additionalSecurityGroupIds) {
            return additionalSecurityGroupIds(List.of(additionalSecurityGroupIds));
        }
        public Builder costOptimizedConfig(@Nullable ClusterNodeGroupCostOptimizedConfig costOptimizedConfig) {
            this.costOptimizedConfig = costOptimizedConfig;
            return this;
        }
        public Builder dataDisks(List<ClusterNodeGroupDataDisk> dataDisks) {
            this.dataDisks = Objects.requireNonNull(dataDisks);
            return this;
        }
        public Builder dataDisks(ClusterNodeGroupDataDisk... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }
        public Builder gracefulShutdown(@Nullable Boolean gracefulShutdown) {
            this.gracefulShutdown = gracefulShutdown;
            return this;
        }
        public Builder instanceTypes(List<String> instanceTypes) {
            this.instanceTypes = Objects.requireNonNull(instanceTypes);
            return this;
        }
        public Builder instanceTypes(String... instanceTypes) {
            return instanceTypes(List.of(instanceTypes));
        }
        public Builder nodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }
        public Builder nodeGroupName(String nodeGroupName) {
            this.nodeGroupName = Objects.requireNonNull(nodeGroupName);
            return this;
        }
        public Builder nodeGroupType(String nodeGroupType) {
            this.nodeGroupType = Objects.requireNonNull(nodeGroupType);
            return this;
        }
        public Builder paymentType(@Nullable String paymentType) {
            this.paymentType = paymentType;
            return this;
        }
        public Builder spotBidPrices(@Nullable List<ClusterNodeGroupSpotBidPrice> spotBidPrices) {
            this.spotBidPrices = spotBidPrices;
            return this;
        }
        public Builder spotBidPrices(ClusterNodeGroupSpotBidPrice... spotBidPrices) {
            return spotBidPrices(List.of(spotBidPrices));
        }
        public Builder spotInstanceRemedy(@Nullable Boolean spotInstanceRemedy) {
            this.spotInstanceRemedy = spotInstanceRemedy;
            return this;
        }
        public Builder subscriptionConfig(@Nullable ClusterNodeGroupSubscriptionConfig subscriptionConfig) {
            this.subscriptionConfig = subscriptionConfig;
            return this;
        }
        public Builder systemDisk(ClusterNodeGroupSystemDisk systemDisk) {
            this.systemDisk = Objects.requireNonNull(systemDisk);
            return this;
        }
        public Builder vswitchIds(@Nullable List<String> vswitchIds) {
            this.vswitchIds = vswitchIds;
            return this;
        }
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }
        public Builder withPublicIp(@Nullable Boolean withPublicIp) {
            this.withPublicIp = withPublicIp;
            return this;
        }        public ClusterNodeGroup build() {
            return new ClusterNodeGroup(additionalSecurityGroupIds, costOptimizedConfig, dataDisks, gracefulShutdown, instanceTypes, nodeCount, nodeGroupName, nodeGroupType, paymentType, spotBidPrices, spotInstanceRemedy, subscriptionConfig, systemDisk, vswitchIds, withPublicIp);
        }
    }
}
