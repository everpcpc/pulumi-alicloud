// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.alicloud.ecs.outputs.GetImagesImageDiskDeviceMapping;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagesImage {
    /**
     * @return The image architecture. Valid values: `i386` and `x86_64`.
     * 
     */
    private final String architecture;
    /**
     * @return Time of creation.
     * 
     */
    private final String creationTime;
    /**
     * @return Description of the image.
     * 
     */
    private final String description;
    /**
     * @return Description of the system with disks and snapshots under the image.
     * 
     */
    private final List<GetImagesImageDiskDeviceMapping> diskDeviceMappings;
    /**
     * @return ID of the image.
     * 
     */
    private final String id;
    /**
     * @return The ID of the image.
     * 
     */
    private final String imageId;
    /**
     * @return Alias of the image owner.
     * 
     */
    private final String imageOwnerAlias;
    /**
     * @return Version of the image.
     * 
     */
    private final String imageVersion;
    private final Boolean isCopied;
    private final String isSelfShared;
    /**
     * @return Whether the user has subscribed to the terms of service for the image product corresponding to the ProductCode.
     * 
     */
    private final Boolean isSubscribed;
    /**
     * @return Specifies whether the image can be used on I/O optimized instances.
     * 
     */
    private final Boolean isSupportIoOptimized;
    private final String name;
    /**
     * @return Display Chinese name of the OS.
     * 
     */
    private final String osName;
    /**
     * @return Display English name of the OS.
     * 
     */
    private final String osNameEn;
    /**
     * @return The operating system type of the image. Valid values: `windows` and `linux`.
     * 
     */
    private final String osType;
    private final String platform;
    /**
     * @return Product code of the image on the image market.
     * 
     */
    private final String productCode;
    /**
     * @return Progress of image creation, presented in percentages.
     * 
     */
    private final String progress;
    /**
     * @return Size of the created disk.
     * 
     */
    private final Integer size;
    private final String state;
    /**
     * @return The status of the image. The following values are available, Separate multiple parameter values by using commas (,). Default value: `Available`. Valid values:
     * 
     */
    private final String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private final @Nullable Map<String,Object> tags;
    /**
     * @return Specifies whether to check the validity of the request without actually making the request. Valid values:
     * 
     */
    private final String usage;

    @CustomType.Constructor
    private GetImagesImage(
        @CustomType.Parameter("architecture") String architecture,
        @CustomType.Parameter("creationTime") String creationTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("diskDeviceMappings") List<GetImagesImageDiskDeviceMapping> diskDeviceMappings,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageId") String imageId,
        @CustomType.Parameter("imageOwnerAlias") String imageOwnerAlias,
        @CustomType.Parameter("imageVersion") String imageVersion,
        @CustomType.Parameter("isCopied") Boolean isCopied,
        @CustomType.Parameter("isSelfShared") String isSelfShared,
        @CustomType.Parameter("isSubscribed") Boolean isSubscribed,
        @CustomType.Parameter("isSupportIoOptimized") Boolean isSupportIoOptimized,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("osName") String osName,
        @CustomType.Parameter("osNameEn") String osNameEn,
        @CustomType.Parameter("osType") String osType,
        @CustomType.Parameter("platform") String platform,
        @CustomType.Parameter("productCode") String productCode,
        @CustomType.Parameter("progress") String progress,
        @CustomType.Parameter("size") Integer size,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tags") @Nullable Map<String,Object> tags,
        @CustomType.Parameter("usage") String usage) {
        this.architecture = architecture;
        this.creationTime = creationTime;
        this.description = description;
        this.diskDeviceMappings = diskDeviceMappings;
        this.id = id;
        this.imageId = imageId;
        this.imageOwnerAlias = imageOwnerAlias;
        this.imageVersion = imageVersion;
        this.isCopied = isCopied;
        this.isSelfShared = isSelfShared;
        this.isSubscribed = isSubscribed;
        this.isSupportIoOptimized = isSupportIoOptimized;
        this.name = name;
        this.osName = osName;
        this.osNameEn = osNameEn;
        this.osType = osType;
        this.platform = platform;
        this.productCode = productCode;
        this.progress = progress;
        this.size = size;
        this.state = state;
        this.status = status;
        this.tags = tags;
        this.usage = usage;
    }

    /**
     * @return The image architecture. Valid values: `i386` and `x86_64`.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return Time of creation.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Description of the image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Description of the system with disks and snapshots under the image.
     * 
     */
    public List<GetImagesImageDiskDeviceMapping> diskDeviceMappings() {
        return this.diskDeviceMappings;
    }
    /**
     * @return ID of the image.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the image.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return Alias of the image owner.
     * 
     */
    public String imageOwnerAlias() {
        return this.imageOwnerAlias;
    }
    /**
     * @return Version of the image.
     * 
     */
    public String imageVersion() {
        return this.imageVersion;
    }
    public Boolean isCopied() {
        return this.isCopied;
    }
    public String isSelfShared() {
        return this.isSelfShared;
    }
    /**
     * @return Whether the user has subscribed to the terms of service for the image product corresponding to the ProductCode.
     * 
     */
    public Boolean isSubscribed() {
        return this.isSubscribed;
    }
    /**
     * @return Specifies whether the image can be used on I/O optimized instances.
     * 
     */
    public Boolean isSupportIoOptimized() {
        return this.isSupportIoOptimized;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Display Chinese name of the OS.
     * 
     */
    public String osName() {
        return this.osName;
    }
    /**
     * @return Display English name of the OS.
     * 
     */
    public String osNameEn() {
        return this.osNameEn;
    }
    /**
     * @return The operating system type of the image. Valid values: `windows` and `linux`.
     * 
     */
    public String osType() {
        return this.osType;
    }
    public String platform() {
        return this.platform;
    }
    /**
     * @return Product code of the image on the image market.
     * 
     */
    public String productCode() {
        return this.productCode;
    }
    /**
     * @return Progress of image creation, presented in percentages.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return Size of the created disk.
     * 
     */
    public Integer size() {
        return this.size;
    }
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the image. The following values are available, Separate multiple parameter values by using commas (,). Default value: `Available`. Valid values:
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Specifies whether to check the validity of the request without actually making the request. Valid values:
     * 
     */
    public String usage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagesImage defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String architecture;
        private String creationTime;
        private String description;
        private List<GetImagesImageDiskDeviceMapping> diskDeviceMappings;
        private String id;
        private String imageId;
        private String imageOwnerAlias;
        private String imageVersion;
        private Boolean isCopied;
        private String isSelfShared;
        private Boolean isSubscribed;
        private Boolean isSupportIoOptimized;
        private String name;
        private String osName;
        private String osNameEn;
        private String osType;
        private String platform;
        private String productCode;
        private String progress;
        private Integer size;
        private String state;
        private String status;
        private @Nullable Map<String,Object> tags;
        private String usage;

        public Builder() {
    	      // Empty
        }

        public Builder(GetImagesImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.diskDeviceMappings = defaults.diskDeviceMappings;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageOwnerAlias = defaults.imageOwnerAlias;
    	      this.imageVersion = defaults.imageVersion;
    	      this.isCopied = defaults.isCopied;
    	      this.isSelfShared = defaults.isSelfShared;
    	      this.isSubscribed = defaults.isSubscribed;
    	      this.isSupportIoOptimized = defaults.isSupportIoOptimized;
    	      this.name = defaults.name;
    	      this.osName = defaults.osName;
    	      this.osNameEn = defaults.osNameEn;
    	      this.osType = defaults.osType;
    	      this.platform = defaults.platform;
    	      this.productCode = defaults.productCode;
    	      this.progress = defaults.progress;
    	      this.size = defaults.size;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.usage = defaults.usage;
        }

        public Builder architecture(String architecture) {
            this.architecture = Objects.requireNonNull(architecture);
            return this;
        }
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder diskDeviceMappings(List<GetImagesImageDiskDeviceMapping> diskDeviceMappings) {
            this.diskDeviceMappings = Objects.requireNonNull(diskDeviceMappings);
            return this;
        }
        public Builder diskDeviceMappings(GetImagesImageDiskDeviceMapping... diskDeviceMappings) {
            return diskDeviceMappings(List.of(diskDeviceMappings));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        public Builder imageOwnerAlias(String imageOwnerAlias) {
            this.imageOwnerAlias = Objects.requireNonNull(imageOwnerAlias);
            return this;
        }
        public Builder imageVersion(String imageVersion) {
            this.imageVersion = Objects.requireNonNull(imageVersion);
            return this;
        }
        public Builder isCopied(Boolean isCopied) {
            this.isCopied = Objects.requireNonNull(isCopied);
            return this;
        }
        public Builder isSelfShared(String isSelfShared) {
            this.isSelfShared = Objects.requireNonNull(isSelfShared);
            return this;
        }
        public Builder isSubscribed(Boolean isSubscribed) {
            this.isSubscribed = Objects.requireNonNull(isSubscribed);
            return this;
        }
        public Builder isSupportIoOptimized(Boolean isSupportIoOptimized) {
            this.isSupportIoOptimized = Objects.requireNonNull(isSupportIoOptimized);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder osName(String osName) {
            this.osName = Objects.requireNonNull(osName);
            return this;
        }
        public Builder osNameEn(String osNameEn) {
            this.osNameEn = Objects.requireNonNull(osNameEn);
            return this;
        }
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        public Builder platform(String platform) {
            this.platform = Objects.requireNonNull(platform);
            return this;
        }
        public Builder productCode(String productCode) {
            this.productCode = Objects.requireNonNull(productCode);
            return this;
        }
        public Builder progress(String progress) {
            this.progress = Objects.requireNonNull(progress);
            return this;
        }
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        public Builder usage(String usage) {
            this.usage = Objects.requireNonNull(usage);
            return this;
        }        public GetImagesImage build() {
            return new GetImagesImage(architecture, creationTime, description, diskDeviceMappings, id, imageId, imageOwnerAlias, imageVersion, isCopied, isSelfShared, isSubscribed, isSupportIoOptimized, name, osName, osNameEn, osType, platform, productCode, progress, size, state, status, tags, usage);
        }
    }
}
