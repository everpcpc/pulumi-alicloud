// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.alicloud.alb.outputs.RuleRuleConditionCookieConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionHeaderConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionHostConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionMethodConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionPathConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionQueryStringConfig;
import com.pulumi.alicloud.alb.outputs.RuleRuleConditionSourceIpConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuleRuleCondition {
    /**
     * @return The configuration of the cookie. See the following `Block cookie_config`.
     * 
     */
    private final @Nullable RuleRuleConditionCookieConfig cookieConfig;
    /**
     * @return The configuration of the header field. See the following `Block header_config`.
     * 
     */
    private final @Nullable RuleRuleConditionHeaderConfig headerConfig;
    /**
     * @return The configuration of the host field. See the following `Block host_config`.
     * 
     */
    private final @Nullable RuleRuleConditionHostConfig hostConfig;
    /**
     * @return The configuration of the request method. See the following `Block method_config`.
     * 
     */
    private final @Nullable RuleRuleConditionMethodConfig methodConfig;
    /**
     * @return The configuration of the path for the request to be forwarded. See the following `Block path_config`.
     * 
     */
    private final @Nullable RuleRuleConditionPathConfig pathConfig;
    /**
     * @return The configuration of the query string. See the following `Block query_string_config`.
     * 
     */
    private final @Nullable RuleRuleConditionQueryStringConfig queryStringConfig;
    /**
     * @return The Based on source IP traffic matching. Required and valid when Type is SourceIP. See the following `Block source_ip_config`.
     * 
     */
    private final @Nullable RuleRuleConditionSourceIpConfig sourceIpConfig;
    /**
     * @return The action. Valid values: `ForwardGroup`, `Redirect`, `FixedResponse`, `Rewrite`, `InsertHeader`, `TrafficLimit` and `TrafficMirror`. **Note:**  The preceding actions can be classified into two types:  `FinalType`: A forwarding rule can contain only one `FinalType` action, which is executed last. This type of action can contain only one `ForwardGroup`, `Redirect` or `FixedResponse` action. `ExtType`: A forwarding rule can contain one or more `ExtType` actions, which are executed before `FinalType` actions and need to coexist with the `FinalType` actions. This type of action can contain multiple `InsertHeader` actions or one `Rewrite` action. **NOTE:** The `TrafficLimit` and `TrafficMirror` option is available in 1.162.0+.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private RuleRuleCondition(
        @CustomType.Parameter("cookieConfig") @Nullable RuleRuleConditionCookieConfig cookieConfig,
        @CustomType.Parameter("headerConfig") @Nullable RuleRuleConditionHeaderConfig headerConfig,
        @CustomType.Parameter("hostConfig") @Nullable RuleRuleConditionHostConfig hostConfig,
        @CustomType.Parameter("methodConfig") @Nullable RuleRuleConditionMethodConfig methodConfig,
        @CustomType.Parameter("pathConfig") @Nullable RuleRuleConditionPathConfig pathConfig,
        @CustomType.Parameter("queryStringConfig") @Nullable RuleRuleConditionQueryStringConfig queryStringConfig,
        @CustomType.Parameter("sourceIpConfig") @Nullable RuleRuleConditionSourceIpConfig sourceIpConfig,
        @CustomType.Parameter("type") String type) {
        this.cookieConfig = cookieConfig;
        this.headerConfig = headerConfig;
        this.hostConfig = hostConfig;
        this.methodConfig = methodConfig;
        this.pathConfig = pathConfig;
        this.queryStringConfig = queryStringConfig;
        this.sourceIpConfig = sourceIpConfig;
        this.type = type;
    }

    /**
     * @return The configuration of the cookie. See the following `Block cookie_config`.
     * 
     */
    public Optional<RuleRuleConditionCookieConfig> cookieConfig() {
        return Optional.ofNullable(this.cookieConfig);
    }
    /**
     * @return The configuration of the header field. See the following `Block header_config`.
     * 
     */
    public Optional<RuleRuleConditionHeaderConfig> headerConfig() {
        return Optional.ofNullable(this.headerConfig);
    }
    /**
     * @return The configuration of the host field. See the following `Block host_config`.
     * 
     */
    public Optional<RuleRuleConditionHostConfig> hostConfig() {
        return Optional.ofNullable(this.hostConfig);
    }
    /**
     * @return The configuration of the request method. See the following `Block method_config`.
     * 
     */
    public Optional<RuleRuleConditionMethodConfig> methodConfig() {
        return Optional.ofNullable(this.methodConfig);
    }
    /**
     * @return The configuration of the path for the request to be forwarded. See the following `Block path_config`.
     * 
     */
    public Optional<RuleRuleConditionPathConfig> pathConfig() {
        return Optional.ofNullable(this.pathConfig);
    }
    /**
     * @return The configuration of the query string. See the following `Block query_string_config`.
     * 
     */
    public Optional<RuleRuleConditionQueryStringConfig> queryStringConfig() {
        return Optional.ofNullable(this.queryStringConfig);
    }
    /**
     * @return The Based on source IP traffic matching. Required and valid when Type is SourceIP. See the following `Block source_ip_config`.
     * 
     */
    public Optional<RuleRuleConditionSourceIpConfig> sourceIpConfig() {
        return Optional.ofNullable(this.sourceIpConfig);
    }
    /**
     * @return The action. Valid values: `ForwardGroup`, `Redirect`, `FixedResponse`, `Rewrite`, `InsertHeader`, `TrafficLimit` and `TrafficMirror`. **Note:**  The preceding actions can be classified into two types:  `FinalType`: A forwarding rule can contain only one `FinalType` action, which is executed last. This type of action can contain only one `ForwardGroup`, `Redirect` or `FixedResponse` action. `ExtType`: A forwarding rule can contain one or more `ExtType` actions, which are executed before `FinalType` actions and need to coexist with the `FinalType` actions. This type of action can contain multiple `InsertHeader` actions or one `Rewrite` action. **NOTE:** The `TrafficLimit` and `TrafficMirror` option is available in 1.162.0+.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleRuleCondition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable RuleRuleConditionCookieConfig cookieConfig;
        private @Nullable RuleRuleConditionHeaderConfig headerConfig;
        private @Nullable RuleRuleConditionHostConfig hostConfig;
        private @Nullable RuleRuleConditionMethodConfig methodConfig;
        private @Nullable RuleRuleConditionPathConfig pathConfig;
        private @Nullable RuleRuleConditionQueryStringConfig queryStringConfig;
        private @Nullable RuleRuleConditionSourceIpConfig sourceIpConfig;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cookieConfig = defaults.cookieConfig;
    	      this.headerConfig = defaults.headerConfig;
    	      this.hostConfig = defaults.hostConfig;
    	      this.methodConfig = defaults.methodConfig;
    	      this.pathConfig = defaults.pathConfig;
    	      this.queryStringConfig = defaults.queryStringConfig;
    	      this.sourceIpConfig = defaults.sourceIpConfig;
    	      this.type = defaults.type;
        }

        public Builder cookieConfig(@Nullable RuleRuleConditionCookieConfig cookieConfig) {
            this.cookieConfig = cookieConfig;
            return this;
        }
        public Builder headerConfig(@Nullable RuleRuleConditionHeaderConfig headerConfig) {
            this.headerConfig = headerConfig;
            return this;
        }
        public Builder hostConfig(@Nullable RuleRuleConditionHostConfig hostConfig) {
            this.hostConfig = hostConfig;
            return this;
        }
        public Builder methodConfig(@Nullable RuleRuleConditionMethodConfig methodConfig) {
            this.methodConfig = methodConfig;
            return this;
        }
        public Builder pathConfig(@Nullable RuleRuleConditionPathConfig pathConfig) {
            this.pathConfig = pathConfig;
            return this;
        }
        public Builder queryStringConfig(@Nullable RuleRuleConditionQueryStringConfig queryStringConfig) {
            this.queryStringConfig = queryStringConfig;
            return this;
        }
        public Builder sourceIpConfig(@Nullable RuleRuleConditionSourceIpConfig sourceIpConfig) {
            this.sourceIpConfig = sourceIpConfig;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public RuleRuleCondition build() {
            return new RuleRuleCondition(cookieConfig, headerConfig, hostConfig, methodConfig, pathConfig, queryStringConfig, sourceIpConfig, type);
        }
    }
}
