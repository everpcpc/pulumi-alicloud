// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.alicloud.ecs.outputs.GetEcsDisksDiskMountInstance;
import com.pulumi.alicloud.ecs.outputs.GetEcsDisksDiskOperationLock;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEcsDisksDisk {
    /**
     * @return A mount of time.
     * 
     */
    private final String attachedTime;
    /**
     * @return Query cloud disks based on the automatic snapshot policy ID.
     * 
     */
    private final String autoSnapshotPolicyId;
    /**
     * @return Availability zone of the disk.
     * 
     */
    private final String availabilityZone;
    /**
     * @return Disk category.
     * 
     */
    private final String category;
    /**
     * @return Disk creation time.
     * 
     */
    private final String creationTime;
    /**
     * @return Indicates whether the automatic snapshot is deleted when the disk is released.
     * 
     */
    private final Boolean deleteAutoSnapshot;
    /**
     * @return Indicates whether the disk is released together with the instance.
     * 
     */
    private final Boolean deleteWithInstance;
    /**
     * @return Disk description.
     * 
     */
    private final String description;
    /**
     * @return Disk detachment time.
     * 
     */
    private final String detachedTime;
    /**
     * @return The mount point of the disk.
     * 
     */
    private final String device;
    /**
     * @return ID of the disk.
     * 
     */
    private final String diskId;
    /**
     * @return The disk name.
     * 
     */
    private final String diskName;
    /**
     * @return The disk type.
     * 
     */
    private final String diskType;
    /**
     * @return Whether the disk implements an automatic snapshot policy.
     * 
     */
    private final Boolean enableAutoSnapshot;
    /**
     * @return Whether the disk implements an automatic snapshot policy.
     * 
     */
    private final Boolean enableAutomatedSnapshotPolicy;
    /**
     * @return Indicate whether the disk is encrypted or not.
     * 
     */
    private final String encrypted;
    private final String expiredTime;
    /**
     * @return ID of the disk.
     * 
     */
    private final String id;
    /**
     * @return ID of the image from which the disk is created. It is null unless the disk is created using an image.
     * 
     */
    private final String imageId;
    /**
     * @return The instance ID of the disk mount.
     * 
     */
    private final String instanceId;
    private final Integer iops;
    private final Integer iopsRead;
    private final Integer iopsWrite;
    /**
     * @return The kms key id.
     * 
     */
    private final String kmsKeyId;
    /**
     * @return Number of instances mounted on shared storage.
     * 
     */
    private final Integer mountInstanceNum;
    /**
     * @return Disk mount instances.
     * 
     */
    private final List<GetEcsDisksDiskMountInstance> mountInstances;
    /**
     * @return Disk name.
     * 
     */
    private final String name;
    private final List<GetEcsDisksDiskOperationLock> operationLocks;
    /**
     * @return Payment method for disk.
     * 
     */
    private final String paymentType;
    /**
     * @return Performance levels of ESSD cloud disk.
     * 
     */
    private final String performanceLevel;
    /**
     * @return Whether the disk is unmountable.
     * 
     */
    private final Boolean portable;
    /**
     * @return The product logo of the cloud market.
     * 
     */
    private final String productCode;
    /**
     * @return Region ID the disk belongs to.
     * 
     */
    private final String regionId;
    /**
     * @return The Id of resource group.
     * 
     */
    private final String resourceGroupId;
    /**
     * @return Disk size in GiB.
     * 
     */
    private final Integer size;
    /**
     * @return Snapshot used to create the disk. It is null if no snapshot is used to create the disk.
     * 
     */
    private final String snapshotId;
    /**
     * @return Current status.
     * 
     */
    private final String status;
    /**
     * @return A map of tags assigned to the disk.
     * 
     */
    private final Map<String,Object> tags;
    /**
     * @return Disk type.
     * 
     */
    private final String type;
    /**
     * @return The zone id.
     * 
     */
    private final String zoneId;

    @CustomType.Constructor
    private GetEcsDisksDisk(
        @CustomType.Parameter("attachedTime") String attachedTime,
        @CustomType.Parameter("autoSnapshotPolicyId") String autoSnapshotPolicyId,
        @CustomType.Parameter("availabilityZone") String availabilityZone,
        @CustomType.Parameter("category") String category,
        @CustomType.Parameter("creationTime") String creationTime,
        @CustomType.Parameter("deleteAutoSnapshot") Boolean deleteAutoSnapshot,
        @CustomType.Parameter("deleteWithInstance") Boolean deleteWithInstance,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("detachedTime") String detachedTime,
        @CustomType.Parameter("device") String device,
        @CustomType.Parameter("diskId") String diskId,
        @CustomType.Parameter("diskName") String diskName,
        @CustomType.Parameter("diskType") String diskType,
        @CustomType.Parameter("enableAutoSnapshot") Boolean enableAutoSnapshot,
        @CustomType.Parameter("enableAutomatedSnapshotPolicy") Boolean enableAutomatedSnapshotPolicy,
        @CustomType.Parameter("encrypted") String encrypted,
        @CustomType.Parameter("expiredTime") String expiredTime,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageId") String imageId,
        @CustomType.Parameter("instanceId") String instanceId,
        @CustomType.Parameter("iops") Integer iops,
        @CustomType.Parameter("iopsRead") Integer iopsRead,
        @CustomType.Parameter("iopsWrite") Integer iopsWrite,
        @CustomType.Parameter("kmsKeyId") String kmsKeyId,
        @CustomType.Parameter("mountInstanceNum") Integer mountInstanceNum,
        @CustomType.Parameter("mountInstances") List<GetEcsDisksDiskMountInstance> mountInstances,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("operationLocks") List<GetEcsDisksDiskOperationLock> operationLocks,
        @CustomType.Parameter("paymentType") String paymentType,
        @CustomType.Parameter("performanceLevel") String performanceLevel,
        @CustomType.Parameter("portable") Boolean portable,
        @CustomType.Parameter("productCode") String productCode,
        @CustomType.Parameter("regionId") String regionId,
        @CustomType.Parameter("resourceGroupId") String resourceGroupId,
        @CustomType.Parameter("size") Integer size,
        @CustomType.Parameter("snapshotId") String snapshotId,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tags") Map<String,Object> tags,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("zoneId") String zoneId) {
        this.attachedTime = attachedTime;
        this.autoSnapshotPolicyId = autoSnapshotPolicyId;
        this.availabilityZone = availabilityZone;
        this.category = category;
        this.creationTime = creationTime;
        this.deleteAutoSnapshot = deleteAutoSnapshot;
        this.deleteWithInstance = deleteWithInstance;
        this.description = description;
        this.detachedTime = detachedTime;
        this.device = device;
        this.diskId = diskId;
        this.diskName = diskName;
        this.diskType = diskType;
        this.enableAutoSnapshot = enableAutoSnapshot;
        this.enableAutomatedSnapshotPolicy = enableAutomatedSnapshotPolicy;
        this.encrypted = encrypted;
        this.expiredTime = expiredTime;
        this.id = id;
        this.imageId = imageId;
        this.instanceId = instanceId;
        this.iops = iops;
        this.iopsRead = iopsRead;
        this.iopsWrite = iopsWrite;
        this.kmsKeyId = kmsKeyId;
        this.mountInstanceNum = mountInstanceNum;
        this.mountInstances = mountInstances;
        this.name = name;
        this.operationLocks = operationLocks;
        this.paymentType = paymentType;
        this.performanceLevel = performanceLevel;
        this.portable = portable;
        this.productCode = productCode;
        this.regionId = regionId;
        this.resourceGroupId = resourceGroupId;
        this.size = size;
        this.snapshotId = snapshotId;
        this.status = status;
        this.tags = tags;
        this.type = type;
        this.zoneId = zoneId;
    }

    /**
     * @return A mount of time.
     * 
     */
    public String attachedTime() {
        return this.attachedTime;
    }
    /**
     * @return Query cloud disks based on the automatic snapshot policy ID.
     * 
     */
    public String autoSnapshotPolicyId() {
        return this.autoSnapshotPolicyId;
    }
    /**
     * @return Availability zone of the disk.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return Disk category.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Disk creation time.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Indicates whether the automatic snapshot is deleted when the disk is released.
     * 
     */
    public Boolean deleteAutoSnapshot() {
        return this.deleteAutoSnapshot;
    }
    /**
     * @return Indicates whether the disk is released together with the instance.
     * 
     */
    public Boolean deleteWithInstance() {
        return this.deleteWithInstance;
    }
    /**
     * @return Disk description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Disk detachment time.
     * 
     */
    public String detachedTime() {
        return this.detachedTime;
    }
    /**
     * @return The mount point of the disk.
     * 
     */
    public String device() {
        return this.device;
    }
    /**
     * @return ID of the disk.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return The disk name.
     * 
     */
    public String diskName() {
        return this.diskName;
    }
    /**
     * @return The disk type.
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return Whether the disk implements an automatic snapshot policy.
     * 
     */
    public Boolean enableAutoSnapshot() {
        return this.enableAutoSnapshot;
    }
    /**
     * @return Whether the disk implements an automatic snapshot policy.
     * 
     */
    public Boolean enableAutomatedSnapshotPolicy() {
        return this.enableAutomatedSnapshotPolicy;
    }
    /**
     * @return Indicate whether the disk is encrypted or not.
     * 
     */
    public String encrypted() {
        return this.encrypted;
    }
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return ID of the disk.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the image from which the disk is created. It is null unless the disk is created using an image.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return The instance ID of the disk mount.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    public Integer iops() {
        return this.iops;
    }
    public Integer iopsRead() {
        return this.iopsRead;
    }
    public Integer iopsWrite() {
        return this.iopsWrite;
    }
    /**
     * @return The kms key id.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return Number of instances mounted on shared storage.
     * 
     */
    public Integer mountInstanceNum() {
        return this.mountInstanceNum;
    }
    /**
     * @return Disk mount instances.
     * 
     */
    public List<GetEcsDisksDiskMountInstance> mountInstances() {
        return this.mountInstances;
    }
    /**
     * @return Disk name.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<GetEcsDisksDiskOperationLock> operationLocks() {
        return this.operationLocks;
    }
    /**
     * @return Payment method for disk.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return Performance levels of ESSD cloud disk.
     * 
     */
    public String performanceLevel() {
        return this.performanceLevel;
    }
    /**
     * @return Whether the disk is unmountable.
     * 
     */
    public Boolean portable() {
        return this.portable;
    }
    /**
     * @return The product logo of the cloud market.
     * 
     */
    public String productCode() {
        return this.productCode;
    }
    /**
     * @return Region ID the disk belongs to.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return The Id of resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return Disk size in GiB.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return Snapshot used to create the disk. It is null if no snapshot is used to create the disk.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return Current status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A map of tags assigned to the disk.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return Disk type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The zone id.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEcsDisksDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String attachedTime;
        private String autoSnapshotPolicyId;
        private String availabilityZone;
        private String category;
        private String creationTime;
        private Boolean deleteAutoSnapshot;
        private Boolean deleteWithInstance;
        private String description;
        private String detachedTime;
        private String device;
        private String diskId;
        private String diskName;
        private String diskType;
        private Boolean enableAutoSnapshot;
        private Boolean enableAutomatedSnapshotPolicy;
        private String encrypted;
        private String expiredTime;
        private String id;
        private String imageId;
        private String instanceId;
        private Integer iops;
        private Integer iopsRead;
        private Integer iopsWrite;
        private String kmsKeyId;
        private Integer mountInstanceNum;
        private List<GetEcsDisksDiskMountInstance> mountInstances;
        private String name;
        private List<GetEcsDisksDiskOperationLock> operationLocks;
        private String paymentType;
        private String performanceLevel;
        private Boolean portable;
        private String productCode;
        private String regionId;
        private String resourceGroupId;
        private Integer size;
        private String snapshotId;
        private String status;
        private Map<String,Object> tags;
        private String type;
        private String zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEcsDisksDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedTime = defaults.attachedTime;
    	      this.autoSnapshotPolicyId = defaults.autoSnapshotPolicyId;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.category = defaults.category;
    	      this.creationTime = defaults.creationTime;
    	      this.deleteAutoSnapshot = defaults.deleteAutoSnapshot;
    	      this.deleteWithInstance = defaults.deleteWithInstance;
    	      this.description = defaults.description;
    	      this.detachedTime = defaults.detachedTime;
    	      this.device = defaults.device;
    	      this.diskId = defaults.diskId;
    	      this.diskName = defaults.diskName;
    	      this.diskType = defaults.diskType;
    	      this.enableAutoSnapshot = defaults.enableAutoSnapshot;
    	      this.enableAutomatedSnapshotPolicy = defaults.enableAutomatedSnapshotPolicy;
    	      this.encrypted = defaults.encrypted;
    	      this.expiredTime = defaults.expiredTime;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.instanceId = defaults.instanceId;
    	      this.iops = defaults.iops;
    	      this.iopsRead = defaults.iopsRead;
    	      this.iopsWrite = defaults.iopsWrite;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.mountInstanceNum = defaults.mountInstanceNum;
    	      this.mountInstances = defaults.mountInstances;
    	      this.name = defaults.name;
    	      this.operationLocks = defaults.operationLocks;
    	      this.paymentType = defaults.paymentType;
    	      this.performanceLevel = defaults.performanceLevel;
    	      this.portable = defaults.portable;
    	      this.productCode = defaults.productCode;
    	      this.regionId = defaults.regionId;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder attachedTime(String attachedTime) {
            this.attachedTime = Objects.requireNonNull(attachedTime);
            return this;
        }
        public Builder autoSnapshotPolicyId(String autoSnapshotPolicyId) {
            this.autoSnapshotPolicyId = Objects.requireNonNull(autoSnapshotPolicyId);
            return this;
        }
        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        public Builder deleteAutoSnapshot(Boolean deleteAutoSnapshot) {
            this.deleteAutoSnapshot = Objects.requireNonNull(deleteAutoSnapshot);
            return this;
        }
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            this.deleteWithInstance = Objects.requireNonNull(deleteWithInstance);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder detachedTime(String detachedTime) {
            this.detachedTime = Objects.requireNonNull(detachedTime);
            return this;
        }
        public Builder device(String device) {
            this.device = Objects.requireNonNull(device);
            return this;
        }
        public Builder diskId(String diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        public Builder diskName(String diskName) {
            this.diskName = Objects.requireNonNull(diskName);
            return this;
        }
        public Builder diskType(String diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }
        public Builder enableAutoSnapshot(Boolean enableAutoSnapshot) {
            this.enableAutoSnapshot = Objects.requireNonNull(enableAutoSnapshot);
            return this;
        }
        public Builder enableAutomatedSnapshotPolicy(Boolean enableAutomatedSnapshotPolicy) {
            this.enableAutomatedSnapshotPolicy = Objects.requireNonNull(enableAutomatedSnapshotPolicy);
            return this;
        }
        public Builder encrypted(String encrypted) {
            this.encrypted = Objects.requireNonNull(encrypted);
            return this;
        }
        public Builder expiredTime(String expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder iops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }
        public Builder iopsRead(Integer iopsRead) {
            this.iopsRead = Objects.requireNonNull(iopsRead);
            return this;
        }
        public Builder iopsWrite(Integer iopsWrite) {
            this.iopsWrite = Objects.requireNonNull(iopsWrite);
            return this;
        }
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        public Builder mountInstanceNum(Integer mountInstanceNum) {
            this.mountInstanceNum = Objects.requireNonNull(mountInstanceNum);
            return this;
        }
        public Builder mountInstances(List<GetEcsDisksDiskMountInstance> mountInstances) {
            this.mountInstances = Objects.requireNonNull(mountInstances);
            return this;
        }
        public Builder mountInstances(GetEcsDisksDiskMountInstance... mountInstances) {
            return mountInstances(List.of(mountInstances));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder operationLocks(List<GetEcsDisksDiskOperationLock> operationLocks) {
            this.operationLocks = Objects.requireNonNull(operationLocks);
            return this;
        }
        public Builder operationLocks(GetEcsDisksDiskOperationLock... operationLocks) {
            return operationLocks(List.of(operationLocks));
        }
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        public Builder performanceLevel(String performanceLevel) {
            this.performanceLevel = Objects.requireNonNull(performanceLevel);
            return this;
        }
        public Builder portable(Boolean portable) {
            this.portable = Objects.requireNonNull(portable);
            return this;
        }
        public Builder productCode(String productCode) {
            this.productCode = Objects.requireNonNull(productCode);
            return this;
        }
        public Builder regionId(String regionId) {
            this.regionId = Objects.requireNonNull(regionId);
            return this;
        }
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }        public GetEcsDisksDisk build() {
            return new GetEcsDisksDisk(attachedTime, autoSnapshotPolicyId, availabilityZone, category, creationTime, deleteAutoSnapshot, deleteWithInstance, description, detachedTime, device, diskId, diskName, diskType, enableAutoSnapshot, enableAutomatedSnapshotPolicy, encrypted, expiredTime, id, imageId, instanceId, iops, iopsRead, iopsWrite, kmsKeyId, mountInstanceNum, mountInstances, name, operationLocks, paymentType, performanceLevel, portable, productCode, regionId, resourceGroupId, size, snapshotId, status, tags, type, zoneId);
        }
    }
}
