// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.inputs;

import com.pulumi.alicloud.ga.inputs.ForwardingRuleRuleActionForwardGroupConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ForwardingRuleRuleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleRuleActionArgs Empty = new ForwardingRuleRuleActionArgs();

    /**
     * Forwarding configuration.
     * 
     */
    @Import(name="forwardGroupConfig", required=true)
    private Output<ForwardingRuleRuleActionForwardGroupConfigArgs> forwardGroupConfig;

    /**
     * @return Forwarding configuration.
     * 
     */
    public Output<ForwardingRuleRuleActionForwardGroupConfigArgs> forwardGroupConfig() {
        return this.forwardGroupConfig;
    }

    /**
     * Forwarding priority.
     * 
     */
    @Import(name="order", required=true)
    private Output<Integer> order;

    /**
     * @return Forwarding priority.
     * 
     */
    public Output<Integer> order() {
        return this.order;
    }

    /**
     * Forward action type. Default: forwardgroup.
     * 
     */
    @Import(name="ruleActionType", required=true)
    private Output<String> ruleActionType;

    /**
     * @return Forward action type. Default: forwardgroup.
     * 
     */
    public Output<String> ruleActionType() {
        return this.ruleActionType;
    }

    private ForwardingRuleRuleActionArgs() {}

    private ForwardingRuleRuleActionArgs(ForwardingRuleRuleActionArgs $) {
        this.forwardGroupConfig = $.forwardGroupConfig;
        this.order = $.order;
        this.ruleActionType = $.ruleActionType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleRuleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleRuleActionArgs $;

        public Builder() {
            $ = new ForwardingRuleRuleActionArgs();
        }

        public Builder(ForwardingRuleRuleActionArgs defaults) {
            $ = new ForwardingRuleRuleActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param forwardGroupConfig Forwarding configuration.
         * 
         * @return builder
         * 
         */
        public Builder forwardGroupConfig(Output<ForwardingRuleRuleActionForwardGroupConfigArgs> forwardGroupConfig) {
            $.forwardGroupConfig = forwardGroupConfig;
            return this;
        }

        /**
         * @param forwardGroupConfig Forwarding configuration.
         * 
         * @return builder
         * 
         */
        public Builder forwardGroupConfig(ForwardingRuleRuleActionForwardGroupConfigArgs forwardGroupConfig) {
            return forwardGroupConfig(Output.of(forwardGroupConfig));
        }

        /**
         * @param order Forwarding priority.
         * 
         * @return builder
         * 
         */
        public Builder order(Output<Integer> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Forwarding priority.
         * 
         * @return builder
         * 
         */
        public Builder order(Integer order) {
            return order(Output.of(order));
        }

        /**
         * @param ruleActionType Forward action type. Default: forwardgroup.
         * 
         * @return builder
         * 
         */
        public Builder ruleActionType(Output<String> ruleActionType) {
            $.ruleActionType = ruleActionType;
            return this;
        }

        /**
         * @param ruleActionType Forward action type. Default: forwardgroup.
         * 
         * @return builder
         * 
         */
        public Builder ruleActionType(String ruleActionType) {
            return ruleActionType(Output.of(ruleActionType));
        }

        public ForwardingRuleRuleActionArgs build() {
            $.forwardGroupConfig = Objects.requireNonNull($.forwardGroupConfig, "expected parameter 'forwardGroupConfig' to be non-null");
            $.order = Objects.requireNonNull($.order, "expected parameter 'order' to be non-null");
            $.ruleActionType = Objects.requireNonNull($.ruleActionType, "expected parameter 'ruleActionType' to be non-null");
            return $;
        }
    }

}
