// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketReplicationDestination {
    /**
     * @return The destination bucket to which the data is replicated.
     * 
     */
    private final String bucket;
    private final String location;
    /**
     * @return The link used to transfer data in data replication.. Can be `internal` or `oss_acc`. Defaults to `internal`.
     * 
     * `NOTE`: You can set transfer_type to oss_acc only when you create cross-region replication (CRR) rules.
     * 
     */
    private final @Nullable String transferType;

    @CustomType.Constructor
    private BucketReplicationDestination(
        @CustomType.Parameter("bucket") String bucket,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("transferType") @Nullable String transferType) {
        this.bucket = bucket;
        this.location = location;
        this.transferType = transferType;
    }

    /**
     * @return The destination bucket to which the data is replicated.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    public String location() {
        return this.location;
    }
    /**
     * @return The link used to transfer data in data replication.. Can be `internal` or `oss_acc`. Defaults to `internal`.
     * 
     * `NOTE`: You can set transfer_type to oss_acc only when you create cross-region replication (CRR) rules.
     * 
     */
    public Optional<String> transferType() {
        return Optional.ofNullable(this.transferType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketReplicationDestination defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String bucket;
        private String location;
        private @Nullable String transferType;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketReplicationDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.location = defaults.location;
    	      this.transferType = defaults.transferType;
        }

        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder transferType(@Nullable String transferType) {
            this.transferType = transferType;
            return this;
        }        public BucketReplicationDestination build() {
            return new BucketReplicationDestination(bucket, location, transferType);
        }
    }
}
