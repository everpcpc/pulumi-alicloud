// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNasBackupPlansPlan {
    /**
     * @return Backup type. Valid values: `COMPLETE`.
     * 
     */
    private final String backupType;
    /**
     * @return File System Creation Time. **Note** The time format of the API adopts the ISO 8601 format, such as `2021-07-09T15:45:30CST`.
     * 
     */
    private final String createTime;
    /**
     * @return The creation time of the backup plan. UNIX time in seconds.
     * 
     */
    private final String createdTime;
    /**
     * @return Whether to be suspended. Valid values: `true`, `false`.
     * 
     */
    private final Boolean disabled;
    /**
     * @return The File System ID of Nas.
     * 
     */
    private final String fileSystemId;
    /**
     * @return The ID of Nas backup plan.
     * 
     */
    private final String id;
    /**
     * @return The ID of Nas backup plan.
     * 
     */
    private final String nasBackupPlanId;
    /**
     * @return The name of the resource.
     * 
     */
    private final String nasBackupPlanName;
    /**
     * @return Options field of Nas backup plan.
     * 
     */
    private final String options;
    /**
     * @return List of backup path. Up to 65536 Characters. e.g.`[&#34;/home&#34;, &#34;/var&#34;]`
     * 
     */
    private final List<String> paths;
    /**
     * @return Backup retention days, the minimum is 1.
     * 
     */
    private final String retention;
    /**
     * @return Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * 
     */
    private final String schedule;
    /**
     * @return The update time of the backup plan. UNIX time in seconds.
     * 
     */
    private final String updatedTime;
    /**
     * @return The ID of backup vault.
     * 
     */
    private final String vaultId;

    @CustomType.Constructor
    private GetNasBackupPlansPlan(
        @CustomType.Parameter("backupType") String backupType,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("createdTime") String createdTime,
        @CustomType.Parameter("disabled") Boolean disabled,
        @CustomType.Parameter("fileSystemId") String fileSystemId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("nasBackupPlanId") String nasBackupPlanId,
        @CustomType.Parameter("nasBackupPlanName") String nasBackupPlanName,
        @CustomType.Parameter("options") String options,
        @CustomType.Parameter("paths") List<String> paths,
        @CustomType.Parameter("retention") String retention,
        @CustomType.Parameter("schedule") String schedule,
        @CustomType.Parameter("updatedTime") String updatedTime,
        @CustomType.Parameter("vaultId") String vaultId) {
        this.backupType = backupType;
        this.createTime = createTime;
        this.createdTime = createdTime;
        this.disabled = disabled;
        this.fileSystemId = fileSystemId;
        this.id = id;
        this.nasBackupPlanId = nasBackupPlanId;
        this.nasBackupPlanName = nasBackupPlanName;
        this.options = options;
        this.paths = paths;
        this.retention = retention;
        this.schedule = schedule;
        this.updatedTime = updatedTime;
        this.vaultId = vaultId;
    }

    /**
     * @return Backup type. Valid values: `COMPLETE`.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return File System Creation Time. **Note** The time format of the API adopts the ISO 8601 format, such as `2021-07-09T15:45:30CST`.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The creation time of the backup plan. UNIX time in seconds.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return Whether to be suspended. Valid values: `true`, `false`.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return The File System ID of Nas.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The ID of Nas backup plan.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of Nas backup plan.
     * 
     */
    public String nasBackupPlanId() {
        return this.nasBackupPlanId;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String nasBackupPlanName() {
        return this.nasBackupPlanName;
    }
    /**
     * @return Options field of Nas backup plan.
     * 
     */
    public String options() {
        return this.options;
    }
    /**
     * @return List of backup path. Up to 65536 Characters. e.g.`[&#34;/home&#34;, &#34;/var&#34;]`
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    /**
     * @return Backup retention days, the minimum is 1.
     * 
     */
    public String retention() {
        return this.retention;
    }
    /**
     * @return Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * 
     */
    public String schedule() {
        return this.schedule;
    }
    /**
     * @return The update time of the backup plan. UNIX time in seconds.
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return The ID of backup vault.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNasBackupPlansPlan defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String backupType;
        private String createTime;
        private String createdTime;
        private Boolean disabled;
        private String fileSystemId;
        private String id;
        private String nasBackupPlanId;
        private String nasBackupPlanName;
        private String options;
        private List<String> paths;
        private String retention;
        private String schedule;
        private String updatedTime;
        private String vaultId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNasBackupPlansPlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupType = defaults.backupType;
    	      this.createTime = defaults.createTime;
    	      this.createdTime = defaults.createdTime;
    	      this.disabled = defaults.disabled;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.id = defaults.id;
    	      this.nasBackupPlanId = defaults.nasBackupPlanId;
    	      this.nasBackupPlanName = defaults.nasBackupPlanName;
    	      this.options = defaults.options;
    	      this.paths = defaults.paths;
    	      this.retention = defaults.retention;
    	      this.schedule = defaults.schedule;
    	      this.updatedTime = defaults.updatedTime;
    	      this.vaultId = defaults.vaultId;
        }

        public Builder backupType(String backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder createdTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        public Builder fileSystemId(String fileSystemId) {
            this.fileSystemId = Objects.requireNonNull(fileSystemId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder nasBackupPlanId(String nasBackupPlanId) {
            this.nasBackupPlanId = Objects.requireNonNull(nasBackupPlanId);
            return this;
        }
        public Builder nasBackupPlanName(String nasBackupPlanName) {
            this.nasBackupPlanName = Objects.requireNonNull(nasBackupPlanName);
            return this;
        }
        public Builder options(String options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        public Builder paths(List<String> paths) {
            this.paths = Objects.requireNonNull(paths);
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        public Builder retention(String retention) {
            this.retention = Objects.requireNonNull(retention);
            return this;
        }
        public Builder schedule(String schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }
        public Builder updatedTime(String updatedTime) {
            this.updatedTime = Objects.requireNonNull(updatedTime);
            return this;
        }
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }        public GetNasBackupPlansPlan build() {
            return new GetNasBackupPlansPlan(backupType, createTime, createdTime, disabled, fileSystemId, id, nasBackupPlanId, nasBackupPlanName, options, paths, retention, schedule, updatedTime, vaultId);
        }
    }
}
