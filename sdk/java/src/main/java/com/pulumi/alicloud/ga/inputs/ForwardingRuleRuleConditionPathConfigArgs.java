// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ForwardingRuleRuleConditionPathConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleRuleConditionPathConfigArgs Empty = new ForwardingRuleRuleConditionPathConfigArgs();

    /**
     * The length of the path is 1-128 characters. It must start with a forward slash (/), and can only contain letters, numbers, dollar sign ($), dash (-), and underscores (_) , half width full stop (.), plus sign (+), forward slash (/), and (&amp;), wavy line (~), at (@), half width colon (:), apostrophe (&#39;). It supports asterisk (*) and half width question mark (?) as wildcards.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return The length of the path is 1-128 characters. It must start with a forward slash (/), and can only contain letters, numbers, dollar sign ($), dash (-), and underscores (_) , half width full stop (.), plus sign (+), forward slash (/), and (&amp;), wavy line (~), at (@), half width colon (:), apostrophe (&#39;). It supports asterisk (*) and half width question mark (?) as wildcards.
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private ForwardingRuleRuleConditionPathConfigArgs() {}

    private ForwardingRuleRuleConditionPathConfigArgs(ForwardingRuleRuleConditionPathConfigArgs $) {
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleRuleConditionPathConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleRuleConditionPathConfigArgs $;

        public Builder() {
            $ = new ForwardingRuleRuleConditionPathConfigArgs();
        }

        public Builder(ForwardingRuleRuleConditionPathConfigArgs defaults) {
            $ = new ForwardingRuleRuleConditionPathConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param values The length of the path is 1-128 characters. It must start with a forward slash (/), and can only contain letters, numbers, dollar sign ($), dash (-), and underscores (_) , half width full stop (.), plus sign (+), forward slash (/), and (&amp;), wavy line (~), at (@), half width colon (:), apostrophe (&#39;). It supports asterisk (*) and half width question mark (?) as wildcards.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The length of the path is 1-128 characters. It must start with a forward slash (/), and can only contain letters, numbers, dollar sign ($), dash (-), and underscores (_) , half width full stop (.), plus sign (+), forward slash (/), and (&amp;), wavy line (~), at (@), half width colon (:), apostrophe (&#39;). It supports asterisk (*) and half width question mark (?) as wildcards.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values The length of the path is 1-128 characters. It must start with a forward slash (/), and can only contain letters, numbers, dollar sign ($), dash (-), and underscores (_) , half width full stop (.), plus sign (+), forward slash (/), and (&amp;), wavy line (~), at (@), half width colon (:), apostrophe (&#39;). It supports asterisk (*) and half width question mark (?) as wildcards.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public ForwardingRuleRuleConditionPathConfigArgs build() {
            return $;
        }
    }

}
