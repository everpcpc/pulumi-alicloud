// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cassandra.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetClustersCluster {
    /**
     * @return The ID of the Cassandra cluster.
     * 
     */
    private final String clusterId;
    /**
     * @return The name of the Cassandra cluster.
     * 
     */
    private final String clusterName;
    private final String createdTime;
    /**
     * @return The count of data centers
     * 
     */
    private final Integer dataCenterCount;
    /**
     * @return The expire time of the cluster.
     * 
     */
    private final String expireTime;
    /**
     * @return The ID of the Cassandra cluster.
     * 
     */
    private final String id;
    /**
     * @return The lock mode of the cluster.
     * 
     */
    private final String lockMode;
    /**
     * @return The major version of the cluster.
     * 
     */
    private final String majorVersion;
    /**
     * @return The minor version of the cluster.
     * 
     */
    private final String minorVersion;
    /**
     * @return Billing method. Value options are `Subscription` for Pay-As-You-Go and `PayAsYouGo` for yearly or monthly subscription.
     * 
     */
    private final String payType;
    /**
     * @return Status of the cluster.
     * 
     */
    private final String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private final @Nullable Map<String,Object> tags;

    @CustomType.Constructor
    private GetClustersCluster(
        @CustomType.Parameter("clusterId") String clusterId,
        @CustomType.Parameter("clusterName") String clusterName,
        @CustomType.Parameter("createdTime") String createdTime,
        @CustomType.Parameter("dataCenterCount") Integer dataCenterCount,
        @CustomType.Parameter("expireTime") String expireTime,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lockMode") String lockMode,
        @CustomType.Parameter("majorVersion") String majorVersion,
        @CustomType.Parameter("minorVersion") String minorVersion,
        @CustomType.Parameter("payType") String payType,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tags") @Nullable Map<String,Object> tags) {
        this.clusterId = clusterId;
        this.clusterName = clusterName;
        this.createdTime = createdTime;
        this.dataCenterCount = dataCenterCount;
        this.expireTime = expireTime;
        this.id = id;
        this.lockMode = lockMode;
        this.majorVersion = majorVersion;
        this.minorVersion = minorVersion;
        this.payType = payType;
        this.status = status;
        this.tags = tags;
    }

    /**
     * @return The ID of the Cassandra cluster.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The name of the Cassandra cluster.
     * 
     */
    public String clusterName() {
        return this.clusterName;
    }
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return The count of data centers
     * 
     */
    public Integer dataCenterCount() {
        return this.dataCenterCount;
    }
    /**
     * @return The expire time of the cluster.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The ID of the Cassandra cluster.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The lock mode of the cluster.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return The major version of the cluster.
     * 
     */
    public String majorVersion() {
        return this.majorVersion;
    }
    /**
     * @return The minor version of the cluster.
     * 
     */
    public String minorVersion() {
        return this.minorVersion;
    }
    /**
     * @return Billing method. Value options are `Subscription` for Pay-As-You-Go and `PayAsYouGo` for yearly or monthly subscription.
     * 
     */
    public String payType() {
        return this.payType;
    }
    /**
     * @return Status of the cluster.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClustersCluster defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clusterId;
        private String clusterName;
        private String createdTime;
        private Integer dataCenterCount;
        private String expireTime;
        private String id;
        private String lockMode;
        private String majorVersion;
        private String minorVersion;
        private String payType;
        private String status;
        private @Nullable Map<String,Object> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClustersCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.clusterName = defaults.clusterName;
    	      this.createdTime = defaults.createdTime;
    	      this.dataCenterCount = defaults.dataCenterCount;
    	      this.expireTime = defaults.expireTime;
    	      this.id = defaults.id;
    	      this.lockMode = defaults.lockMode;
    	      this.majorVersion = defaults.majorVersion;
    	      this.minorVersion = defaults.minorVersion;
    	      this.payType = defaults.payType;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        public Builder clusterName(String clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }
        public Builder createdTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }
        public Builder dataCenterCount(Integer dataCenterCount) {
            this.dataCenterCount = Objects.requireNonNull(dataCenterCount);
            return this;
        }
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lockMode(String lockMode) {
            this.lockMode = Objects.requireNonNull(lockMode);
            return this;
        }
        public Builder majorVersion(String majorVersion) {
            this.majorVersion = Objects.requireNonNull(majorVersion);
            return this;
        }
        public Builder minorVersion(String minorVersion) {
            this.minorVersion = Objects.requireNonNull(minorVersion);
            return this;
        }
        public Builder payType(String payType) {
            this.payType = Objects.requireNonNull(payType);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }        public GetClustersCluster build() {
            return new GetClustersCluster(clusterId, clusterName, createdTime, dataCenterCount, expireTime, id, lockMode, majorVersion, minorVersion, payType, status, tags);
        }
    }
}
