// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.polardb.outputs;

import com.pulumi.alicloud.polardb.outputs.GetClustersClusterDbNode;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClustersCluster {
    /**
     * @return Billing method. Value options: `PostPaid` for Pay-As-You-Go and `PrePaid` for subscription.
     * 
     */
    private final String chargeType;
    /**
     * @return PolarDB cluster connection string.
     * 
     */
    private final String connectionString;
    /**
     * @return The create_time of the db_nodes.
     * 
     */
    private final String createTime;
    /**
     * @return The db_node_class of the db_nodes.
     * 
     */
    private final String dbNodeClass;
    /**
     * @return The DBNodeNumber of the PolarDB cluster.
     * 
     */
    private final Integer dbNodeNumber;
    /**
     * @return The DBNodes of the PolarDB cluster.
     * 
     */
    private final List<GetClustersClusterDbNode> dbNodes;
    /**
     * @return Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
     * 
     */
    private final String dbType;
    /**
     * @return The DBVersion of the PolarDB cluster.
     * 
     */
    private final String dbVersion;
    /**
     * @return The DeleteLock of the PolarDB cluster.
     * 
     */
    private final Integer deleteLock;
    /**
     * @return The description of the PolarDB cluster.
     * 
     */
    private final String description;
    /**
     * @return Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
     * 
     */
    private final String engine;
    /**
     * @return Expiration time. Pay-As-You-Go clusters never expire.
     * 
     */
    private final String expireTime;
    /**
     * @return The expired of the PolarDB cluster.
     * 
     */
    private final String expired;
    /**
     * @return The ID of the PolarDB cluster.
     * 
     */
    private final String id;
    /**
     * @return The LockMode of the PolarDB cluster.
     * 
     */
    private final String lockMode;
    /**
     * @return The DBClusterNetworkType of the PolarDB cluster.
     * 
     */
    private final String networkType;
    /**
     * @return PolarDB cluster connection port.
     * 
     */
    private final String port;
    /**
     * @return The region_id of the db_nodes.
     * 
     */
    private final String regionId;
    /**
     * @return status of the cluster.
     * 
     */
    private final String status;
    /**
     * @return The StorageUsed of the PolarDB cluster.
     * 
     */
    private final Integer storageUsed;
    /**
     * @return ID of the VPC the cluster belongs to.
     * 
     */
    private final String vpcId;
    /**
     * @return The zone_id of the db_nodes.
     * 
     */
    private final String zoneId;

    @CustomType.Constructor
    private GetClustersCluster(
        @CustomType.Parameter("chargeType") String chargeType,
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("dbNodeClass") String dbNodeClass,
        @CustomType.Parameter("dbNodeNumber") Integer dbNodeNumber,
        @CustomType.Parameter("dbNodes") List<GetClustersClusterDbNode> dbNodes,
        @CustomType.Parameter("dbType") String dbType,
        @CustomType.Parameter("dbVersion") String dbVersion,
        @CustomType.Parameter("deleteLock") Integer deleteLock,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("engine") String engine,
        @CustomType.Parameter("expireTime") String expireTime,
        @CustomType.Parameter("expired") String expired,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lockMode") String lockMode,
        @CustomType.Parameter("networkType") String networkType,
        @CustomType.Parameter("port") String port,
        @CustomType.Parameter("regionId") String regionId,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("storageUsed") Integer storageUsed,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("zoneId") String zoneId) {
        this.chargeType = chargeType;
        this.connectionString = connectionString;
        this.createTime = createTime;
        this.dbNodeClass = dbNodeClass;
        this.dbNodeNumber = dbNodeNumber;
        this.dbNodes = dbNodes;
        this.dbType = dbType;
        this.dbVersion = dbVersion;
        this.deleteLock = deleteLock;
        this.description = description;
        this.engine = engine;
        this.expireTime = expireTime;
        this.expired = expired;
        this.id = id;
        this.lockMode = lockMode;
        this.networkType = networkType;
        this.port = port;
        this.regionId = regionId;
        this.status = status;
        this.storageUsed = storageUsed;
        this.vpcId = vpcId;
        this.zoneId = zoneId;
    }

    /**
     * @return Billing method. Value options: `PostPaid` for Pay-As-You-Go and `PrePaid` for subscription.
     * 
     */
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return PolarDB cluster connection string.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The create_time of the db_nodes.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The db_node_class of the db_nodes.
     * 
     */
    public String dbNodeClass() {
        return this.dbNodeClass;
    }
    /**
     * @return The DBNodeNumber of the PolarDB cluster.
     * 
     */
    public Integer dbNodeNumber() {
        return this.dbNodeNumber;
    }
    /**
     * @return The DBNodes of the PolarDB cluster.
     * 
     */
    public List<GetClustersClusterDbNode> dbNodes() {
        return this.dbNodes;
    }
    /**
     * @return Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
     * 
     */
    public String dbType() {
        return this.dbType;
    }
    /**
     * @return The DBVersion of the PolarDB cluster.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return The DeleteLock of the PolarDB cluster.
     * 
     */
    public Integer deleteLock() {
        return this.deleteLock;
    }
    /**
     * @return The description of the PolarDB cluster.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return Expiration time. Pay-As-You-Go clusters never expire.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The expired of the PolarDB cluster.
     * 
     */
    public String expired() {
        return this.expired;
    }
    /**
     * @return The ID of the PolarDB cluster.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The LockMode of the PolarDB cluster.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return The DBClusterNetworkType of the PolarDB cluster.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return PolarDB cluster connection port.
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return The region_id of the db_nodes.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return status of the cluster.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The StorageUsed of the PolarDB cluster.
     * 
     */
    public Integer storageUsed() {
        return this.storageUsed;
    }
    /**
     * @return ID of the VPC the cluster belongs to.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The zone_id of the db_nodes.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClustersCluster defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String chargeType;
        private String connectionString;
        private String createTime;
        private String dbNodeClass;
        private Integer dbNodeNumber;
        private List<GetClustersClusterDbNode> dbNodes;
        private String dbType;
        private String dbVersion;
        private Integer deleteLock;
        private String description;
        private String engine;
        private String expireTime;
        private String expired;
        private String id;
        private String lockMode;
        private String networkType;
        private String port;
        private String regionId;
        private String status;
        private Integer storageUsed;
        private String vpcId;
        private String zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClustersCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chargeType = defaults.chargeType;
    	      this.connectionString = defaults.connectionString;
    	      this.createTime = defaults.createTime;
    	      this.dbNodeClass = defaults.dbNodeClass;
    	      this.dbNodeNumber = defaults.dbNodeNumber;
    	      this.dbNodes = defaults.dbNodes;
    	      this.dbType = defaults.dbType;
    	      this.dbVersion = defaults.dbVersion;
    	      this.deleteLock = defaults.deleteLock;
    	      this.description = defaults.description;
    	      this.engine = defaults.engine;
    	      this.expireTime = defaults.expireTime;
    	      this.expired = defaults.expired;
    	      this.id = defaults.id;
    	      this.lockMode = defaults.lockMode;
    	      this.networkType = defaults.networkType;
    	      this.port = defaults.port;
    	      this.regionId = defaults.regionId;
    	      this.status = defaults.status;
    	      this.storageUsed = defaults.storageUsed;
    	      this.vpcId = defaults.vpcId;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder chargeType(String chargeType) {
            this.chargeType = Objects.requireNonNull(chargeType);
            return this;
        }
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder dbNodeClass(String dbNodeClass) {
            this.dbNodeClass = Objects.requireNonNull(dbNodeClass);
            return this;
        }
        public Builder dbNodeNumber(Integer dbNodeNumber) {
            this.dbNodeNumber = Objects.requireNonNull(dbNodeNumber);
            return this;
        }
        public Builder dbNodes(List<GetClustersClusterDbNode> dbNodes) {
            this.dbNodes = Objects.requireNonNull(dbNodes);
            return this;
        }
        public Builder dbNodes(GetClustersClusterDbNode... dbNodes) {
            return dbNodes(List.of(dbNodes));
        }
        public Builder dbType(String dbType) {
            this.dbType = Objects.requireNonNull(dbType);
            return this;
        }
        public Builder dbVersion(String dbVersion) {
            this.dbVersion = Objects.requireNonNull(dbVersion);
            return this;
        }
        public Builder deleteLock(Integer deleteLock) {
            this.deleteLock = Objects.requireNonNull(deleteLock);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        public Builder expired(String expired) {
            this.expired = Objects.requireNonNull(expired);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lockMode(String lockMode) {
            this.lockMode = Objects.requireNonNull(lockMode);
            return this;
        }
        public Builder networkType(String networkType) {
            this.networkType = Objects.requireNonNull(networkType);
            return this;
        }
        public Builder port(String port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder regionId(String regionId) {
            this.regionId = Objects.requireNonNull(regionId);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder storageUsed(Integer storageUsed) {
            this.storageUsed = Objects.requireNonNull(storageUsed);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }        public GetClustersCluster build() {
            return new GetClustersCluster(chargeType, connectionString, createTime, dbNodeClass, dbNodeNumber, dbNodes, dbType, dbVersion, deleteLock, description, engine, expireTime, expired, id, lockMode, networkType, port, regionId, status, storageUsed, vpcId, zoneId);
        }
    }
}
