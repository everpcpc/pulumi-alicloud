// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.brain.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIndustrialPidLoopsLoop {
    /**
     * @return The ID of the Pid Loop.
     * 
     */
    private final String id;
    private final String pidLoopConfiguration;
    /**
     * @return The dcs type of Pid Loop.
     * 
     */
    private final String pidLoopDcsType;
    private final String pidLoopDesc;
    /**
     * @return The ID of the Pid Loop.
     * 
     */
    private final String pidLoopId;
    /**
     * @return Whether is crucial Pid Loop.
     * 
     */
    private final Boolean pidLoopIsCrucial;
    /**
     * @return The name of Pid Loop.
     * 
     */
    private final String pidLoopName;
    /**
     * @return The type of Pid Loop.
     * 
     */
    private final String pidLoopType;
    /**
     * @return The pid project id.
     * 
     */
    private final String pidProjectId;
    /**
     * @return The status of Pid Loop.
     * 
     */
    private final String status;

    @CustomType.Constructor
    private GetIndustrialPidLoopsLoop(
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("pidLoopConfiguration") String pidLoopConfiguration,
        @CustomType.Parameter("pidLoopDcsType") String pidLoopDcsType,
        @CustomType.Parameter("pidLoopDesc") String pidLoopDesc,
        @CustomType.Parameter("pidLoopId") String pidLoopId,
        @CustomType.Parameter("pidLoopIsCrucial") Boolean pidLoopIsCrucial,
        @CustomType.Parameter("pidLoopName") String pidLoopName,
        @CustomType.Parameter("pidLoopType") String pidLoopType,
        @CustomType.Parameter("pidProjectId") String pidProjectId,
        @CustomType.Parameter("status") String status) {
        this.id = id;
        this.pidLoopConfiguration = pidLoopConfiguration;
        this.pidLoopDcsType = pidLoopDcsType;
        this.pidLoopDesc = pidLoopDesc;
        this.pidLoopId = pidLoopId;
        this.pidLoopIsCrucial = pidLoopIsCrucial;
        this.pidLoopName = pidLoopName;
        this.pidLoopType = pidLoopType;
        this.pidProjectId = pidProjectId;
        this.status = status;
    }

    /**
     * @return The ID of the Pid Loop.
     * 
     */
    public String id() {
        return this.id;
    }
    public String pidLoopConfiguration() {
        return this.pidLoopConfiguration;
    }
    /**
     * @return The dcs type of Pid Loop.
     * 
     */
    public String pidLoopDcsType() {
        return this.pidLoopDcsType;
    }
    public String pidLoopDesc() {
        return this.pidLoopDesc;
    }
    /**
     * @return The ID of the Pid Loop.
     * 
     */
    public String pidLoopId() {
        return this.pidLoopId;
    }
    /**
     * @return Whether is crucial Pid Loop.
     * 
     */
    public Boolean pidLoopIsCrucial() {
        return this.pidLoopIsCrucial;
    }
    /**
     * @return The name of Pid Loop.
     * 
     */
    public String pidLoopName() {
        return this.pidLoopName;
    }
    /**
     * @return The type of Pid Loop.
     * 
     */
    public String pidLoopType() {
        return this.pidLoopType;
    }
    /**
     * @return The pid project id.
     * 
     */
    public String pidProjectId() {
        return this.pidProjectId;
    }
    /**
     * @return The status of Pid Loop.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIndustrialPidLoopsLoop defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String id;
        private String pidLoopConfiguration;
        private String pidLoopDcsType;
        private String pidLoopDesc;
        private String pidLoopId;
        private Boolean pidLoopIsCrucial;
        private String pidLoopName;
        private String pidLoopType;
        private String pidProjectId;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetIndustrialPidLoopsLoop defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.pidLoopConfiguration = defaults.pidLoopConfiguration;
    	      this.pidLoopDcsType = defaults.pidLoopDcsType;
    	      this.pidLoopDesc = defaults.pidLoopDesc;
    	      this.pidLoopId = defaults.pidLoopId;
    	      this.pidLoopIsCrucial = defaults.pidLoopIsCrucial;
    	      this.pidLoopName = defaults.pidLoopName;
    	      this.pidLoopType = defaults.pidLoopType;
    	      this.pidProjectId = defaults.pidProjectId;
    	      this.status = defaults.status;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder pidLoopConfiguration(String pidLoopConfiguration) {
            this.pidLoopConfiguration = Objects.requireNonNull(pidLoopConfiguration);
            return this;
        }
        public Builder pidLoopDcsType(String pidLoopDcsType) {
            this.pidLoopDcsType = Objects.requireNonNull(pidLoopDcsType);
            return this;
        }
        public Builder pidLoopDesc(String pidLoopDesc) {
            this.pidLoopDesc = Objects.requireNonNull(pidLoopDesc);
            return this;
        }
        public Builder pidLoopId(String pidLoopId) {
            this.pidLoopId = Objects.requireNonNull(pidLoopId);
            return this;
        }
        public Builder pidLoopIsCrucial(Boolean pidLoopIsCrucial) {
            this.pidLoopIsCrucial = Objects.requireNonNull(pidLoopIsCrucial);
            return this;
        }
        public Builder pidLoopName(String pidLoopName) {
            this.pidLoopName = Objects.requireNonNull(pidLoopName);
            return this;
        }
        public Builder pidLoopType(String pidLoopType) {
            this.pidLoopType = Objects.requireNonNull(pidLoopType);
            return this;
        }
        public Builder pidProjectId(String pidProjectId) {
            this.pidProjectId = Objects.requireNonNull(pidProjectId);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetIndustrialPidLoopsLoop build() {
            return new GetIndustrialPidLoopsLoop(id, pidLoopConfiguration, pidLoopDcsType, pidLoopDesc, pidLoopId, pidLoopIsCrucial, pidLoopName, pidLoopType, pidProjectId, status);
        }
    }
}
