// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sae.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class IngressRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngressRuleArgs Empty = new IngressRuleArgs();

    /**
     * Target application ID.
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return Target application ID.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * Target application name.
     * 
     */
    @Import(name="appName", required=true)
    private Output<String> appName;

    /**
     * @return Target application name.
     * 
     */
    public Output<String> appName() {
        return this.appName;
    }

    /**
     * Application backend port.
     * 
     */
    @Import(name="containerPort", required=true)
    private Output<Integer> containerPort;

    /**
     * @return Application backend port.
     * 
     */
    public Output<Integer> containerPort() {
        return this.containerPort;
    }

    /**
     * Application domain name.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return Application domain name.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * URL path.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return URL path.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private IngressRuleArgs() {}

    private IngressRuleArgs(IngressRuleArgs $) {
        this.appId = $.appId;
        this.appName = $.appName;
        this.containerPort = $.containerPort;
        this.domain = $.domain;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngressRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngressRuleArgs $;

        public Builder() {
            $ = new IngressRuleArgs();
        }

        public Builder(IngressRuleArgs defaults) {
            $ = new IngressRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId Target application ID.
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId Target application ID.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param appName Target application name.
         * 
         * @return builder
         * 
         */
        public Builder appName(Output<String> appName) {
            $.appName = appName;
            return this;
        }

        /**
         * @param appName Target application name.
         * 
         * @return builder
         * 
         */
        public Builder appName(String appName) {
            return appName(Output.of(appName));
        }

        /**
         * @param containerPort Application backend port.
         * 
         * @return builder
         * 
         */
        public Builder containerPort(Output<Integer> containerPort) {
            $.containerPort = containerPort;
            return this;
        }

        /**
         * @param containerPort Application backend port.
         * 
         * @return builder
         * 
         */
        public Builder containerPort(Integer containerPort) {
            return containerPort(Output.of(containerPort));
        }

        /**
         * @param domain Application domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Application domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param path URL path.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path URL path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public IngressRuleArgs build() {
            $.appId = Objects.requireNonNull($.appId, "expected parameter 'appId' to be non-null");
            $.appName = Objects.requireNonNull($.appName, "expected parameter 'appName' to be non-null");
            $.containerPort = Objects.requireNonNull($.containerPort, "expected parameter 'containerPort' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
