// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sae;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * Application description information. No more than 1024 characters.
     * 
     */
    @Import(name="appDescription")
    private @Nullable Output<String> appDescription;

    /**
     * @return Application description information. No more than 1024 characters.
     * 
     */
    public Optional<Output<String>> appDescription() {
        return Optional.ofNullable(this.appDescription);
    }

    /**
     * Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     * 
     */
    @Import(name="appName", required=true)
    private Output<String> appName;

    /**
     * @return Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     * 
     */
    public Output<String> appName() {
        return this.appName;
    }

    /**
     * The auto config. Valid values: `false`, `true`.
     * 
     */
    @Import(name="autoConfig")
    private @Nullable Output<Boolean> autoConfig;

    /**
     * @return The auto config. Valid values: `false`, `true`.
     * 
     */
    public Optional<Output<Boolean>> autoConfig() {
        return Optional.ofNullable(this.autoConfig);
    }

    /**
     * The auto enable application scaling rule. Valid values: `false`, `true`.
     * 
     */
    @Import(name="autoEnableApplicationScalingRule")
    private @Nullable Output<Boolean> autoEnableApplicationScalingRule;

    /**
     * @return The auto enable application scaling rule. Valid values: `false`, `true`.
     * 
     */
    public Optional<Output<Boolean>> autoEnableApplicationScalingRule() {
        return Optional.ofNullable(this.autoEnableApplicationScalingRule);
    }

    /**
     * The batch wait time.
     * 
     */
    @Import(name="batchWaitTime")
    private @Nullable Output<Integer> batchWaitTime;

    /**
     * @return The batch wait time.
     * 
     */
    public Optional<Output<Integer>> batchWaitTime() {
        return Optional.ofNullable(this.batchWaitTime);
    }

    /**
     * The change order desc.
     * 
     */
    @Import(name="changeOrderDesc")
    private @Nullable Output<String> changeOrderDesc;

    /**
     * @return The change order desc.
     * 
     */
    public Optional<Output<String>> changeOrderDesc() {
        return Optional.ofNullable(this.changeOrderDesc);
    }

    /**
     * Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     * 
     */
    @Import(name="command")
    private @Nullable Output<String> command;

    /**
     * @return Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     * 
     */
    public Optional<Output<String>> command() {
        return Optional.ofNullable(this.command);
    }

    /**
     * Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
     * 
     */
    @Import(name="commandArgs")
    private @Nullable Output<String> commandArgs;

    /**
     * @return Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
     * 
     */
    public Optional<Output<String>> commandArgs() {
        return Optional.ofNullable(this.commandArgs);
    }

    /**
     * ConfigMap mount description.
     * 
     */
    @Import(name="configMapMountDesc")
    private @Nullable Output<String> configMapMountDesc;

    /**
     * @return ConfigMap mount description.
     * 
     */
    public Optional<Output<String>> configMapMountDesc() {
        return Optional.ofNullable(this.configMapMountDesc);
    }

    /**
     * The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Integer> cpu;

    /**
     * @return The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
     * 
     */
    public Optional<Output<Integer>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
     * 
     */
    @Import(name="customHostAlias")
    private @Nullable Output<String> customHostAlias;

    /**
     * @return Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
     * 
     */
    public Optional<Output<String>> customHostAlias() {
        return Optional.ofNullable(this.customHostAlias);
    }

    /**
     * The deploy. Valid values: `false`, `true`.
     * 
     */
    @Import(name="deploy")
    private @Nullable Output<Boolean> deploy;

    /**
     * @return The deploy. Valid values: `false`, `true`.
     * 
     */
    public Optional<Output<Boolean>> deploy() {
        return Optional.ofNullable(this.deploy);
    }

    /**
     * The operating environment used by the Pandora application.
     * 
     */
    @Import(name="edasContainerVersion")
    private @Nullable Output<String> edasContainerVersion;

    /**
     * @return The operating environment used by the Pandora application.
     * 
     */
    public Optional<Output<String>> edasContainerVersion() {
        return Optional.ofNullable(this.edasContainerVersion);
    }

    /**
     * The enable ahas.
     * 
     */
    @Import(name="enableAhas")
    private @Nullable Output<String> enableAhas;

    /**
     * @return The enable ahas.
     * 
     */
    public Optional<Output<String>> enableAhas() {
        return Optional.ofNullable(this.enableAhas);
    }

    /**
     * The enable grey tag route.
     * 
     */
    @Import(name="enableGreyTagRoute")
    private @Nullable Output<Boolean> enableGreyTagRoute;

    /**
     * @return The enable grey tag route.
     * 
     */
    public Optional<Output<Boolean>> enableGreyTagRoute() {
        return Optional.ofNullable(this.enableGreyTagRoute);
    }

    /**
     * Container environment variable parameters. For example,`	[{&#34;name&#34;:&#34;envtmp&#34;,&#34;value&#34;:&#34;0&#34;}]`. The value description is as follows:
     * 
     */
    @Import(name="envs")
    private @Nullable Output<String> envs;

    /**
     * @return Container environment variable parameters. For example,`	[{&#34;name&#34;:&#34;envtmp&#34;,&#34;value&#34;:&#34;0&#34;}]`. The value description is as follows:
     * 
     */
    public Optional<Output<String>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * Mirror address. Only Image type applications can configure the mirror address.
     * 
     */
    @Import(name="imageUrl")
    private @Nullable Output<String> imageUrl;

    /**
     * @return Mirror address. Only Image type applications can configure the mirror address.
     * 
     */
    public Optional<Output<String>> imageUrl() {
        return Optional.ofNullable(this.imageUrl);
    }

    /**
     * The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
     * 
     */
    @Import(name="jarStartArgs")
    private @Nullable Output<String> jarStartArgs;

    /**
     * @return The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
     * 
     */
    public Optional<Output<String>> jarStartArgs() {
        return Optional.ofNullable(this.jarStartArgs);
    }

    /**
     * The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
     * 
     */
    @Import(name="jarStartOptions")
    private @Nullable Output<String> jarStartOptions;

    /**
     * @return The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
     * 
     */
    public Optional<Output<String>> jarStartOptions() {
        return Optional.ofNullable(this.jarStartOptions);
    }

    /**
     * The JDK version that the deployment package depends on. Image type applications are not supported.
     * 
     */
    @Import(name="jdk")
    private @Nullable Output<String> jdk;

    /**
     * @return The JDK version that the deployment package depends on. Image type applications are not supported.
     * 
     */
    public Optional<Output<String>> jdk() {
        return Optional.ofNullable(this.jdk);
    }

    /**
     * Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     * 
     */
    @Import(name="liveness")
    private @Nullable Output<String> liveness;

    /**
     * @return Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     * 
     */
    public Optional<Output<String>> liveness() {
        return Optional.ofNullable(this.liveness);
    }

    /**
     * The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    /**
     * @return The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
     * 
     */
    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * Minimum Survival Instance Percentage. **NOTE:** When `min_ready_instances` and `min_ready_instance_ratio` are passed at the same time, and the value of `min_ready_instance_ratio` is not -1, the `min_ready_instance_ratio` parameter shall prevail. Assuming that `min_ready_instances` is 5 and `min_ready_instance_ratio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
     * * `-1`: Initialization value, indicating that percentages are not used.
     * * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
     * 
     */
    @Import(name="minReadyInstanceRatio")
    private @Nullable Output<Integer> minReadyInstanceRatio;

    /**
     * @return Minimum Survival Instance Percentage. **NOTE:** When `min_ready_instances` and `min_ready_instance_ratio` are passed at the same time, and the value of `min_ready_instance_ratio` is not -1, the `min_ready_instance_ratio` parameter shall prevail. Assuming that `min_ready_instances` is 5 and `min_ready_instance_ratio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
     * * `-1`: Initialization value, indicating that percentages are not used.
     * * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
     * 
     */
    public Optional<Output<Integer>> minReadyInstanceRatio() {
        return Optional.ofNullable(this.minReadyInstanceRatio);
    }

    /**
     * The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     * 
     */
    @Import(name="minReadyInstances")
    private @Nullable Output<Integer> minReadyInstances;

    /**
     * @return The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     * 
     */
    public Optional<Output<Integer>> minReadyInstances() {
        return Optional.ofNullable(this.minReadyInstances);
    }

    /**
     * Mount description.
     * 
     */
    @Import(name="mountDesc")
    private @Nullable Output<String> mountDesc;

    /**
     * @return Mount description.
     * 
     */
    public Optional<Output<String>> mountDesc() {
        return Optional.ofNullable(this.mountDesc);
    }

    /**
     * Mount point of NAS in application VPC.
     * 
     */
    @Import(name="mountHost")
    private @Nullable Output<String> mountHost;

    /**
     * @return Mount point of NAS in application VPC.
     * 
     */
    public Optional<Output<String>> mountHost() {
        return Optional.ofNullable(this.mountHost);
    }

    /**
     * SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable Output<String> namespaceId;

    /**
     * @return SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     * 
     */
    public Optional<Output<String>> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     * 
     */
    @Import(name="nasId")
    private @Nullable Output<String> nasId;

    /**
     * @return ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     * 
     */
    public Optional<Output<String>> nasId() {
        return Optional.ofNullable(this.nasId);
    }

    /**
     * OSS AccessKey ID.
     * 
     */
    @Import(name="ossAkId")
    private @Nullable Output<String> ossAkId;

    /**
     * @return OSS AccessKey ID.
     * 
     */
    public Optional<Output<String>> ossAkId() {
        return Optional.ofNullable(this.ossAkId);
    }

    /**
     * OSS  AccessKey Secret.
     * 
     */
    @Import(name="ossAkSecret")
    private @Nullable Output<String> ossAkSecret;

    /**
     * @return OSS  AccessKey Secret.
     * 
     */
    public Optional<Output<String>> ossAkSecret() {
        return Optional.ofNullable(this.ossAkSecret);
    }

    /**
     * OSS mount description information.
     * 
     */
    @Import(name="ossMountDescs")
    private @Nullable Output<String> ossMountDescs;

    /**
     * @return OSS mount description information.
     * 
     */
    public Optional<Output<String>> ossMountDescs() {
        return Optional.ofNullable(this.ossMountDescs);
    }

    /**
     * Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
     * 
     */
    @Import(name="packageType", required=true)
    private Output<String> packageType;

    /**
     * @return Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
     * 
     */
    public Output<String> packageType() {
        return this.packageType;
    }

    /**
     * Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     * 
     */
    @Import(name="packageUrl")
    private @Nullable Output<String> packageUrl;

    /**
     * @return Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     * 
     */
    public Optional<Output<String>> packageUrl() {
        return Optional.ofNullable(this.packageUrl);
    }

    /**
     * The version number of the deployment package. Required when the Package Type is War and FatJar.
     * 
     */
    @Import(name="packageVersion")
    private @Nullable Output<String> packageVersion;

    /**
     * @return The version number of the deployment package. Required when the Package Type is War and FatJar.
     * 
     */
    public Optional<Output<String>> packageVersion() {
        return Optional.ofNullable(this.packageVersion);
    }

    /**
     * The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don&#39;t need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     * 
     */
    @Import(name="phpArmsConfigLocation")
    private @Nullable Output<String> phpArmsConfigLocation;

    /**
     * @return The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don&#39;t need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     * 
     */
    public Optional<Output<String>> phpArmsConfigLocation() {
        return Optional.ofNullable(this.phpArmsConfigLocation);
    }

    /**
     * PHP configuration file content.
     * 
     */
    @Import(name="phpConfig")
    private @Nullable Output<String> phpConfig;

    /**
     * @return PHP configuration file content.
     * 
     */
    public Optional<Output<String>> phpConfig() {
        return Optional.ofNullable(this.phpConfig);
    }

    /**
     * PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     * 
     */
    @Import(name="phpConfigLocation")
    private @Nullable Output<String> phpConfigLocation;

    /**
     * @return PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     * 
     */
    public Optional<Output<String>> phpConfigLocation() {
        return Optional.ofNullable(this.phpConfigLocation);
    }

    /**
     * Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,&#34;/etc/group&#34;]}}.
     * 
     */
    @Import(name="postStart")
    private @Nullable Output<String> postStart;

    /**
     * @return Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,&#34;/etc/group&#34;]}}.
     * 
     */
    public Optional<Output<String>> postStart() {
        return Optional.ofNullable(this.postStart);
    }

    /**
     * Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,&#34;/etc/group&#34;]}}.
     * 
     */
    @Import(name="preStop")
    private @Nullable Output<String> preStop;

    /**
     * @return Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,&#34;/etc/group&#34;]}}.
     * 
     */
    public Optional<Output<String>> preStop() {
        return Optional.ofNullable(this.preStop);
    }

    /**
     * Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,&#34;-c&#34;,&#34;cat /home/admin/start.sh&#34;]},`initialDelaySeconds`:30,`periodSeconds`:30,&#34;timeoutSeconds &#34;:2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
     * 
     */
    @Import(name="readiness")
    private @Nullable Output<String> readiness;

    /**
     * @return Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,&#34;-c&#34;,&#34;cat /home/admin/start.sh&#34;]},`initialDelaySeconds`:30,`periodSeconds`:30,&#34;timeoutSeconds &#34;:2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
     * 
     */
    public Optional<Output<String>> readiness() {
        return Optional.ofNullable(this.readiness);
    }

    /**
     * Initial number of instances.
     * 
     */
    @Import(name="replicas", required=true)
    private Output<Integer> replicas;

    /**
     * @return Initial number of instances.
     * 
     */
    public Output<Integer> replicas() {
        return this.replicas;
    }

    /**
     * Security group ID.
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return Security group ID.
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * SLS  configuration.
     * 
     */
    @Import(name="slsConfigs")
    private @Nullable Output<String> slsConfigs;

    /**
     * @return SLS  configuration.
     * 
     */
    public Optional<Output<String>> slsConfigs() {
        return Optional.ofNullable(this.slsConfigs);
    }

    /**
     * The status of the resource. Valid values: `RUNNING`, `STOPPED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid values: `RUNNING`, `STOPPED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
     * 
     */
    @Import(name="terminationGracePeriodSeconds")
    private @Nullable Output<Integer> terminationGracePeriodSeconds;

    /**
     * @return Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
     * 
     */
    public Optional<Output<Integer>> terminationGracePeriodSeconds() {
        return Optional.ofNullable(this.terminationGracePeriodSeconds);
    }

    /**
     * Time zone, the default value is Asia/Shanghai.
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return Time zone, the default value is Asia/Shanghai.
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    /**
     * Tomcat file configuration, set to &#34;{}&#34; means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
     * 
     */
    @Import(name="tomcatConfig")
    private @Nullable Output<String> tomcatConfig;

    /**
     * @return Tomcat file configuration, set to &#34;{}&#34; means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
     * 
     */
    public Optional<Output<String>> tomcatConfig() {
        return Optional.ofNullable(this.tomcatConfig);
    }

    /**
     * The update strategy.
     * 
     */
    @Import(name="updateStrategy")
    private @Nullable Output<String> updateStrategy;

    /**
     * @return The update strategy.
     * 
     */
    public Optional<Output<String>> updateStrategy() {
        return Optional.ofNullable(this.updateStrategy);
    }

    /**
     * Application version id.
     * 
     */
    @Import(name="versionId")
    private @Nullable Output<String> versionId;

    /**
     * @return Application version id.
     * 
     */
    public Optional<Output<String>> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    /**
     * The vpc id.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The vpc id.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The vswitch id.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The vswitch id.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap &#34;$@&#34; start.
     * 
     */
    @Import(name="warStartOptions")
    private @Nullable Output<String> warStartOptions;

    /**
     * @return WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap &#34;$@&#34; start.
     * 
     */
    public Optional<Output<String>> warStartOptions() {
        return Optional.ofNullable(this.warStartOptions);
    }

    /**
     * The version of tomcat that the deployment package depends on. Image type applications are not supported.
     * 
     */
    @Import(name="webContainer")
    private @Nullable Output<String> webContainer;

    /**
     * @return The version of tomcat that the deployment package depends on. Image type applications are not supported.
     * 
     */
    public Optional<Output<String>> webContainer() {
        return Optional.ofNullable(this.webContainer);
    }

    private ApplicationArgs() {}

    private ApplicationArgs(ApplicationArgs $) {
        this.appDescription = $.appDescription;
        this.appName = $.appName;
        this.autoConfig = $.autoConfig;
        this.autoEnableApplicationScalingRule = $.autoEnableApplicationScalingRule;
        this.batchWaitTime = $.batchWaitTime;
        this.changeOrderDesc = $.changeOrderDesc;
        this.command = $.command;
        this.commandArgs = $.commandArgs;
        this.configMapMountDesc = $.configMapMountDesc;
        this.cpu = $.cpu;
        this.customHostAlias = $.customHostAlias;
        this.deploy = $.deploy;
        this.edasContainerVersion = $.edasContainerVersion;
        this.enableAhas = $.enableAhas;
        this.enableGreyTagRoute = $.enableGreyTagRoute;
        this.envs = $.envs;
        this.imageUrl = $.imageUrl;
        this.jarStartArgs = $.jarStartArgs;
        this.jarStartOptions = $.jarStartOptions;
        this.jdk = $.jdk;
        this.liveness = $.liveness;
        this.memory = $.memory;
        this.minReadyInstanceRatio = $.minReadyInstanceRatio;
        this.minReadyInstances = $.minReadyInstances;
        this.mountDesc = $.mountDesc;
        this.mountHost = $.mountHost;
        this.namespaceId = $.namespaceId;
        this.nasId = $.nasId;
        this.ossAkId = $.ossAkId;
        this.ossAkSecret = $.ossAkSecret;
        this.ossMountDescs = $.ossMountDescs;
        this.packageType = $.packageType;
        this.packageUrl = $.packageUrl;
        this.packageVersion = $.packageVersion;
        this.phpArmsConfigLocation = $.phpArmsConfigLocation;
        this.phpConfig = $.phpConfig;
        this.phpConfigLocation = $.phpConfigLocation;
        this.postStart = $.postStart;
        this.preStop = $.preStop;
        this.readiness = $.readiness;
        this.replicas = $.replicas;
        this.securityGroupId = $.securityGroupId;
        this.slsConfigs = $.slsConfigs;
        this.status = $.status;
        this.tags = $.tags;
        this.terminationGracePeriodSeconds = $.terminationGracePeriodSeconds;
        this.timezone = $.timezone;
        this.tomcatConfig = $.tomcatConfig;
        this.updateStrategy = $.updateStrategy;
        this.versionId = $.versionId;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.warStartOptions = $.warStartOptions;
        this.webContainer = $.webContainer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationArgs $;

        public Builder() {
            $ = new ApplicationArgs();
        }

        public Builder(ApplicationArgs defaults) {
            $ = new ApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appDescription Application description information. No more than 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder appDescription(@Nullable Output<String> appDescription) {
            $.appDescription = appDescription;
            return this;
        }

        /**
         * @param appDescription Application description information. No more than 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder appDescription(String appDescription) {
            return appDescription(Output.of(appDescription));
        }

        /**
         * @param appName Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
         * 
         * @return builder
         * 
         */
        public Builder appName(Output<String> appName) {
            $.appName = appName;
            return this;
        }

        /**
         * @param appName Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
         * 
         * @return builder
         * 
         */
        public Builder appName(String appName) {
            return appName(Output.of(appName));
        }

        /**
         * @param autoConfig The auto config. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoConfig(@Nullable Output<Boolean> autoConfig) {
            $.autoConfig = autoConfig;
            return this;
        }

        /**
         * @param autoConfig The auto config. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoConfig(Boolean autoConfig) {
            return autoConfig(Output.of(autoConfig));
        }

        /**
         * @param autoEnableApplicationScalingRule The auto enable application scaling rule. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoEnableApplicationScalingRule(@Nullable Output<Boolean> autoEnableApplicationScalingRule) {
            $.autoEnableApplicationScalingRule = autoEnableApplicationScalingRule;
            return this;
        }

        /**
         * @param autoEnableApplicationScalingRule The auto enable application scaling rule. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoEnableApplicationScalingRule(Boolean autoEnableApplicationScalingRule) {
            return autoEnableApplicationScalingRule(Output.of(autoEnableApplicationScalingRule));
        }

        /**
         * @param batchWaitTime The batch wait time.
         * 
         * @return builder
         * 
         */
        public Builder batchWaitTime(@Nullable Output<Integer> batchWaitTime) {
            $.batchWaitTime = batchWaitTime;
            return this;
        }

        /**
         * @param batchWaitTime The batch wait time.
         * 
         * @return builder
         * 
         */
        public Builder batchWaitTime(Integer batchWaitTime) {
            return batchWaitTime(Output.of(batchWaitTime));
        }

        /**
         * @param changeOrderDesc The change order desc.
         * 
         * @return builder
         * 
         */
        public Builder changeOrderDesc(@Nullable Output<String> changeOrderDesc) {
            $.changeOrderDesc = changeOrderDesc;
            return this;
        }

        /**
         * @param changeOrderDesc The change order desc.
         * 
         * @return builder
         * 
         */
        public Builder changeOrderDesc(String changeOrderDesc) {
            return changeOrderDesc(Output.of(changeOrderDesc));
        }

        /**
         * @param command Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
         * 
         * @return builder
         * 
         */
        public Builder command(@Nullable Output<String> command) {
            $.command = command;
            return this;
        }

        /**
         * @param command Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
         * 
         * @return builder
         * 
         */
        public Builder command(String command) {
            return command(Output.of(command));
        }

        /**
         * @param commandArgs Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
         * 
         * @return builder
         * 
         */
        public Builder commandArgs(@Nullable Output<String> commandArgs) {
            $.commandArgs = commandArgs;
            return this;
        }

        /**
         * @param commandArgs Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
         * 
         * @return builder
         * 
         */
        public Builder commandArgs(String commandArgs) {
            return commandArgs(Output.of(commandArgs));
        }

        /**
         * @param configMapMountDesc ConfigMap mount description.
         * 
         * @return builder
         * 
         */
        public Builder configMapMountDesc(@Nullable Output<String> configMapMountDesc) {
            $.configMapMountDesc = configMapMountDesc;
            return this;
        }

        /**
         * @param configMapMountDesc ConfigMap mount description.
         * 
         * @return builder
         * 
         */
        public Builder configMapMountDesc(String configMapMountDesc) {
            return configMapMountDesc(Output.of(configMapMountDesc));
        }

        /**
         * @param cpu The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Integer> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Integer cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param customHostAlias Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
         * 
         * @return builder
         * 
         */
        public Builder customHostAlias(@Nullable Output<String> customHostAlias) {
            $.customHostAlias = customHostAlias;
            return this;
        }

        /**
         * @param customHostAlias Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
         * 
         * @return builder
         * 
         */
        public Builder customHostAlias(String customHostAlias) {
            return customHostAlias(Output.of(customHostAlias));
        }

        /**
         * @param deploy The deploy. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder deploy(@Nullable Output<Boolean> deploy) {
            $.deploy = deploy;
            return this;
        }

        /**
         * @param deploy The deploy. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder deploy(Boolean deploy) {
            return deploy(Output.of(deploy));
        }

        /**
         * @param edasContainerVersion The operating environment used by the Pandora application.
         * 
         * @return builder
         * 
         */
        public Builder edasContainerVersion(@Nullable Output<String> edasContainerVersion) {
            $.edasContainerVersion = edasContainerVersion;
            return this;
        }

        /**
         * @param edasContainerVersion The operating environment used by the Pandora application.
         * 
         * @return builder
         * 
         */
        public Builder edasContainerVersion(String edasContainerVersion) {
            return edasContainerVersion(Output.of(edasContainerVersion));
        }

        /**
         * @param enableAhas The enable ahas.
         * 
         * @return builder
         * 
         */
        public Builder enableAhas(@Nullable Output<String> enableAhas) {
            $.enableAhas = enableAhas;
            return this;
        }

        /**
         * @param enableAhas The enable ahas.
         * 
         * @return builder
         * 
         */
        public Builder enableAhas(String enableAhas) {
            return enableAhas(Output.of(enableAhas));
        }

        /**
         * @param enableGreyTagRoute The enable grey tag route.
         * 
         * @return builder
         * 
         */
        public Builder enableGreyTagRoute(@Nullable Output<Boolean> enableGreyTagRoute) {
            $.enableGreyTagRoute = enableGreyTagRoute;
            return this;
        }

        /**
         * @param enableGreyTagRoute The enable grey tag route.
         * 
         * @return builder
         * 
         */
        public Builder enableGreyTagRoute(Boolean enableGreyTagRoute) {
            return enableGreyTagRoute(Output.of(enableGreyTagRoute));
        }

        /**
         * @param envs Container environment variable parameters. For example,`	[{&#34;name&#34;:&#34;envtmp&#34;,&#34;value&#34;:&#34;0&#34;}]`. The value description is as follows:
         * 
         * @return builder
         * 
         */
        public Builder envs(@Nullable Output<String> envs) {
            $.envs = envs;
            return this;
        }

        /**
         * @param envs Container environment variable parameters. For example,`	[{&#34;name&#34;:&#34;envtmp&#34;,&#34;value&#34;:&#34;0&#34;}]`. The value description is as follows:
         * 
         * @return builder
         * 
         */
        public Builder envs(String envs) {
            return envs(Output.of(envs));
        }

        /**
         * @param imageUrl Mirror address. Only Image type applications can configure the mirror address.
         * 
         * @return builder
         * 
         */
        public Builder imageUrl(@Nullable Output<String> imageUrl) {
            $.imageUrl = imageUrl;
            return this;
        }

        /**
         * @param imageUrl Mirror address. Only Image type applications can configure the mirror address.
         * 
         * @return builder
         * 
         */
        public Builder imageUrl(String imageUrl) {
            return imageUrl(Output.of(imageUrl));
        }

        /**
         * @param jarStartArgs The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
         * 
         * @return builder
         * 
         */
        public Builder jarStartArgs(@Nullable Output<String> jarStartArgs) {
            $.jarStartArgs = jarStartArgs;
            return this;
        }

        /**
         * @param jarStartArgs The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
         * 
         * @return builder
         * 
         */
        public Builder jarStartArgs(String jarStartArgs) {
            return jarStartArgs(Output.of(jarStartArgs));
        }

        /**
         * @param jarStartOptions The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
         * 
         * @return builder
         * 
         */
        public Builder jarStartOptions(@Nullable Output<String> jarStartOptions) {
            $.jarStartOptions = jarStartOptions;
            return this;
        }

        /**
         * @param jarStartOptions The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS &#34;$package_path&#34; $JarStartArgs.
         * 
         * @return builder
         * 
         */
        public Builder jarStartOptions(String jarStartOptions) {
            return jarStartOptions(Output.of(jarStartOptions));
        }

        /**
         * @param jdk The JDK version that the deployment package depends on. Image type applications are not supported.
         * 
         * @return builder
         * 
         */
        public Builder jdk(@Nullable Output<String> jdk) {
            $.jdk = jdk;
            return this;
        }

        /**
         * @param jdk The JDK version that the deployment package depends on. Image type applications are not supported.
         * 
         * @return builder
         * 
         */
        public Builder jdk(String jdk) {
            return jdk(Output.of(jdk));
        }

        /**
         * @param liveness Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
         * 
         * @return builder
         * 
         */
        public Builder liveness(@Nullable Output<String> liveness) {
            $.liveness = liveness;
            return this;
        }

        /**
         * @param liveness Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
         * 
         * @return builder
         * 
         */
        public Builder liveness(String liveness) {
            return liveness(Output.of(liveness));
        }

        /**
         * @param memory The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param minReadyInstanceRatio Minimum Survival Instance Percentage. **NOTE:** When `min_ready_instances` and `min_ready_instance_ratio` are passed at the same time, and the value of `min_ready_instance_ratio` is not -1, the `min_ready_instance_ratio` parameter shall prevail. Assuming that `min_ready_instances` is 5 and `min_ready_instance_ratio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
         * * `-1`: Initialization value, indicating that percentages are not used.
         * * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
         * 
         * @return builder
         * 
         */
        public Builder minReadyInstanceRatio(@Nullable Output<Integer> minReadyInstanceRatio) {
            $.minReadyInstanceRatio = minReadyInstanceRatio;
            return this;
        }

        /**
         * @param minReadyInstanceRatio Minimum Survival Instance Percentage. **NOTE:** When `min_ready_instances` and `min_ready_instance_ratio` are passed at the same time, and the value of `min_ready_instance_ratio` is not -1, the `min_ready_instance_ratio` parameter shall prevail. Assuming that `min_ready_instances` is 5 and `min_ready_instance_ratio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
         * * `-1`: Initialization value, indicating that percentages are not used.
         * * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
         * 
         * @return builder
         * 
         */
        public Builder minReadyInstanceRatio(Integer minReadyInstanceRatio) {
            return minReadyInstanceRatio(Output.of(minReadyInstanceRatio));
        }

        /**
         * @param minReadyInstances The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
         * 
         * @return builder
         * 
         */
        public Builder minReadyInstances(@Nullable Output<Integer> minReadyInstances) {
            $.minReadyInstances = minReadyInstances;
            return this;
        }

        /**
         * @param minReadyInstances The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
         * 
         * @return builder
         * 
         */
        public Builder minReadyInstances(Integer minReadyInstances) {
            return minReadyInstances(Output.of(minReadyInstances));
        }

        /**
         * @param mountDesc Mount description.
         * 
         * @return builder
         * 
         */
        public Builder mountDesc(@Nullable Output<String> mountDesc) {
            $.mountDesc = mountDesc;
            return this;
        }

        /**
         * @param mountDesc Mount description.
         * 
         * @return builder
         * 
         */
        public Builder mountDesc(String mountDesc) {
            return mountDesc(Output.of(mountDesc));
        }

        /**
         * @param mountHost Mount point of NAS in application VPC.
         * 
         * @return builder
         * 
         */
        public Builder mountHost(@Nullable Output<String> mountHost) {
            $.mountHost = mountHost;
            return this;
        }

        /**
         * @param mountHost Mount point of NAS in application VPC.
         * 
         * @return builder
         * 
         */
        public Builder mountHost(String mountHost) {
            return mountHost(Output.of(mountHost));
        }

        /**
         * @param namespaceId SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable Output<String> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param nasId ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
         * 
         * @return builder
         * 
         */
        public Builder nasId(@Nullable Output<String> nasId) {
            $.nasId = nasId;
            return this;
        }

        /**
         * @param nasId ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
         * 
         * @return builder
         * 
         */
        public Builder nasId(String nasId) {
            return nasId(Output.of(nasId));
        }

        /**
         * @param ossAkId OSS AccessKey ID.
         * 
         * @return builder
         * 
         */
        public Builder ossAkId(@Nullable Output<String> ossAkId) {
            $.ossAkId = ossAkId;
            return this;
        }

        /**
         * @param ossAkId OSS AccessKey ID.
         * 
         * @return builder
         * 
         */
        public Builder ossAkId(String ossAkId) {
            return ossAkId(Output.of(ossAkId));
        }

        /**
         * @param ossAkSecret OSS  AccessKey Secret.
         * 
         * @return builder
         * 
         */
        public Builder ossAkSecret(@Nullable Output<String> ossAkSecret) {
            $.ossAkSecret = ossAkSecret;
            return this;
        }

        /**
         * @param ossAkSecret OSS  AccessKey Secret.
         * 
         * @return builder
         * 
         */
        public Builder ossAkSecret(String ossAkSecret) {
            return ossAkSecret(Output.of(ossAkSecret));
        }

        /**
         * @param ossMountDescs OSS mount description information.
         * 
         * @return builder
         * 
         */
        public Builder ossMountDescs(@Nullable Output<String> ossMountDescs) {
            $.ossMountDescs = ossMountDescs;
            return this;
        }

        /**
         * @param ossMountDescs OSS mount description information.
         * 
         * @return builder
         * 
         */
        public Builder ossMountDescs(String ossMountDescs) {
            return ossMountDescs(Output.of(ossMountDescs));
        }

        /**
         * @param packageType Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
         * 
         * @return builder
         * 
         */
        public Builder packageType(Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param packageType Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
         * 
         * @return builder
         * 
         */
        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        /**
         * @param packageUrl Deployment package address. Only FatJar or War type applications can configure the deployment package address.
         * 
         * @return builder
         * 
         */
        public Builder packageUrl(@Nullable Output<String> packageUrl) {
            $.packageUrl = packageUrl;
            return this;
        }

        /**
         * @param packageUrl Deployment package address. Only FatJar or War type applications can configure the deployment package address.
         * 
         * @return builder
         * 
         */
        public Builder packageUrl(String packageUrl) {
            return packageUrl(Output.of(packageUrl));
        }

        /**
         * @param packageVersion The version number of the deployment package. Required when the Package Type is War and FatJar.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(@Nullable Output<String> packageVersion) {
            $.packageVersion = packageVersion;
            return this;
        }

        /**
         * @param packageVersion The version number of the deployment package. Required when the Package Type is War and FatJar.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(String packageVersion) {
            return packageVersion(Output.of(packageVersion));
        }

        /**
         * @param phpArmsConfigLocation The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don&#39;t need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
         * 
         * @return builder
         * 
         */
        public Builder phpArmsConfigLocation(@Nullable Output<String> phpArmsConfigLocation) {
            $.phpArmsConfigLocation = phpArmsConfigLocation;
            return this;
        }

        /**
         * @param phpArmsConfigLocation The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don&#39;t need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
         * 
         * @return builder
         * 
         */
        public Builder phpArmsConfigLocation(String phpArmsConfigLocation) {
            return phpArmsConfigLocation(Output.of(phpArmsConfigLocation));
        }

        /**
         * @param phpConfig PHP configuration file content.
         * 
         * @return builder
         * 
         */
        public Builder phpConfig(@Nullable Output<String> phpConfig) {
            $.phpConfig = phpConfig;
            return this;
        }

        /**
         * @param phpConfig PHP configuration file content.
         * 
         * @return builder
         * 
         */
        public Builder phpConfig(String phpConfig) {
            return phpConfig(Output.of(phpConfig));
        }

        /**
         * @param phpConfigLocation PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
         * 
         * @return builder
         * 
         */
        public Builder phpConfigLocation(@Nullable Output<String> phpConfigLocation) {
            $.phpConfigLocation = phpConfigLocation;
            return this;
        }

        /**
         * @param phpConfigLocation PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
         * 
         * @return builder
         * 
         */
        public Builder phpConfigLocation(String phpConfigLocation) {
            return phpConfigLocation(Output.of(phpConfigLocation));
        }

        /**
         * @param postStart Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,&#34;/etc/group&#34;]}}.
         * 
         * @return builder
         * 
         */
        public Builder postStart(@Nullable Output<String> postStart) {
            $.postStart = postStart;
            return this;
        }

        /**
         * @param postStart Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,&#34;/etc/group&#34;]}}.
         * 
         * @return builder
         * 
         */
        public Builder postStart(String postStart) {
            return postStart(Output.of(postStart));
        }

        /**
         * @param preStop Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,&#34;/etc/group&#34;]}}.
         * 
         * @return builder
         * 
         */
        public Builder preStop(@Nullable Output<String> preStop) {
            $.preStop = preStop;
            return this;
        }

        /**
         * @param preStop Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,&#34;/etc/group&#34;]}}.
         * 
         * @return builder
         * 
         */
        public Builder preStop(String preStop) {
            return preStop(Output.of(preStop));
        }

        /**
         * @param readiness Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,&#34;-c&#34;,&#34;cat /home/admin/start.sh&#34;]},`initialDelaySeconds`:30,`periodSeconds`:30,&#34;timeoutSeconds &#34;:2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
         * 
         * @return builder
         * 
         */
        public Builder readiness(@Nullable Output<String> readiness) {
            $.readiness = readiness;
            return this;
        }

        /**
         * @param readiness Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,&#34;-c&#34;,&#34;cat /home/admin/start.sh&#34;]},`initialDelaySeconds`:30,`periodSeconds`:30,&#34;timeoutSeconds &#34;:2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
         * 
         * @return builder
         * 
         */
        public Builder readiness(String readiness) {
            return readiness(Output.of(readiness));
        }

        /**
         * @param replicas Initial number of instances.
         * 
         * @return builder
         * 
         */
        public Builder replicas(Output<Integer> replicas) {
            $.replicas = replicas;
            return this;
        }

        /**
         * @param replicas Initial number of instances.
         * 
         * @return builder
         * 
         */
        public Builder replicas(Integer replicas) {
            return replicas(Output.of(replicas));
        }

        /**
         * @param securityGroupId Security group ID.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId Security group ID.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param slsConfigs SLS  configuration.
         * 
         * @return builder
         * 
         */
        public Builder slsConfigs(@Nullable Output<String> slsConfigs) {
            $.slsConfigs = slsConfigs;
            return this;
        }

        /**
         * @param slsConfigs SLS  configuration.
         * 
         * @return builder
         * 
         */
        public Builder slsConfigs(String slsConfigs) {
            return slsConfigs(Output.of(slsConfigs));
        }

        /**
         * @param status The status of the resource. Valid values: `RUNNING`, `STOPPED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid values: `RUNNING`, `STOPPED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param terminationGracePeriodSeconds Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
         * 
         * @return builder
         * 
         */
        public Builder terminationGracePeriodSeconds(@Nullable Output<Integer> terminationGracePeriodSeconds) {
            $.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
            return this;
        }

        /**
         * @param terminationGracePeriodSeconds Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
         * 
         * @return builder
         * 
         */
        public Builder terminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
            return terminationGracePeriodSeconds(Output.of(terminationGracePeriodSeconds));
        }

        /**
         * @param timezone Time zone, the default value is Asia/Shanghai.
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Time zone, the default value is Asia/Shanghai.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        /**
         * @param tomcatConfig Tomcat file configuration, set to &#34;{}&#34; means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
         * 
         * @return builder
         * 
         */
        public Builder tomcatConfig(@Nullable Output<String> tomcatConfig) {
            $.tomcatConfig = tomcatConfig;
            return this;
        }

        /**
         * @param tomcatConfig Tomcat file configuration, set to &#34;{}&#34; means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
         * 
         * @return builder
         * 
         */
        public Builder tomcatConfig(String tomcatConfig) {
            return tomcatConfig(Output.of(tomcatConfig));
        }

        /**
         * @param updateStrategy The update strategy.
         * 
         * @return builder
         * 
         */
        public Builder updateStrategy(@Nullable Output<String> updateStrategy) {
            $.updateStrategy = updateStrategy;
            return this;
        }

        /**
         * @param updateStrategy The update strategy.
         * 
         * @return builder
         * 
         */
        public Builder updateStrategy(String updateStrategy) {
            return updateStrategy(Output.of(updateStrategy));
        }

        /**
         * @param versionId Application version id.
         * 
         * @return builder
         * 
         */
        public Builder versionId(@Nullable Output<String> versionId) {
            $.versionId = versionId;
            return this;
        }

        /**
         * @param versionId Application version id.
         * 
         * @return builder
         * 
         */
        public Builder versionId(String versionId) {
            return versionId(Output.of(versionId));
        }

        /**
         * @param vpcId The vpc id.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The vpc id.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param warStartOptions WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap &#34;$@&#34; start.
         * 
         * @return builder
         * 
         */
        public Builder warStartOptions(@Nullable Output<String> warStartOptions) {
            $.warStartOptions = warStartOptions;
            return this;
        }

        /**
         * @param warStartOptions WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap &#34;$@&#34; start.
         * 
         * @return builder
         * 
         */
        public Builder warStartOptions(String warStartOptions) {
            return warStartOptions(Output.of(warStartOptions));
        }

        /**
         * @param webContainer The version of tomcat that the deployment package depends on. Image type applications are not supported.
         * 
         * @return builder
         * 
         */
        public Builder webContainer(@Nullable Output<String> webContainer) {
            $.webContainer = webContainer;
            return this;
        }

        /**
         * @param webContainer The version of tomcat that the deployment package depends on. Image type applications are not supported.
         * 
         * @return builder
         * 
         */
        public Builder webContainer(String webContainer) {
            return webContainer(Output.of(webContainer));
        }

        public ApplicationArgs build() {
            $.appName = Objects.requireNonNull($.appName, "expected parameter 'appName' to be non-null");
            $.packageType = Objects.requireNonNull($.packageType, "expected parameter 'packageType' to be non-null");
            $.replicas = Objects.requireNonNull($.replicas, "expected parameter 'replicas' to be non-null");
            return $;
        }
    }

}
