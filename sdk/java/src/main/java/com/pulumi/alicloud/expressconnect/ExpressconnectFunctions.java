// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsPlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServicePlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsPlainArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersPlainArgs;
import com.pulumi.alicloud.expressconnect.outputs.GetAccessPointsResult;
import com.pulumi.alicloud.expressconnect.outputs.GetPhysicalConnectionServiceResult;
import com.pulumi.alicloud.expressconnect.outputs.GetPhysicalConnectionsResult;
import com.pulumi.alicloud.expressconnect.outputs.GetVirtualBorderRoutersResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class ExpressconnectFunctions {
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids(&#34;ap-cn-hangzhou-yh-C&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId1&#34;, ids.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex(&#34;^杭州-&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId2&#34;, nameRegex.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccessPointsResult> getAccessPoints() {
        return getAccessPoints(GetAccessPointsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids(&#34;ap-cn-hangzhou-yh-C&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId1&#34;, ids.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex(&#34;^杭州-&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId2&#34;, nameRegex.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccessPointsResult> getAccessPointsPlain() {
        return getAccessPointsPlain(GetAccessPointsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids(&#34;ap-cn-hangzhou-yh-C&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId1&#34;, ids.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex(&#34;^杭州-&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId2&#34;, nameRegex.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccessPointsResult> getAccessPoints(GetAccessPointsArgs args) {
        return getAccessPoints(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids(&#34;ap-cn-hangzhou-yh-C&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId1&#34;, ids.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex(&#34;^杭州-&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId2&#34;, nameRegex.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccessPointsResult> getAccessPointsPlain(GetAccessPointsPlainArgs args) {
        return getAccessPointsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids(&#34;ap-cn-hangzhou-yh-C&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId1&#34;, ids.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex(&#34;^杭州-&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId2&#34;, nameRegex.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccessPointsResult> getAccessPoints(GetAccessPointsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getAccessPoints:getAccessPoints", TypeShape.of(GetAccessPointsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Access Points of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetAccessPointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .ids(&#34;ap-cn-hangzhou-yh-C&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId1&#34;, ids.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getAccessPoints(GetAccessPointsArgs.builder()
     *             .nameRegex(&#34;^杭州-&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectAccessPointId2&#34;, nameRegex.applyValue(getAccessPointsResult -&gt; getAccessPointsResult.points()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccessPointsResult> getAccessPointsPlain(GetAccessPointsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getAccessPoints:getAccessPoints", TypeShape.of(GetAccessPointsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available in v1.132.0+
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable(&#34;On&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPhysicalConnectionServiceResult> getPhysicalConnectionService() {
        return getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available in v1.132.0+
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable(&#34;On&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionServiceResult> getPhysicalConnectionServicePlain() {
        return getPhysicalConnectionServicePlain(GetPhysicalConnectionServicePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available in v1.132.0+
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable(&#34;On&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPhysicalConnectionServiceResult> getPhysicalConnectionService(GetPhysicalConnectionServiceArgs args) {
        return getPhysicalConnectionService(args, InvokeOptions.Empty);
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available in v1.132.0+
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable(&#34;On&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionServiceResult> getPhysicalConnectionServicePlain(GetPhysicalConnectionServicePlainArgs args) {
        return getPhysicalConnectionServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available in v1.132.0+
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable(&#34;On&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPhysicalConnectionServiceResult> getPhysicalConnectionService(GetPhysicalConnectionServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getPhysicalConnectionService:getPhysicalConnectionService", TypeShape.of(GetPhysicalConnectionServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Using this data source can enable outbound traffic for an Express Connect circuit automatically. If the service has been opened, it will return opened.
     * 
     * For information about Express Connect and how to use it, see [What is Express Connect](https://www.alibabacloud.com/help/doc-detail/275179.htm).
     * 
     * &gt; **NOTE:** Available in v1.132.0+
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var open = ExpressconnectFunctions.getPhysicalConnectionService(GetPhysicalConnectionServiceArgs.builder()
     *             .enable(&#34;On&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionServiceResult> getPhysicalConnectionServicePlain(GetPhysicalConnectionServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getPhysicalConnectionService:getPhysicalConnectionService", TypeShape.of(GetPhysicalConnectionServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids(&#34;pc-2345678&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId1&#34;, ids.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex(&#34;^my-PhysicalConnection&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId2&#34;, nameRegex.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPhysicalConnectionsResult> getPhysicalConnections() {
        return getPhysicalConnections(GetPhysicalConnectionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids(&#34;pc-2345678&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId1&#34;, ids.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex(&#34;^my-PhysicalConnection&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId2&#34;, nameRegex.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionsResult> getPhysicalConnectionsPlain() {
        return getPhysicalConnectionsPlain(GetPhysicalConnectionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids(&#34;pc-2345678&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId1&#34;, ids.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex(&#34;^my-PhysicalConnection&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId2&#34;, nameRegex.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPhysicalConnectionsResult> getPhysicalConnections(GetPhysicalConnectionsArgs args) {
        return getPhysicalConnections(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids(&#34;pc-2345678&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId1&#34;, ids.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex(&#34;^my-PhysicalConnection&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId2&#34;, nameRegex.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionsResult> getPhysicalConnectionsPlain(GetPhysicalConnectionsPlainArgs args) {
        return getPhysicalConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids(&#34;pc-2345678&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId1&#34;, ids.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex(&#34;^my-PhysicalConnection&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId2&#34;, nameRegex.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPhysicalConnectionsResult> getPhysicalConnections(GetPhysicalConnectionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getPhysicalConnections:getPhysicalConnections", TypeShape.of(GetPhysicalConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Physical Connections of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.132.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetPhysicalConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .ids(&#34;pc-2345678&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId1&#34;, ids.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getPhysicalConnections(GetPhysicalConnectionsArgs.builder()
     *             .nameRegex(&#34;^my-PhysicalConnection&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectPhysicalConnectionId2&#34;, nameRegex.applyValue(getPhysicalConnectionsResult -&gt; getPhysicalConnectionsResult.connections()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPhysicalConnectionsResult> getPhysicalConnectionsPlain(GetPhysicalConnectionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getPhysicalConnections:getPhysicalConnections", TypeShape.of(GetPhysicalConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId1&#34;, ids.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex(&#34;^my-VirtualBorderRouter&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId2&#34;, nameRegex.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;PhysicalConnectionId&#34;)
     *                     .values(&#34;pc-xxxx1&#34;)
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;VbrId&#34;)
     *                     .values(                    
     *                         &#34;vbr-xxxx1&#34;,
     *                         &#34;vbr-xxxx2&#34;)
     *                     .build())
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId3&#34;, filter.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVirtualBorderRoutersResult> getVirtualBorderRouters() {
        return getVirtualBorderRouters(GetVirtualBorderRoutersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId1&#34;, ids.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex(&#34;^my-VirtualBorderRouter&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId2&#34;, nameRegex.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;PhysicalConnectionId&#34;)
     *                     .values(&#34;pc-xxxx1&#34;)
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;VbrId&#34;)
     *                     .values(                    
     *                         &#34;vbr-xxxx1&#34;,
     *                         &#34;vbr-xxxx2&#34;)
     *                     .build())
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId3&#34;, filter.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVirtualBorderRoutersResult> getVirtualBorderRoutersPlain() {
        return getVirtualBorderRoutersPlain(GetVirtualBorderRoutersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId1&#34;, ids.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex(&#34;^my-VirtualBorderRouter&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId2&#34;, nameRegex.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;PhysicalConnectionId&#34;)
     *                     .values(&#34;pc-xxxx1&#34;)
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;VbrId&#34;)
     *                     .values(                    
     *                         &#34;vbr-xxxx1&#34;,
     *                         &#34;vbr-xxxx2&#34;)
     *                     .build())
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId3&#34;, filter.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVirtualBorderRoutersResult> getVirtualBorderRouters(GetVirtualBorderRoutersArgs args) {
        return getVirtualBorderRouters(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId1&#34;, ids.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex(&#34;^my-VirtualBorderRouter&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId2&#34;, nameRegex.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;PhysicalConnectionId&#34;)
     *                     .values(&#34;pc-xxxx1&#34;)
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;VbrId&#34;)
     *                     .values(                    
     *                         &#34;vbr-xxxx1&#34;,
     *                         &#34;vbr-xxxx2&#34;)
     *                     .build())
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId3&#34;, filter.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVirtualBorderRoutersResult> getVirtualBorderRoutersPlain(GetVirtualBorderRoutersPlainArgs args) {
        return getVirtualBorderRoutersPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId1&#34;, ids.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex(&#34;^my-VirtualBorderRouter&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId2&#34;, nameRegex.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;PhysicalConnectionId&#34;)
     *                     .values(&#34;pc-xxxx1&#34;)
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;VbrId&#34;)
     *                     .values(                    
     *                         &#34;vbr-xxxx1&#34;,
     *                         &#34;vbr-xxxx2&#34;)
     *                     .build())
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId3&#34;, filter.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVirtualBorderRoutersResult> getVirtualBorderRouters(GetVirtualBorderRoutersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("alicloud:expressconnect/getVirtualBorderRouters:getVirtualBorderRouters", TypeShape.of(GetVirtualBorderRoutersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the Express Connect Virtual Border Routers of the current Alibaba Cloud user.
     * 
     * &gt; **NOTE:** Available in v1.134.0+.
     * 
     * ## Example Usage
     * 
     * Basic Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.alicloud.expressconnect.ExpressconnectFunctions;
     * import com.pulumi.alicloud.expressconnect.inputs.GetVirtualBorderRoutersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ids = ExpressconnectFunctions.getVirtualBorderRouters();
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId1&#34;, ids.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var nameRegex = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .nameRegex(&#34;^my-VirtualBorderRouter&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId2&#34;, nameRegex.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *         final var filter = ExpressconnectFunctions.getVirtualBorderRouters(GetVirtualBorderRoutersArgs.builder()
     *             .filters(            
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;PhysicalConnectionId&#34;)
     *                     .values(&#34;pc-xxxx1&#34;)
     *                     .build(),
     *                 GetVirtualBorderRoutersFilterArgs.builder()
     *                     .key(&#34;VbrId&#34;)
     *                     .values(                    
     *                         &#34;vbr-xxxx1&#34;,
     *                         &#34;vbr-xxxx2&#34;)
     *                     .build())
     *             .build());
     * 
     *         ctx.export(&#34;expressConnectVirtualBorderRouterId3&#34;, filter.applyValue(getVirtualBorderRoutersResult -&gt; getVirtualBorderRoutersResult.routers()[0].id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVirtualBorderRoutersResult> getVirtualBorderRoutersPlain(GetVirtualBorderRoutersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("alicloud:expressconnect/getVirtualBorderRouters:getVirtualBorderRouters", TypeShape.of(GetVirtualBorderRoutersResult.class), args, Utilities.withVersion(options));
    }
}
