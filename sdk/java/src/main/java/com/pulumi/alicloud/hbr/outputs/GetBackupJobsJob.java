// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.outputs;

import com.pulumi.alicloud.hbr.outputs.GetBackupJobsJobOtsDetail;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackupJobsJob {
    /**
     * @return The actual data volume of the backup task (After deduplication) . Unit byte.
     * 
     */
    private final String actualBytes;
    /**
     * @return The actual number of items in the backup task. (Currently only file backup is available).
     * 
     */
    private final String actualItems;
    /**
     * @return The name of backup job.
     * 
     */
    private final String backJobName;
    /**
     * @return The ID of the backup job.
     * 
     */
    private final String backupJobId;
    /**
     * @return Backup type. Valid values: `COMPLETE`(full backup).
     * 
     */
    private final String backupType;
    /**
     * @return The name of target OSS bucket.
     * 
     */
    private final String bucket;
    /**
     * @return The amount of backup data (Incremental). Unit byte.
     * 
     */
    private final String bytesDone;
    /**
     * @return The total amount of data sources. Unit byte.
     * 
     */
    private final String bytesTotal;
    /**
     * @return The completion time of backup job. UNIX time seconds.
     * 
     */
    private final String completeTime;
    /**
     * @return The creation time of backup job. UNIX time seconds.
     * 
     */
    private final String createTime;
    /**
     * @return Error message.
     * 
     */
    private final String errorMessage;
    /**
     * @return Exclude path. String of Json list. Up to 255 characters. e.g. `&#34;[\&#34;/home/work\&#34;]&#34;`
     * 
     */
    private final String exclude;
    /**
     * @return The ID of destination file system.
     * 
     */
    private final String fileSystemId;
    /**
     * @return The ID of the backup job.
     * 
     */
    private final String id;
    /**
     * @return Include path. String of Json list. Up to 255 characters. e.g. `&#34;[\&#34;/var\&#34;]&#34;`
     * 
     */
    private final String include;
    /**
     * @return The ID of target ECS instance.
     * 
     */
    private final String instanceId;
    /**
     * @return The number of items restore job recovered.
     * 
     */
    private final String itemsDone;
    /**
     * @return The total number of items restore job recovered.
     * 
     */
    private final String itemsTotal;
    /**
     * @return File system creation time. UNIX time in seconds.
     * 
     */
    private final String nasCreateTime;
    private final List<GetBackupJobsJobOtsDetail> otsDetails;
    /**
     * @return List of backup path. e.g. `[&#34;/home&#34;, &#34;/var&#34;]`.
     * 
     */
    private final List<String> paths;
    /**
     * @return The ID of a backup plan.
     * 
     */
    private final String planId;
    /**
     * @return The prefix of Oss bucket files.
     * 
     */
    private final String prefix;
    /**
     * @return Backup progress. The value is 100%*100.
     * 
     */
    private final String progress;
    /**
     * @return The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
     * 
     */
    private final String sourceType;
    /**
     * @return The scheduled backup start time. UNIX time seconds.
     * 
     */
    private final String startTime;
    /**
     * @return The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
     * 
     */
    private final String status;
    /**
     * @return The update time of backup job. UNIX time seconds.
     * 
     */
    private final String updatedTime;
    /**
     * @return The ID of backup vault.
     * 
     */
    private final String vaultId;

    @CustomType.Constructor
    private GetBackupJobsJob(
        @CustomType.Parameter("actualBytes") String actualBytes,
        @CustomType.Parameter("actualItems") String actualItems,
        @CustomType.Parameter("backJobName") String backJobName,
        @CustomType.Parameter("backupJobId") String backupJobId,
        @CustomType.Parameter("backupType") String backupType,
        @CustomType.Parameter("bucket") String bucket,
        @CustomType.Parameter("bytesDone") String bytesDone,
        @CustomType.Parameter("bytesTotal") String bytesTotal,
        @CustomType.Parameter("completeTime") String completeTime,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("errorMessage") String errorMessage,
        @CustomType.Parameter("exclude") String exclude,
        @CustomType.Parameter("fileSystemId") String fileSystemId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("include") String include,
        @CustomType.Parameter("instanceId") String instanceId,
        @CustomType.Parameter("itemsDone") String itemsDone,
        @CustomType.Parameter("itemsTotal") String itemsTotal,
        @CustomType.Parameter("nasCreateTime") String nasCreateTime,
        @CustomType.Parameter("otsDetails") List<GetBackupJobsJobOtsDetail> otsDetails,
        @CustomType.Parameter("paths") List<String> paths,
        @CustomType.Parameter("planId") String planId,
        @CustomType.Parameter("prefix") String prefix,
        @CustomType.Parameter("progress") String progress,
        @CustomType.Parameter("sourceType") String sourceType,
        @CustomType.Parameter("startTime") String startTime,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("updatedTime") String updatedTime,
        @CustomType.Parameter("vaultId") String vaultId) {
        this.actualBytes = actualBytes;
        this.actualItems = actualItems;
        this.backJobName = backJobName;
        this.backupJobId = backupJobId;
        this.backupType = backupType;
        this.bucket = bucket;
        this.bytesDone = bytesDone;
        this.bytesTotal = bytesTotal;
        this.completeTime = completeTime;
        this.createTime = createTime;
        this.errorMessage = errorMessage;
        this.exclude = exclude;
        this.fileSystemId = fileSystemId;
        this.id = id;
        this.include = include;
        this.instanceId = instanceId;
        this.itemsDone = itemsDone;
        this.itemsTotal = itemsTotal;
        this.nasCreateTime = nasCreateTime;
        this.otsDetails = otsDetails;
        this.paths = paths;
        this.planId = planId;
        this.prefix = prefix;
        this.progress = progress;
        this.sourceType = sourceType;
        this.startTime = startTime;
        this.status = status;
        this.updatedTime = updatedTime;
        this.vaultId = vaultId;
    }

    /**
     * @return The actual data volume of the backup task (After deduplication) . Unit byte.
     * 
     */
    public String actualBytes() {
        return this.actualBytes;
    }
    /**
     * @return The actual number of items in the backup task. (Currently only file backup is available).
     * 
     */
    public String actualItems() {
        return this.actualItems;
    }
    /**
     * @return The name of backup job.
     * 
     */
    public String backJobName() {
        return this.backJobName;
    }
    /**
     * @return The ID of the backup job.
     * 
     */
    public String backupJobId() {
        return this.backupJobId;
    }
    /**
     * @return Backup type. Valid values: `COMPLETE`(full backup).
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return The name of target OSS bucket.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return The amount of backup data (Incremental). Unit byte.
     * 
     */
    public String bytesDone() {
        return this.bytesDone;
    }
    /**
     * @return The total amount of data sources. Unit byte.
     * 
     */
    public String bytesTotal() {
        return this.bytesTotal;
    }
    /**
     * @return The completion time of backup job. UNIX time seconds.
     * 
     */
    public String completeTime() {
        return this.completeTime;
    }
    /**
     * @return The creation time of backup job. UNIX time seconds.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Error message.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return Exclude path. String of Json list. Up to 255 characters. e.g. `&#34;[\&#34;/home/work\&#34;]&#34;`
     * 
     */
    public String exclude() {
        return this.exclude;
    }
    /**
     * @return The ID of destination file system.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The ID of the backup job.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Include path. String of Json list. Up to 255 characters. e.g. `&#34;[\&#34;/var\&#34;]&#34;`
     * 
     */
    public String include() {
        return this.include;
    }
    /**
     * @return The ID of target ECS instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The number of items restore job recovered.
     * 
     */
    public String itemsDone() {
        return this.itemsDone;
    }
    /**
     * @return The total number of items restore job recovered.
     * 
     */
    public String itemsTotal() {
        return this.itemsTotal;
    }
    /**
     * @return File system creation time. UNIX time in seconds.
     * 
     */
    public String nasCreateTime() {
        return this.nasCreateTime;
    }
    public List<GetBackupJobsJobOtsDetail> otsDetails() {
        return this.otsDetails;
    }
    /**
     * @return List of backup path. e.g. `[&#34;/home&#34;, &#34;/var&#34;]`.
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    /**
     * @return The ID of a backup plan.
     * 
     */
    public String planId() {
        return this.planId;
    }
    /**
     * @return The prefix of Oss bucket files.
     * 
     */
    public String prefix() {
        return this.prefix;
    }
    /**
     * @return Backup progress. The value is 100%*100.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return The scheduled backup start time. UNIX time seconds.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The update time of backup job. UNIX time seconds.
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return The ID of backup vault.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupJobsJob defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String actualBytes;
        private String actualItems;
        private String backJobName;
        private String backupJobId;
        private String backupType;
        private String bucket;
        private String bytesDone;
        private String bytesTotal;
        private String completeTime;
        private String createTime;
        private String errorMessage;
        private String exclude;
        private String fileSystemId;
        private String id;
        private String include;
        private String instanceId;
        private String itemsDone;
        private String itemsTotal;
        private String nasCreateTime;
        private List<GetBackupJobsJobOtsDetail> otsDetails;
        private List<String> paths;
        private String planId;
        private String prefix;
        private String progress;
        private String sourceType;
        private String startTime;
        private String status;
        private String updatedTime;
        private String vaultId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackupJobsJob defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actualBytes = defaults.actualBytes;
    	      this.actualItems = defaults.actualItems;
    	      this.backJobName = defaults.backJobName;
    	      this.backupJobId = defaults.backupJobId;
    	      this.backupType = defaults.backupType;
    	      this.bucket = defaults.bucket;
    	      this.bytesDone = defaults.bytesDone;
    	      this.bytesTotal = defaults.bytesTotal;
    	      this.completeTime = defaults.completeTime;
    	      this.createTime = defaults.createTime;
    	      this.errorMessage = defaults.errorMessage;
    	      this.exclude = defaults.exclude;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.id = defaults.id;
    	      this.include = defaults.include;
    	      this.instanceId = defaults.instanceId;
    	      this.itemsDone = defaults.itemsDone;
    	      this.itemsTotal = defaults.itemsTotal;
    	      this.nasCreateTime = defaults.nasCreateTime;
    	      this.otsDetails = defaults.otsDetails;
    	      this.paths = defaults.paths;
    	      this.planId = defaults.planId;
    	      this.prefix = defaults.prefix;
    	      this.progress = defaults.progress;
    	      this.sourceType = defaults.sourceType;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
    	      this.updatedTime = defaults.updatedTime;
    	      this.vaultId = defaults.vaultId;
        }

        public Builder actualBytes(String actualBytes) {
            this.actualBytes = Objects.requireNonNull(actualBytes);
            return this;
        }
        public Builder actualItems(String actualItems) {
            this.actualItems = Objects.requireNonNull(actualItems);
            return this;
        }
        public Builder backJobName(String backJobName) {
            this.backJobName = Objects.requireNonNull(backJobName);
            return this;
        }
        public Builder backupJobId(String backupJobId) {
            this.backupJobId = Objects.requireNonNull(backupJobId);
            return this;
        }
        public Builder backupType(String backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder bytesDone(String bytesDone) {
            this.bytesDone = Objects.requireNonNull(bytesDone);
            return this;
        }
        public Builder bytesTotal(String bytesTotal) {
            this.bytesTotal = Objects.requireNonNull(bytesTotal);
            return this;
        }
        public Builder completeTime(String completeTime) {
            this.completeTime = Objects.requireNonNull(completeTime);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }
        public Builder exclude(String exclude) {
            this.exclude = Objects.requireNonNull(exclude);
            return this;
        }
        public Builder fileSystemId(String fileSystemId) {
            this.fileSystemId = Objects.requireNonNull(fileSystemId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder include(String include) {
            this.include = Objects.requireNonNull(include);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder itemsDone(String itemsDone) {
            this.itemsDone = Objects.requireNonNull(itemsDone);
            return this;
        }
        public Builder itemsTotal(String itemsTotal) {
            this.itemsTotal = Objects.requireNonNull(itemsTotal);
            return this;
        }
        public Builder nasCreateTime(String nasCreateTime) {
            this.nasCreateTime = Objects.requireNonNull(nasCreateTime);
            return this;
        }
        public Builder otsDetails(List<GetBackupJobsJobOtsDetail> otsDetails) {
            this.otsDetails = Objects.requireNonNull(otsDetails);
            return this;
        }
        public Builder otsDetails(GetBackupJobsJobOtsDetail... otsDetails) {
            return otsDetails(List.of(otsDetails));
        }
        public Builder paths(List<String> paths) {
            this.paths = Objects.requireNonNull(paths);
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        public Builder planId(String planId) {
            this.planId = Objects.requireNonNull(planId);
            return this;
        }
        public Builder prefix(String prefix) {
            this.prefix = Objects.requireNonNull(prefix);
            return this;
        }
        public Builder progress(String progress) {
            this.progress = Objects.requireNonNull(progress);
            return this;
        }
        public Builder sourceType(String sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType);
            return this;
        }
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder updatedTime(String updatedTime) {
            this.updatedTime = Objects.requireNonNull(updatedTime);
            return this;
        }
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }        public GetBackupJobsJob build() {
            return new GetBackupJobsJob(actualBytes, actualItems, backJobName, backupJobId, backupType, bucket, bytesDone, bytesTotal, completeTime, createTime, errorMessage, exclude, fileSystemId, id, include, instanceId, itemsDone, itemsTotal, nasCreateTime, otsDetails, paths, planId, prefix, progress, sourceType, startTime, status, updatedTime, vaultId);
        }
    }
}
