// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudfirewall;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Public network processing capability. Valid values: 10 to 15000. Unit: Mbps.
     * 
     */
    @Import(name="bandWidth", required=true)
    private Output<Integer> bandWidth;

    /**
     * @return Public network processing capability. Valid values: 10 to 15000. Unit: Mbps.
     * 
     */
    public Output<Integer> bandWidth() {
        return this.bandWidth;
    }

    /**
     * Whether to use log audit. Valid values: `true`, `false`.
     * 
     */
    @Import(name="cfwLog", required=true)
    private Output<Boolean> cfwLog;

    /**
     * @return Whether to use log audit. Valid values: `true`, `false`.
     * 
     */
    public Output<Boolean> cfwLog() {
        return this.cfwLog;
    }

    /**
     * The log storage capacity.
     * 
     */
    @Import(name="cfwLogStorage", required=true)
    private Output<Integer> cfwLogStorage;

    /**
     * @return The log storage capacity.
     * 
     */
    public Output<Integer> cfwLogStorage() {
        return this.cfwLogStorage;
    }

    /**
     * Whether to use expert service. Valid values: `true`, `false`.
     * 
     */
    @Import(name="cfwService", required=true)
    private Output<Boolean> cfwService;

    /**
     * @return Whether to use expert service. Valid values: `true`, `false`.
     * 
     */
    public Output<Boolean> cfwService() {
        return this.cfwService;
    }

    /**
     * The number of protected VPCs. Valid values between 2 and 500.
     * 
     */
    @Import(name="fwVpcNumber")
    private @Nullable Output<Integer> fwVpcNumber;

    /**
     * @return The number of protected VPCs. Valid values between 2 and 500.
     * 
     */
    public Optional<Output<Integer>> fwVpcNumber() {
        return Optional.ofNullable(this.fwVpcNumber);
    }

    /**
     * The number of assets.
     * 
     */
    @Import(name="instanceCount")
    private @Nullable Output<Integer> instanceCount;

    /**
     * @return The number of assets.
     * 
     */
    public Optional<Output<Integer>> instanceCount() {
        return Optional.ofNullable(this.instanceCount);
    }

    /**
     * The number of public IPs that can be protected. Valid values: 20 to 4000.
     * 
     */
    @Import(name="ipNumber", required=true)
    private Output<Integer> ipNumber;

    /**
     * @return The number of public IPs that can be protected. Valid values: 20 to 4000.
     * 
     */
    public Output<Integer> ipNumber() {
        return this.ipNumber;
    }

    /**
     * The logistics.
     * 
     */
    @Import(name="logistics")
    private @Nullable Output<String> logistics;

    /**
     * @return The logistics.
     * 
     */
    public Optional<Output<String>> logistics() {
        return Optional.ofNullable(this.logistics);
    }

    /**
     * The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modify_type` is required when you execute an update operation.
     * 
     */
    @Import(name="modifyType")
    private @Nullable Output<String> modifyType;

    /**
     * @return The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modify_type` is required when you execute an update operation.
     * 
     */
    public Optional<Output<String>> modifyType() {
        return Optional.ofNullable(this.modifyType);
    }

    /**
     * The payment type of the resource. Valid values: `Subscription`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `Subscription`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * The prepaid period. Valid values: `6`, `12`, `24`, `36`.
     * 
     */
    @Import(name="period", required=true)
    private Output<Integer> period;

    /**
     * @return The prepaid period. Valid values: `6`, `12`, `24`, `36`.
     * 
     */
    public Output<Integer> period() {
        return this.period;
    }

    /**
     * Automatic renewal period. **NOTE:** The `renew_period` is required under the condition that renewal_status is `AutoRenewal`.
     * 
     */
    @Import(name="renewPeriod")
    private @Nullable Output<Integer> renewPeriod;

    /**
     * @return Automatic renewal period. **NOTE:** The `renew_period` is required under the condition that renewal_status is `AutoRenewal`.
     * 
     */
    public Optional<Output<Integer>> renewPeriod() {
        return Optional.ofNullable(this.renewPeriod);
    }

    /**
     * Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     * 
     */
    @Import(name="renewalStatus")
    private @Nullable Output<String> renewalStatus;

    /**
     * @return Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     * 
     */
    public Optional<Output<String>> renewalStatus() {
        return Optional.ofNullable(this.renewalStatus);
    }

    /**
     * Current version. Valid values: `premium_version`, `enterprise_version`,`ultimate_version`.
     * 
     */
    @Import(name="spec", required=true)
    private Output<String> spec;

    /**
     * @return Current version. Valid values: `premium_version`, `enterprise_version`,`ultimate_version`.
     * 
     */
    public Output<String> spec() {
        return this.spec;
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.bandWidth = $.bandWidth;
        this.cfwLog = $.cfwLog;
        this.cfwLogStorage = $.cfwLogStorage;
        this.cfwService = $.cfwService;
        this.fwVpcNumber = $.fwVpcNumber;
        this.instanceCount = $.instanceCount;
        this.ipNumber = $.ipNumber;
        this.logistics = $.logistics;
        this.modifyType = $.modifyType;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.renewPeriod = $.renewPeriod;
        this.renewalStatus = $.renewalStatus;
        this.spec = $.spec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandWidth Public network processing capability. Valid values: 10 to 15000. Unit: Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandWidth(Output<Integer> bandWidth) {
            $.bandWidth = bandWidth;
            return this;
        }

        /**
         * @param bandWidth Public network processing capability. Valid values: 10 to 15000. Unit: Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandWidth(Integer bandWidth) {
            return bandWidth(Output.of(bandWidth));
        }

        /**
         * @param cfwLog Whether to use log audit. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder cfwLog(Output<Boolean> cfwLog) {
            $.cfwLog = cfwLog;
            return this;
        }

        /**
         * @param cfwLog Whether to use log audit. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder cfwLog(Boolean cfwLog) {
            return cfwLog(Output.of(cfwLog));
        }

        /**
         * @param cfwLogStorage The log storage capacity.
         * 
         * @return builder
         * 
         */
        public Builder cfwLogStorage(Output<Integer> cfwLogStorage) {
            $.cfwLogStorage = cfwLogStorage;
            return this;
        }

        /**
         * @param cfwLogStorage The log storage capacity.
         * 
         * @return builder
         * 
         */
        public Builder cfwLogStorage(Integer cfwLogStorage) {
            return cfwLogStorage(Output.of(cfwLogStorage));
        }

        /**
         * @param cfwService Whether to use expert service. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder cfwService(Output<Boolean> cfwService) {
            $.cfwService = cfwService;
            return this;
        }

        /**
         * @param cfwService Whether to use expert service. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder cfwService(Boolean cfwService) {
            return cfwService(Output.of(cfwService));
        }

        /**
         * @param fwVpcNumber The number of protected VPCs. Valid values between 2 and 500.
         * 
         * @return builder
         * 
         */
        public Builder fwVpcNumber(@Nullable Output<Integer> fwVpcNumber) {
            $.fwVpcNumber = fwVpcNumber;
            return this;
        }

        /**
         * @param fwVpcNumber The number of protected VPCs. Valid values between 2 and 500.
         * 
         * @return builder
         * 
         */
        public Builder fwVpcNumber(Integer fwVpcNumber) {
            return fwVpcNumber(Output.of(fwVpcNumber));
        }

        /**
         * @param instanceCount The number of assets.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(@Nullable Output<Integer> instanceCount) {
            $.instanceCount = instanceCount;
            return this;
        }

        /**
         * @param instanceCount The number of assets.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(Integer instanceCount) {
            return instanceCount(Output.of(instanceCount));
        }

        /**
         * @param ipNumber The number of public IPs that can be protected. Valid values: 20 to 4000.
         * 
         * @return builder
         * 
         */
        public Builder ipNumber(Output<Integer> ipNumber) {
            $.ipNumber = ipNumber;
            return this;
        }

        /**
         * @param ipNumber The number of public IPs that can be protected. Valid values: 20 to 4000.
         * 
         * @return builder
         * 
         */
        public Builder ipNumber(Integer ipNumber) {
            return ipNumber(Output.of(ipNumber));
        }

        /**
         * @param logistics The logistics.
         * 
         * @return builder
         * 
         */
        public Builder logistics(@Nullable Output<String> logistics) {
            $.logistics = logistics;
            return this;
        }

        /**
         * @param logistics The logistics.
         * 
         * @return builder
         * 
         */
        public Builder logistics(String logistics) {
            return logistics(Output.of(logistics));
        }

        /**
         * @param modifyType The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modify_type` is required when you execute an update operation.
         * 
         * @return builder
         * 
         */
        public Builder modifyType(@Nullable Output<String> modifyType) {
            $.modifyType = modifyType;
            return this;
        }

        /**
         * @param modifyType The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modify_type` is required when you execute an update operation.
         * 
         * @return builder
         * 
         */
        public Builder modifyType(String modifyType) {
            return modifyType(Output.of(modifyType));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The prepaid period. Valid values: `6`, `12`, `24`, `36`.
         * 
         * @return builder
         * 
         */
        public Builder period(Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The prepaid period. Valid values: `6`, `12`, `24`, `36`.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param renewPeriod Automatic renewal period. **NOTE:** The `renew_period` is required under the condition that renewal_status is `AutoRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewPeriod(@Nullable Output<Integer> renewPeriod) {
            $.renewPeriod = renewPeriod;
            return this;
        }

        /**
         * @param renewPeriod Automatic renewal period. **NOTE:** The `renew_period` is required under the condition that renewal_status is `AutoRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewPeriod(Integer renewPeriod) {
            return renewPeriod(Output.of(renewPeriod));
        }

        /**
         * @param renewalStatus Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(@Nullable Output<String> renewalStatus) {
            $.renewalStatus = renewalStatus;
            return this;
        }

        /**
         * @param renewalStatus Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(String renewalStatus) {
            return renewalStatus(Output.of(renewalStatus));
        }

        /**
         * @param spec Current version. Valid values: `premium_version`, `enterprise_version`,`ultimate_version`.
         * 
         * @return builder
         * 
         */
        public Builder spec(Output<String> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec Current version. Valid values: `premium_version`, `enterprise_version`,`ultimate_version`.
         * 
         * @return builder
         * 
         */
        public Builder spec(String spec) {
            return spec(Output.of(spec));
        }

        public InstanceArgs build() {
            $.bandWidth = Objects.requireNonNull($.bandWidth, "expected parameter 'bandWidth' to be non-null");
            $.cfwLog = Objects.requireNonNull($.cfwLog, "expected parameter 'cfwLog' to be non-null");
            $.cfwLogStorage = Objects.requireNonNull($.cfwLogStorage, "expected parameter 'cfwLogStorage' to be non-null");
            $.cfwService = Objects.requireNonNull($.cfwService, "expected parameter 'cfwService' to be non-null");
            $.ipNumber = Objects.requireNonNull($.ipNumber, "expected parameter 'ipNumber' to be non-null");
            $.paymentType = Objects.requireNonNull($.paymentType, "expected parameter 'paymentType' to be non-null");
            $.period = Objects.requireNonNull($.period, "expected parameter 'period' to be non-null");
            $.spec = Objects.requireNonNull($.spec, "expected parameter 'spec' to be non-null");
            return $;
        }
    }

}
