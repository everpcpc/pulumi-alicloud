// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListenerAccessLogTracingConfig {
    /**
     * @return Xtrace Function. Value: `True` Or `False` . Default Value: `False`.
     * 
     */
    private final @Nullable Boolean tracingEnabled;
    /**
     * @return Xtrace Sampling Rate. Value: `1` to `10000`.
     * 
     */
    private final @Nullable Integer tracingSample;
    /**
     * @return Xtrace Type Value Is `Zipkin`.
     * 
     */
    private final @Nullable String tracingType;

    @CustomType.Constructor
    private ListenerAccessLogTracingConfig(
        @CustomType.Parameter("tracingEnabled") @Nullable Boolean tracingEnabled,
        @CustomType.Parameter("tracingSample") @Nullable Integer tracingSample,
        @CustomType.Parameter("tracingType") @Nullable String tracingType) {
        this.tracingEnabled = tracingEnabled;
        this.tracingSample = tracingSample;
        this.tracingType = tracingType;
    }

    /**
     * @return Xtrace Function. Value: `True` Or `False` . Default Value: `False`.
     * 
     */
    public Optional<Boolean> tracingEnabled() {
        return Optional.ofNullable(this.tracingEnabled);
    }
    /**
     * @return Xtrace Sampling Rate. Value: `1` to `10000`.
     * 
     */
    public Optional<Integer> tracingSample() {
        return Optional.ofNullable(this.tracingSample);
    }
    /**
     * @return Xtrace Type Value Is `Zipkin`.
     * 
     */
    public Optional<String> tracingType() {
        return Optional.ofNullable(this.tracingType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerAccessLogTracingConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean tracingEnabled;
        private @Nullable Integer tracingSample;
        private @Nullable String tracingType;

        public Builder() {
    	      // Empty
        }

        public Builder(ListenerAccessLogTracingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.tracingEnabled = defaults.tracingEnabled;
    	      this.tracingSample = defaults.tracingSample;
    	      this.tracingType = defaults.tracingType;
        }

        public Builder tracingEnabled(@Nullable Boolean tracingEnabled) {
            this.tracingEnabled = tracingEnabled;
            return this;
        }
        public Builder tracingSample(@Nullable Integer tracingSample) {
            this.tracingSample = tracingSample;
            return this;
        }
        public Builder tracingType(@Nullable String tracingType) {
            this.tracingType = tracingType;
            return this;
        }        public ListenerAccessLogTracingConfig build() {
            return new ListenerAccessLogTracingConfig(tracingEnabled, tracingSample, tracingType);
        }
    }
}
