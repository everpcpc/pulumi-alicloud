// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageDiskDeviceMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageDiskDeviceMappingArgs Empty = new ImageDiskDeviceMappingArgs();

    /**
     * Specifies the name of a disk in the combined custom image. Value range: /dev/xvda to /dev/xvdz.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return Specifies the name of a disk in the combined custom image. Value range: /dev/xvda to /dev/xvdz.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Specifies the type of a disk in the combined custom image. If you specify this parameter, you can use a data disk snapshot as the data source of a system disk for creating an image. If it is not specified, the disk type is determined by the corresponding snapshot. Valid values: `system`, `data`,
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return Specifies the type of a disk in the combined custom image. If you specify this parameter, you can use a data disk snapshot as the data source of a system disk for creating an image. If it is not specified, the disk type is determined by the corresponding snapshot. Valid values: `system`, `data`,
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * Specifies the size of a disk in the combined custom image, in GiB. Value range: 5 to 2000.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return Specifies the size of a disk in the combined custom image, in GiB. Value range: 5 to 2000.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Specifies a snapshot that is used to create a combined custom image.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return Specifies a snapshot that is used to create a combined custom image.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    private ImageDiskDeviceMappingArgs() {}

    private ImageDiskDeviceMappingArgs(ImageDiskDeviceMappingArgs $) {
        this.device = $.device;
        this.diskType = $.diskType;
        this.size = $.size;
        this.snapshotId = $.snapshotId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageDiskDeviceMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageDiskDeviceMappingArgs $;

        public Builder() {
            $ = new ImageDiskDeviceMappingArgs();
        }

        public Builder(ImageDiskDeviceMappingArgs defaults) {
            $ = new ImageDiskDeviceMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param device Specifies the name of a disk in the combined custom image. Value range: /dev/xvda to /dev/xvdz.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device Specifies the name of a disk in the combined custom image. Value range: /dev/xvda to /dev/xvdz.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param diskType Specifies the type of a disk in the combined custom image. If you specify this parameter, you can use a data disk snapshot as the data source of a system disk for creating an image. If it is not specified, the disk type is determined by the corresponding snapshot. Valid values: `system`, `data`,
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType Specifies the type of a disk in the combined custom image. If you specify this parameter, you can use a data disk snapshot as the data source of a system disk for creating an image. If it is not specified, the disk type is determined by the corresponding snapshot. Valid values: `system`, `data`,
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param size Specifies the size of a disk in the combined custom image, in GiB. Value range: 5 to 2000.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Specifies the size of a disk in the combined custom image, in GiB. Value range: 5 to 2000.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshotId Specifies a snapshot that is used to create a combined custom image.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId Specifies a snapshot that is used to create a combined custom image.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        public ImageDiskDeviceMappingArgs build() {
            return $;
        }
    }

}
