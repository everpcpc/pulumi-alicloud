// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dfs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileSystemState extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemState Empty = new FileSystemState();

    /**
     * The description of the File system.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the File system.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the File system.
     * 
     */
    @Import(name="fileSystemName")
    private @Nullable Output<String> fileSystemName;

    /**
     * @return The name of the File system.
     * 
     */
    public Optional<Output<String>> fileSystemName() {
        return Optional.ofNullable(this.fileSystemName);
    }

    /**
     * The protocol type. Valid values: `HDFS`.
     * 
     */
    @Import(name="protocolType")
    private @Nullable Output<String> protocolType;

    /**
     * @return The protocol type. Valid values: `HDFS`.
     * 
     */
    public Optional<Output<String>> protocolType() {
        return Optional.ofNullable(this.protocolType);
    }

    /**
     * The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughput_mode` is `Provisioned`, this param is valid.
     * 
     */
    @Import(name="provisionedThroughputInMiBps")
    private @Nullable Output<Integer> provisionedThroughputInMiBps;

    /**
     * @return The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughput_mode` is `Provisioned`, this param is valid.
     * 
     */
    public Optional<Output<Integer>> provisionedThroughputInMiBps() {
        return Optional.ofNullable(this.provisionedThroughputInMiBps);
    }

    /**
     * The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
     * 
     */
    @Import(name="spaceCapacity")
    private @Nullable Output<Integer> spaceCapacity;

    /**
     * @return The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
     * 
     */
    public Optional<Output<Integer>> spaceCapacity() {
        return Optional.ofNullable(this.spaceCapacity);
    }

    /**
     * The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    /**
     * The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     * 
     */
    @Import(name="throughputMode")
    private @Nullable Output<String> throughputMode;

    /**
     * @return The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
     * 
     */
    public Optional<Output<String>> throughputMode() {
        return Optional.ofNullable(this.throughputMode);
    }

    /**
     * The zone ID of the File system.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID of the File system.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private FileSystemState() {}

    private FileSystemState(FileSystemState $) {
        this.description = $.description;
        this.fileSystemName = $.fileSystemName;
        this.protocolType = $.protocolType;
        this.provisionedThroughputInMiBps = $.provisionedThroughputInMiBps;
        this.spaceCapacity = $.spaceCapacity;
        this.storageType = $.storageType;
        this.throughputMode = $.throughputMode;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSystemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSystemState $;

        public Builder() {
            $ = new FileSystemState();
        }

        public Builder(FileSystemState defaults) {
            $ = new FileSystemState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the File system.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the File system.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileSystemName The name of the File system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemName(@Nullable Output<String> fileSystemName) {
            $.fileSystemName = fileSystemName;
            return this;
        }

        /**
         * @param fileSystemName The name of the File system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemName(String fileSystemName) {
            return fileSystemName(Output.of(fileSystemName));
        }

        /**
         * @param protocolType The protocol type. Valid values: `HDFS`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(@Nullable Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType The protocol type. Valid values: `HDFS`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param provisionedThroughputInMiBps The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughput_mode` is `Provisioned`, this param is valid.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughputInMiBps(@Nullable Output<Integer> provisionedThroughputInMiBps) {
            $.provisionedThroughputInMiBps = provisionedThroughputInMiBps;
            return this;
        }

        /**
         * @param provisionedThroughputInMiBps The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughput_mode` is `Provisioned`, this param is valid.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughputInMiBps(Integer provisionedThroughputInMiBps) {
            return provisionedThroughputInMiBps(Output.of(provisionedThroughputInMiBps));
        }

        /**
         * @param spaceCapacity The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
         * 
         * @return builder
         * 
         */
        public Builder spaceCapacity(@Nullable Output<Integer> spaceCapacity) {
            $.spaceCapacity = spaceCapacity;
            return this;
        }

        /**
         * @param spaceCapacity The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
         * 
         * @return builder
         * 
         */
        public Builder spaceCapacity(Integer spaceCapacity) {
            return spaceCapacity(Output.of(spaceCapacity));
        }

        /**
         * @param storageType The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param throughputMode The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
         * 
         * @return builder
         * 
         */
        public Builder throughputMode(@Nullable Output<String> throughputMode) {
            $.throughputMode = throughputMode;
            return this;
        }

        /**
         * @param throughputMode The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
         * 
         * @return builder
         * 
         */
        public Builder throughputMode(String throughputMode) {
            return throughputMode(Output.of(throughputMode));
        }

        /**
         * @param zoneId The zone ID of the File system.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the File system.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public FileSystemState build() {
            return $;
        }
    }

}
