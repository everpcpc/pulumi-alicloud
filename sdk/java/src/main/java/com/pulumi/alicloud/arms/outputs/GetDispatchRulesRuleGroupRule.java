// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDispatchRulesRuleGroupRule {
    private final Integer groupId;
    /**
     * @return The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
     * 
     */
    private final Integer groupInterval;
    /**
     * @return The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
     * 
     */
    private final Integer groupWaitTime;
    /**
     * @return The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
     * 
     */
    private final List<String> groupingFields;
    /**
     * @return The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
     * 
     */
    private final Integer repeatInterval;

    @CustomType.Constructor
    private GetDispatchRulesRuleGroupRule(
        @CustomType.Parameter("groupId") Integer groupId,
        @CustomType.Parameter("groupInterval") Integer groupInterval,
        @CustomType.Parameter("groupWaitTime") Integer groupWaitTime,
        @CustomType.Parameter("groupingFields") List<String> groupingFields,
        @CustomType.Parameter("repeatInterval") Integer repeatInterval) {
        this.groupId = groupId;
        this.groupInterval = groupInterval;
        this.groupWaitTime = groupWaitTime;
        this.groupingFields = groupingFields;
        this.repeatInterval = repeatInterval;
    }

    public Integer groupId() {
        return this.groupId;
    }
    /**
     * @return The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
     * 
     */
    public Integer groupInterval() {
        return this.groupInterval;
    }
    /**
     * @return The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
     * 
     */
    public Integer groupWaitTime() {
        return this.groupWaitTime;
    }
    /**
     * @return The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
     * 
     */
    public List<String> groupingFields() {
        return this.groupingFields;
    }
    /**
     * @return The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
     * 
     */
    public Integer repeatInterval() {
        return this.repeatInterval;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDispatchRulesRuleGroupRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer groupId;
        private Integer groupInterval;
        private Integer groupWaitTime;
        private List<String> groupingFields;
        private Integer repeatInterval;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDispatchRulesRuleGroupRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupId = defaults.groupId;
    	      this.groupInterval = defaults.groupInterval;
    	      this.groupWaitTime = defaults.groupWaitTime;
    	      this.groupingFields = defaults.groupingFields;
    	      this.repeatInterval = defaults.repeatInterval;
        }

        public Builder groupId(Integer groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        public Builder groupInterval(Integer groupInterval) {
            this.groupInterval = Objects.requireNonNull(groupInterval);
            return this;
        }
        public Builder groupWaitTime(Integer groupWaitTime) {
            this.groupWaitTime = Objects.requireNonNull(groupWaitTime);
            return this;
        }
        public Builder groupingFields(List<String> groupingFields) {
            this.groupingFields = Objects.requireNonNull(groupingFields);
            return this;
        }
        public Builder groupingFields(String... groupingFields) {
            return groupingFields(List.of(groupingFields));
        }
        public Builder repeatInterval(Integer repeatInterval) {
            this.repeatInterval = Objects.requireNonNull(repeatInterval);
            return this;
        }        public GetDispatchRulesRuleGroupRule build() {
            return new GetDispatchRulesRuleGroupRule(groupId, groupInterval, groupWaitTime, groupingFields, repeatInterval);
        }
    }
}
