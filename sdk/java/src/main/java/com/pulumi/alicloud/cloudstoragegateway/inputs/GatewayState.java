// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudstoragegateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayState extends com.pulumi.resources.ResourceArgs {

    public static final GatewayState Empty = new GatewayState();

    /**
     * the description of gateway.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return the description of gateway.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * the gateway class. the valid values: `Basic`, `Standard`,`Enhanced`,`Advanced`
     * 
     */
    @Import(name="gatewayClass")
    private @Nullable Output<String> gatewayClass;

    /**
     * @return the gateway class. the valid values: `Basic`, `Standard`,`Enhanced`,`Advanced`
     * 
     */
    public Optional<Output<String>> gatewayClass() {
        return Optional.ofNullable(this.gatewayClass);
    }

    /**
     * the name of gateway.
     * 
     */
    @Import(name="gatewayName")
    private @Nullable Output<String> gatewayName;

    /**
     * @return the name of gateway.
     * 
     */
    public Optional<Output<String>> gatewayName() {
        return Optional.ofNullable(this.gatewayName);
    }

    /**
     * gateway location. the valid values: `Cloud`, `On_Premise`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return gateway location. the valid values: `Cloud`, `On_Premise`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The Payment type of gateway. The valid value: `PayAsYouGo`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The Payment type of gateway. The valid value: `PayAsYouGo`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The public network bandwidth of gateway. Valid values between `5` and `200`. Defaults to `5`.
     * 
     */
    @Import(name="publicNetworkBandwidth")
    private @Nullable Output<Integer> publicNetworkBandwidth;

    /**
     * @return The public network bandwidth of gateway. Valid values between `5` and `200`. Defaults to `5`.
     * 
     */
    public Optional<Output<Integer>> publicNetworkBandwidth() {
        return Optional.ofNullable(this.publicNetworkBandwidth);
    }

    /**
     * The reason detail of gateway.
     * 
     */
    @Import(name="reasonDetail")
    private @Nullable Output<String> reasonDetail;

    /**
     * @return The reason detail of gateway.
     * 
     */
    public Optional<Output<String>> reasonDetail() {
        return Optional.ofNullable(this.reasonDetail);
    }

    /**
     * The reason type when user deletes the gateway.
     * 
     */
    @Import(name="reasonType")
    private @Nullable Output<String> reasonType;

    /**
     * @return The reason type when user deletes the gateway.
     * 
     */
    public Optional<Output<String>> reasonType() {
        return Optional.ofNullable(this.reasonType);
    }

    /**
     * Whether to release the gateway due to expiration.
     * 
     */
    @Import(name="releaseAfterExpiration")
    private @Nullable Output<Boolean> releaseAfterExpiration;

    /**
     * @return Whether to release the gateway due to expiration.
     * 
     */
    public Optional<Output<Boolean>> releaseAfterExpiration() {
        return Optional.ofNullable(this.releaseAfterExpiration);
    }

    /**
     * gateway status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return gateway status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * storage bundle id.
     * 
     */
    @Import(name="storageBundleId")
    private @Nullable Output<String> storageBundleId;

    /**
     * @return storage bundle id.
     * 
     */
    public Optional<Output<String>> storageBundleId() {
        return Optional.ofNullable(this.storageBundleId);
    }

    /**
     * gateway type. the valid values: `Type`, `Iscsi`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return gateway type. the valid values: `Type`, `Iscsi`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The vswitch id of gateway.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The vswitch id of gateway.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private GatewayState() {}

    private GatewayState(GatewayState $) {
        this.description = $.description;
        this.gatewayClass = $.gatewayClass;
        this.gatewayName = $.gatewayName;
        this.location = $.location;
        this.paymentType = $.paymentType;
        this.publicNetworkBandwidth = $.publicNetworkBandwidth;
        this.reasonDetail = $.reasonDetail;
        this.reasonType = $.reasonType;
        this.releaseAfterExpiration = $.releaseAfterExpiration;
        this.status = $.status;
        this.storageBundleId = $.storageBundleId;
        this.type = $.type;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayState $;

        public Builder() {
            $ = new GatewayState();
        }

        public Builder(GatewayState defaults) {
            $ = new GatewayState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description the description of gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description the description of gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gatewayClass the gateway class. the valid values: `Basic`, `Standard`,`Enhanced`,`Advanced`
         * 
         * @return builder
         * 
         */
        public Builder gatewayClass(@Nullable Output<String> gatewayClass) {
            $.gatewayClass = gatewayClass;
            return this;
        }

        /**
         * @param gatewayClass the gateway class. the valid values: `Basic`, `Standard`,`Enhanced`,`Advanced`
         * 
         * @return builder
         * 
         */
        public Builder gatewayClass(String gatewayClass) {
            return gatewayClass(Output.of(gatewayClass));
        }

        /**
         * @param gatewayName the name of gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayName(@Nullable Output<String> gatewayName) {
            $.gatewayName = gatewayName;
            return this;
        }

        /**
         * @param gatewayName the name of gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayName(String gatewayName) {
            return gatewayName(Output.of(gatewayName));
        }

        /**
         * @param location gateway location. the valid values: `Cloud`, `On_Premise`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location gateway location. the valid values: `Cloud`, `On_Premise`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param paymentType The Payment type of gateway. The valid value: `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The Payment type of gateway. The valid value: `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param publicNetworkBandwidth The public network bandwidth of gateway. Valid values between `5` and `200`. Defaults to `5`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkBandwidth(@Nullable Output<Integer> publicNetworkBandwidth) {
            $.publicNetworkBandwidth = publicNetworkBandwidth;
            return this;
        }

        /**
         * @param publicNetworkBandwidth The public network bandwidth of gateway. Valid values between `5` and `200`. Defaults to `5`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkBandwidth(Integer publicNetworkBandwidth) {
            return publicNetworkBandwidth(Output.of(publicNetworkBandwidth));
        }

        /**
         * @param reasonDetail The reason detail of gateway.
         * 
         * @return builder
         * 
         */
        public Builder reasonDetail(@Nullable Output<String> reasonDetail) {
            $.reasonDetail = reasonDetail;
            return this;
        }

        /**
         * @param reasonDetail The reason detail of gateway.
         * 
         * @return builder
         * 
         */
        public Builder reasonDetail(String reasonDetail) {
            return reasonDetail(Output.of(reasonDetail));
        }

        /**
         * @param reasonType The reason type when user deletes the gateway.
         * 
         * @return builder
         * 
         */
        public Builder reasonType(@Nullable Output<String> reasonType) {
            $.reasonType = reasonType;
            return this;
        }

        /**
         * @param reasonType The reason type when user deletes the gateway.
         * 
         * @return builder
         * 
         */
        public Builder reasonType(String reasonType) {
            return reasonType(Output.of(reasonType));
        }

        /**
         * @param releaseAfterExpiration Whether to release the gateway due to expiration.
         * 
         * @return builder
         * 
         */
        public Builder releaseAfterExpiration(@Nullable Output<Boolean> releaseAfterExpiration) {
            $.releaseAfterExpiration = releaseAfterExpiration;
            return this;
        }

        /**
         * @param releaseAfterExpiration Whether to release the gateway due to expiration.
         * 
         * @return builder
         * 
         */
        public Builder releaseAfterExpiration(Boolean releaseAfterExpiration) {
            return releaseAfterExpiration(Output.of(releaseAfterExpiration));
        }

        /**
         * @param status gateway status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status gateway status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param storageBundleId storage bundle id.
         * 
         * @return builder
         * 
         */
        public Builder storageBundleId(@Nullable Output<String> storageBundleId) {
            $.storageBundleId = storageBundleId;
            return this;
        }

        /**
         * @param storageBundleId storage bundle id.
         * 
         * @return builder
         * 
         */
        public Builder storageBundleId(String storageBundleId) {
            return storageBundleId(Output.of(storageBundleId));
        }

        /**
         * @param type gateway type. the valid values: `Type`, `Iscsi`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type gateway type. the valid values: `Type`, `Iscsi`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vswitchId The vswitch id of gateway.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vswitch id of gateway.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public GatewayState build() {
            return $;
        }
    }

}
