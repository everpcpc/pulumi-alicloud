// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cddc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDedicatedHostsHost {
    /**
     * @return Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
     * 
     */
    private final String allocationStatus;
    /**
     * @return The ID of the bastion host with which the host is associated.
     * 
     */
    private final String bastionInstanceId;
    /**
     * @return The numeric value of the CPU over commit ratio of the dedicated cluster.
     * 
     */
    private final String cpuAllocationRatio;
    /**
     * @return The number of CPU cores used by the host.
     * 
     */
    private final String cpuUsed;
    /**
     * @return The time when the host was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    private final String createTime;
    /**
     * @return The ID of the dedicated cluster in which the host is created.
     * 
     */
    private final String dedicatedHostGroupId;
    /**
     * @return The ID of the host.
     * 
     */
    private final String dedicatedHostId;
    /**
     * @return The disk usage in percentage.
     * 
     */
    private final String diskAllocationRatio;
    /**
     * @return The Elastic Compute Service (ECS) instance type.
     * 
     */
    private final String ecsClassCode;
    /**
     * @return The time when the host expires. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    private final String endTime;
    /**
     * @return The type of the database engine that is used by the host.
     * 
     */
    private final String engine;
    /**
     * @return The time when the host expires. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    private final String expiredTime;
    /**
     * @return The instance type of the host.
     * 
     */
    private final String hostClass;
    /**
     * @return The number of CPU cores specified for the host. Unit: `core`.
     * 
     */
    private final String hostCpu;
    /**
     * @return The memory of the host. Unit: `GB`.
     * 
     */
    private final String hostMem;
    /**
     * @return The name of the host.
     * 
     */
    private final String hostName;
    /**
     * @return The total storage capacity of the host. Unit: `GB`.
     * 
     */
    private final String hostStorage;
    /**
     * @return The storage type of the host.
     * 
     */
    private final String hostType;
    /**
     * @return The ID of the Dedicated Host. The value formats as `&lt;dedicated_host_group_id&gt;:&lt;dedicated_host_id&gt;`.
     * 
     */
    private final String id;
    /**
     * @return The image type of the host.
     * 
     */
    private final String imageCategory;
    /**
     * @return The IP address of the host.
     * 
     */
    private final String ipAddress;
    /**
     * @return The memory usage in percentage.
     * 
     */
    private final String memAllocationRatio;
    /**
     * @return The amount of memory used by the host. Unit: `GB`.
     * 
     */
    private final String memoryUsed;
    /**
     * @return Indicates whether you have the OS permissions on the host. Valid values: `0`: You do not have the OS permissions on the host. `1`: You have the OS permissions on the host.
     * 
     */
    private final String openPermission;
    /**
     * @return The state of the host.
     * 
     */
    private final String status;
    /**
     * @return The storage usage of the host. Unit: `GB`.
     * 
     */
    private final String storageUsed;
    /**
     * @return The tag of the resource.
     * 
     */
    private final Map<String,Object> tags;
    /**
     * @return The ID of the virtual private cloud (VPC) to which the host is connected.
     * 
     */
    private final String vpcId;
    /**
     * @return The ID of the vSwitch.
     * 
     */
    private final String vswitchId;
    /**
     * @return The zone ID of the host.
     * 
     */
    private final String zoneId;

    @CustomType.Constructor
    private GetDedicatedHostsHost(
        @CustomType.Parameter("allocationStatus") String allocationStatus,
        @CustomType.Parameter("bastionInstanceId") String bastionInstanceId,
        @CustomType.Parameter("cpuAllocationRatio") String cpuAllocationRatio,
        @CustomType.Parameter("cpuUsed") String cpuUsed,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("dedicatedHostGroupId") String dedicatedHostGroupId,
        @CustomType.Parameter("dedicatedHostId") String dedicatedHostId,
        @CustomType.Parameter("diskAllocationRatio") String diskAllocationRatio,
        @CustomType.Parameter("ecsClassCode") String ecsClassCode,
        @CustomType.Parameter("endTime") String endTime,
        @CustomType.Parameter("engine") String engine,
        @CustomType.Parameter("expiredTime") String expiredTime,
        @CustomType.Parameter("hostClass") String hostClass,
        @CustomType.Parameter("hostCpu") String hostCpu,
        @CustomType.Parameter("hostMem") String hostMem,
        @CustomType.Parameter("hostName") String hostName,
        @CustomType.Parameter("hostStorage") String hostStorage,
        @CustomType.Parameter("hostType") String hostType,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageCategory") String imageCategory,
        @CustomType.Parameter("ipAddress") String ipAddress,
        @CustomType.Parameter("memAllocationRatio") String memAllocationRatio,
        @CustomType.Parameter("memoryUsed") String memoryUsed,
        @CustomType.Parameter("openPermission") String openPermission,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("storageUsed") String storageUsed,
        @CustomType.Parameter("tags") Map<String,Object> tags,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchId") String vswitchId,
        @CustomType.Parameter("zoneId") String zoneId) {
        this.allocationStatus = allocationStatus;
        this.bastionInstanceId = bastionInstanceId;
        this.cpuAllocationRatio = cpuAllocationRatio;
        this.cpuUsed = cpuUsed;
        this.createTime = createTime;
        this.dedicatedHostGroupId = dedicatedHostGroupId;
        this.dedicatedHostId = dedicatedHostId;
        this.diskAllocationRatio = diskAllocationRatio;
        this.ecsClassCode = ecsClassCode;
        this.endTime = endTime;
        this.engine = engine;
        this.expiredTime = expiredTime;
        this.hostClass = hostClass;
        this.hostCpu = hostCpu;
        this.hostMem = hostMem;
        this.hostName = hostName;
        this.hostStorage = hostStorage;
        this.hostType = hostType;
        this.id = id;
        this.imageCategory = imageCategory;
        this.ipAddress = ipAddress;
        this.memAllocationRatio = memAllocationRatio;
        this.memoryUsed = memoryUsed;
        this.openPermission = openPermission;
        this.status = status;
        this.storageUsed = storageUsed;
        this.tags = tags;
        this.vpcId = vpcId;
        this.vswitchId = vswitchId;
        this.zoneId = zoneId;
    }

    /**
     * @return Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
     * 
     */
    public String allocationStatus() {
        return this.allocationStatus;
    }
    /**
     * @return The ID of the bastion host with which the host is associated.
     * 
     */
    public String bastionInstanceId() {
        return this.bastionInstanceId;
    }
    /**
     * @return The numeric value of the CPU over commit ratio of the dedicated cluster.
     * 
     */
    public String cpuAllocationRatio() {
        return this.cpuAllocationRatio;
    }
    /**
     * @return The number of CPU cores used by the host.
     * 
     */
    public String cpuUsed() {
        return this.cpuUsed;
    }
    /**
     * @return The time when the host was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the dedicated cluster in which the host is created.
     * 
     */
    public String dedicatedHostGroupId() {
        return this.dedicatedHostGroupId;
    }
    /**
     * @return The ID of the host.
     * 
     */
    public String dedicatedHostId() {
        return this.dedicatedHostId;
    }
    /**
     * @return The disk usage in percentage.
     * 
     */
    public String diskAllocationRatio() {
        return this.diskAllocationRatio;
    }
    /**
     * @return The Elastic Compute Service (ECS) instance type.
     * 
     */
    public String ecsClassCode() {
        return this.ecsClassCode;
    }
    /**
     * @return The time when the host expires. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return The type of the database engine that is used by the host.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The time when the host expires. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The instance type of the host.
     * 
     */
    public String hostClass() {
        return this.hostClass;
    }
    /**
     * @return The number of CPU cores specified for the host. Unit: `core`.
     * 
     */
    public String hostCpu() {
        return this.hostCpu;
    }
    /**
     * @return The memory of the host. Unit: `GB`.
     * 
     */
    public String hostMem() {
        return this.hostMem;
    }
    /**
     * @return The name of the host.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The total storage capacity of the host. Unit: `GB`.
     * 
     */
    public String hostStorage() {
        return this.hostStorage;
    }
    /**
     * @return The storage type of the host.
     * 
     */
    public String hostType() {
        return this.hostType;
    }
    /**
     * @return The ID of the Dedicated Host. The value formats as `&lt;dedicated_host_group_id&gt;:&lt;dedicated_host_id&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The image type of the host.
     * 
     */
    public String imageCategory() {
        return this.imageCategory;
    }
    /**
     * @return The IP address of the host.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The memory usage in percentage.
     * 
     */
    public String memAllocationRatio() {
        return this.memAllocationRatio;
    }
    /**
     * @return The amount of memory used by the host. Unit: `GB`.
     * 
     */
    public String memoryUsed() {
        return this.memoryUsed;
    }
    /**
     * @return Indicates whether you have the OS permissions on the host. Valid values: `0`: You do not have the OS permissions on the host. `1`: You have the OS permissions on the host.
     * 
     */
    public String openPermission() {
        return this.openPermission;
    }
    /**
     * @return The state of the host.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The storage usage of the host. Unit: `GB`.
     * 
     */
    public String storageUsed() {
        return this.storageUsed;
    }
    /**
     * @return The tag of the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the virtual private cloud (VPC) to which the host is connected.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of the vSwitch.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the host.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDedicatedHostsHost defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String allocationStatus;
        private String bastionInstanceId;
        private String cpuAllocationRatio;
        private String cpuUsed;
        private String createTime;
        private String dedicatedHostGroupId;
        private String dedicatedHostId;
        private String diskAllocationRatio;
        private String ecsClassCode;
        private String endTime;
        private String engine;
        private String expiredTime;
        private String hostClass;
        private String hostCpu;
        private String hostMem;
        private String hostName;
        private String hostStorage;
        private String hostType;
        private String id;
        private String imageCategory;
        private String ipAddress;
        private String memAllocationRatio;
        private String memoryUsed;
        private String openPermission;
        private String status;
        private String storageUsed;
        private Map<String,Object> tags;
        private String vpcId;
        private String vswitchId;
        private String zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDedicatedHostsHost defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationStatus = defaults.allocationStatus;
    	      this.bastionInstanceId = defaults.bastionInstanceId;
    	      this.cpuAllocationRatio = defaults.cpuAllocationRatio;
    	      this.cpuUsed = defaults.cpuUsed;
    	      this.createTime = defaults.createTime;
    	      this.dedicatedHostGroupId = defaults.dedicatedHostGroupId;
    	      this.dedicatedHostId = defaults.dedicatedHostId;
    	      this.diskAllocationRatio = defaults.diskAllocationRatio;
    	      this.ecsClassCode = defaults.ecsClassCode;
    	      this.endTime = defaults.endTime;
    	      this.engine = defaults.engine;
    	      this.expiredTime = defaults.expiredTime;
    	      this.hostClass = defaults.hostClass;
    	      this.hostCpu = defaults.hostCpu;
    	      this.hostMem = defaults.hostMem;
    	      this.hostName = defaults.hostName;
    	      this.hostStorage = defaults.hostStorage;
    	      this.hostType = defaults.hostType;
    	      this.id = defaults.id;
    	      this.imageCategory = defaults.imageCategory;
    	      this.ipAddress = defaults.ipAddress;
    	      this.memAllocationRatio = defaults.memAllocationRatio;
    	      this.memoryUsed = defaults.memoryUsed;
    	      this.openPermission = defaults.openPermission;
    	      this.status = defaults.status;
    	      this.storageUsed = defaults.storageUsed;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder allocationStatus(String allocationStatus) {
            this.allocationStatus = Objects.requireNonNull(allocationStatus);
            return this;
        }
        public Builder bastionInstanceId(String bastionInstanceId) {
            this.bastionInstanceId = Objects.requireNonNull(bastionInstanceId);
            return this;
        }
        public Builder cpuAllocationRatio(String cpuAllocationRatio) {
            this.cpuAllocationRatio = Objects.requireNonNull(cpuAllocationRatio);
            return this;
        }
        public Builder cpuUsed(String cpuUsed) {
            this.cpuUsed = Objects.requireNonNull(cpuUsed);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder dedicatedHostGroupId(String dedicatedHostGroupId) {
            this.dedicatedHostGroupId = Objects.requireNonNull(dedicatedHostGroupId);
            return this;
        }
        public Builder dedicatedHostId(String dedicatedHostId) {
            this.dedicatedHostId = Objects.requireNonNull(dedicatedHostId);
            return this;
        }
        public Builder diskAllocationRatio(String diskAllocationRatio) {
            this.diskAllocationRatio = Objects.requireNonNull(diskAllocationRatio);
            return this;
        }
        public Builder ecsClassCode(String ecsClassCode) {
            this.ecsClassCode = Objects.requireNonNull(ecsClassCode);
            return this;
        }
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        public Builder expiredTime(String expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        public Builder hostClass(String hostClass) {
            this.hostClass = Objects.requireNonNull(hostClass);
            return this;
        }
        public Builder hostCpu(String hostCpu) {
            this.hostCpu = Objects.requireNonNull(hostCpu);
            return this;
        }
        public Builder hostMem(String hostMem) {
            this.hostMem = Objects.requireNonNull(hostMem);
            return this;
        }
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        public Builder hostStorage(String hostStorage) {
            this.hostStorage = Objects.requireNonNull(hostStorage);
            return this;
        }
        public Builder hostType(String hostType) {
            this.hostType = Objects.requireNonNull(hostType);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageCategory(String imageCategory) {
            this.imageCategory = Objects.requireNonNull(imageCategory);
            return this;
        }
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        public Builder memAllocationRatio(String memAllocationRatio) {
            this.memAllocationRatio = Objects.requireNonNull(memAllocationRatio);
            return this;
        }
        public Builder memoryUsed(String memoryUsed) {
            this.memoryUsed = Objects.requireNonNull(memoryUsed);
            return this;
        }
        public Builder openPermission(String openPermission) {
            this.openPermission = Objects.requireNonNull(openPermission);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder storageUsed(String storageUsed) {
            this.storageUsed = Objects.requireNonNull(storageUsed);
            return this;
        }
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }        public GetDedicatedHostsHost build() {
            return new GetDedicatedHostsHost(allocationStatus, bastionInstanceId, cpuAllocationRatio, cpuUsed, createTime, dedicatedHostGroupId, dedicatedHostId, diskAllocationRatio, ecsClassCode, endTime, engine, expiredTime, hostClass, hostCpu, hostMem, hostName, hostStorage, hostType, id, imageCategory, ipAddress, memAllocationRatio, memoryUsed, openPermission, status, storageUsed, tags, vpcId, vswitchId, zoneId);
        }
    }
}
