// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.message.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceQueuesQueue {
    /**
     * @return The total number of messages that are in the Active state in the queue. The value is an approximate number.
     * 
     */
    private final Integer activeMessages;
    /**
     * @return The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    private final Integer createTime;
    /**
     * @return The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
     * 
     */
    private final Integer delayMessages;
    /**
     * @return The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
     * 
     */
    private final Integer delaySeconds;
    /**
     * @return The ID of the Queue. Its value is same as Queue Name.
     * 
     */
    private final String id;
    /**
     * @return The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
     * 
     */
    private final Integer inactiveMessages;
    /**
     * @return The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    private final Integer lastModifyTime;
    /**
     * @return Indicates whether the log management feature is enabled for the queue.
     * 
     */
    private final Boolean loggingEnabled;
    /**
     * @return The maximum size of a message body that can be sent to the queue. Unit: bytes.
     * 
     */
    private final Integer maximumMessageSize;
    /**
     * @return The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
     * 
     */
    private final Integer messageRetentionPeriod;
    /**
     * @return The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
     * 
     */
    private final Integer pollingWaitSeconds;
    /**
     * @return The internal url of the queue.
     * 
     */
    private final String queueInternalUrl;
    /**
     * @return The name of the queue.
     * 
     */
    private final String queueName;
    /**
     * @return The url of the queue.
     * 
     */
    private final String queueUrl;
    /**
     * @return The invisibility period for which the received message remains the Inactive state. Unit: seconds.
     * 
     */
    private final Integer visibilityTimeout;

    @CustomType.Constructor
    private GetServiceQueuesQueue(
        @CustomType.Parameter("activeMessages") Integer activeMessages,
        @CustomType.Parameter("createTime") Integer createTime,
        @CustomType.Parameter("delayMessages") Integer delayMessages,
        @CustomType.Parameter("delaySeconds") Integer delaySeconds,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("inactiveMessages") Integer inactiveMessages,
        @CustomType.Parameter("lastModifyTime") Integer lastModifyTime,
        @CustomType.Parameter("loggingEnabled") Boolean loggingEnabled,
        @CustomType.Parameter("maximumMessageSize") Integer maximumMessageSize,
        @CustomType.Parameter("messageRetentionPeriod") Integer messageRetentionPeriod,
        @CustomType.Parameter("pollingWaitSeconds") Integer pollingWaitSeconds,
        @CustomType.Parameter("queueInternalUrl") String queueInternalUrl,
        @CustomType.Parameter("queueName") String queueName,
        @CustomType.Parameter("queueUrl") String queueUrl,
        @CustomType.Parameter("visibilityTimeout") Integer visibilityTimeout) {
        this.activeMessages = activeMessages;
        this.createTime = createTime;
        this.delayMessages = delayMessages;
        this.delaySeconds = delaySeconds;
        this.id = id;
        this.inactiveMessages = inactiveMessages;
        this.lastModifyTime = lastModifyTime;
        this.loggingEnabled = loggingEnabled;
        this.maximumMessageSize = maximumMessageSize;
        this.messageRetentionPeriod = messageRetentionPeriod;
        this.pollingWaitSeconds = pollingWaitSeconds;
        this.queueInternalUrl = queueInternalUrl;
        this.queueName = queueName;
        this.queueUrl = queueUrl;
        this.visibilityTimeout = visibilityTimeout;
    }

    /**
     * @return The total number of messages that are in the Active state in the queue. The value is an approximate number.
     * 
     */
    public Integer activeMessages() {
        return this.activeMessages;
    }
    /**
     * @return The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    public Integer createTime() {
        return this.createTime;
    }
    /**
     * @return The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
     * 
     */
    public Integer delayMessages() {
        return this.delayMessages;
    }
    /**
     * @return The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
     * 
     */
    public Integer delaySeconds() {
        return this.delaySeconds;
    }
    /**
     * @return The ID of the Queue. Its value is same as Queue Name.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
     * 
     */
    public Integer inactiveMessages() {
        return this.inactiveMessages;
    }
    /**
     * @return The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    public Integer lastModifyTime() {
        return this.lastModifyTime;
    }
    /**
     * @return Indicates whether the log management feature is enabled for the queue.
     * 
     */
    public Boolean loggingEnabled() {
        return this.loggingEnabled;
    }
    /**
     * @return The maximum size of a message body that can be sent to the queue. Unit: bytes.
     * 
     */
    public Integer maximumMessageSize() {
        return this.maximumMessageSize;
    }
    /**
     * @return The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
     * 
     */
    public Integer messageRetentionPeriod() {
        return this.messageRetentionPeriod;
    }
    /**
     * @return The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
     * 
     */
    public Integer pollingWaitSeconds() {
        return this.pollingWaitSeconds;
    }
    /**
     * @return The internal url of the queue.
     * 
     */
    public String queueInternalUrl() {
        return this.queueInternalUrl;
    }
    /**
     * @return The name of the queue.
     * 
     */
    public String queueName() {
        return this.queueName;
    }
    /**
     * @return The url of the queue.
     * 
     */
    public String queueUrl() {
        return this.queueUrl;
    }
    /**
     * @return The invisibility period for which the received message remains the Inactive state. Unit: seconds.
     * 
     */
    public Integer visibilityTimeout() {
        return this.visibilityTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceQueuesQueue defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer activeMessages;
        private Integer createTime;
        private Integer delayMessages;
        private Integer delaySeconds;
        private String id;
        private Integer inactiveMessages;
        private Integer lastModifyTime;
        private Boolean loggingEnabled;
        private Integer maximumMessageSize;
        private Integer messageRetentionPeriod;
        private Integer pollingWaitSeconds;
        private String queueInternalUrl;
        private String queueName;
        private String queueUrl;
        private Integer visibilityTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceQueuesQueue defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeMessages = defaults.activeMessages;
    	      this.createTime = defaults.createTime;
    	      this.delayMessages = defaults.delayMessages;
    	      this.delaySeconds = defaults.delaySeconds;
    	      this.id = defaults.id;
    	      this.inactiveMessages = defaults.inactiveMessages;
    	      this.lastModifyTime = defaults.lastModifyTime;
    	      this.loggingEnabled = defaults.loggingEnabled;
    	      this.maximumMessageSize = defaults.maximumMessageSize;
    	      this.messageRetentionPeriod = defaults.messageRetentionPeriod;
    	      this.pollingWaitSeconds = defaults.pollingWaitSeconds;
    	      this.queueInternalUrl = defaults.queueInternalUrl;
    	      this.queueName = defaults.queueName;
    	      this.queueUrl = defaults.queueUrl;
    	      this.visibilityTimeout = defaults.visibilityTimeout;
        }

        public Builder activeMessages(Integer activeMessages) {
            this.activeMessages = Objects.requireNonNull(activeMessages);
            return this;
        }
        public Builder createTime(Integer createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder delayMessages(Integer delayMessages) {
            this.delayMessages = Objects.requireNonNull(delayMessages);
            return this;
        }
        public Builder delaySeconds(Integer delaySeconds) {
            this.delaySeconds = Objects.requireNonNull(delaySeconds);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder inactiveMessages(Integer inactiveMessages) {
            this.inactiveMessages = Objects.requireNonNull(inactiveMessages);
            return this;
        }
        public Builder lastModifyTime(Integer lastModifyTime) {
            this.lastModifyTime = Objects.requireNonNull(lastModifyTime);
            return this;
        }
        public Builder loggingEnabled(Boolean loggingEnabled) {
            this.loggingEnabled = Objects.requireNonNull(loggingEnabled);
            return this;
        }
        public Builder maximumMessageSize(Integer maximumMessageSize) {
            this.maximumMessageSize = Objects.requireNonNull(maximumMessageSize);
            return this;
        }
        public Builder messageRetentionPeriod(Integer messageRetentionPeriod) {
            this.messageRetentionPeriod = Objects.requireNonNull(messageRetentionPeriod);
            return this;
        }
        public Builder pollingWaitSeconds(Integer pollingWaitSeconds) {
            this.pollingWaitSeconds = Objects.requireNonNull(pollingWaitSeconds);
            return this;
        }
        public Builder queueInternalUrl(String queueInternalUrl) {
            this.queueInternalUrl = Objects.requireNonNull(queueInternalUrl);
            return this;
        }
        public Builder queueName(String queueName) {
            this.queueName = Objects.requireNonNull(queueName);
            return this;
        }
        public Builder queueUrl(String queueUrl) {
            this.queueUrl = Objects.requireNonNull(queueUrl);
            return this;
        }
        public Builder visibilityTimeout(Integer visibilityTimeout) {
            this.visibilityTimeout = Objects.requireNonNull(visibilityTimeout);
            return this;
        }        public GetServiceQueuesQueue build() {
            return new GetServiceQueuesQueue(activeMessages, createTime, delayMessages, delaySeconds, id, inactiveMessages, lastModifyTime, loggingEnabled, maximumMessageSize, messageRetentionPeriod, pollingWaitSeconds, queueInternalUrl, queueName, queueUrl, visibilityTimeout);
        }
    }
}
