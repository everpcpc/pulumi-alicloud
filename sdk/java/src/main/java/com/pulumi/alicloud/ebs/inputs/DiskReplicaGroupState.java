// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ebs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskReplicaGroupState extends com.pulumi.resources.ResourceArgs {

    public static final DiskReplicaGroupState Empty = new DiskReplicaGroupState();

    /**
     * The description of the consistent replication group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the consistent replication group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the region to which the disaster recovery site belongs.
     * 
     */
    @Import(name="destinationRegionId")
    private @Nullable Output<String> destinationRegionId;

    /**
     * @return The ID of the region to which the disaster recovery site belongs.
     * 
     */
    public Optional<Output<String>> destinationRegionId() {
        return Optional.ofNullable(this.destinationRegionId);
    }

    /**
     * The ID of the zone to which the disaster recovery site belongs.
     * 
     */
    @Import(name="destinationZoneId")
    private @Nullable Output<String> destinationZoneId;

    /**
     * @return The ID of the zone to which the disaster recovery site belongs.
     * 
     */
    public Optional<Output<String>> destinationZoneId() {
        return Optional.ofNullable(this.destinationZoneId);
    }

    /**
     * Consistent replication group name.
     * 
     */
    @Import(name="groupName")
    private @Nullable Output<String> groupName;

    /**
     * @return Consistent replication group name.
     * 
     */
    public Optional<Output<String>> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    /**
     * The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
     * 
     */
    @Import(name="rpo")
    private @Nullable Output<Integer> rpo;

    /**
     * @return The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
     * 
     */
    public Optional<Output<Integer>> rpo() {
        return Optional.ofNullable(this.rpo);
    }

    /**
     * The ID of the region to which the production site belongs.
     * 
     */
    @Import(name="sourceRegionId")
    private @Nullable Output<String> sourceRegionId;

    /**
     * @return The ID of the region to which the production site belongs.
     * 
     */
    public Optional<Output<String>> sourceRegionId() {
        return Optional.ofNullable(this.sourceRegionId);
    }

    /**
     * The ID of the zone to which the production site belongs.
     * 
     */
    @Import(name="sourceZoneId")
    private @Nullable Output<String> sourceZoneId;

    /**
     * @return The ID of the zone to which the production site belongs.
     * 
     */
    public Optional<Output<String>> sourceZoneId() {
        return Optional.ofNullable(this.sourceZoneId);
    }

    /**
     * The status of the consistent replication group.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the consistent replication group.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DiskReplicaGroupState() {}

    private DiskReplicaGroupState(DiskReplicaGroupState $) {
        this.description = $.description;
        this.destinationRegionId = $.destinationRegionId;
        this.destinationZoneId = $.destinationZoneId;
        this.groupName = $.groupName;
        this.rpo = $.rpo;
        this.sourceRegionId = $.sourceRegionId;
        this.sourceZoneId = $.sourceZoneId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskReplicaGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskReplicaGroupState $;

        public Builder() {
            $ = new DiskReplicaGroupState();
        }

        public Builder(DiskReplicaGroupState defaults) {
            $ = new DiskReplicaGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the consistent replication group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the consistent replication group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationRegionId The ID of the region to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRegionId(@Nullable Output<String> destinationRegionId) {
            $.destinationRegionId = destinationRegionId;
            return this;
        }

        /**
         * @param destinationRegionId The ID of the region to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRegionId(String destinationRegionId) {
            return destinationRegionId(Output.of(destinationRegionId));
        }

        /**
         * @param destinationZoneId The ID of the zone to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationZoneId(@Nullable Output<String> destinationZoneId) {
            $.destinationZoneId = destinationZoneId;
            return this;
        }

        /**
         * @param destinationZoneId The ID of the zone to which the disaster recovery site belongs.
         * 
         * @return builder
         * 
         */
        public Builder destinationZoneId(String destinationZoneId) {
            return destinationZoneId(Output.of(destinationZoneId));
        }

        /**
         * @param groupName Consistent replication group name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName Consistent replication group name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param rpo The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder rpo(@Nullable Output<Integer> rpo) {
            $.rpo = rpo;
            return this;
        }

        /**
         * @param rpo The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder rpo(Integer rpo) {
            return rpo(Output.of(rpo));
        }

        /**
         * @param sourceRegionId The ID of the region to which the production site belongs.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionId(@Nullable Output<String> sourceRegionId) {
            $.sourceRegionId = sourceRegionId;
            return this;
        }

        /**
         * @param sourceRegionId The ID of the region to which the production site belongs.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionId(String sourceRegionId) {
            return sourceRegionId(Output.of(sourceRegionId));
        }

        /**
         * @param sourceZoneId The ID of the zone to which the production site belongs.
         * 
         * @return builder
         * 
         */
        public Builder sourceZoneId(@Nullable Output<String> sourceZoneId) {
            $.sourceZoneId = sourceZoneId;
            return this;
        }

        /**
         * @param sourceZoneId The ID of the zone to which the production site belongs.
         * 
         * @return builder
         * 
         */
        public Builder sourceZoneId(String sourceZoneId) {
            return sourceZoneId(Output.of(sourceZoneId));
        }

        /**
         * @param status The status of the consistent replication group.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the consistent replication group.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DiskReplicaGroupState build() {
            return $;
        }
    }

}
