// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVirtualBorderRoutersRouter {
    /**
     * @return The physical leased line access point ID.
     * 
     */
    private final String accessPointId;
    /**
     * @return The first activation time of VBR.
     * 
     */
    private final String activationTime;
    /**
     * @return Operators for physical connection circuit provided coding.
     * 
     */
    private final String circuitCode;
    /**
     * @return Box Instance Id.
     * 
     */
    private final String cloudBoxInstanceId;
    /**
     * @return The representative of the creation time resources attribute field.
     * 
     */
    private final String createTime;
    /**
     * @return The description of VBR. Length is from 2 to 256 characters, must start with a letter or the Chinese at the beginning, but not at the http:// Or https:// at the beginning.
     * 
     */
    private final String description;
    /**
     * @return Detection time multiplier that recipient allows the sender to send a message of the maximum allowable connections for the number of packets, used to detect whether the link normal. Value: 3~10.
     * 
     */
    private final Integer detectMultiplier;
    /**
     * @return High Speed Migration Service Instance Id.
     * 
     */
    private final String eccId;
    /**
     * @return Whether to Enable IPv6.
     * 
     */
    private final Boolean enableIpv6;
    /**
     * @return The ID of the Virtual Border Router.
     * 
     */
    private final String id;
    /**
     * @return Alibaba Cloud-Connected IPv4 address.
     * 
     */
    private final String localGatewayIp;
    /**
     * @return Alibaba Cloud-Connected IPv6 Address.
     * 
     */
    private final String localIpv6GatewayIp;
    /**
     * @return Configure BFD packet reception interval of values include: 200~1000, unit: ms.
     * 
     */
    private final Integer minRxInterval;
    /**
     * @return Configure BFD packet transmission interval maximum value: 200~1000, unit: ms.
     * 
     */
    private final Integer minTxInterval;
    /**
     * @return The Billing of the Extended Time.
     * 
     */
    private final String paymentVbrExpireTime;
    /**
     * @return The Client-Side Interconnection IPv4 Address.
     * 
     */
    private final String peerGatewayIp;
    /**
     * @return The Client-Side Interconnection IPv6 Address.
     * 
     */
    private final String peerIpv6GatewayIp;
    /**
     * @return Alibaba Cloud-Connected IPv6 with Client-Side Interconnection IPv6 of Subnet Mask.
     * 
     */
    private final String peeringIpv6SubnetMask;
    /**
     * @return Alibaba Cloud-Connected IPv4 and Client-Side Interconnection IPv4 of Subnet Mask.
     * 
     */
    private final String peeringSubnetMask;
    /**
     * @return Physical Private Line Service Status Value Normal: Normal, financiallocked: If You Lock.
     * 
     */
    private final String physicalConnectionBusinessStatus;
    /**
     * @return The ID of the Physical Connection to Which the ID.
     * 
     */
    private final String physicalConnectionId;
    /**
     * @return Physical Private Line Where the Account ID.
     * 
     */
    private final String physicalConnectionOwnerUid;
    /**
     * @return Physical Private Line State.
     * 
     */
    private final String physicalConnectionStatus;
    /**
     * @return The Last from a Terminated State to the Active State of the Time.
     * 
     */
    private final String recoveryTime;
    /**
     * @return Route Table ID.
     * 
     */
    private final String routeTableId;
    /**
     * @return The VBR state.
     * 
     */
    private final String status;
    /**
     * @return The Most Recent Was Aborted by the Time.
     * 
     */
    private final String terminationTime;
    /**
     * @return VBR Type.
     * 
     */
    private final String type;
    /**
     * @return The VBR ID.
     * 
     */
    private final String virtualBorderRouterId;
    /**
     * @return The name of VBR. Length is from 2 to 128 characters, must start with a letter or the Chinese at the beginning can contain numbers, the underscore character (_) and dash (-). But do not start with http:// or https:// at the beginning.
     * 
     */
    private final String virtualBorderRouterName;
    /**
     * @return The VLAN ID of the VBR. Value range: 0~2999.
     * 
     */
    private final Integer vlanId;
    /**
     * @return The ID of the Router Interface.
     * 
     */
    private final String vlanInterfaceId;

    @CustomType.Constructor
    private GetVirtualBorderRoutersRouter(
        @CustomType.Parameter("accessPointId") String accessPointId,
        @CustomType.Parameter("activationTime") String activationTime,
        @CustomType.Parameter("circuitCode") String circuitCode,
        @CustomType.Parameter("cloudBoxInstanceId") String cloudBoxInstanceId,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("detectMultiplier") Integer detectMultiplier,
        @CustomType.Parameter("eccId") String eccId,
        @CustomType.Parameter("enableIpv6") Boolean enableIpv6,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("localGatewayIp") String localGatewayIp,
        @CustomType.Parameter("localIpv6GatewayIp") String localIpv6GatewayIp,
        @CustomType.Parameter("minRxInterval") Integer minRxInterval,
        @CustomType.Parameter("minTxInterval") Integer minTxInterval,
        @CustomType.Parameter("paymentVbrExpireTime") String paymentVbrExpireTime,
        @CustomType.Parameter("peerGatewayIp") String peerGatewayIp,
        @CustomType.Parameter("peerIpv6GatewayIp") String peerIpv6GatewayIp,
        @CustomType.Parameter("peeringIpv6SubnetMask") String peeringIpv6SubnetMask,
        @CustomType.Parameter("peeringSubnetMask") String peeringSubnetMask,
        @CustomType.Parameter("physicalConnectionBusinessStatus") String physicalConnectionBusinessStatus,
        @CustomType.Parameter("physicalConnectionId") String physicalConnectionId,
        @CustomType.Parameter("physicalConnectionOwnerUid") String physicalConnectionOwnerUid,
        @CustomType.Parameter("physicalConnectionStatus") String physicalConnectionStatus,
        @CustomType.Parameter("recoveryTime") String recoveryTime,
        @CustomType.Parameter("routeTableId") String routeTableId,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("terminationTime") String terminationTime,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("virtualBorderRouterId") String virtualBorderRouterId,
        @CustomType.Parameter("virtualBorderRouterName") String virtualBorderRouterName,
        @CustomType.Parameter("vlanId") Integer vlanId,
        @CustomType.Parameter("vlanInterfaceId") String vlanInterfaceId) {
        this.accessPointId = accessPointId;
        this.activationTime = activationTime;
        this.circuitCode = circuitCode;
        this.cloudBoxInstanceId = cloudBoxInstanceId;
        this.createTime = createTime;
        this.description = description;
        this.detectMultiplier = detectMultiplier;
        this.eccId = eccId;
        this.enableIpv6 = enableIpv6;
        this.id = id;
        this.localGatewayIp = localGatewayIp;
        this.localIpv6GatewayIp = localIpv6GatewayIp;
        this.minRxInterval = minRxInterval;
        this.minTxInterval = minTxInterval;
        this.paymentVbrExpireTime = paymentVbrExpireTime;
        this.peerGatewayIp = peerGatewayIp;
        this.peerIpv6GatewayIp = peerIpv6GatewayIp;
        this.peeringIpv6SubnetMask = peeringIpv6SubnetMask;
        this.peeringSubnetMask = peeringSubnetMask;
        this.physicalConnectionBusinessStatus = physicalConnectionBusinessStatus;
        this.physicalConnectionId = physicalConnectionId;
        this.physicalConnectionOwnerUid = physicalConnectionOwnerUid;
        this.physicalConnectionStatus = physicalConnectionStatus;
        this.recoveryTime = recoveryTime;
        this.routeTableId = routeTableId;
        this.status = status;
        this.terminationTime = terminationTime;
        this.type = type;
        this.virtualBorderRouterId = virtualBorderRouterId;
        this.virtualBorderRouterName = virtualBorderRouterName;
        this.vlanId = vlanId;
        this.vlanInterfaceId = vlanInterfaceId;
    }

    /**
     * @return The physical leased line access point ID.
     * 
     */
    public String accessPointId() {
        return this.accessPointId;
    }
    /**
     * @return The first activation time of VBR.
     * 
     */
    public String activationTime() {
        return this.activationTime;
    }
    /**
     * @return Operators for physical connection circuit provided coding.
     * 
     */
    public String circuitCode() {
        return this.circuitCode;
    }
    /**
     * @return Box Instance Id.
     * 
     */
    public String cloudBoxInstanceId() {
        return this.cloudBoxInstanceId;
    }
    /**
     * @return The representative of the creation time resources attribute field.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The description of VBR. Length is from 2 to 256 characters, must start with a letter or the Chinese at the beginning, but not at the http:// Or https:// at the beginning.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Detection time multiplier that recipient allows the sender to send a message of the maximum allowable connections for the number of packets, used to detect whether the link normal. Value: 3~10.
     * 
     */
    public Integer detectMultiplier() {
        return this.detectMultiplier;
    }
    /**
     * @return High Speed Migration Service Instance Id.
     * 
     */
    public String eccId() {
        return this.eccId;
    }
    /**
     * @return Whether to Enable IPv6.
     * 
     */
    public Boolean enableIpv6() {
        return this.enableIpv6;
    }
    /**
     * @return The ID of the Virtual Border Router.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Alibaba Cloud-Connected IPv4 address.
     * 
     */
    public String localGatewayIp() {
        return this.localGatewayIp;
    }
    /**
     * @return Alibaba Cloud-Connected IPv6 Address.
     * 
     */
    public String localIpv6GatewayIp() {
        return this.localIpv6GatewayIp;
    }
    /**
     * @return Configure BFD packet reception interval of values include: 200~1000, unit: ms.
     * 
     */
    public Integer minRxInterval() {
        return this.minRxInterval;
    }
    /**
     * @return Configure BFD packet transmission interval maximum value: 200~1000, unit: ms.
     * 
     */
    public Integer minTxInterval() {
        return this.minTxInterval;
    }
    /**
     * @return The Billing of the Extended Time.
     * 
     */
    public String paymentVbrExpireTime() {
        return this.paymentVbrExpireTime;
    }
    /**
     * @return The Client-Side Interconnection IPv4 Address.
     * 
     */
    public String peerGatewayIp() {
        return this.peerGatewayIp;
    }
    /**
     * @return The Client-Side Interconnection IPv6 Address.
     * 
     */
    public String peerIpv6GatewayIp() {
        return this.peerIpv6GatewayIp;
    }
    /**
     * @return Alibaba Cloud-Connected IPv6 with Client-Side Interconnection IPv6 of Subnet Mask.
     * 
     */
    public String peeringIpv6SubnetMask() {
        return this.peeringIpv6SubnetMask;
    }
    /**
     * @return Alibaba Cloud-Connected IPv4 and Client-Side Interconnection IPv4 of Subnet Mask.
     * 
     */
    public String peeringSubnetMask() {
        return this.peeringSubnetMask;
    }
    /**
     * @return Physical Private Line Service Status Value Normal: Normal, financiallocked: If You Lock.
     * 
     */
    public String physicalConnectionBusinessStatus() {
        return this.physicalConnectionBusinessStatus;
    }
    /**
     * @return The ID of the Physical Connection to Which the ID.
     * 
     */
    public String physicalConnectionId() {
        return this.physicalConnectionId;
    }
    /**
     * @return Physical Private Line Where the Account ID.
     * 
     */
    public String physicalConnectionOwnerUid() {
        return this.physicalConnectionOwnerUid;
    }
    /**
     * @return Physical Private Line State.
     * 
     */
    public String physicalConnectionStatus() {
        return this.physicalConnectionStatus;
    }
    /**
     * @return The Last from a Terminated State to the Active State of the Time.
     * 
     */
    public String recoveryTime() {
        return this.recoveryTime;
    }
    /**
     * @return Route Table ID.
     * 
     */
    public String routeTableId() {
        return this.routeTableId;
    }
    /**
     * @return The VBR state.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The Most Recent Was Aborted by the Time.
     * 
     */
    public String terminationTime() {
        return this.terminationTime;
    }
    /**
     * @return VBR Type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The VBR ID.
     * 
     */
    public String virtualBorderRouterId() {
        return this.virtualBorderRouterId;
    }
    /**
     * @return The name of VBR. Length is from 2 to 128 characters, must start with a letter or the Chinese at the beginning can contain numbers, the underscore character (_) and dash (-). But do not start with http:// or https:// at the beginning.
     * 
     */
    public String virtualBorderRouterName() {
        return this.virtualBorderRouterName;
    }
    /**
     * @return The VLAN ID of the VBR. Value range: 0~2999.
     * 
     */
    public Integer vlanId() {
        return this.vlanId;
    }
    /**
     * @return The ID of the Router Interface.
     * 
     */
    public String vlanInterfaceId() {
        return this.vlanInterfaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualBorderRoutersRouter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessPointId;
        private String activationTime;
        private String circuitCode;
        private String cloudBoxInstanceId;
        private String createTime;
        private String description;
        private Integer detectMultiplier;
        private String eccId;
        private Boolean enableIpv6;
        private String id;
        private String localGatewayIp;
        private String localIpv6GatewayIp;
        private Integer minRxInterval;
        private Integer minTxInterval;
        private String paymentVbrExpireTime;
        private String peerGatewayIp;
        private String peerIpv6GatewayIp;
        private String peeringIpv6SubnetMask;
        private String peeringSubnetMask;
        private String physicalConnectionBusinessStatus;
        private String physicalConnectionId;
        private String physicalConnectionOwnerUid;
        private String physicalConnectionStatus;
        private String recoveryTime;
        private String routeTableId;
        private String status;
        private String terminationTime;
        private String type;
        private String virtualBorderRouterId;
        private String virtualBorderRouterName;
        private Integer vlanId;
        private String vlanInterfaceId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetVirtualBorderRoutersRouter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPointId = defaults.accessPointId;
    	      this.activationTime = defaults.activationTime;
    	      this.circuitCode = defaults.circuitCode;
    	      this.cloudBoxInstanceId = defaults.cloudBoxInstanceId;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.detectMultiplier = defaults.detectMultiplier;
    	      this.eccId = defaults.eccId;
    	      this.enableIpv6 = defaults.enableIpv6;
    	      this.id = defaults.id;
    	      this.localGatewayIp = defaults.localGatewayIp;
    	      this.localIpv6GatewayIp = defaults.localIpv6GatewayIp;
    	      this.minRxInterval = defaults.minRxInterval;
    	      this.minTxInterval = defaults.minTxInterval;
    	      this.paymentVbrExpireTime = defaults.paymentVbrExpireTime;
    	      this.peerGatewayIp = defaults.peerGatewayIp;
    	      this.peerIpv6GatewayIp = defaults.peerIpv6GatewayIp;
    	      this.peeringIpv6SubnetMask = defaults.peeringIpv6SubnetMask;
    	      this.peeringSubnetMask = defaults.peeringSubnetMask;
    	      this.physicalConnectionBusinessStatus = defaults.physicalConnectionBusinessStatus;
    	      this.physicalConnectionId = defaults.physicalConnectionId;
    	      this.physicalConnectionOwnerUid = defaults.physicalConnectionOwnerUid;
    	      this.physicalConnectionStatus = defaults.physicalConnectionStatus;
    	      this.recoveryTime = defaults.recoveryTime;
    	      this.routeTableId = defaults.routeTableId;
    	      this.status = defaults.status;
    	      this.terminationTime = defaults.terminationTime;
    	      this.type = defaults.type;
    	      this.virtualBorderRouterId = defaults.virtualBorderRouterId;
    	      this.virtualBorderRouterName = defaults.virtualBorderRouterName;
    	      this.vlanId = defaults.vlanId;
    	      this.vlanInterfaceId = defaults.vlanInterfaceId;
        }

        public Builder accessPointId(String accessPointId) {
            this.accessPointId = Objects.requireNonNull(accessPointId);
            return this;
        }
        public Builder activationTime(String activationTime) {
            this.activationTime = Objects.requireNonNull(activationTime);
            return this;
        }
        public Builder circuitCode(String circuitCode) {
            this.circuitCode = Objects.requireNonNull(circuitCode);
            return this;
        }
        public Builder cloudBoxInstanceId(String cloudBoxInstanceId) {
            this.cloudBoxInstanceId = Objects.requireNonNull(cloudBoxInstanceId);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder detectMultiplier(Integer detectMultiplier) {
            this.detectMultiplier = Objects.requireNonNull(detectMultiplier);
            return this;
        }
        public Builder eccId(String eccId) {
            this.eccId = Objects.requireNonNull(eccId);
            return this;
        }
        public Builder enableIpv6(Boolean enableIpv6) {
            this.enableIpv6 = Objects.requireNonNull(enableIpv6);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder localGatewayIp(String localGatewayIp) {
            this.localGatewayIp = Objects.requireNonNull(localGatewayIp);
            return this;
        }
        public Builder localIpv6GatewayIp(String localIpv6GatewayIp) {
            this.localIpv6GatewayIp = Objects.requireNonNull(localIpv6GatewayIp);
            return this;
        }
        public Builder minRxInterval(Integer minRxInterval) {
            this.minRxInterval = Objects.requireNonNull(minRxInterval);
            return this;
        }
        public Builder minTxInterval(Integer minTxInterval) {
            this.minTxInterval = Objects.requireNonNull(minTxInterval);
            return this;
        }
        public Builder paymentVbrExpireTime(String paymentVbrExpireTime) {
            this.paymentVbrExpireTime = Objects.requireNonNull(paymentVbrExpireTime);
            return this;
        }
        public Builder peerGatewayIp(String peerGatewayIp) {
            this.peerGatewayIp = Objects.requireNonNull(peerGatewayIp);
            return this;
        }
        public Builder peerIpv6GatewayIp(String peerIpv6GatewayIp) {
            this.peerIpv6GatewayIp = Objects.requireNonNull(peerIpv6GatewayIp);
            return this;
        }
        public Builder peeringIpv6SubnetMask(String peeringIpv6SubnetMask) {
            this.peeringIpv6SubnetMask = Objects.requireNonNull(peeringIpv6SubnetMask);
            return this;
        }
        public Builder peeringSubnetMask(String peeringSubnetMask) {
            this.peeringSubnetMask = Objects.requireNonNull(peeringSubnetMask);
            return this;
        }
        public Builder physicalConnectionBusinessStatus(String physicalConnectionBusinessStatus) {
            this.physicalConnectionBusinessStatus = Objects.requireNonNull(physicalConnectionBusinessStatus);
            return this;
        }
        public Builder physicalConnectionId(String physicalConnectionId) {
            this.physicalConnectionId = Objects.requireNonNull(physicalConnectionId);
            return this;
        }
        public Builder physicalConnectionOwnerUid(String physicalConnectionOwnerUid) {
            this.physicalConnectionOwnerUid = Objects.requireNonNull(physicalConnectionOwnerUid);
            return this;
        }
        public Builder physicalConnectionStatus(String physicalConnectionStatus) {
            this.physicalConnectionStatus = Objects.requireNonNull(physicalConnectionStatus);
            return this;
        }
        public Builder recoveryTime(String recoveryTime) {
            this.recoveryTime = Objects.requireNonNull(recoveryTime);
            return this;
        }
        public Builder routeTableId(String routeTableId) {
            this.routeTableId = Objects.requireNonNull(routeTableId);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder terminationTime(String terminationTime) {
            this.terminationTime = Objects.requireNonNull(terminationTime);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder virtualBorderRouterId(String virtualBorderRouterId) {
            this.virtualBorderRouterId = Objects.requireNonNull(virtualBorderRouterId);
            return this;
        }
        public Builder virtualBorderRouterName(String virtualBorderRouterName) {
            this.virtualBorderRouterName = Objects.requireNonNull(virtualBorderRouterName);
            return this;
        }
        public Builder vlanId(Integer vlanId) {
            this.vlanId = Objects.requireNonNull(vlanId);
            return this;
        }
        public Builder vlanInterfaceId(String vlanInterfaceId) {
            this.vlanInterfaceId = Objects.requireNonNull(vlanInterfaceId);
            return this;
        }        public GetVirtualBorderRoutersRouter build() {
            return new GetVirtualBorderRoutersRouter(accessPointId, activationTime, circuitCode, cloudBoxInstanceId, createTime, description, detectMultiplier, eccId, enableIpv6, id, localGatewayIp, localIpv6GatewayIp, minRxInterval, minTxInterval, paymentVbrExpireTime, peerGatewayIp, peerIpv6GatewayIp, peeringIpv6SubnetMask, peeringSubnetMask, physicalConnectionBusinessStatus, physicalConnectionId, physicalConnectionOwnerUid, physicalConnectionStatus, recoveryTime, routeTableId, status, terminationTime, type, virtualBorderRouterId, virtualBorderRouterName, vlanId, vlanInterfaceId);
        }
    }
}
