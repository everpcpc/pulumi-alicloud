// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.clickhouse.outputs;

import com.pulumi.alicloud.clickhouse.outputs.GetDbClustersClusterDbClusterAccessWhiteList;
import com.pulumi.alicloud.clickhouse.outputs.GetDbClustersClusterScaleOutStatus;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbClustersCluster {
    /**
     * @return Alibaba Cloud account Id.
     * 
     */
    private final String aliUid;
    /**
     * @return The ID of the business process flow.
     * 
     */
    private final String bid;
    /**
     * @return Instance family values include: Basic: Basic edition; HighAvailability: high availability edition.
     * 
     */
    private final String category;
    /**
     * @return The Commodity Code of the DBCluster.
     * 
     */
    private final String commodityCode;
    /**
     * @return Connection string.
     * 
     */
    private final String connectionString;
    /**
     * @return The control version of the DBCluster.
     * 
     */
    private final String controlVersion;
    /**
     * @return The creation time of the resource.
     * 
     */
    private final String createTime;
    /**
     * @return The db cluster access white list.
     * 
     */
    private final List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists;
    /**
     * @return The DBCluster description.
     * 
     */
    private final String dbClusterDescription;
    private final String dbClusterId;
    /**
     * @return The DBCluster network type.
     * 
     */
    private final String dbClusterNetworkType;
    /**
     * @return The DBCluster type.
     * 
     */
    private final String dbClusterType;
    /**
     * @return The node class of the DBCluster.
     * 
     */
    private final String dbNodeClass;
    /**
     * @return The node count of the DBCluster.
     * 
     */
    private final String dbNodeCount;
    /**
     * @return The node storage of the DBCluster.
     * 
     */
    private final String dbNodeStorage;
    /**
     * @return Key management service KMS key ID.
     * 
     */
    private final String encryptionKey;
    /**
     * @return Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
     * 
     */
    private final String encryptionType;
    /**
     * @return The Engine of the DBCluster.
     * 
     */
    private final String engine;
    /**
     * @return The engine version of the DBCluster.
     * 
     */
    private final String engineVersion;
    /**
     * @return The expiration time of the DBCluster.
     * 
     */
    private final String expireTime;
    /**
     * @return The ID of the DBCluster.
     * 
     */
    private final String id;
    /**
     * @return If the instance has expired.
     * 
     */
    private final String isExpired;
    /**
     * @return The lock mode of the DBCluster.
     * 
     */
    private final String lockMode;
    /**
     * @return Lock reason of the DBCluster.
     * 
     */
    private final String lockReason;
    /**
     * @return Examples of the maintenance window, in the format of hh:mmZ-hh:mm Z.
     * 
     */
    private final String maintainTime;
    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    private final String paymentType;
    /**
     * @return Connection port.
     * 
     */
    private final Integer port;
    /**
     * @return A public IP address for the connection.
     * 
     */
    private final String publicConnectionString;
    /**
     * @return Public network port.
     * 
     */
    private final String publicPort;
    /**
     * @return Scale state.
     * 
     */
    private final List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses;
    /**
     * @return The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     * 
     */
    private final String status;
    /**
     * @return Storage type of DBCluster. Valid values: `cloud_essd`, `cloud_efficiency`, `cloud_essd_pl2`, `cloud_essd_pl3`.
     * 
     */
    private final String storageType;
    /**
     * @return Support fallback scheme.
     * 
     */
    private final Integer supportBackup;
    /**
     * @return The system supports http port number.
     * 
     */
    private final Boolean supportHttpsPort;
    /**
     * @return Supports Mysql, and those of the ports.
     * 
     */
    private final Boolean supportMysqlPort;
    /**
     * @return Virtual Private Cloud (VPC cloud instance ID.
     * 
     */
    private final String vpcCloudInstanceId;
    /**
     * @return The VPC ID of the DBCluster.
     * 
     */
    private final String vpcId;
    /**
     * @return The vswitch id of the DBCluster.
     * 
     */
    private final String vswitchId;
    /**
     * @return The zone ID of the DBCluster.
     * 
     */
    private final String zoneId;

    @CustomType.Constructor
    private GetDbClustersCluster(
        @CustomType.Parameter("aliUid") String aliUid,
        @CustomType.Parameter("bid") String bid,
        @CustomType.Parameter("category") String category,
        @CustomType.Parameter("commodityCode") String commodityCode,
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("controlVersion") String controlVersion,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("dbClusterAccessWhiteLists") List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists,
        @CustomType.Parameter("dbClusterDescription") String dbClusterDescription,
        @CustomType.Parameter("dbClusterId") String dbClusterId,
        @CustomType.Parameter("dbClusterNetworkType") String dbClusterNetworkType,
        @CustomType.Parameter("dbClusterType") String dbClusterType,
        @CustomType.Parameter("dbNodeClass") String dbNodeClass,
        @CustomType.Parameter("dbNodeCount") String dbNodeCount,
        @CustomType.Parameter("dbNodeStorage") String dbNodeStorage,
        @CustomType.Parameter("encryptionKey") String encryptionKey,
        @CustomType.Parameter("encryptionType") String encryptionType,
        @CustomType.Parameter("engine") String engine,
        @CustomType.Parameter("engineVersion") String engineVersion,
        @CustomType.Parameter("expireTime") String expireTime,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isExpired") String isExpired,
        @CustomType.Parameter("lockMode") String lockMode,
        @CustomType.Parameter("lockReason") String lockReason,
        @CustomType.Parameter("maintainTime") String maintainTime,
        @CustomType.Parameter("paymentType") String paymentType,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("publicConnectionString") String publicConnectionString,
        @CustomType.Parameter("publicPort") String publicPort,
        @CustomType.Parameter("scaleOutStatuses") List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("storageType") String storageType,
        @CustomType.Parameter("supportBackup") Integer supportBackup,
        @CustomType.Parameter("supportHttpsPort") Boolean supportHttpsPort,
        @CustomType.Parameter("supportMysqlPort") Boolean supportMysqlPort,
        @CustomType.Parameter("vpcCloudInstanceId") String vpcCloudInstanceId,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchId") String vswitchId,
        @CustomType.Parameter("zoneId") String zoneId) {
        this.aliUid = aliUid;
        this.bid = bid;
        this.category = category;
        this.commodityCode = commodityCode;
        this.connectionString = connectionString;
        this.controlVersion = controlVersion;
        this.createTime = createTime;
        this.dbClusterAccessWhiteLists = dbClusterAccessWhiteLists;
        this.dbClusterDescription = dbClusterDescription;
        this.dbClusterId = dbClusterId;
        this.dbClusterNetworkType = dbClusterNetworkType;
        this.dbClusterType = dbClusterType;
        this.dbNodeClass = dbNodeClass;
        this.dbNodeCount = dbNodeCount;
        this.dbNodeStorage = dbNodeStorage;
        this.encryptionKey = encryptionKey;
        this.encryptionType = encryptionType;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.expireTime = expireTime;
        this.id = id;
        this.isExpired = isExpired;
        this.lockMode = lockMode;
        this.lockReason = lockReason;
        this.maintainTime = maintainTime;
        this.paymentType = paymentType;
        this.port = port;
        this.publicConnectionString = publicConnectionString;
        this.publicPort = publicPort;
        this.scaleOutStatuses = scaleOutStatuses;
        this.status = status;
        this.storageType = storageType;
        this.supportBackup = supportBackup;
        this.supportHttpsPort = supportHttpsPort;
        this.supportMysqlPort = supportMysqlPort;
        this.vpcCloudInstanceId = vpcCloudInstanceId;
        this.vpcId = vpcId;
        this.vswitchId = vswitchId;
        this.zoneId = zoneId;
    }

    /**
     * @return Alibaba Cloud account Id.
     * 
     */
    public String aliUid() {
        return this.aliUid;
    }
    /**
     * @return The ID of the business process flow.
     * 
     */
    public String bid() {
        return this.bid;
    }
    /**
     * @return Instance family values include: Basic: Basic edition; HighAvailability: high availability edition.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return The Commodity Code of the DBCluster.
     * 
     */
    public String commodityCode() {
        return this.commodityCode;
    }
    /**
     * @return Connection string.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The control version of the DBCluster.
     * 
     */
    public String controlVersion() {
        return this.controlVersion;
    }
    /**
     * @return The creation time of the resource.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The db cluster access white list.
     * 
     */
    public List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists() {
        return this.dbClusterAccessWhiteLists;
    }
    /**
     * @return The DBCluster description.
     * 
     */
    public String dbClusterDescription() {
        return this.dbClusterDescription;
    }
    public String dbClusterId() {
        return this.dbClusterId;
    }
    /**
     * @return The DBCluster network type.
     * 
     */
    public String dbClusterNetworkType() {
        return this.dbClusterNetworkType;
    }
    /**
     * @return The DBCluster type.
     * 
     */
    public String dbClusterType() {
        return this.dbClusterType;
    }
    /**
     * @return The node class of the DBCluster.
     * 
     */
    public String dbNodeClass() {
        return this.dbNodeClass;
    }
    /**
     * @return The node count of the DBCluster.
     * 
     */
    public String dbNodeCount() {
        return this.dbNodeCount;
    }
    /**
     * @return The node storage of the DBCluster.
     * 
     */
    public String dbNodeStorage() {
        return this.dbNodeStorage;
    }
    /**
     * @return Key management service KMS key ID.
     * 
     */
    public String encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
     * 
     */
    public String encryptionType() {
        return this.encryptionType;
    }
    /**
     * @return The Engine of the DBCluster.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The engine version of the DBCluster.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The expiration time of the DBCluster.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The ID of the DBCluster.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If the instance has expired.
     * 
     */
    public String isExpired() {
        return this.isExpired;
    }
    /**
     * @return The lock mode of the DBCluster.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return Lock reason of the DBCluster.
     * 
     */
    public String lockReason() {
        return this.lockReason;
    }
    /**
     * @return Examples of the maintenance window, in the format of hh:mmZ-hh:mm Z.
     * 
     */
    public String maintainTime() {
        return this.maintainTime;
    }
    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return Connection port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return A public IP address for the connection.
     * 
     */
    public String publicConnectionString() {
        return this.publicConnectionString;
    }
    /**
     * @return Public network port.
     * 
     */
    public String publicPort() {
        return this.publicPort;
    }
    /**
     * @return Scale state.
     * 
     */
    public List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses() {
        return this.scaleOutStatuses;
    }
    /**
     * @return The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Storage type of DBCluster. Valid values: `cloud_essd`, `cloud_efficiency`, `cloud_essd_pl2`, `cloud_essd_pl3`.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return Support fallback scheme.
     * 
     */
    public Integer supportBackup() {
        return this.supportBackup;
    }
    /**
     * @return The system supports http port number.
     * 
     */
    public Boolean supportHttpsPort() {
        return this.supportHttpsPort;
    }
    /**
     * @return Supports Mysql, and those of the ports.
     * 
     */
    public Boolean supportMysqlPort() {
        return this.supportMysqlPort;
    }
    /**
     * @return Virtual Private Cloud (VPC cloud instance ID.
     * 
     */
    public String vpcCloudInstanceId() {
        return this.vpcCloudInstanceId;
    }
    /**
     * @return The VPC ID of the DBCluster.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id of the DBCluster.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the DBCluster.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbClustersCluster defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String aliUid;
        private String bid;
        private String category;
        private String commodityCode;
        private String connectionString;
        private String controlVersion;
        private String createTime;
        private List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists;
        private String dbClusterDescription;
        private String dbClusterId;
        private String dbClusterNetworkType;
        private String dbClusterType;
        private String dbNodeClass;
        private String dbNodeCount;
        private String dbNodeStorage;
        private String encryptionKey;
        private String encryptionType;
        private String engine;
        private String engineVersion;
        private String expireTime;
        private String id;
        private String isExpired;
        private String lockMode;
        private String lockReason;
        private String maintainTime;
        private String paymentType;
        private Integer port;
        private String publicConnectionString;
        private String publicPort;
        private List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses;
        private String status;
        private String storageType;
        private Integer supportBackup;
        private Boolean supportHttpsPort;
        private Boolean supportMysqlPort;
        private String vpcCloudInstanceId;
        private String vpcId;
        private String vswitchId;
        private String zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDbClustersCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliUid = defaults.aliUid;
    	      this.bid = defaults.bid;
    	      this.category = defaults.category;
    	      this.commodityCode = defaults.commodityCode;
    	      this.connectionString = defaults.connectionString;
    	      this.controlVersion = defaults.controlVersion;
    	      this.createTime = defaults.createTime;
    	      this.dbClusterAccessWhiteLists = defaults.dbClusterAccessWhiteLists;
    	      this.dbClusterDescription = defaults.dbClusterDescription;
    	      this.dbClusterId = defaults.dbClusterId;
    	      this.dbClusterNetworkType = defaults.dbClusterNetworkType;
    	      this.dbClusterType = defaults.dbClusterType;
    	      this.dbNodeClass = defaults.dbNodeClass;
    	      this.dbNodeCount = defaults.dbNodeCount;
    	      this.dbNodeStorage = defaults.dbNodeStorage;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.encryptionType = defaults.encryptionType;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.expireTime = defaults.expireTime;
    	      this.id = defaults.id;
    	      this.isExpired = defaults.isExpired;
    	      this.lockMode = defaults.lockMode;
    	      this.lockReason = defaults.lockReason;
    	      this.maintainTime = defaults.maintainTime;
    	      this.paymentType = defaults.paymentType;
    	      this.port = defaults.port;
    	      this.publicConnectionString = defaults.publicConnectionString;
    	      this.publicPort = defaults.publicPort;
    	      this.scaleOutStatuses = defaults.scaleOutStatuses;
    	      this.status = defaults.status;
    	      this.storageType = defaults.storageType;
    	      this.supportBackup = defaults.supportBackup;
    	      this.supportHttpsPort = defaults.supportHttpsPort;
    	      this.supportMysqlPort = defaults.supportMysqlPort;
    	      this.vpcCloudInstanceId = defaults.vpcCloudInstanceId;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder aliUid(String aliUid) {
            this.aliUid = Objects.requireNonNull(aliUid);
            return this;
        }
        public Builder bid(String bid) {
            this.bid = Objects.requireNonNull(bid);
            return this;
        }
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        public Builder commodityCode(String commodityCode) {
            this.commodityCode = Objects.requireNonNull(commodityCode);
            return this;
        }
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder controlVersion(String controlVersion) {
            this.controlVersion = Objects.requireNonNull(controlVersion);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder dbClusterAccessWhiteLists(List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists) {
            this.dbClusterAccessWhiteLists = Objects.requireNonNull(dbClusterAccessWhiteLists);
            return this;
        }
        public Builder dbClusterAccessWhiteLists(GetDbClustersClusterDbClusterAccessWhiteList... dbClusterAccessWhiteLists) {
            return dbClusterAccessWhiteLists(List.of(dbClusterAccessWhiteLists));
        }
        public Builder dbClusterDescription(String dbClusterDescription) {
            this.dbClusterDescription = Objects.requireNonNull(dbClusterDescription);
            return this;
        }
        public Builder dbClusterId(String dbClusterId) {
            this.dbClusterId = Objects.requireNonNull(dbClusterId);
            return this;
        }
        public Builder dbClusterNetworkType(String dbClusterNetworkType) {
            this.dbClusterNetworkType = Objects.requireNonNull(dbClusterNetworkType);
            return this;
        }
        public Builder dbClusterType(String dbClusterType) {
            this.dbClusterType = Objects.requireNonNull(dbClusterType);
            return this;
        }
        public Builder dbNodeClass(String dbNodeClass) {
            this.dbNodeClass = Objects.requireNonNull(dbNodeClass);
            return this;
        }
        public Builder dbNodeCount(String dbNodeCount) {
            this.dbNodeCount = Objects.requireNonNull(dbNodeCount);
            return this;
        }
        public Builder dbNodeStorage(String dbNodeStorage) {
            this.dbNodeStorage = Objects.requireNonNull(dbNodeStorage);
            return this;
        }
        public Builder encryptionKey(String encryptionKey) {
            this.encryptionKey = Objects.requireNonNull(encryptionKey);
            return this;
        }
        public Builder encryptionType(String encryptionType) {
            this.encryptionType = Objects.requireNonNull(encryptionType);
            return this;
        }
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        public Builder engineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isExpired(String isExpired) {
            this.isExpired = Objects.requireNonNull(isExpired);
            return this;
        }
        public Builder lockMode(String lockMode) {
            this.lockMode = Objects.requireNonNull(lockMode);
            return this;
        }
        public Builder lockReason(String lockReason) {
            this.lockReason = Objects.requireNonNull(lockReason);
            return this;
        }
        public Builder maintainTime(String maintainTime) {
            this.maintainTime = Objects.requireNonNull(maintainTime);
            return this;
        }
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder publicConnectionString(String publicConnectionString) {
            this.publicConnectionString = Objects.requireNonNull(publicConnectionString);
            return this;
        }
        public Builder publicPort(String publicPort) {
            this.publicPort = Objects.requireNonNull(publicPort);
            return this;
        }
        public Builder scaleOutStatuses(List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses) {
            this.scaleOutStatuses = Objects.requireNonNull(scaleOutStatuses);
            return this;
        }
        public Builder scaleOutStatuses(GetDbClustersClusterScaleOutStatus... scaleOutStatuses) {
            return scaleOutStatuses(List.of(scaleOutStatuses));
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        public Builder supportBackup(Integer supportBackup) {
            this.supportBackup = Objects.requireNonNull(supportBackup);
            return this;
        }
        public Builder supportHttpsPort(Boolean supportHttpsPort) {
            this.supportHttpsPort = Objects.requireNonNull(supportHttpsPort);
            return this;
        }
        public Builder supportMysqlPort(Boolean supportMysqlPort) {
            this.supportMysqlPort = Objects.requireNonNull(supportMysqlPort);
            return this;
        }
        public Builder vpcCloudInstanceId(String vpcCloudInstanceId) {
            this.vpcCloudInstanceId = Objects.requireNonNull(vpcCloudInstanceId);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }        public GetDbClustersCluster build() {
            return new GetDbClustersCluster(aliUid, bid, category, commodityCode, connectionString, controlVersion, createTime, dbClusterAccessWhiteLists, dbClusterDescription, dbClusterId, dbClusterNetworkType, dbClusterType, dbNodeClass, dbNodeCount, dbNodeStorage, encryptionKey, encryptionType, engine, engineVersion, expireTime, id, isExpired, lockMode, lockReason, maintainTime, paymentType, port, publicConnectionString, publicPort, scaleOutStatuses, status, storageType, supportBackup, supportHttpsPort, supportMysqlPort, vpcCloudInstanceId, vpcId, vswitchId, zoneId);
        }
    }
}
