// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.actiontrail.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetTopicsTopic {
    /**
     * @return whether the current topic is kafka compact topic or not.
     * 
     */
    private final Boolean compactTopic;
    /**
     * @return Time of creation.
     * 
     */
    private final String createTime;
    /**
     * @return The ID of the topic, It is formatted to `&lt;instance_id&gt;:&lt;topic&gt;`.
     * 
     */
    private final String id;
    /**
     * @return ID of the instance.
     * 
     */
    private final String instanceId;
    /**
     * @return whether the current topic is kafka local topic or not.
     * 
     */
    private final Boolean localTopic;
    /**
     * @return Partition number of the topic.
     * 
     */
    private final Integer partitionNum;
    /**
     * @return Remark of the topic.
     * 
     */
    private final String remark;
    /**
     * @return The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
     * 
     */
    private final Integer status;
    /**
     * @return The status_name of the topic.
     * 
     */
    private final String statusName;
    /**
     * @return A mapping of tags to assign to the topic.
     * 
     */
    private final @Nullable Map<String,Object> tags;
    /**
     * @return A topic to filter results by the topic name.
     * 
     */
    private final String topic;

    @CustomType.Constructor
    private GetTopicsTopic(
        @CustomType.Parameter("compactTopic") Boolean compactTopic,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceId") String instanceId,
        @CustomType.Parameter("localTopic") Boolean localTopic,
        @CustomType.Parameter("partitionNum") Integer partitionNum,
        @CustomType.Parameter("remark") String remark,
        @CustomType.Parameter("status") Integer status,
        @CustomType.Parameter("statusName") String statusName,
        @CustomType.Parameter("tags") @Nullable Map<String,Object> tags,
        @CustomType.Parameter("topic") String topic) {
        this.compactTopic = compactTopic;
        this.createTime = createTime;
        this.id = id;
        this.instanceId = instanceId;
        this.localTopic = localTopic;
        this.partitionNum = partitionNum;
        this.remark = remark;
        this.status = status;
        this.statusName = statusName;
        this.tags = tags;
        this.topic = topic;
    }

    /**
     * @return whether the current topic is kafka compact topic or not.
     * 
     */
    public Boolean compactTopic() {
        return this.compactTopic;
    }
    /**
     * @return Time of creation.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the topic, It is formatted to `&lt;instance_id&gt;:&lt;topic&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return whether the current topic is kafka local topic or not.
     * 
     */
    public Boolean localTopic() {
        return this.localTopic;
    }
    /**
     * @return Partition number of the topic.
     * 
     */
    public Integer partitionNum() {
        return this.partitionNum;
    }
    /**
     * @return Remark of the topic.
     * 
     */
    public String remark() {
        return this.remark;
    }
    /**
     * @return The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
     * 
     */
    public Integer status() {
        return this.status;
    }
    /**
     * @return The status_name of the topic.
     * 
     */
    public String statusName() {
        return this.statusName;
    }
    /**
     * @return A mapping of tags to assign to the topic.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return A topic to filter results by the topic name.
     * 
     */
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTopicsTopic defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean compactTopic;
        private String createTime;
        private String id;
        private String instanceId;
        private Boolean localTopic;
        private Integer partitionNum;
        private String remark;
        private Integer status;
        private String statusName;
        private @Nullable Map<String,Object> tags;
        private String topic;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTopicsTopic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compactTopic = defaults.compactTopic;
    	      this.createTime = defaults.createTime;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.localTopic = defaults.localTopic;
    	      this.partitionNum = defaults.partitionNum;
    	      this.remark = defaults.remark;
    	      this.status = defaults.status;
    	      this.statusName = defaults.statusName;
    	      this.tags = defaults.tags;
    	      this.topic = defaults.topic;
        }

        public Builder compactTopic(Boolean compactTopic) {
            this.compactTopic = Objects.requireNonNull(compactTopic);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder localTopic(Boolean localTopic) {
            this.localTopic = Objects.requireNonNull(localTopic);
            return this;
        }
        public Builder partitionNum(Integer partitionNum) {
            this.partitionNum = Objects.requireNonNull(partitionNum);
            return this;
        }
        public Builder remark(String remark) {
            this.remark = Objects.requireNonNull(remark);
            return this;
        }
        public Builder status(Integer status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder statusName(String statusName) {
            this.statusName = Objects.requireNonNull(statusName);
            return this;
        }
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        public Builder topic(String topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }        public GetTopicsTopic build() {
            return new GetTopicsTopic(compactTopic, createTime, id, instanceId, localTopic, partitionNum, remark, status, statusName, tags, topic);
        }
    }
}
