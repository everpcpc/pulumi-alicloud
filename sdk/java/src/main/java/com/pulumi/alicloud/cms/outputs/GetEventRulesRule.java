// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.outputs;

import com.pulumi.alicloud.cms.outputs.GetEventRulesRuleEventPattern;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEventRulesRule {
    /**
     * @return The description of the rule.
     * 
     */
    private final String description;
    /**
     * @return Event mode, used to describe the trigger conditions for this event.
     * 
     */
    private final List<GetEventRulesRuleEventPattern> eventPatterns;
    /**
     * @return The name of the event rule.
     * 
     */
    private final String eventRuleName;
    /**
     * @return The type of event.
     * 
     */
    private final String eventType;
    /**
     * @return The ID of the application Group.
     * 
     */
    private final String groupId;
    /**
     * @return The ID of the Event Rule. Its value is same as Event Rule Name.
     * 
     */
    private final String id;
    /**
     * @return The mute period during which new alerts are not sent even if the trigger conditions are met.
     * 
     */
    private final Integer silenceTime;
    /**
     * @return The status of the resource.
     * 
     */
    private final String status;

    @CustomType.Constructor
    private GetEventRulesRule(
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("eventPatterns") List<GetEventRulesRuleEventPattern> eventPatterns,
        @CustomType.Parameter("eventRuleName") String eventRuleName,
        @CustomType.Parameter("eventType") String eventType,
        @CustomType.Parameter("groupId") String groupId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("silenceTime") Integer silenceTime,
        @CustomType.Parameter("status") String status) {
        this.description = description;
        this.eventPatterns = eventPatterns;
        this.eventRuleName = eventRuleName;
        this.eventType = eventType;
        this.groupId = groupId;
        this.id = id;
        this.silenceTime = silenceTime;
        this.status = status;
    }

    /**
     * @return The description of the rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Event mode, used to describe the trigger conditions for this event.
     * 
     */
    public List<GetEventRulesRuleEventPattern> eventPatterns() {
        return this.eventPatterns;
    }
    /**
     * @return The name of the event rule.
     * 
     */
    public String eventRuleName() {
        return this.eventRuleName;
    }
    /**
     * @return The type of event.
     * 
     */
    public String eventType() {
        return this.eventType;
    }
    /**
     * @return The ID of the application Group.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The ID of the Event Rule. Its value is same as Event Rule Name.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The mute period during which new alerts are not sent even if the trigger conditions are met.
     * 
     */
    public Integer silenceTime() {
        return this.silenceTime;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventRulesRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private List<GetEventRulesRuleEventPattern> eventPatterns;
        private String eventRuleName;
        private String eventType;
        private String groupId;
        private String id;
        private Integer silenceTime;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEventRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.eventPatterns = defaults.eventPatterns;
    	      this.eventRuleName = defaults.eventRuleName;
    	      this.eventType = defaults.eventType;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.silenceTime = defaults.silenceTime;
    	      this.status = defaults.status;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder eventPatterns(List<GetEventRulesRuleEventPattern> eventPatterns) {
            this.eventPatterns = Objects.requireNonNull(eventPatterns);
            return this;
        }
        public Builder eventPatterns(GetEventRulesRuleEventPattern... eventPatterns) {
            return eventPatterns(List.of(eventPatterns));
        }
        public Builder eventRuleName(String eventRuleName) {
            this.eventRuleName = Objects.requireNonNull(eventRuleName);
            return this;
        }
        public Builder eventType(String eventType) {
            this.eventType = Objects.requireNonNull(eventType);
            return this;
        }
        public Builder groupId(String groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder silenceTime(Integer silenceTime) {
            this.silenceTime = Objects.requireNonNull(silenceTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetEventRulesRule build() {
            return new GetEventRulesRule(description, eventPatterns, eventRuleName, eventType, groupId, id, silenceTime, status);
        }
    }
}
