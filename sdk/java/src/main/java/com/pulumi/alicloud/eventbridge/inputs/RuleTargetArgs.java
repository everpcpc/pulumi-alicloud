// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eventbridge.inputs;

import com.pulumi.alicloud.eventbridge.inputs.RuleTargetParamListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RuleTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleTargetArgs Empty = new RuleTargetArgs();

    /**
     * The endpoint of target.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return The endpoint of target.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * A list of param.
     * 
     */
    @Import(name="paramLists", required=true)
    private Output<List<RuleTargetParamListArgs>> paramLists;

    /**
     * @return A list of param.
     * 
     */
    public Output<List<RuleTargetParamListArgs>> paramLists() {
        return this.paramLists;
    }

    /**
     * The ID of target.
     * 
     */
    @Import(name="targetId", required=true)
    private Output<String> targetId;

    /**
     * @return The ID of target.
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }

    /**
     * The type of target. Valid values: `acs.fc.function`, `acs.mns.topic`, `acs.mns.queue`,`http`,`acs.sms`,`acs.mail`,`acs.dingtalk`,`https`, `acs.eventbridge`,`acs.rabbitmq` and `acs.rocketmq`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of target. Valid values: `acs.fc.function`, `acs.mns.topic`, `acs.mns.queue`,`http`,`acs.sms`,`acs.mail`,`acs.dingtalk`,`https`, `acs.eventbridge`,`acs.rabbitmq` and `acs.rocketmq`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private RuleTargetArgs() {}

    private RuleTargetArgs(RuleTargetArgs $) {
        this.endpoint = $.endpoint;
        this.paramLists = $.paramLists;
        this.targetId = $.targetId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleTargetArgs $;

        public Builder() {
            $ = new RuleTargetArgs();
        }

        public Builder(RuleTargetArgs defaults) {
            $ = new RuleTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpoint The endpoint of target.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The endpoint of target.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param paramLists A list of param.
         * 
         * @return builder
         * 
         */
        public Builder paramLists(Output<List<RuleTargetParamListArgs>> paramLists) {
            $.paramLists = paramLists;
            return this;
        }

        /**
         * @param paramLists A list of param.
         * 
         * @return builder
         * 
         */
        public Builder paramLists(List<RuleTargetParamListArgs> paramLists) {
            return paramLists(Output.of(paramLists));
        }

        /**
         * @param paramLists A list of param.
         * 
         * @return builder
         * 
         */
        public Builder paramLists(RuleTargetParamListArgs... paramLists) {
            return paramLists(List.of(paramLists));
        }

        /**
         * @param targetId The ID of target.
         * 
         * @return builder
         * 
         */
        public Builder targetId(Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The ID of target.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param type The type of target. Valid values: `acs.fc.function`, `acs.mns.topic`, `acs.mns.queue`,`http`,`acs.sms`,`acs.mail`,`acs.dingtalk`,`https`, `acs.eventbridge`,`acs.rabbitmq` and `acs.rocketmq`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of target. Valid values: `acs.fc.function`, `acs.mns.topic`, `acs.mns.queue`,`http`,`acs.sms`,`acs.mail`,`acs.dingtalk`,`https`, `acs.eventbridge`,`acs.rabbitmq` and `acs.rocketmq`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RuleTargetArgs build() {
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            $.paramLists = Objects.requireNonNull($.paramLists, "expected parameter 'paramLists' to be non-null");
            $.targetId = Objects.requireNonNull($.targetId, "expected parameter 'targetId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
