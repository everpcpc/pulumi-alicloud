// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.alicloud.arms.outputs.DispatchRuleNotifyRuleNotifyObject;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DispatchRuleNotifyRule {
    /**
     * @return The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
     * 
     */
    private final List<String> notifyChannels;
    /**
     * @return Sets the notification object. See the following `Block notify_objects`.
     * 
     */
    private final List<DispatchRuleNotifyRuleNotifyObject> notifyObjects;

    @CustomType.Constructor
    private DispatchRuleNotifyRule(
        @CustomType.Parameter("notifyChannels") List<String> notifyChannels,
        @CustomType.Parameter("notifyObjects") List<DispatchRuleNotifyRuleNotifyObject> notifyObjects) {
        this.notifyChannels = notifyChannels;
        this.notifyObjects = notifyObjects;
    }

    /**
     * @return The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
     * 
     */
    public List<String> notifyChannels() {
        return this.notifyChannels;
    }
    /**
     * @return Sets the notification object. See the following `Block notify_objects`.
     * 
     */
    public List<DispatchRuleNotifyRuleNotifyObject> notifyObjects() {
        return this.notifyObjects;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DispatchRuleNotifyRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> notifyChannels;
        private List<DispatchRuleNotifyRuleNotifyObject> notifyObjects;

        public Builder() {
    	      // Empty
        }

        public Builder(DispatchRuleNotifyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.notifyChannels = defaults.notifyChannels;
    	      this.notifyObjects = defaults.notifyObjects;
        }

        public Builder notifyChannels(List<String> notifyChannels) {
            this.notifyChannels = Objects.requireNonNull(notifyChannels);
            return this;
        }
        public Builder notifyChannels(String... notifyChannels) {
            return notifyChannels(List.of(notifyChannels));
        }
        public Builder notifyObjects(List<DispatchRuleNotifyRuleNotifyObject> notifyObjects) {
            this.notifyObjects = Objects.requireNonNull(notifyObjects);
            return this;
        }
        public Builder notifyObjects(DispatchRuleNotifyRuleNotifyObject... notifyObjects) {
            return notifyObjects(List.of(notifyObjects));
        }        public DispatchRuleNotifyRule build() {
            return new DispatchRuleNotifyRule(notifyChannels, notifyObjects);
        }
    }
}
