// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEcsBackupClientsClient {
    /**
     * @return The system architecture of client, only the ECS File Backup Client is available. Valid values: `AMD64` , `386`.
     * 
     */
    private final String archType;
    /**
     * @return Client protected status. Valid values: `UNPROTECTED`, `PROTECTED`.
     * 
     */
    private final String backupStatus;
    /**
     * @return The type of client. Valid values: `ECS_CLIENT` (ECS File Backup Client).
     * 
     */
    private final String clientType;
    /**
     * @return The version of client.
     * 
     */
    private final String clientVersion;
    /**
     * @return The creation time of client. Unix time in seconds.
     * 
     */
    private final String createTime;
    /**
     * @return The data plane access point type. Valid Values: `PUBLIC`, `VPC`, `CLASSIC`.
     * 
     */
    private final String dataNetworkType;
    /**
     * @return The data plane proxy settings. Valid Values: `DISABLE`, `USE_CONTROL_PROXY`, `CUSTOM`.
     * 
     */
    private final String dataProxySetting;
    /**
     * @return The first ID of the resource.
     * 
     */
    private final String ecsBackupClientId;
    /**
     * @return The hostname of ECS instance.
     * 
     */
    private final String hostname;
    /**
     * @return The ID of the Ecs Backup Client.
     * 
     */
    private final String id;
    /**
     * @return The ID of ECS instance. When the client type is ECS file backup client, it indicates the ID of ECS instance. When the client type is a local file backup client, it is a hardware fingerprint generated based on system information.
     * 
     */
    private final String instanceId;
    /**
     * @return The name of ECS instance.
     * 
     */
    private final String instanceName;
    /**
     * @return The last heartbeat time of client. Unix Time Seconds.
     * 
     */
    private final String lastHeartBeatTime;
    /**
     * @return The latest version of client.
     * 
     */
    private final String maxClientVersion;
    /**
     * @return The number of CPU cores used by a single backup task, 0 means no restrictions.
     * 
     */
    private final String maxCpuCore;
    /**
     * @return The number of concurrent jobs for a single backup task, 0 means no restrictions.
     * 
     */
    private final String maxWorker;
    /**
     * @return The operating system type of client, only the ECS File Backup Client is available. Valid values: `windows`, `linux`.
     * 
     */
    private final String osType;
    /**
     * @return Intranet IP address of the instance, only available for ECS file backup client.
     * 
     */
    private final String privateIpv4;
    /**
     * @return Custom data plane proxy server host address.
     * 
     */
    private final String proxyHost;
    /**
     * @return The password of custom data plane proxy server.
     * 
     */
    private final String proxyPassword;
    /**
     * @return Custom data plane proxy server host port.
     * 
     */
    private final String proxyPort;
    /**
     * @return The username of custom data plane proxy server.
     * 
     */
    private final String proxyUser;
    /**
     * @return The status of the resource.
     * 
     */
    private final String status;
    /**
     * @return The update time of client. Unix Time Seconds.
     * 
     */
    private final String updatedTime;
    /**
     * @return Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     * 
     */
    private final Boolean useHttps;
    /**
     * @return The ID of Zone.
     * 
     */
    private final String zoneId;

    @CustomType.Constructor
    private GetEcsBackupClientsClient(
        @CustomType.Parameter("archType") String archType,
        @CustomType.Parameter("backupStatus") String backupStatus,
        @CustomType.Parameter("clientType") String clientType,
        @CustomType.Parameter("clientVersion") String clientVersion,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("dataNetworkType") String dataNetworkType,
        @CustomType.Parameter("dataProxySetting") String dataProxySetting,
        @CustomType.Parameter("ecsBackupClientId") String ecsBackupClientId,
        @CustomType.Parameter("hostname") String hostname,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceId") String instanceId,
        @CustomType.Parameter("instanceName") String instanceName,
        @CustomType.Parameter("lastHeartBeatTime") String lastHeartBeatTime,
        @CustomType.Parameter("maxClientVersion") String maxClientVersion,
        @CustomType.Parameter("maxCpuCore") String maxCpuCore,
        @CustomType.Parameter("maxWorker") String maxWorker,
        @CustomType.Parameter("osType") String osType,
        @CustomType.Parameter("privateIpv4") String privateIpv4,
        @CustomType.Parameter("proxyHost") String proxyHost,
        @CustomType.Parameter("proxyPassword") String proxyPassword,
        @CustomType.Parameter("proxyPort") String proxyPort,
        @CustomType.Parameter("proxyUser") String proxyUser,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("updatedTime") String updatedTime,
        @CustomType.Parameter("useHttps") Boolean useHttps,
        @CustomType.Parameter("zoneId") String zoneId) {
        this.archType = archType;
        this.backupStatus = backupStatus;
        this.clientType = clientType;
        this.clientVersion = clientVersion;
        this.createTime = createTime;
        this.dataNetworkType = dataNetworkType;
        this.dataProxySetting = dataProxySetting;
        this.ecsBackupClientId = ecsBackupClientId;
        this.hostname = hostname;
        this.id = id;
        this.instanceId = instanceId;
        this.instanceName = instanceName;
        this.lastHeartBeatTime = lastHeartBeatTime;
        this.maxClientVersion = maxClientVersion;
        this.maxCpuCore = maxCpuCore;
        this.maxWorker = maxWorker;
        this.osType = osType;
        this.privateIpv4 = privateIpv4;
        this.proxyHost = proxyHost;
        this.proxyPassword = proxyPassword;
        this.proxyPort = proxyPort;
        this.proxyUser = proxyUser;
        this.status = status;
        this.updatedTime = updatedTime;
        this.useHttps = useHttps;
        this.zoneId = zoneId;
    }

    /**
     * @return The system architecture of client, only the ECS File Backup Client is available. Valid values: `AMD64` , `386`.
     * 
     */
    public String archType() {
        return this.archType;
    }
    /**
     * @return Client protected status. Valid values: `UNPROTECTED`, `PROTECTED`.
     * 
     */
    public String backupStatus() {
        return this.backupStatus;
    }
    /**
     * @return The type of client. Valid values: `ECS_CLIENT` (ECS File Backup Client).
     * 
     */
    public String clientType() {
        return this.clientType;
    }
    /**
     * @return The version of client.
     * 
     */
    public String clientVersion() {
        return this.clientVersion;
    }
    /**
     * @return The creation time of client. Unix time in seconds.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The data plane access point type. Valid Values: `PUBLIC`, `VPC`, `CLASSIC`.
     * 
     */
    public String dataNetworkType() {
        return this.dataNetworkType;
    }
    /**
     * @return The data plane proxy settings. Valid Values: `DISABLE`, `USE_CONTROL_PROXY`, `CUSTOM`.
     * 
     */
    public String dataProxySetting() {
        return this.dataProxySetting;
    }
    /**
     * @return The first ID of the resource.
     * 
     */
    public String ecsBackupClientId() {
        return this.ecsBackupClientId;
    }
    /**
     * @return The hostname of ECS instance.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The ID of the Ecs Backup Client.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of ECS instance. When the client type is ECS file backup client, it indicates the ID of ECS instance. When the client type is a local file backup client, it is a hardware fingerprint generated based on system information.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The name of ECS instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return The last heartbeat time of client. Unix Time Seconds.
     * 
     */
    public String lastHeartBeatTime() {
        return this.lastHeartBeatTime;
    }
    /**
     * @return The latest version of client.
     * 
     */
    public String maxClientVersion() {
        return this.maxClientVersion;
    }
    /**
     * @return The number of CPU cores used by a single backup task, 0 means no restrictions.
     * 
     */
    public String maxCpuCore() {
        return this.maxCpuCore;
    }
    /**
     * @return The number of concurrent jobs for a single backup task, 0 means no restrictions.
     * 
     */
    public String maxWorker() {
        return this.maxWorker;
    }
    /**
     * @return The operating system type of client, only the ECS File Backup Client is available. Valid values: `windows`, `linux`.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return Intranet IP address of the instance, only available for ECS file backup client.
     * 
     */
    public String privateIpv4() {
        return this.privateIpv4;
    }
    /**
     * @return Custom data plane proxy server host address.
     * 
     */
    public String proxyHost() {
        return this.proxyHost;
    }
    /**
     * @return The password of custom data plane proxy server.
     * 
     */
    public String proxyPassword() {
        return this.proxyPassword;
    }
    /**
     * @return Custom data plane proxy server host port.
     * 
     */
    public String proxyPort() {
        return this.proxyPort;
    }
    /**
     * @return The username of custom data plane proxy server.
     * 
     */
    public String proxyUser() {
        return this.proxyUser;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The update time of client. Unix Time Seconds.
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
     * 
     */
    public Boolean useHttps() {
        return this.useHttps;
    }
    /**
     * @return The ID of Zone.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEcsBackupClientsClient defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String archType;
        private String backupStatus;
        private String clientType;
        private String clientVersion;
        private String createTime;
        private String dataNetworkType;
        private String dataProxySetting;
        private String ecsBackupClientId;
        private String hostname;
        private String id;
        private String instanceId;
        private String instanceName;
        private String lastHeartBeatTime;
        private String maxClientVersion;
        private String maxCpuCore;
        private String maxWorker;
        private String osType;
        private String privateIpv4;
        private String proxyHost;
        private String proxyPassword;
        private String proxyPort;
        private String proxyUser;
        private String status;
        private String updatedTime;
        private Boolean useHttps;
        private String zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEcsBackupClientsClient defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archType = defaults.archType;
    	      this.backupStatus = defaults.backupStatus;
    	      this.clientType = defaults.clientType;
    	      this.clientVersion = defaults.clientVersion;
    	      this.createTime = defaults.createTime;
    	      this.dataNetworkType = defaults.dataNetworkType;
    	      this.dataProxySetting = defaults.dataProxySetting;
    	      this.ecsBackupClientId = defaults.ecsBackupClientId;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.lastHeartBeatTime = defaults.lastHeartBeatTime;
    	      this.maxClientVersion = defaults.maxClientVersion;
    	      this.maxCpuCore = defaults.maxCpuCore;
    	      this.maxWorker = defaults.maxWorker;
    	      this.osType = defaults.osType;
    	      this.privateIpv4 = defaults.privateIpv4;
    	      this.proxyHost = defaults.proxyHost;
    	      this.proxyPassword = defaults.proxyPassword;
    	      this.proxyPort = defaults.proxyPort;
    	      this.proxyUser = defaults.proxyUser;
    	      this.status = defaults.status;
    	      this.updatedTime = defaults.updatedTime;
    	      this.useHttps = defaults.useHttps;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder archType(String archType) {
            this.archType = Objects.requireNonNull(archType);
            return this;
        }
        public Builder backupStatus(String backupStatus) {
            this.backupStatus = Objects.requireNonNull(backupStatus);
            return this;
        }
        public Builder clientType(String clientType) {
            this.clientType = Objects.requireNonNull(clientType);
            return this;
        }
        public Builder clientVersion(String clientVersion) {
            this.clientVersion = Objects.requireNonNull(clientVersion);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder dataNetworkType(String dataNetworkType) {
            this.dataNetworkType = Objects.requireNonNull(dataNetworkType);
            return this;
        }
        public Builder dataProxySetting(String dataProxySetting) {
            this.dataProxySetting = Objects.requireNonNull(dataProxySetting);
            return this;
        }
        public Builder ecsBackupClientId(String ecsBackupClientId) {
            this.ecsBackupClientId = Objects.requireNonNull(ecsBackupClientId);
            return this;
        }
        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder instanceName(String instanceName) {
            this.instanceName = Objects.requireNonNull(instanceName);
            return this;
        }
        public Builder lastHeartBeatTime(String lastHeartBeatTime) {
            this.lastHeartBeatTime = Objects.requireNonNull(lastHeartBeatTime);
            return this;
        }
        public Builder maxClientVersion(String maxClientVersion) {
            this.maxClientVersion = Objects.requireNonNull(maxClientVersion);
            return this;
        }
        public Builder maxCpuCore(String maxCpuCore) {
            this.maxCpuCore = Objects.requireNonNull(maxCpuCore);
            return this;
        }
        public Builder maxWorker(String maxWorker) {
            this.maxWorker = Objects.requireNonNull(maxWorker);
            return this;
        }
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        public Builder privateIpv4(String privateIpv4) {
            this.privateIpv4 = Objects.requireNonNull(privateIpv4);
            return this;
        }
        public Builder proxyHost(String proxyHost) {
            this.proxyHost = Objects.requireNonNull(proxyHost);
            return this;
        }
        public Builder proxyPassword(String proxyPassword) {
            this.proxyPassword = Objects.requireNonNull(proxyPassword);
            return this;
        }
        public Builder proxyPort(String proxyPort) {
            this.proxyPort = Objects.requireNonNull(proxyPort);
            return this;
        }
        public Builder proxyUser(String proxyUser) {
            this.proxyUser = Objects.requireNonNull(proxyUser);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder updatedTime(String updatedTime) {
            this.updatedTime = Objects.requireNonNull(updatedTime);
            return this;
        }
        public Builder useHttps(Boolean useHttps) {
            this.useHttps = Objects.requireNonNull(useHttps);
            return this;
        }
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }        public GetEcsBackupClientsClient build() {
            return new GetEcsBackupClientsClient(archType, backupStatus, clientType, clientVersion, createTime, dataNetworkType, dataProxySetting, ecsBackupClientId, hostname, id, instanceId, instanceName, lastHeartBeatTime, maxClientVersion, maxCpuCore, maxWorker, osType, privateIpv4, proxyHost, proxyPassword, proxyPort, proxyUser, status, updatedTime, useHttps, zoneId);
        }
    }
}
