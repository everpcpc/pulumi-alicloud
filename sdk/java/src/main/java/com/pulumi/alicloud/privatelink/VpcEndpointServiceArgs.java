// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.privatelink;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcEndpointServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcEndpointServiceArgs Empty = new VpcEndpointServiceArgs();

    /**
     * Whether to automatically accept terminal node connections.
     * 
     */
    @Import(name="autoAcceptConnection")
    private @Nullable Output<Boolean> autoAcceptConnection;

    /**
     * @return Whether to automatically accept terminal node connections.
     * 
     */
    public Optional<Output<Boolean>> autoAcceptConnection() {
        return Optional.ofNullable(this.autoAcceptConnection);
    }

    /**
     * The connection bandwidth.
     * 
     */
    @Import(name="connectBandwidth")
    private @Nullable Output<Integer> connectBandwidth;

    /**
     * @return The connection bandwidth.
     * 
     */
    public Optional<Output<Integer>> connectBandwidth() {
        return Optional.ofNullable(this.connectBandwidth);
    }

    /**
     * Whether to pre-check this request only. Default to: `false`
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Whether to pre-check this request only. Default to: `false`
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
     * 
     */
    @Import(name="payer")
    private @Nullable Output<String> payer;

    /**
     * @return The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
     * 
     */
    public Optional<Output<String>> payer() {
        return Optional.ofNullable(this.payer);
    }

    /**
     * The description of the terminal node service.
     * 
     */
    @Import(name="serviceDescription")
    private @Nullable Output<String> serviceDescription;

    /**
     * @return The description of the terminal node service.
     * 
     */
    public Optional<Output<String>> serviceDescription() {
        return Optional.ofNullable(this.serviceDescription);
    }

    private VpcEndpointServiceArgs() {}

    private VpcEndpointServiceArgs(VpcEndpointServiceArgs $) {
        this.autoAcceptConnection = $.autoAcceptConnection;
        this.connectBandwidth = $.connectBandwidth;
        this.dryRun = $.dryRun;
        this.payer = $.payer;
        this.serviceDescription = $.serviceDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcEndpointServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcEndpointServiceArgs $;

        public Builder() {
            $ = new VpcEndpointServiceArgs();
        }

        public Builder(VpcEndpointServiceArgs defaults) {
            $ = new VpcEndpointServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoAcceptConnection Whether to automatically accept terminal node connections.
         * 
         * @return builder
         * 
         */
        public Builder autoAcceptConnection(@Nullable Output<Boolean> autoAcceptConnection) {
            $.autoAcceptConnection = autoAcceptConnection;
            return this;
        }

        /**
         * @param autoAcceptConnection Whether to automatically accept terminal node connections.
         * 
         * @return builder
         * 
         */
        public Builder autoAcceptConnection(Boolean autoAcceptConnection) {
            return autoAcceptConnection(Output.of(autoAcceptConnection));
        }

        /**
         * @param connectBandwidth The connection bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder connectBandwidth(@Nullable Output<Integer> connectBandwidth) {
            $.connectBandwidth = connectBandwidth;
            return this;
        }

        /**
         * @param connectBandwidth The connection bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder connectBandwidth(Integer connectBandwidth) {
            return connectBandwidth(Output.of(connectBandwidth));
        }

        /**
         * @param dryRun Whether to pre-check this request only. Default to: `false`
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Whether to pre-check this request only. Default to: `false`
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param payer The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
         * 
         * @return builder
         * 
         */
        public Builder payer(@Nullable Output<String> payer) {
            $.payer = payer;
            return this;
        }

        /**
         * @param payer The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
         * 
         * @return builder
         * 
         */
        public Builder payer(String payer) {
            return payer(Output.of(payer));
        }

        /**
         * @param serviceDescription The description of the terminal node service.
         * 
         * @return builder
         * 
         */
        public Builder serviceDescription(@Nullable Output<String> serviceDescription) {
            $.serviceDescription = serviceDescription;
            return this;
        }

        /**
         * @param serviceDescription The description of the terminal node service.
         * 
         * @return builder
         * 
         */
        public Builder serviceDescription(String serviceDescription) {
            return serviceDescription(Output.of(serviceDescription));
        }

        public VpcEndpointServiceArgs build() {
            return $;
        }
    }

}
