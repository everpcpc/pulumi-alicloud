// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.waf.outputs;

import com.pulumi.alicloud.waf.outputs.GetDomainsDomainLogHeader;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsDomain {
    /**
     * @return The type of the WAF cluster.
     * 
     */
    private final String clusterType;
    /**
     * @return The CNAME record assigned by the WAF instance to the specified domain.
     * 
     */
    private final String cname;
    /**
     * @return The connection timeout for WAF exclusive clusters. Valid values: `PhysicalCluster` and `VirtualCluster`. Default to `PhysicalCluster`.
     * 
     */
    private final Integer connectionTime;
    /**
     * @return Field `domain` has been deprecated from version 1.94.0. Use `domain_name` instead.
     * 
     */
    private final String domain;
    /**
     * @return Name of the domain.
     * 
     */
    private final String domainName;
    /**
     * @return List of the HTTP 2.0 ports.
     * 
     */
    private final List<String> http2Ports;
    /**
     * @return List of the HTTP ports.
     * 
     */
    private final List<String> httpPorts;
    /**
     * @return Specifies whether to enable the HTTP back-to-origin feature. After this feature is enabled, the WAF instance can use HTTP to forward HTTPS requests to the origin server.
     * 
     */
    private final String httpToUserIp;
    /**
     * @return List of the HTTPS ports.
     * 
     */
    private final List<String> httpsPorts;
    /**
     * @return Specifies whether to redirect HTTP requests as HTTPS requests. Valid values: `On` and `Off`. Default to `Off`.
     * 
     */
    private final String httpsRedirect;
    /**
     * @return The ID of domain self ID, value as `domain_name`.
     * 
     */
    private final String id;
    /**
     * @return Specifies whether to configure a Layer-7 proxy, such as Anti-DDoS Pro or CDN, to filter the inbound traffic before it is forwarded to WAF. Valid values: `On` and &#34;Off&#34;. Default to `Off`.
     * 
     */
    private final String isAccessProduct;
    /**
     * @return The load balancing algorithm that is used to forward requests to the origin. Valid values: `IpHash` and `RoundRobin`. Default to `IpHash`.
     * 
     */
    private final String loadBalancing;
    /**
     * @return The key-value pair that is used to mark the traffic that flows through WAF to the domain. Each item contains two field:
     * 
     */
    private final List<GetDomainsDomainLogHeader> logHeaders;
    /**
     * @return The read timeout of a WAF exclusive cluster. Unit: seconds.
     * 
     */
    private final Integer readTime;
    /**
     * @return The ID of the resource group to which the queried domain belongs in Resource Management.
     * 
     */
    private final String resourceGroupId;
    /**
     * @return List of the IP address or domain of the origin server to which the specified domain points.
     * 
     */
    private final List<String> sourceIps;
    /**
     * @return The system data identifier that is used to control optimistic locking.
     * 
     */
    private final Integer version;
    /**
     * @return The timeout period for a WAF exclusive cluster write connection. Unit: seconds.
     * 
     */
    private final Integer writeTime;

    @CustomType.Constructor
    private GetDomainsDomain(
        @CustomType.Parameter("clusterType") String clusterType,
        @CustomType.Parameter("cname") String cname,
        @CustomType.Parameter("connectionTime") Integer connectionTime,
        @CustomType.Parameter("domain") String domain,
        @CustomType.Parameter("domainName") String domainName,
        @CustomType.Parameter("http2Ports") List<String> http2Ports,
        @CustomType.Parameter("httpPorts") List<String> httpPorts,
        @CustomType.Parameter("httpToUserIp") String httpToUserIp,
        @CustomType.Parameter("httpsPorts") List<String> httpsPorts,
        @CustomType.Parameter("httpsRedirect") String httpsRedirect,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isAccessProduct") String isAccessProduct,
        @CustomType.Parameter("loadBalancing") String loadBalancing,
        @CustomType.Parameter("logHeaders") List<GetDomainsDomainLogHeader> logHeaders,
        @CustomType.Parameter("readTime") Integer readTime,
        @CustomType.Parameter("resourceGroupId") String resourceGroupId,
        @CustomType.Parameter("sourceIps") List<String> sourceIps,
        @CustomType.Parameter("version") Integer version,
        @CustomType.Parameter("writeTime") Integer writeTime) {
        this.clusterType = clusterType;
        this.cname = cname;
        this.connectionTime = connectionTime;
        this.domain = domain;
        this.domainName = domainName;
        this.http2Ports = http2Ports;
        this.httpPorts = httpPorts;
        this.httpToUserIp = httpToUserIp;
        this.httpsPorts = httpsPorts;
        this.httpsRedirect = httpsRedirect;
        this.id = id;
        this.isAccessProduct = isAccessProduct;
        this.loadBalancing = loadBalancing;
        this.logHeaders = logHeaders;
        this.readTime = readTime;
        this.resourceGroupId = resourceGroupId;
        this.sourceIps = sourceIps;
        this.version = version;
        this.writeTime = writeTime;
    }

    /**
     * @return The type of the WAF cluster.
     * 
     */
    public String clusterType() {
        return this.clusterType;
    }
    /**
     * @return The CNAME record assigned by the WAF instance to the specified domain.
     * 
     */
    public String cname() {
        return this.cname;
    }
    /**
     * @return The connection timeout for WAF exclusive clusters. Valid values: `PhysicalCluster` and `VirtualCluster`. Default to `PhysicalCluster`.
     * 
     */
    public Integer connectionTime() {
        return this.connectionTime;
    }
    /**
     * @return Field `domain` has been deprecated from version 1.94.0. Use `domain_name` instead.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Name of the domain.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return List of the HTTP 2.0 ports.
     * 
     */
    public List<String> http2Ports() {
        return this.http2Ports;
    }
    /**
     * @return List of the HTTP ports.
     * 
     */
    public List<String> httpPorts() {
        return this.httpPorts;
    }
    /**
     * @return Specifies whether to enable the HTTP back-to-origin feature. After this feature is enabled, the WAF instance can use HTTP to forward HTTPS requests to the origin server.
     * 
     */
    public String httpToUserIp() {
        return this.httpToUserIp;
    }
    /**
     * @return List of the HTTPS ports.
     * 
     */
    public List<String> httpsPorts() {
        return this.httpsPorts;
    }
    /**
     * @return Specifies whether to redirect HTTP requests as HTTPS requests. Valid values: `On` and `Off`. Default to `Off`.
     * 
     */
    public String httpsRedirect() {
        return this.httpsRedirect;
    }
    /**
     * @return The ID of domain self ID, value as `domain_name`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies whether to configure a Layer-7 proxy, such as Anti-DDoS Pro or CDN, to filter the inbound traffic before it is forwarded to WAF. Valid values: `On` and &#34;Off&#34;. Default to `Off`.
     * 
     */
    public String isAccessProduct() {
        return this.isAccessProduct;
    }
    /**
     * @return The load balancing algorithm that is used to forward requests to the origin. Valid values: `IpHash` and `RoundRobin`. Default to `IpHash`.
     * 
     */
    public String loadBalancing() {
        return this.loadBalancing;
    }
    /**
     * @return The key-value pair that is used to mark the traffic that flows through WAF to the domain. Each item contains two field:
     * 
     */
    public List<GetDomainsDomainLogHeader> logHeaders() {
        return this.logHeaders;
    }
    /**
     * @return The read timeout of a WAF exclusive cluster. Unit: seconds.
     * 
     */
    public Integer readTime() {
        return this.readTime;
    }
    /**
     * @return The ID of the resource group to which the queried domain belongs in Resource Management.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return List of the IP address or domain of the origin server to which the specified domain points.
     * 
     */
    public List<String> sourceIps() {
        return this.sourceIps;
    }
    /**
     * @return The system data identifier that is used to control optimistic locking.
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return The timeout period for a WAF exclusive cluster write connection. Unit: seconds.
     * 
     */
    public Integer writeTime() {
        return this.writeTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsDomain defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clusterType;
        private String cname;
        private Integer connectionTime;
        private String domain;
        private String domainName;
        private List<String> http2Ports;
        private List<String> httpPorts;
        private String httpToUserIp;
        private List<String> httpsPorts;
        private String httpsRedirect;
        private String id;
        private String isAccessProduct;
        private String loadBalancing;
        private List<GetDomainsDomainLogHeader> logHeaders;
        private Integer readTime;
        private String resourceGroupId;
        private List<String> sourceIps;
        private Integer version;
        private Integer writeTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDomainsDomain defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterType = defaults.clusterType;
    	      this.cname = defaults.cname;
    	      this.connectionTime = defaults.connectionTime;
    	      this.domain = defaults.domain;
    	      this.domainName = defaults.domainName;
    	      this.http2Ports = defaults.http2Ports;
    	      this.httpPorts = defaults.httpPorts;
    	      this.httpToUserIp = defaults.httpToUserIp;
    	      this.httpsPorts = defaults.httpsPorts;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.id = defaults.id;
    	      this.isAccessProduct = defaults.isAccessProduct;
    	      this.loadBalancing = defaults.loadBalancing;
    	      this.logHeaders = defaults.logHeaders;
    	      this.readTime = defaults.readTime;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.sourceIps = defaults.sourceIps;
    	      this.version = defaults.version;
    	      this.writeTime = defaults.writeTime;
        }

        public Builder clusterType(String clusterType) {
            this.clusterType = Objects.requireNonNull(clusterType);
            return this;
        }
        public Builder cname(String cname) {
            this.cname = Objects.requireNonNull(cname);
            return this;
        }
        public Builder connectionTime(Integer connectionTime) {
            this.connectionTime = Objects.requireNonNull(connectionTime);
            return this;
        }
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        public Builder http2Ports(List<String> http2Ports) {
            this.http2Ports = Objects.requireNonNull(http2Ports);
            return this;
        }
        public Builder http2Ports(String... http2Ports) {
            return http2Ports(List.of(http2Ports));
        }
        public Builder httpPorts(List<String> httpPorts) {
            this.httpPorts = Objects.requireNonNull(httpPorts);
            return this;
        }
        public Builder httpPorts(String... httpPorts) {
            return httpPorts(List.of(httpPorts));
        }
        public Builder httpToUserIp(String httpToUserIp) {
            this.httpToUserIp = Objects.requireNonNull(httpToUserIp);
            return this;
        }
        public Builder httpsPorts(List<String> httpsPorts) {
            this.httpsPorts = Objects.requireNonNull(httpsPorts);
            return this;
        }
        public Builder httpsPorts(String... httpsPorts) {
            return httpsPorts(List.of(httpsPorts));
        }
        public Builder httpsRedirect(String httpsRedirect) {
            this.httpsRedirect = Objects.requireNonNull(httpsRedirect);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isAccessProduct(String isAccessProduct) {
            this.isAccessProduct = Objects.requireNonNull(isAccessProduct);
            return this;
        }
        public Builder loadBalancing(String loadBalancing) {
            this.loadBalancing = Objects.requireNonNull(loadBalancing);
            return this;
        }
        public Builder logHeaders(List<GetDomainsDomainLogHeader> logHeaders) {
            this.logHeaders = Objects.requireNonNull(logHeaders);
            return this;
        }
        public Builder logHeaders(GetDomainsDomainLogHeader... logHeaders) {
            return logHeaders(List.of(logHeaders));
        }
        public Builder readTime(Integer readTime) {
            this.readTime = Objects.requireNonNull(readTime);
            return this;
        }
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        public Builder sourceIps(List<String> sourceIps) {
            this.sourceIps = Objects.requireNonNull(sourceIps);
            return this;
        }
        public Builder sourceIps(String... sourceIps) {
            return sourceIps(List.of(sourceIps));
        }
        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder writeTime(Integer writeTime) {
            this.writeTime = Objects.requireNonNull(writeTime);
            return this;
        }        public GetDomainsDomain build() {
            return new GetDomainsDomain(clusterType, cname, connectionTime, domain, domainName, http2Ports, httpPorts, httpToUserIp, httpsPorts, httpsRedirect, id, isAccessProduct, loadBalancing, logHeaders, readTime, resourceGroupId, sourceIps, version, writeTime);
        }
    }
}
