// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealTimeLogDeliveryState extends com.pulumi.resources.ResourceArgs {

    public static final RealTimeLogDeliveryState Empty = new RealTimeLogDeliveryState();

    /**
     * The accelerated domain name for which you want to configure real-time log delivery. You can specify multiple domain names and separate them with commas (,).
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The accelerated domain name for which you want to configure real-time log delivery. You can specify multiple domain names and separate them with commas (,).
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.
     * 
     */
    @Import(name="logstore")
    private @Nullable Output<String> logstore;

    /**
     * @return The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.
     * 
     */
    public Optional<Output<String>> logstore() {
        return Optional.ofNullable(this.logstore);
    }

    /**
     * The name of the Log Service project that is used for real-time log delivery.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The name of the Log Service project that is used for real-time log delivery.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region where the Log Service project is deployed.
     * 
     * &gt; **NOTE:** If your Project and Logstore services already exist, if you continue to create existing content, the created content will overwrite your existing indexes and custom reports. Please be careful to create your existing services to avoid affecting your online services after coverage.
     * 
     */
    @Import(name="slsRegion")
    private @Nullable Output<String> slsRegion;

    /**
     * @return The region where the Log Service project is deployed.
     * 
     * &gt; **NOTE:** If your Project and Logstore services already exist, if you continue to create existing content, the created content will overwrite your existing indexes and custom reports. Please be careful to create your existing services to avoid affecting your online services after coverage.
     * 
     */
    public Optional<Output<String>> slsRegion() {
        return Optional.ofNullable(this.slsRegion);
    }

    /**
     * The status of the real-time log delivery feature. Valid Values: `online` and `offline`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the real-time log delivery feature. Valid Values: `online` and `offline`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private RealTimeLogDeliveryState() {}

    private RealTimeLogDeliveryState(RealTimeLogDeliveryState $) {
        this.domain = $.domain;
        this.logstore = $.logstore;
        this.project = $.project;
        this.slsRegion = $.slsRegion;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealTimeLogDeliveryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealTimeLogDeliveryState $;

        public Builder() {
            $ = new RealTimeLogDeliveryState();
        }

        public Builder(RealTimeLogDeliveryState defaults) {
            $ = new RealTimeLogDeliveryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The accelerated domain name for which you want to configure real-time log delivery. You can specify multiple domain names and separate them with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The accelerated domain name for which you want to configure real-time log delivery. You can specify multiple domain names and separate them with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param logstore The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.
         * 
         * @return builder
         * 
         */
        public Builder logstore(@Nullable Output<String> logstore) {
            $.logstore = logstore;
            return this;
        }

        /**
         * @param logstore The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.
         * 
         * @return builder
         * 
         */
        public Builder logstore(String logstore) {
            return logstore(Output.of(logstore));
        }

        /**
         * @param project The name of the Log Service project that is used for real-time log delivery.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name of the Log Service project that is used for real-time log delivery.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param slsRegion The region where the Log Service project is deployed.
         * 
         * &gt; **NOTE:** If your Project and Logstore services already exist, if you continue to create existing content, the created content will overwrite your existing indexes and custom reports. Please be careful to create your existing services to avoid affecting your online services after coverage.
         * 
         * @return builder
         * 
         */
        public Builder slsRegion(@Nullable Output<String> slsRegion) {
            $.slsRegion = slsRegion;
            return this;
        }

        /**
         * @param slsRegion The region where the Log Service project is deployed.
         * 
         * &gt; **NOTE:** If your Project and Logstore services already exist, if you continue to create existing content, the created content will overwrite your existing indexes and custom reports. Please be careful to create your existing services to avoid affecting your online services after coverage.
         * 
         * @return builder
         * 
         */
        public Builder slsRegion(String slsRegion) {
            return slsRegion(Output.of(slsRegion));
        }

        /**
         * @param status The status of the real-time log delivery feature. Valid Values: `online` and `offline`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the real-time log delivery feature. Valid Values: `online` and `offline`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public RealTimeLogDeliveryState build() {
            return $;
        }
    }

}
