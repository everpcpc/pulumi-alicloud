// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cfg.outputs;

import com.pulumi.alicloud.cfg.outputs.GetRulesRuleCompliance;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRulesRule {
    private final String accountId;
    private final String compliancePackId;
    /**
     * @return The information about the compliance evaluations based on the rule.
     * 
     */
    private final List<GetRulesRuleCompliance> compliances;
    private final String configRuleArn;
    private final String configRuleId;
    /**
     * @return Field `config_rule_state` has been deprecated from provider version 1.124.1. New field `status` instead.
     * 
     */
    private final String configRuleState;
    /**
     * @return (Available in 1.124.1+) A list of trigger types of config rule.
     * 
     */
    private final String configRuleTriggerTypes;
    private final String description;
    /**
     * @return Event source of the Config Rule.
     * 
     */
    private final String eventSource;
    /**
     * @return (Available in 1.124.1+) The scope of exclude of resource ids.
     * 
     */
    private final String excludeResourceIdsScope;
    /**
     * @return The ID of the Config Rule.
     * * `account_id`- The ID of the Alicloud account.
     * * `config_rule_arn`- The ARN of the Config Rule.
     * * `config_rule_id`- The ID of the Config Rule.
     * * `config_rule_state`- The state of the Config Rule.
     * * `description`- The description of the Config Rule.
     * * `input_parameters`- The input parameters of the Config Rule.
     * * `modified_timestamp`- the timestamp of the Config Rule modified.
     * * `risk_level`- The risk level of the Config Rule.
     * * `rule_name`- The name of the Config Rule.
     * 
     */
    private final String id;
    private final Map<String,Object> inputParameters;
    /**
     * @return (Available in 1.124.1+) The frequency of maximum execution.
     * 
     */
    private final String maximumExecutionFrequency;
    private final String modifiedTimestamp;
    /**
     * @return (Available in 1.124.1+) The scope of region ids.
     * 
     */
    private final String regionIdsScope;
    /**
     * @return (Available in 1.124.1+) The scope of resource group ids.
     * 
     */
    private final String resourceGroupIdsScope;
    /**
     * @return (Available in 1.124.1+) The scope of resource types.
     * 
     */
    private final List<String> resourceTypesScopes;
    /**
     * @return The risk level of Config Rule. Valid values: `1`: Critical ,`2`: Warning , `3`: Info.
     * 
     */
    private final Integer riskLevel;
    /**
     * @return The name of config rule.
     * 
     */
    private final String ruleName;
    /**
     * @return The types of the resources to be evaluated against the rule.
     * 
     */
    private final List<String> scopeComplianceResourceTypes;
    /**
     * @return Rule trigger mechanism.
     * 
     */
    private final String sourceDetailMessageType;
    private final String sourceIdentifier;
    /**
     * @return Rule execution cycle.
     * * `source_identifier`- The identifier of the managed rule or the arn of the custom function.
     * * `source_owner`- The source owner of the Config Rule.
     * 
     */
    private final String sourceMaximumExecutionFrequency;
    private final String sourceOwner;
    /**
     * @return The status of the config rule, valid values: `ACTIVE`, `DELETING`, `EVALUATING` and `INACTIVE`.
     * 
     */
    private final String status;
    /**
     * @return (Available in 1.124.1+) The scope of tag key.
     * 
     */
    private final String tagKeyScope;
    /**
     * @return (Available in 1.124.1+) The scope of tag value.
     * 
     */
    private final String tagValueScope;

    @CustomType.Constructor
    private GetRulesRule(
        @CustomType.Parameter("accountId") String accountId,
        @CustomType.Parameter("compliancePackId") String compliancePackId,
        @CustomType.Parameter("compliances") List<GetRulesRuleCompliance> compliances,
        @CustomType.Parameter("configRuleArn") String configRuleArn,
        @CustomType.Parameter("configRuleId") String configRuleId,
        @CustomType.Parameter("configRuleState") String configRuleState,
        @CustomType.Parameter("configRuleTriggerTypes") String configRuleTriggerTypes,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("eventSource") String eventSource,
        @CustomType.Parameter("excludeResourceIdsScope") String excludeResourceIdsScope,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("inputParameters") Map<String,Object> inputParameters,
        @CustomType.Parameter("maximumExecutionFrequency") String maximumExecutionFrequency,
        @CustomType.Parameter("modifiedTimestamp") String modifiedTimestamp,
        @CustomType.Parameter("regionIdsScope") String regionIdsScope,
        @CustomType.Parameter("resourceGroupIdsScope") String resourceGroupIdsScope,
        @CustomType.Parameter("resourceTypesScopes") List<String> resourceTypesScopes,
        @CustomType.Parameter("riskLevel") Integer riskLevel,
        @CustomType.Parameter("ruleName") String ruleName,
        @CustomType.Parameter("scopeComplianceResourceTypes") List<String> scopeComplianceResourceTypes,
        @CustomType.Parameter("sourceDetailMessageType") String sourceDetailMessageType,
        @CustomType.Parameter("sourceIdentifier") String sourceIdentifier,
        @CustomType.Parameter("sourceMaximumExecutionFrequency") String sourceMaximumExecutionFrequency,
        @CustomType.Parameter("sourceOwner") String sourceOwner,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tagKeyScope") String tagKeyScope,
        @CustomType.Parameter("tagValueScope") String tagValueScope) {
        this.accountId = accountId;
        this.compliancePackId = compliancePackId;
        this.compliances = compliances;
        this.configRuleArn = configRuleArn;
        this.configRuleId = configRuleId;
        this.configRuleState = configRuleState;
        this.configRuleTriggerTypes = configRuleTriggerTypes;
        this.description = description;
        this.eventSource = eventSource;
        this.excludeResourceIdsScope = excludeResourceIdsScope;
        this.id = id;
        this.inputParameters = inputParameters;
        this.maximumExecutionFrequency = maximumExecutionFrequency;
        this.modifiedTimestamp = modifiedTimestamp;
        this.regionIdsScope = regionIdsScope;
        this.resourceGroupIdsScope = resourceGroupIdsScope;
        this.resourceTypesScopes = resourceTypesScopes;
        this.riskLevel = riskLevel;
        this.ruleName = ruleName;
        this.scopeComplianceResourceTypes = scopeComplianceResourceTypes;
        this.sourceDetailMessageType = sourceDetailMessageType;
        this.sourceIdentifier = sourceIdentifier;
        this.sourceMaximumExecutionFrequency = sourceMaximumExecutionFrequency;
        this.sourceOwner = sourceOwner;
        this.status = status;
        this.tagKeyScope = tagKeyScope;
        this.tagValueScope = tagValueScope;
    }

    public String accountId() {
        return this.accountId;
    }
    public String compliancePackId() {
        return this.compliancePackId;
    }
    /**
     * @return The information about the compliance evaluations based on the rule.
     * 
     */
    public List<GetRulesRuleCompliance> compliances() {
        return this.compliances;
    }
    public String configRuleArn() {
        return this.configRuleArn;
    }
    public String configRuleId() {
        return this.configRuleId;
    }
    /**
     * @return Field `config_rule_state` has been deprecated from provider version 1.124.1. New field `status` instead.
     * 
     */
    public String configRuleState() {
        return this.configRuleState;
    }
    /**
     * @return (Available in 1.124.1+) A list of trigger types of config rule.
     * 
     */
    public String configRuleTriggerTypes() {
        return this.configRuleTriggerTypes;
    }
    public String description() {
        return this.description;
    }
    /**
     * @return Event source of the Config Rule.
     * 
     */
    public String eventSource() {
        return this.eventSource;
    }
    /**
     * @return (Available in 1.124.1+) The scope of exclude of resource ids.
     * 
     */
    public String excludeResourceIdsScope() {
        return this.excludeResourceIdsScope;
    }
    /**
     * @return The ID of the Config Rule.
     * * `account_id`- The ID of the Alicloud account.
     * * `config_rule_arn`- The ARN of the Config Rule.
     * * `config_rule_id`- The ID of the Config Rule.
     * * `config_rule_state`- The state of the Config Rule.
     * * `description`- The description of the Config Rule.
     * * `input_parameters`- The input parameters of the Config Rule.
     * * `modified_timestamp`- the timestamp of the Config Rule modified.
     * * `risk_level`- The risk level of the Config Rule.
     * * `rule_name`- The name of the Config Rule.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,Object> inputParameters() {
        return this.inputParameters;
    }
    /**
     * @return (Available in 1.124.1+) The frequency of maximum execution.
     * 
     */
    public String maximumExecutionFrequency() {
        return this.maximumExecutionFrequency;
    }
    public String modifiedTimestamp() {
        return this.modifiedTimestamp;
    }
    /**
     * @return (Available in 1.124.1+) The scope of region ids.
     * 
     */
    public String regionIdsScope() {
        return this.regionIdsScope;
    }
    /**
     * @return (Available in 1.124.1+) The scope of resource group ids.
     * 
     */
    public String resourceGroupIdsScope() {
        return this.resourceGroupIdsScope;
    }
    /**
     * @return (Available in 1.124.1+) The scope of resource types.
     * 
     */
    public List<String> resourceTypesScopes() {
        return this.resourceTypesScopes;
    }
    /**
     * @return The risk level of Config Rule. Valid values: `1`: Critical ,`2`: Warning , `3`: Info.
     * 
     */
    public Integer riskLevel() {
        return this.riskLevel;
    }
    /**
     * @return The name of config rule.
     * 
     */
    public String ruleName() {
        return this.ruleName;
    }
    /**
     * @return The types of the resources to be evaluated against the rule.
     * 
     */
    public List<String> scopeComplianceResourceTypes() {
        return this.scopeComplianceResourceTypes;
    }
    /**
     * @return Rule trigger mechanism.
     * 
     */
    public String sourceDetailMessageType() {
        return this.sourceDetailMessageType;
    }
    public String sourceIdentifier() {
        return this.sourceIdentifier;
    }
    /**
     * @return Rule execution cycle.
     * * `source_identifier`- The identifier of the managed rule or the arn of the custom function.
     * * `source_owner`- The source owner of the Config Rule.
     * 
     */
    public String sourceMaximumExecutionFrequency() {
        return this.sourceMaximumExecutionFrequency;
    }
    public String sourceOwner() {
        return this.sourceOwner;
    }
    /**
     * @return The status of the config rule, valid values: `ACTIVE`, `DELETING`, `EVALUATING` and `INACTIVE`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return (Available in 1.124.1+) The scope of tag key.
     * 
     */
    public String tagKeyScope() {
        return this.tagKeyScope;
    }
    /**
     * @return (Available in 1.124.1+) The scope of tag value.
     * 
     */
    public String tagValueScope() {
        return this.tagValueScope;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accountId;
        private String compliancePackId;
        private List<GetRulesRuleCompliance> compliances;
        private String configRuleArn;
        private String configRuleId;
        private String configRuleState;
        private String configRuleTriggerTypes;
        private String description;
        private String eventSource;
        private String excludeResourceIdsScope;
        private String id;
        private Map<String,Object> inputParameters;
        private String maximumExecutionFrequency;
        private String modifiedTimestamp;
        private String regionIdsScope;
        private String resourceGroupIdsScope;
        private List<String> resourceTypesScopes;
        private Integer riskLevel;
        private String ruleName;
        private List<String> scopeComplianceResourceTypes;
        private String sourceDetailMessageType;
        private String sourceIdentifier;
        private String sourceMaximumExecutionFrequency;
        private String sourceOwner;
        private String status;
        private String tagKeyScope;
        private String tagValueScope;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.compliancePackId = defaults.compliancePackId;
    	      this.compliances = defaults.compliances;
    	      this.configRuleArn = defaults.configRuleArn;
    	      this.configRuleId = defaults.configRuleId;
    	      this.configRuleState = defaults.configRuleState;
    	      this.configRuleTriggerTypes = defaults.configRuleTriggerTypes;
    	      this.description = defaults.description;
    	      this.eventSource = defaults.eventSource;
    	      this.excludeResourceIdsScope = defaults.excludeResourceIdsScope;
    	      this.id = defaults.id;
    	      this.inputParameters = defaults.inputParameters;
    	      this.maximumExecutionFrequency = defaults.maximumExecutionFrequency;
    	      this.modifiedTimestamp = defaults.modifiedTimestamp;
    	      this.regionIdsScope = defaults.regionIdsScope;
    	      this.resourceGroupIdsScope = defaults.resourceGroupIdsScope;
    	      this.resourceTypesScopes = defaults.resourceTypesScopes;
    	      this.riskLevel = defaults.riskLevel;
    	      this.ruleName = defaults.ruleName;
    	      this.scopeComplianceResourceTypes = defaults.scopeComplianceResourceTypes;
    	      this.sourceDetailMessageType = defaults.sourceDetailMessageType;
    	      this.sourceIdentifier = defaults.sourceIdentifier;
    	      this.sourceMaximumExecutionFrequency = defaults.sourceMaximumExecutionFrequency;
    	      this.sourceOwner = defaults.sourceOwner;
    	      this.status = defaults.status;
    	      this.tagKeyScope = defaults.tagKeyScope;
    	      this.tagValueScope = defaults.tagValueScope;
        }

        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        public Builder compliancePackId(String compliancePackId) {
            this.compliancePackId = Objects.requireNonNull(compliancePackId);
            return this;
        }
        public Builder compliances(List<GetRulesRuleCompliance> compliances) {
            this.compliances = Objects.requireNonNull(compliances);
            return this;
        }
        public Builder compliances(GetRulesRuleCompliance... compliances) {
            return compliances(List.of(compliances));
        }
        public Builder configRuleArn(String configRuleArn) {
            this.configRuleArn = Objects.requireNonNull(configRuleArn);
            return this;
        }
        public Builder configRuleId(String configRuleId) {
            this.configRuleId = Objects.requireNonNull(configRuleId);
            return this;
        }
        public Builder configRuleState(String configRuleState) {
            this.configRuleState = Objects.requireNonNull(configRuleState);
            return this;
        }
        public Builder configRuleTriggerTypes(String configRuleTriggerTypes) {
            this.configRuleTriggerTypes = Objects.requireNonNull(configRuleTriggerTypes);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder eventSource(String eventSource) {
            this.eventSource = Objects.requireNonNull(eventSource);
            return this;
        }
        public Builder excludeResourceIdsScope(String excludeResourceIdsScope) {
            this.excludeResourceIdsScope = Objects.requireNonNull(excludeResourceIdsScope);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder inputParameters(Map<String,Object> inputParameters) {
            this.inputParameters = Objects.requireNonNull(inputParameters);
            return this;
        }
        public Builder maximumExecutionFrequency(String maximumExecutionFrequency) {
            this.maximumExecutionFrequency = Objects.requireNonNull(maximumExecutionFrequency);
            return this;
        }
        public Builder modifiedTimestamp(String modifiedTimestamp) {
            this.modifiedTimestamp = Objects.requireNonNull(modifiedTimestamp);
            return this;
        }
        public Builder regionIdsScope(String regionIdsScope) {
            this.regionIdsScope = Objects.requireNonNull(regionIdsScope);
            return this;
        }
        public Builder resourceGroupIdsScope(String resourceGroupIdsScope) {
            this.resourceGroupIdsScope = Objects.requireNonNull(resourceGroupIdsScope);
            return this;
        }
        public Builder resourceTypesScopes(List<String> resourceTypesScopes) {
            this.resourceTypesScopes = Objects.requireNonNull(resourceTypesScopes);
            return this;
        }
        public Builder resourceTypesScopes(String... resourceTypesScopes) {
            return resourceTypesScopes(List.of(resourceTypesScopes));
        }
        public Builder riskLevel(Integer riskLevel) {
            this.riskLevel = Objects.requireNonNull(riskLevel);
            return this;
        }
        public Builder ruleName(String ruleName) {
            this.ruleName = Objects.requireNonNull(ruleName);
            return this;
        }
        public Builder scopeComplianceResourceTypes(List<String> scopeComplianceResourceTypes) {
            this.scopeComplianceResourceTypes = Objects.requireNonNull(scopeComplianceResourceTypes);
            return this;
        }
        public Builder scopeComplianceResourceTypes(String... scopeComplianceResourceTypes) {
            return scopeComplianceResourceTypes(List.of(scopeComplianceResourceTypes));
        }
        public Builder sourceDetailMessageType(String sourceDetailMessageType) {
            this.sourceDetailMessageType = Objects.requireNonNull(sourceDetailMessageType);
            return this;
        }
        public Builder sourceIdentifier(String sourceIdentifier) {
            this.sourceIdentifier = Objects.requireNonNull(sourceIdentifier);
            return this;
        }
        public Builder sourceMaximumExecutionFrequency(String sourceMaximumExecutionFrequency) {
            this.sourceMaximumExecutionFrequency = Objects.requireNonNull(sourceMaximumExecutionFrequency);
            return this;
        }
        public Builder sourceOwner(String sourceOwner) {
            this.sourceOwner = Objects.requireNonNull(sourceOwner);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tagKeyScope(String tagKeyScope) {
            this.tagKeyScope = Objects.requireNonNull(tagKeyScope);
            return this;
        }
        public Builder tagValueScope(String tagValueScope) {
            this.tagValueScope = Objects.requireNonNull(tagValueScope);
            return this;
        }        public GetRulesRule build() {
            return new GetRulesRule(accountId, compliancePackId, compliances, configRuleArn, configRuleId, configRuleState, configRuleTriggerTypes, description, eventSource, excludeResourceIdsScope, id, inputParameters, maximumExecutionFrequency, modifiedTimestamp, regionIdsScope, resourceGroupIdsScope, resourceTypesScopes, riskLevel, ruleName, scopeComplianceResourceTypes, sourceDetailMessageType, sourceIdentifier, sourceMaximumExecutionFrequency, sourceOwner, status, tagKeyScope, tagValueScope);
        }
    }
}
