// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HoneypotProbeHoneypotBindListBindPortList {
    /**
     * @return Whether to bind the port.
     * 
     */
    private final @Nullable Boolean bindPort;
    /**
     * @return End port.
     * 
     */
    private final @Nullable Integer endPort;
    /**
     * @return Whether the port is fixed.
     * 
     */
    private final @Nullable Boolean fixed;
    /**
     * @return Start port.
     * 
     */
    private final @Nullable Integer startPort;
    /**
     * @return Destination port.
     * 
     */
    private final @Nullable Integer targetPort;

    @CustomType.Constructor
    private HoneypotProbeHoneypotBindListBindPortList(
        @CustomType.Parameter("bindPort") @Nullable Boolean bindPort,
        @CustomType.Parameter("endPort") @Nullable Integer endPort,
        @CustomType.Parameter("fixed") @Nullable Boolean fixed,
        @CustomType.Parameter("startPort") @Nullable Integer startPort,
        @CustomType.Parameter("targetPort") @Nullable Integer targetPort) {
        this.bindPort = bindPort;
        this.endPort = endPort;
        this.fixed = fixed;
        this.startPort = startPort;
        this.targetPort = targetPort;
    }

    /**
     * @return Whether to bind the port.
     * 
     */
    public Optional<Boolean> bindPort() {
        return Optional.ofNullable(this.bindPort);
    }
    /**
     * @return End port.
     * 
     */
    public Optional<Integer> endPort() {
        return Optional.ofNullable(this.endPort);
    }
    /**
     * @return Whether the port is fixed.
     * 
     */
    public Optional<Boolean> fixed() {
        return Optional.ofNullable(this.fixed);
    }
    /**
     * @return Start port.
     * 
     */
    public Optional<Integer> startPort() {
        return Optional.ofNullable(this.startPort);
    }
    /**
     * @return Destination port.
     * 
     */
    public Optional<Integer> targetPort() {
        return Optional.ofNullable(this.targetPort);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HoneypotProbeHoneypotBindListBindPortList defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean bindPort;
        private @Nullable Integer endPort;
        private @Nullable Boolean fixed;
        private @Nullable Integer startPort;
        private @Nullable Integer targetPort;

        public Builder() {
    	      // Empty
        }

        public Builder(HoneypotProbeHoneypotBindListBindPortList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bindPort = defaults.bindPort;
    	      this.endPort = defaults.endPort;
    	      this.fixed = defaults.fixed;
    	      this.startPort = defaults.startPort;
    	      this.targetPort = defaults.targetPort;
        }

        public Builder bindPort(@Nullable Boolean bindPort) {
            this.bindPort = bindPort;
            return this;
        }
        public Builder endPort(@Nullable Integer endPort) {
            this.endPort = endPort;
            return this;
        }
        public Builder fixed(@Nullable Boolean fixed) {
            this.fixed = fixed;
            return this;
        }
        public Builder startPort(@Nullable Integer startPort) {
            this.startPort = startPort;
            return this;
        }
        public Builder targetPort(@Nullable Integer targetPort) {
            this.targetPort = targetPort;
            return this;
        }        public HoneypotProbeHoneypotBindListBindPortList build() {
            return new HoneypotProbeHoneypotBindListBindPortList(bindPort, endPort, fixed, startPort, targetPort);
        }
    }
}
