// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSearchIndexesIndex {
    /**
     * @return The creation time of the index.
     * 
     */
    private final Integer createTime;
    /**
     * @return Timestamp for sync phase.
     * 
     */
    private final Integer currentSyncTimestamp;
    /**
     * @return The resource ID. The value is `&lt;instance_name&gt;:&lt;table_name&gt;:&lt;indexName&gt;:&lt;indexType&gt;`.
     * 
     */
    private final String id;
    /**
     * @return The index name of the OTS Table which could not be changed.
     * 
     */
    private final String indexName;
    /**
     * @return The name of OTS instance.
     * 
     */
    private final String instanceName;
    /**
     * @return Last update time for metering data..
     * 
     */
    private final Integer meteringLastUpdateTime;
    /**
     * @return Reserve related resources for the index.
     * 
     */
    private final Integer reservedReadCu;
    /**
     * @return The number of rows of data for index.
     * 
     */
    private final Integer rowCount;
    /**
     * @return JSON representation of the schema of index.
     * 
     */
    private final String schema;
    /**
     * @return Storage space occupied by index.
     * 
     */
    private final Integer storageSize;
    /**
     * @return The synchronization state of the index.
     * 
     */
    private final String syncPhase;
    /**
     * @return The name of OTS table.
     * 
     */
    private final String tableName;
    /**
     * @return TTL of index.
     * 
     */
    private final Integer timeToLive;

    @CustomType.Constructor
    private GetSearchIndexesIndex(
        @CustomType.Parameter("createTime") Integer createTime,
        @CustomType.Parameter("currentSyncTimestamp") Integer currentSyncTimestamp,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("indexName") String indexName,
        @CustomType.Parameter("instanceName") String instanceName,
        @CustomType.Parameter("meteringLastUpdateTime") Integer meteringLastUpdateTime,
        @CustomType.Parameter("reservedReadCu") Integer reservedReadCu,
        @CustomType.Parameter("rowCount") Integer rowCount,
        @CustomType.Parameter("schema") String schema,
        @CustomType.Parameter("storageSize") Integer storageSize,
        @CustomType.Parameter("syncPhase") String syncPhase,
        @CustomType.Parameter("tableName") String tableName,
        @CustomType.Parameter("timeToLive") Integer timeToLive) {
        this.createTime = createTime;
        this.currentSyncTimestamp = currentSyncTimestamp;
        this.id = id;
        this.indexName = indexName;
        this.instanceName = instanceName;
        this.meteringLastUpdateTime = meteringLastUpdateTime;
        this.reservedReadCu = reservedReadCu;
        this.rowCount = rowCount;
        this.schema = schema;
        this.storageSize = storageSize;
        this.syncPhase = syncPhase;
        this.tableName = tableName;
        this.timeToLive = timeToLive;
    }

    /**
     * @return The creation time of the index.
     * 
     */
    public Integer createTime() {
        return this.createTime;
    }
    /**
     * @return Timestamp for sync phase.
     * 
     */
    public Integer currentSyncTimestamp() {
        return this.currentSyncTimestamp;
    }
    /**
     * @return The resource ID. The value is `&lt;instance_name&gt;:&lt;table_name&gt;:&lt;indexName&gt;:&lt;indexType&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The index name of the OTS Table which could not be changed.
     * 
     */
    public String indexName() {
        return this.indexName;
    }
    /**
     * @return The name of OTS instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return Last update time for metering data..
     * 
     */
    public Integer meteringLastUpdateTime() {
        return this.meteringLastUpdateTime;
    }
    /**
     * @return Reserve related resources for the index.
     * 
     */
    public Integer reservedReadCu() {
        return this.reservedReadCu;
    }
    /**
     * @return The number of rows of data for index.
     * 
     */
    public Integer rowCount() {
        return this.rowCount;
    }
    /**
     * @return JSON representation of the schema of index.
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return Storage space occupied by index.
     * 
     */
    public Integer storageSize() {
        return this.storageSize;
    }
    /**
     * @return The synchronization state of the index.
     * 
     */
    public String syncPhase() {
        return this.syncPhase;
    }
    /**
     * @return The name of OTS table.
     * 
     */
    public String tableName() {
        return this.tableName;
    }
    /**
     * @return TTL of index.
     * 
     */
    public Integer timeToLive() {
        return this.timeToLive;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSearchIndexesIndex defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer createTime;
        private Integer currentSyncTimestamp;
        private String id;
        private String indexName;
        private String instanceName;
        private Integer meteringLastUpdateTime;
        private Integer reservedReadCu;
        private Integer rowCount;
        private String schema;
        private Integer storageSize;
        private String syncPhase;
        private String tableName;
        private Integer timeToLive;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSearchIndexesIndex defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.currentSyncTimestamp = defaults.currentSyncTimestamp;
    	      this.id = defaults.id;
    	      this.indexName = defaults.indexName;
    	      this.instanceName = defaults.instanceName;
    	      this.meteringLastUpdateTime = defaults.meteringLastUpdateTime;
    	      this.reservedReadCu = defaults.reservedReadCu;
    	      this.rowCount = defaults.rowCount;
    	      this.schema = defaults.schema;
    	      this.storageSize = defaults.storageSize;
    	      this.syncPhase = defaults.syncPhase;
    	      this.tableName = defaults.tableName;
    	      this.timeToLive = defaults.timeToLive;
        }

        public Builder createTime(Integer createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder currentSyncTimestamp(Integer currentSyncTimestamp) {
            this.currentSyncTimestamp = Objects.requireNonNull(currentSyncTimestamp);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder indexName(String indexName) {
            this.indexName = Objects.requireNonNull(indexName);
            return this;
        }
        public Builder instanceName(String instanceName) {
            this.instanceName = Objects.requireNonNull(instanceName);
            return this;
        }
        public Builder meteringLastUpdateTime(Integer meteringLastUpdateTime) {
            this.meteringLastUpdateTime = Objects.requireNonNull(meteringLastUpdateTime);
            return this;
        }
        public Builder reservedReadCu(Integer reservedReadCu) {
            this.reservedReadCu = Objects.requireNonNull(reservedReadCu);
            return this;
        }
        public Builder rowCount(Integer rowCount) {
            this.rowCount = Objects.requireNonNull(rowCount);
            return this;
        }
        public Builder schema(String schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }
        public Builder storageSize(Integer storageSize) {
            this.storageSize = Objects.requireNonNull(storageSize);
            return this;
        }
        public Builder syncPhase(String syncPhase) {
            this.syncPhase = Objects.requireNonNull(syncPhase);
            return this;
        }
        public Builder tableName(String tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        public Builder timeToLive(Integer timeToLive) {
            this.timeToLive = Objects.requireNonNull(timeToLive);
            return this;
        }        public GetSearchIndexesIndex build() {
            return new GetSearchIndexesIndex(createTime, currentSyncTimestamp, id, indexName, instanceName, meteringLastUpdateTime, reservedReadCu, rowCount, schema, storageSize, syncPhase, tableName, timeToLive);
        }
    }
}
