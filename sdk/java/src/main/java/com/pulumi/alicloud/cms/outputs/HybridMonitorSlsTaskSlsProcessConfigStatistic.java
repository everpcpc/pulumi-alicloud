// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HybridMonitorSlsTaskSlsProcessConfigStatistic {
    /**
     * @return The alias of the aggregation result.
     * 
     */
    private final @Nullable String alias;
    /**
     * @return The function that is used to aggregate log data within a statistical period. Valid values: `count`, `sum`, `avg`, `max`, `min`, `value`, `countps`, `sumps`, `distinct`, `distribution`, `percentile`.
     * 
     */
    private final @Nullable String function;
    /**
     * @return The value of the function that is used to aggregate logs imported from Log Service.
     * - If you set the `function` parameter to `distribution`, this parameter specifies the lower limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 200.
     * - If you set the `function` parameter to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
     * 
     */
    private final @Nullable String parameterOne;
    /**
     * @return The value of the function that is used to aggregate logs imported from Log Service. **Note:** This parameter is required only if the `function` parameter is set to `distribution`. This parameter specifies the upper limit of the statistical interval.
     * 
     */
    private final @Nullable String parameterTwo;
    /**
     * @return The name of the key that is used to aggregate logs imported from Log Service.
     * 
     */
    private final @Nullable String slsKeyName;

    @CustomType.Constructor
    private HybridMonitorSlsTaskSlsProcessConfigStatistic(
        @CustomType.Parameter("alias") @Nullable String alias,
        @CustomType.Parameter("function") @Nullable String function,
        @CustomType.Parameter("parameterOne") @Nullable String parameterOne,
        @CustomType.Parameter("parameterTwo") @Nullable String parameterTwo,
        @CustomType.Parameter("slsKeyName") @Nullable String slsKeyName) {
        this.alias = alias;
        this.function = function;
        this.parameterOne = parameterOne;
        this.parameterTwo = parameterTwo;
        this.slsKeyName = slsKeyName;
    }

    /**
     * @return The alias of the aggregation result.
     * 
     */
    public Optional<String> alias() {
        return Optional.ofNullable(this.alias);
    }
    /**
     * @return The function that is used to aggregate log data within a statistical period. Valid values: `count`, `sum`, `avg`, `max`, `min`, `value`, `countps`, `sumps`, `distinct`, `distribution`, `percentile`.
     * 
     */
    public Optional<String> function() {
        return Optional.ofNullable(this.function);
    }
    /**
     * @return The value of the function that is used to aggregate logs imported from Log Service.
     * - If you set the `function` parameter to `distribution`, this parameter specifies the lower limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 200.
     * - If you set the `function` parameter to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
     * 
     */
    public Optional<String> parameterOne() {
        return Optional.ofNullable(this.parameterOne);
    }
    /**
     * @return The value of the function that is used to aggregate logs imported from Log Service. **Note:** This parameter is required only if the `function` parameter is set to `distribution`. This parameter specifies the upper limit of the statistical interval.
     * 
     */
    public Optional<String> parameterTwo() {
        return Optional.ofNullable(this.parameterTwo);
    }
    /**
     * @return The name of the key that is used to aggregate logs imported from Log Service.
     * 
     */
    public Optional<String> slsKeyName() {
        return Optional.ofNullable(this.slsKeyName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HybridMonitorSlsTaskSlsProcessConfigStatistic defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String alias;
        private @Nullable String function;
        private @Nullable String parameterOne;
        private @Nullable String parameterTwo;
        private @Nullable String slsKeyName;

        public Builder() {
    	      // Empty
        }

        public Builder(HybridMonitorSlsTaskSlsProcessConfigStatistic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.function = defaults.function;
    	      this.parameterOne = defaults.parameterOne;
    	      this.parameterTwo = defaults.parameterTwo;
    	      this.slsKeyName = defaults.slsKeyName;
        }

        public Builder alias(@Nullable String alias) {
            this.alias = alias;
            return this;
        }
        public Builder function(@Nullable String function) {
            this.function = function;
            return this;
        }
        public Builder parameterOne(@Nullable String parameterOne) {
            this.parameterOne = parameterOne;
            return this;
        }
        public Builder parameterTwo(@Nullable String parameterTwo) {
            this.parameterTwo = parameterTwo;
            return this;
        }
        public Builder slsKeyName(@Nullable String slsKeyName) {
            this.slsKeyName = slsKeyName;
            return this;
        }        public HybridMonitorSlsTaskSlsProcessConfigStatistic build() {
            return new HybridMonitorSlsTaskSlsProcessConfigStatistic(alias, function, parameterOne, parameterTwo, slsKeyName);
        }
    }
}
