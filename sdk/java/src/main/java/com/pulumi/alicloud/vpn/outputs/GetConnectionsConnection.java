// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionIkeConfig;
import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionIpsecConfig;
import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionVcoHealthCheck;
import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionVpnBgpConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionsConnection {
    private final String createTime;
    /**
     * @return Use the VPN customer gateway ID as the search key.
     * 
     */
    private final String customerGatewayId;
    private final Boolean effectImmediately;
    /**
     * @return Specifies whether to enable the dead peer detection (DPD) feature.
     * 
     */
    private final Boolean enableDpd;
    /**
     * @return Specifies whether to enable NAT traversal.
     * 
     */
    private final Boolean enableNatTraversal;
    /**
     * @return ID of the VPN connection.
     * 
     */
    private final String id;
    /**
     * @return The configurations of phase-one negotiation.
     * 
     */
    private final @Nullable List<GetConnectionsConnectionIkeConfig> ikeConfigs;
    /**
     * @return The configurations of phase-two negotiation.
     * 
     */
    private final @Nullable List<GetConnectionsConnectionIpsecConfig> ipsecConfigs;
    /**
     * @return The local subnet of the VPN connection.
     * 
     */
    private final String localSubnet;
    /**
     * @return The name of the VPN connection.
     * 
     */
    private final String name;
    /**
     * @return The remote subnet of the VPN connection.
     * 
     */
    private final String remoteSubnet;
    /**
     * @return The negotiation status of the BGP routing protocol. Valid values: `success`, `false`.
     * 
     */
    private final String status;
    private final @Nullable List<GetConnectionsConnectionVcoHealthCheck> vcoHealthChecks;
    /**
     * @return The configuration information for BGP.
     * 
     */
    private final @Nullable List<GetConnectionsConnectionVpnBgpConfig> vpnBgpConfigs;
    /**
     * @return Use the VPN gateway ID as the search key.
     * 
     */
    private final String vpnGatewayId;

    @CustomType.Constructor
    private GetConnectionsConnection(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("customerGatewayId") String customerGatewayId,
        @CustomType.Parameter("effectImmediately") Boolean effectImmediately,
        @CustomType.Parameter("enableDpd") Boolean enableDpd,
        @CustomType.Parameter("enableNatTraversal") Boolean enableNatTraversal,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ikeConfigs") @Nullable List<GetConnectionsConnectionIkeConfig> ikeConfigs,
        @CustomType.Parameter("ipsecConfigs") @Nullable List<GetConnectionsConnectionIpsecConfig> ipsecConfigs,
        @CustomType.Parameter("localSubnet") String localSubnet,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("remoteSubnet") String remoteSubnet,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("vcoHealthChecks") @Nullable List<GetConnectionsConnectionVcoHealthCheck> vcoHealthChecks,
        @CustomType.Parameter("vpnBgpConfigs") @Nullable List<GetConnectionsConnectionVpnBgpConfig> vpnBgpConfigs,
        @CustomType.Parameter("vpnGatewayId") String vpnGatewayId) {
        this.createTime = createTime;
        this.customerGatewayId = customerGatewayId;
        this.effectImmediately = effectImmediately;
        this.enableDpd = enableDpd;
        this.enableNatTraversal = enableNatTraversal;
        this.id = id;
        this.ikeConfigs = ikeConfigs;
        this.ipsecConfigs = ipsecConfigs;
        this.localSubnet = localSubnet;
        this.name = name;
        this.remoteSubnet = remoteSubnet;
        this.status = status;
        this.vcoHealthChecks = vcoHealthChecks;
        this.vpnBgpConfigs = vpnBgpConfigs;
        this.vpnGatewayId = vpnGatewayId;
    }

    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Use the VPN customer gateway ID as the search key.
     * 
     */
    public String customerGatewayId() {
        return this.customerGatewayId;
    }
    public Boolean effectImmediately() {
        return this.effectImmediately;
    }
    /**
     * @return Specifies whether to enable the dead peer detection (DPD) feature.
     * 
     */
    public Boolean enableDpd() {
        return this.enableDpd;
    }
    /**
     * @return Specifies whether to enable NAT traversal.
     * 
     */
    public Boolean enableNatTraversal() {
        return this.enableNatTraversal;
    }
    /**
     * @return ID of the VPN connection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The configurations of phase-one negotiation.
     * 
     */
    public List<GetConnectionsConnectionIkeConfig> ikeConfigs() {
        return this.ikeConfigs == null ? List.of() : this.ikeConfigs;
    }
    /**
     * @return The configurations of phase-two negotiation.
     * 
     */
    public List<GetConnectionsConnectionIpsecConfig> ipsecConfigs() {
        return this.ipsecConfigs == null ? List.of() : this.ipsecConfigs;
    }
    /**
     * @return The local subnet of the VPN connection.
     * 
     */
    public String localSubnet() {
        return this.localSubnet;
    }
    /**
     * @return The name of the VPN connection.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The remote subnet of the VPN connection.
     * 
     */
    public String remoteSubnet() {
        return this.remoteSubnet;
    }
    /**
     * @return The negotiation status of the BGP routing protocol. Valid values: `success`, `false`.
     * 
     */
    public String status() {
        return this.status;
    }
    public List<GetConnectionsConnectionVcoHealthCheck> vcoHealthChecks() {
        return this.vcoHealthChecks == null ? List.of() : this.vcoHealthChecks;
    }
    /**
     * @return The configuration information for BGP.
     * 
     */
    public List<GetConnectionsConnectionVpnBgpConfig> vpnBgpConfigs() {
        return this.vpnBgpConfigs == null ? List.of() : this.vpnBgpConfigs;
    }
    /**
     * @return Use the VPN gateway ID as the search key.
     * 
     */
    public String vpnGatewayId() {
        return this.vpnGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsConnection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String customerGatewayId;
        private Boolean effectImmediately;
        private Boolean enableDpd;
        private Boolean enableNatTraversal;
        private String id;
        private @Nullable List<GetConnectionsConnectionIkeConfig> ikeConfigs;
        private @Nullable List<GetConnectionsConnectionIpsecConfig> ipsecConfigs;
        private String localSubnet;
        private String name;
        private String remoteSubnet;
        private String status;
        private @Nullable List<GetConnectionsConnectionVcoHealthCheck> vcoHealthChecks;
        private @Nullable List<GetConnectionsConnectionVpnBgpConfig> vpnBgpConfigs;
        private String vpnGatewayId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetConnectionsConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.effectImmediately = defaults.effectImmediately;
    	      this.enableDpd = defaults.enableDpd;
    	      this.enableNatTraversal = defaults.enableNatTraversal;
    	      this.id = defaults.id;
    	      this.ikeConfigs = defaults.ikeConfigs;
    	      this.ipsecConfigs = defaults.ipsecConfigs;
    	      this.localSubnet = defaults.localSubnet;
    	      this.name = defaults.name;
    	      this.remoteSubnet = defaults.remoteSubnet;
    	      this.status = defaults.status;
    	      this.vcoHealthChecks = defaults.vcoHealthChecks;
    	      this.vpnBgpConfigs = defaults.vpnBgpConfigs;
    	      this.vpnGatewayId = defaults.vpnGatewayId;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder customerGatewayId(String customerGatewayId) {
            this.customerGatewayId = Objects.requireNonNull(customerGatewayId);
            return this;
        }
        public Builder effectImmediately(Boolean effectImmediately) {
            this.effectImmediately = Objects.requireNonNull(effectImmediately);
            return this;
        }
        public Builder enableDpd(Boolean enableDpd) {
            this.enableDpd = Objects.requireNonNull(enableDpd);
            return this;
        }
        public Builder enableNatTraversal(Boolean enableNatTraversal) {
            this.enableNatTraversal = Objects.requireNonNull(enableNatTraversal);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ikeConfigs(@Nullable List<GetConnectionsConnectionIkeConfig> ikeConfigs) {
            this.ikeConfigs = ikeConfigs;
            return this;
        }
        public Builder ikeConfigs(GetConnectionsConnectionIkeConfig... ikeConfigs) {
            return ikeConfigs(List.of(ikeConfigs));
        }
        public Builder ipsecConfigs(@Nullable List<GetConnectionsConnectionIpsecConfig> ipsecConfigs) {
            this.ipsecConfigs = ipsecConfigs;
            return this;
        }
        public Builder ipsecConfigs(GetConnectionsConnectionIpsecConfig... ipsecConfigs) {
            return ipsecConfigs(List.of(ipsecConfigs));
        }
        public Builder localSubnet(String localSubnet) {
            this.localSubnet = Objects.requireNonNull(localSubnet);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder remoteSubnet(String remoteSubnet) {
            this.remoteSubnet = Objects.requireNonNull(remoteSubnet);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder vcoHealthChecks(@Nullable List<GetConnectionsConnectionVcoHealthCheck> vcoHealthChecks) {
            this.vcoHealthChecks = vcoHealthChecks;
            return this;
        }
        public Builder vcoHealthChecks(GetConnectionsConnectionVcoHealthCheck... vcoHealthChecks) {
            return vcoHealthChecks(List.of(vcoHealthChecks));
        }
        public Builder vpnBgpConfigs(@Nullable List<GetConnectionsConnectionVpnBgpConfig> vpnBgpConfigs) {
            this.vpnBgpConfigs = vpnBgpConfigs;
            return this;
        }
        public Builder vpnBgpConfigs(GetConnectionsConnectionVpnBgpConfig... vpnBgpConfigs) {
            return vpnBgpConfigs(List.of(vpnBgpConfigs));
        }
        public Builder vpnGatewayId(String vpnGatewayId) {
            this.vpnGatewayId = Objects.requireNonNull(vpnGatewayId);
            return this;
        }        public GetConnectionsConnection build() {
            return new GetConnectionsConnection(createTime, customerGatewayId, effectImmediately, enableDpd, enableNatTraversal, id, ikeConfigs, ipsecConfigs, localSubnet, name, remoteSubnet, status, vcoHealthChecks, vpnBgpConfigs, vpnGatewayId);
        }
    }
}
