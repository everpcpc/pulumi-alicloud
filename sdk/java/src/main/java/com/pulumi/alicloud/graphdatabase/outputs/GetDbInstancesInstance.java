// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.graphdatabase.outputs;

import com.pulumi.alicloud.graphdatabase.outputs.GetDbInstancesInstanceDbInstanceIpArray;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbInstancesInstance {
    /**
     * @return Virtual Private Cloud (vpc connection such as a VPN connection or leased line domain name).
     * 
     */
    private final String connectionString;
    /**
     * @return Creation time, which follows the format of `YYYY-MM-DD &#39;T&#39;hh:mm:ssZ`, such as `2011-05-30 T12:11:4Z`.
     * 
     */
    private final String createTime;
    /**
     * @return The current kernel image version.
     * 
     */
    private final String currentMinorVersion;
    /**
     * @return The category of the db instance.
     * 
     */
    private final String dbInstanceCategory;
    /**
     * @return For example, instances can be grouped according to Cpu core count.
     * 
     */
    private final String dbInstanceCpu;
    /**
     * @return According to the practical example or notes.
     * 
     */
    private final String dbInstanceDescription;
    /**
     * @return The ID of the instance.
     * 
     */
    private final String dbInstanceId;
    /**
     * @return IP ADDRESS whitelist for the instance group list.
     * 
     */
    private final List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays;
    /**
     * @return Instance memory, which is measured in MB.
     * 
     */
    private final String dbInstanceMemory;
    /**
     * @return The network type of the db instance.
     * 
     */
    private final String dbInstanceNetworkType;
    /**
     * @return Disk storage type. Valid values: `cloud_essd`, `cloud_ssd`.
     * 
     */
    private final String dbInstanceStorageType;
    /**
     * @return The type of the db instance.
     * 
     */
    private final String dbInstanceType;
    /**
     * @return The class of the db node.
     * 
     */
    private final String dbNodeClass;
    /**
     * @return The count of the db node.
     * 
     */
    private final String dbNodeCount;
    /**
     * @return Instance storage space, which is measured in GB.
     * 
     */
    private final String dbNodeStorage;
    /**
     * @return Kernel Version. Value range: `1.0` or `1.0-OpenCypher`. `1.0`: represented as gremlin, `1.0-OpenCypher`: said opencypher.
     * 
     */
    private final String dbVersion;
    /**
     * @return The instance after it expires time for subscription instance.
     * 
     */
    private final String expireTime;
    /**
     * @return The expire status of the db instance.
     * 
     */
    private final String expired;
    /**
     * @return The ID of the Db Instance.
     * 
     */
    private final String id;
    /**
     * @return The latest kernel image version.
     * 
     */
    private final String latestMinorVersion;
    /**
     * @return Instance lock state. Value range: `Unlock`, `ManualLock`, `LockByExpiration`, `LockByRestoration` and `LockByDiskQuota`. `Unlock`: normal. `ManualLock`: the manual trigger lock. `LockByExpiration`: that represents the instance expires automatically lock. `LockByRestoration`: indicates that the instance rollback before auto-lock. `LockByDiskQuota`: that represents the instance space full automatic lock.
     * 
     */
    private final String lockMode;
    /**
     * @return An instance is locked the reason.
     * 
     */
    private final String lockReason;
    /**
     * @return Instance maintenance time such as `00:00Z-02:00Z`, 0 to 2 points to carry out routine maintenance.
     * 
     */
    private final String maintainTime;
    /**
     * @return The master instance ID of the db instance.
     * 
     */
    private final String masterDbInstanceId;
    /**
     * @return The paymen type of the resource.
     * 
     */
    private final String paymentType;
    /**
     * @return Application Port.
     * 
     */
    private final Integer port;
    /**
     * @return The public connection string ID of the resource.
     * 
     */
    private final String publicConnectionString;
    /**
     * @return The public port ID of the resource.
     * 
     */
    private final Integer publicPort;
    /**
     * @return The array of the readonly db instances.
     * 
     */
    private final List<String> readOnlyDbInstanceIds;
    /**
     * @return Instance status. Value range: `Creating`, `Running`, `Deleting`, `Rebooting`, `DBInstanceClassChanging`, `NetAddressCreating` and `NetAddressDeleting`.
     * 
     */
    private final String status;
    /**
     * @return The vpc id of the db instance.
     * 
     */
    private final String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private final String vswitchId;
    /**
     * @return The zone ID of the resource.
     * 
     */
    private final String zoneId;

    @CustomType.Constructor
    private GetDbInstancesInstance(
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("currentMinorVersion") String currentMinorVersion,
        @CustomType.Parameter("dbInstanceCategory") String dbInstanceCategory,
        @CustomType.Parameter("dbInstanceCpu") String dbInstanceCpu,
        @CustomType.Parameter("dbInstanceDescription") String dbInstanceDescription,
        @CustomType.Parameter("dbInstanceId") String dbInstanceId,
        @CustomType.Parameter("dbInstanceIpArrays") List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays,
        @CustomType.Parameter("dbInstanceMemory") String dbInstanceMemory,
        @CustomType.Parameter("dbInstanceNetworkType") String dbInstanceNetworkType,
        @CustomType.Parameter("dbInstanceStorageType") String dbInstanceStorageType,
        @CustomType.Parameter("dbInstanceType") String dbInstanceType,
        @CustomType.Parameter("dbNodeClass") String dbNodeClass,
        @CustomType.Parameter("dbNodeCount") String dbNodeCount,
        @CustomType.Parameter("dbNodeStorage") String dbNodeStorage,
        @CustomType.Parameter("dbVersion") String dbVersion,
        @CustomType.Parameter("expireTime") String expireTime,
        @CustomType.Parameter("expired") String expired,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("latestMinorVersion") String latestMinorVersion,
        @CustomType.Parameter("lockMode") String lockMode,
        @CustomType.Parameter("lockReason") String lockReason,
        @CustomType.Parameter("maintainTime") String maintainTime,
        @CustomType.Parameter("masterDbInstanceId") String masterDbInstanceId,
        @CustomType.Parameter("paymentType") String paymentType,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("publicConnectionString") String publicConnectionString,
        @CustomType.Parameter("publicPort") Integer publicPort,
        @CustomType.Parameter("readOnlyDbInstanceIds") List<String> readOnlyDbInstanceIds,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchId") String vswitchId,
        @CustomType.Parameter("zoneId") String zoneId) {
        this.connectionString = connectionString;
        this.createTime = createTime;
        this.currentMinorVersion = currentMinorVersion;
        this.dbInstanceCategory = dbInstanceCategory;
        this.dbInstanceCpu = dbInstanceCpu;
        this.dbInstanceDescription = dbInstanceDescription;
        this.dbInstanceId = dbInstanceId;
        this.dbInstanceIpArrays = dbInstanceIpArrays;
        this.dbInstanceMemory = dbInstanceMemory;
        this.dbInstanceNetworkType = dbInstanceNetworkType;
        this.dbInstanceStorageType = dbInstanceStorageType;
        this.dbInstanceType = dbInstanceType;
        this.dbNodeClass = dbNodeClass;
        this.dbNodeCount = dbNodeCount;
        this.dbNodeStorage = dbNodeStorage;
        this.dbVersion = dbVersion;
        this.expireTime = expireTime;
        this.expired = expired;
        this.id = id;
        this.latestMinorVersion = latestMinorVersion;
        this.lockMode = lockMode;
        this.lockReason = lockReason;
        this.maintainTime = maintainTime;
        this.masterDbInstanceId = masterDbInstanceId;
        this.paymentType = paymentType;
        this.port = port;
        this.publicConnectionString = publicConnectionString;
        this.publicPort = publicPort;
        this.readOnlyDbInstanceIds = readOnlyDbInstanceIds;
        this.status = status;
        this.vpcId = vpcId;
        this.vswitchId = vswitchId;
        this.zoneId = zoneId;
    }

    /**
     * @return Virtual Private Cloud (vpc connection such as a VPN connection or leased line domain name).
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Creation time, which follows the format of `YYYY-MM-DD &#39;T&#39;hh:mm:ssZ`, such as `2011-05-30 T12:11:4Z`.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The current kernel image version.
     * 
     */
    public String currentMinorVersion() {
        return this.currentMinorVersion;
    }
    /**
     * @return The category of the db instance.
     * 
     */
    public String dbInstanceCategory() {
        return this.dbInstanceCategory;
    }
    /**
     * @return For example, instances can be grouped according to Cpu core count.
     * 
     */
    public String dbInstanceCpu() {
        return this.dbInstanceCpu;
    }
    /**
     * @return According to the practical example or notes.
     * 
     */
    public String dbInstanceDescription() {
        return this.dbInstanceDescription;
    }
    /**
     * @return The ID of the instance.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return IP ADDRESS whitelist for the instance group list.
     * 
     */
    public List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays() {
        return this.dbInstanceIpArrays;
    }
    /**
     * @return Instance memory, which is measured in MB.
     * 
     */
    public String dbInstanceMemory() {
        return this.dbInstanceMemory;
    }
    /**
     * @return The network type of the db instance.
     * 
     */
    public String dbInstanceNetworkType() {
        return this.dbInstanceNetworkType;
    }
    /**
     * @return Disk storage type. Valid values: `cloud_essd`, `cloud_ssd`.
     * 
     */
    public String dbInstanceStorageType() {
        return this.dbInstanceStorageType;
    }
    /**
     * @return The type of the db instance.
     * 
     */
    public String dbInstanceType() {
        return this.dbInstanceType;
    }
    /**
     * @return The class of the db node.
     * 
     */
    public String dbNodeClass() {
        return this.dbNodeClass;
    }
    /**
     * @return The count of the db node.
     * 
     */
    public String dbNodeCount() {
        return this.dbNodeCount;
    }
    /**
     * @return Instance storage space, which is measured in GB.
     * 
     */
    public String dbNodeStorage() {
        return this.dbNodeStorage;
    }
    /**
     * @return Kernel Version. Value range: `1.0` or `1.0-OpenCypher`. `1.0`: represented as gremlin, `1.0-OpenCypher`: said opencypher.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return The instance after it expires time for subscription instance.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The expire status of the db instance.
     * 
     */
    public String expired() {
        return this.expired;
    }
    /**
     * @return The ID of the Db Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The latest kernel image version.
     * 
     */
    public String latestMinorVersion() {
        return this.latestMinorVersion;
    }
    /**
     * @return Instance lock state. Value range: `Unlock`, `ManualLock`, `LockByExpiration`, `LockByRestoration` and `LockByDiskQuota`. `Unlock`: normal. `ManualLock`: the manual trigger lock. `LockByExpiration`: that represents the instance expires automatically lock. `LockByRestoration`: indicates that the instance rollback before auto-lock. `LockByDiskQuota`: that represents the instance space full automatic lock.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return An instance is locked the reason.
     * 
     */
    public String lockReason() {
        return this.lockReason;
    }
    /**
     * @return Instance maintenance time such as `00:00Z-02:00Z`, 0 to 2 points to carry out routine maintenance.
     * 
     */
    public String maintainTime() {
        return this.maintainTime;
    }
    /**
     * @return The master instance ID of the db instance.
     * 
     */
    public String masterDbInstanceId() {
        return this.masterDbInstanceId;
    }
    /**
     * @return The paymen type of the resource.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return Application Port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The public connection string ID of the resource.
     * 
     */
    public String publicConnectionString() {
        return this.publicConnectionString;
    }
    /**
     * @return The public port ID of the resource.
     * 
     */
    public Integer publicPort() {
        return this.publicPort;
    }
    /**
     * @return The array of the readonly db instances.
     * 
     */
    public List<String> readOnlyDbInstanceIds() {
        return this.readOnlyDbInstanceIds;
    }
    /**
     * @return Instance status. Value range: `Creating`, `Running`, `Deleting`, `Rebooting`, `DBInstanceClassChanging`, `NetAddressCreating` and `NetAddressDeleting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The vpc id of the db instance.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the resource.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbInstancesInstance defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String connectionString;
        private String createTime;
        private String currentMinorVersion;
        private String dbInstanceCategory;
        private String dbInstanceCpu;
        private String dbInstanceDescription;
        private String dbInstanceId;
        private List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays;
        private String dbInstanceMemory;
        private String dbInstanceNetworkType;
        private String dbInstanceStorageType;
        private String dbInstanceType;
        private String dbNodeClass;
        private String dbNodeCount;
        private String dbNodeStorage;
        private String dbVersion;
        private String expireTime;
        private String expired;
        private String id;
        private String latestMinorVersion;
        private String lockMode;
        private String lockReason;
        private String maintainTime;
        private String masterDbInstanceId;
        private String paymentType;
        private Integer port;
        private String publicConnectionString;
        private Integer publicPort;
        private List<String> readOnlyDbInstanceIds;
        private String status;
        private String vpcId;
        private String vswitchId;
        private String zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDbInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionString = defaults.connectionString;
    	      this.createTime = defaults.createTime;
    	      this.currentMinorVersion = defaults.currentMinorVersion;
    	      this.dbInstanceCategory = defaults.dbInstanceCategory;
    	      this.dbInstanceCpu = defaults.dbInstanceCpu;
    	      this.dbInstanceDescription = defaults.dbInstanceDescription;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.dbInstanceIpArrays = defaults.dbInstanceIpArrays;
    	      this.dbInstanceMemory = defaults.dbInstanceMemory;
    	      this.dbInstanceNetworkType = defaults.dbInstanceNetworkType;
    	      this.dbInstanceStorageType = defaults.dbInstanceStorageType;
    	      this.dbInstanceType = defaults.dbInstanceType;
    	      this.dbNodeClass = defaults.dbNodeClass;
    	      this.dbNodeCount = defaults.dbNodeCount;
    	      this.dbNodeStorage = defaults.dbNodeStorage;
    	      this.dbVersion = defaults.dbVersion;
    	      this.expireTime = defaults.expireTime;
    	      this.expired = defaults.expired;
    	      this.id = defaults.id;
    	      this.latestMinorVersion = defaults.latestMinorVersion;
    	      this.lockMode = defaults.lockMode;
    	      this.lockReason = defaults.lockReason;
    	      this.maintainTime = defaults.maintainTime;
    	      this.masterDbInstanceId = defaults.masterDbInstanceId;
    	      this.paymentType = defaults.paymentType;
    	      this.port = defaults.port;
    	      this.publicConnectionString = defaults.publicConnectionString;
    	      this.publicPort = defaults.publicPort;
    	      this.readOnlyDbInstanceIds = defaults.readOnlyDbInstanceIds;
    	      this.status = defaults.status;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder currentMinorVersion(String currentMinorVersion) {
            this.currentMinorVersion = Objects.requireNonNull(currentMinorVersion);
            return this;
        }
        public Builder dbInstanceCategory(String dbInstanceCategory) {
            this.dbInstanceCategory = Objects.requireNonNull(dbInstanceCategory);
            return this;
        }
        public Builder dbInstanceCpu(String dbInstanceCpu) {
            this.dbInstanceCpu = Objects.requireNonNull(dbInstanceCpu);
            return this;
        }
        public Builder dbInstanceDescription(String dbInstanceDescription) {
            this.dbInstanceDescription = Objects.requireNonNull(dbInstanceDescription);
            return this;
        }
        public Builder dbInstanceId(String dbInstanceId) {
            this.dbInstanceId = Objects.requireNonNull(dbInstanceId);
            return this;
        }
        public Builder dbInstanceIpArrays(List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays) {
            this.dbInstanceIpArrays = Objects.requireNonNull(dbInstanceIpArrays);
            return this;
        }
        public Builder dbInstanceIpArrays(GetDbInstancesInstanceDbInstanceIpArray... dbInstanceIpArrays) {
            return dbInstanceIpArrays(List.of(dbInstanceIpArrays));
        }
        public Builder dbInstanceMemory(String dbInstanceMemory) {
            this.dbInstanceMemory = Objects.requireNonNull(dbInstanceMemory);
            return this;
        }
        public Builder dbInstanceNetworkType(String dbInstanceNetworkType) {
            this.dbInstanceNetworkType = Objects.requireNonNull(dbInstanceNetworkType);
            return this;
        }
        public Builder dbInstanceStorageType(String dbInstanceStorageType) {
            this.dbInstanceStorageType = Objects.requireNonNull(dbInstanceStorageType);
            return this;
        }
        public Builder dbInstanceType(String dbInstanceType) {
            this.dbInstanceType = Objects.requireNonNull(dbInstanceType);
            return this;
        }
        public Builder dbNodeClass(String dbNodeClass) {
            this.dbNodeClass = Objects.requireNonNull(dbNodeClass);
            return this;
        }
        public Builder dbNodeCount(String dbNodeCount) {
            this.dbNodeCount = Objects.requireNonNull(dbNodeCount);
            return this;
        }
        public Builder dbNodeStorage(String dbNodeStorage) {
            this.dbNodeStorage = Objects.requireNonNull(dbNodeStorage);
            return this;
        }
        public Builder dbVersion(String dbVersion) {
            this.dbVersion = Objects.requireNonNull(dbVersion);
            return this;
        }
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        public Builder expired(String expired) {
            this.expired = Objects.requireNonNull(expired);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder latestMinorVersion(String latestMinorVersion) {
            this.latestMinorVersion = Objects.requireNonNull(latestMinorVersion);
            return this;
        }
        public Builder lockMode(String lockMode) {
            this.lockMode = Objects.requireNonNull(lockMode);
            return this;
        }
        public Builder lockReason(String lockReason) {
            this.lockReason = Objects.requireNonNull(lockReason);
            return this;
        }
        public Builder maintainTime(String maintainTime) {
            this.maintainTime = Objects.requireNonNull(maintainTime);
            return this;
        }
        public Builder masterDbInstanceId(String masterDbInstanceId) {
            this.masterDbInstanceId = Objects.requireNonNull(masterDbInstanceId);
            return this;
        }
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder publicConnectionString(String publicConnectionString) {
            this.publicConnectionString = Objects.requireNonNull(publicConnectionString);
            return this;
        }
        public Builder publicPort(Integer publicPort) {
            this.publicPort = Objects.requireNonNull(publicPort);
            return this;
        }
        public Builder readOnlyDbInstanceIds(List<String> readOnlyDbInstanceIds) {
            this.readOnlyDbInstanceIds = Objects.requireNonNull(readOnlyDbInstanceIds);
            return this;
        }
        public Builder readOnlyDbInstanceIds(String... readOnlyDbInstanceIds) {
            return readOnlyDbInstanceIds(List.of(readOnlyDbInstanceIds));
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }        public GetDbInstancesInstance build() {
            return new GetDbInstancesInstance(connectionString, createTime, currentMinorVersion, dbInstanceCategory, dbInstanceCpu, dbInstanceDescription, dbInstanceId, dbInstanceIpArrays, dbInstanceMemory, dbInstanceNetworkType, dbInstanceStorageType, dbInstanceType, dbNodeClass, dbNodeCount, dbNodeStorage, dbVersion, expireTime, expired, id, latestMinorVersion, lockMode, lockReason, maintainTime, masterDbInstanceId, paymentType, port, publicConnectionString, publicPort, readOnlyDbInstanceIds, status, vpcId, vswitchId, zoneId);
        }
    }
}
