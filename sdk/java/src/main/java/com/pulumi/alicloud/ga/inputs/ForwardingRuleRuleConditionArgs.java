// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.inputs;

import com.pulumi.alicloud.ga.inputs.ForwardingRuleRuleConditionHostConfigArgs;
import com.pulumi.alicloud.ga.inputs.ForwardingRuleRuleConditionPathConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ForwardingRuleRuleConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleRuleConditionArgs Empty = new ForwardingRuleRuleConditionArgs();

    /**
     * Domain name configuration information.
     * 
     */
    @Import(name="hostConfigs")
    private @Nullable Output<List<ForwardingRuleRuleConditionHostConfigArgs>> hostConfigs;

    /**
     * @return Domain name configuration information.
     * 
     */
    public Optional<Output<List<ForwardingRuleRuleConditionHostConfigArgs>>> hostConfigs() {
        return Optional.ofNullable(this.hostConfigs);
    }

    /**
     * Path configuration information.
     * 
     */
    @Import(name="pathConfig")
    private @Nullable Output<ForwardingRuleRuleConditionPathConfigArgs> pathConfig;

    /**
     * @return Path configuration information.
     * 
     */
    public Optional<Output<ForwardingRuleRuleConditionPathConfigArgs>> pathConfig() {
        return Optional.ofNullable(this.pathConfig);
    }

    /**
     * Forwarding condition type. Valid value: `Host`, `Path`.
     * 
     */
    @Import(name="ruleConditionType", required=true)
    private Output<String> ruleConditionType;

    /**
     * @return Forwarding condition type. Valid value: `Host`, `Path`.
     * 
     */
    public Output<String> ruleConditionType() {
        return this.ruleConditionType;
    }

    private ForwardingRuleRuleConditionArgs() {}

    private ForwardingRuleRuleConditionArgs(ForwardingRuleRuleConditionArgs $) {
        this.hostConfigs = $.hostConfigs;
        this.pathConfig = $.pathConfig;
        this.ruleConditionType = $.ruleConditionType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleRuleConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleRuleConditionArgs $;

        public Builder() {
            $ = new ForwardingRuleRuleConditionArgs();
        }

        public Builder(ForwardingRuleRuleConditionArgs defaults) {
            $ = new ForwardingRuleRuleConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostConfigs Domain name configuration information.
         * 
         * @return builder
         * 
         */
        public Builder hostConfigs(@Nullable Output<List<ForwardingRuleRuleConditionHostConfigArgs>> hostConfigs) {
            $.hostConfigs = hostConfigs;
            return this;
        }

        /**
         * @param hostConfigs Domain name configuration information.
         * 
         * @return builder
         * 
         */
        public Builder hostConfigs(List<ForwardingRuleRuleConditionHostConfigArgs> hostConfigs) {
            return hostConfigs(Output.of(hostConfigs));
        }

        /**
         * @param hostConfigs Domain name configuration information.
         * 
         * @return builder
         * 
         */
        public Builder hostConfigs(ForwardingRuleRuleConditionHostConfigArgs... hostConfigs) {
            return hostConfigs(List.of(hostConfigs));
        }

        /**
         * @param pathConfig Path configuration information.
         * 
         * @return builder
         * 
         */
        public Builder pathConfig(@Nullable Output<ForwardingRuleRuleConditionPathConfigArgs> pathConfig) {
            $.pathConfig = pathConfig;
            return this;
        }

        /**
         * @param pathConfig Path configuration information.
         * 
         * @return builder
         * 
         */
        public Builder pathConfig(ForwardingRuleRuleConditionPathConfigArgs pathConfig) {
            return pathConfig(Output.of(pathConfig));
        }

        /**
         * @param ruleConditionType Forwarding condition type. Valid value: `Host`, `Path`.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditionType(Output<String> ruleConditionType) {
            $.ruleConditionType = ruleConditionType;
            return this;
        }

        /**
         * @param ruleConditionType Forwarding condition type. Valid value: `Host`, `Path`.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditionType(String ruleConditionType) {
            return ruleConditionType(Output.of(ruleConditionType));
        }

        public ForwardingRuleRuleConditionArgs build() {
            $.ruleConditionType = Objects.requireNonNull($.ruleConditionType, "expected parameter 'ruleConditionType' to be non-null");
            return $;
        }
    }

}
