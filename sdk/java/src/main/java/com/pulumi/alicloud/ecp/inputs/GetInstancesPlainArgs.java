// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecp.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInstancesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInstancesPlainArgs Empty = new GetInstancesPlainArgs();

    @Import(name="enableDetails")
    private @Nullable Boolean enableDetails;

    public Optional<Boolean> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }

    /**
     * A list of Ecp Instances IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of Ecp Instances IDs.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The ID Of The Image.
     * 
     */
    @Import(name="imageId")
    private @Nullable String imageId;

    /**
     * @return The ID Of The Image.
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * Instance Name.
     * 
     */
    @Import(name="instanceName")
    private @Nullable String instanceName;

    /**
     * @return Instance Name.
     * 
     */
    public Optional<String> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Instance Type.
     * 
     */
    @Import(name="instanceType")
    private @Nullable String instanceType;

    /**
     * @return Instance Type.
     * 
     */
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The Key Name.
     * 
     */
    @Import(name="keyPairName")
    private @Nullable String keyPairName;

    /**
     * @return The Key Name.
     * 
     */
    public Optional<String> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }

    /**
     * A regex string to filter results by mobile phone name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter results by mobile phone name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    @Import(name="outputFile")
    private @Nullable String outputFile;

    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The payment type.Valid values: `PayAsYouGo`,`Subscription`
     * 
     */
    @Import(name="paymentType")
    private @Nullable String paymentType;

    /**
     * @return The payment type.Valid values: `PayAsYouGo`,`Subscription`
     * 
     */
    public Optional<String> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Resolution.
     * 
     */
    @Import(name="resolution")
    private @Nullable String resolution;

    /**
     * @return Resolution.
     * 
     */
    public Optional<String> resolution() {
        return Optional.ofNullable(this.resolution);
    }

    /**
     * Instance Status.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return Instance Status.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="zoneId")
    private @Nullable String zoneId;

    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private GetInstancesPlainArgs() {}

    private GetInstancesPlainArgs(GetInstancesPlainArgs $) {
        this.enableDetails = $.enableDetails;
        this.ids = $.ids;
        this.imageId = $.imageId;
        this.instanceName = $.instanceName;
        this.instanceType = $.instanceType;
        this.keyPairName = $.keyPairName;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.paymentType = $.paymentType;
        this.resolution = $.resolution;
        this.status = $.status;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstancesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstancesPlainArgs $;

        public Builder() {
            $ = new GetInstancesPlainArgs();
        }

        public Builder(GetInstancesPlainArgs defaults) {
            $ = new GetInstancesPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder enableDetails(@Nullable Boolean enableDetails) {
            $.enableDetails = enableDetails;
            return this;
        }

        /**
         * @param ids A list of Ecp Instances IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Ecp Instances IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param imageId The ID Of The Image.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable String imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param instanceName Instance Name.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable String instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceType Instance Type.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param keyPairName The Key Name.
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(@Nullable String keyPairName) {
            $.keyPairName = keyPairName;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by mobile phone name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param paymentType The payment type.Valid values: `PayAsYouGo`,`Subscription`
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable String paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param resolution Resolution.
         * 
         * @return builder
         * 
         */
        public Builder resolution(@Nullable String resolution) {
            $.resolution = resolution;
            return this;
        }

        /**
         * @param status Instance Status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public Builder zoneId(@Nullable String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public GetInstancesPlainArgs build() {
            return $;
        }
    }

}
