// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetScalingGroupsGroup {
    /**
     * @return Number of active instances in scaling group.
     * 
     */
    private final Integer activeCapacity;
    private final String activeScalingConfiguration;
    /**
     * @return Default cooldown time of scaling group.
     * 
     */
    private final Integer cooldownTime;
    /**
     * @return Creation time of scaling group.
     * 
     */
    private final String creationTime;
    /**
     * @return Db instances id which the ECS instance attached to.
     * 
     */
    private final List<String> dbInstanceIds;
    /**
     * @return Whether the scaling group deletion protection is enabled.
     * 
     */
    private final Boolean groupDeletionProtection;
    /**
     * @return The health check method of the scaling group.
     * 
     */
    private final String healthCheckType;
    /**
     * @return ID of the scaling group.
     * 
     */
    private final String id;
    /**
     * @return Active launch template ID for scaling group.
     * 
     */
    private final String launchTemplateId;
    /**
     * @return Version of active launch template.
     * 
     */
    private final String launchTemplateVersion;
    /**
     * @return Lifecycle state of scaling group.
     * 
     */
    private final String lifecycleState;
    /**
     * @return Slb instances id which the ECS instance attached to.
     * 
     */
    private final List<String> loadBalancerIds;
    /**
     * @return The maximum number of ECS instances.
     * 
     */
    private final Integer maxSize;
    /**
     * @return The minimum number of ECS instances.
     * 
     */
    private final Integer minSize;
    /**
     * @return The modification time.
     * 
     */
    private final String modificationTime;
    /**
     * @return Name of the scaling group.
     * * `active_scaling_configuration` -Active scaling configuration for scaling group.
     * 
     */
    private final String name;
    /**
     * @return Number of pending instances in scaling group.
     * 
     */
    private final Integer pendingCapacity;
    /**
     * @return Region ID the scaling group belongs to.
     * 
     */
    private final String regionId;
    /**
     * @return Removal policy used to select the ECS instance to remove from the scaling group.
     * 
     */
    private final List<String> removalPolicies;
    /**
     * @return Number of removing instances in scaling group.
     * 
     */
    private final Integer removingCapacity;
    /**
     * @return The Process in suspension.
     * 
     */
    private final List<String> suspendedProcesses;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private final @Nullable Map<String,Object> tags;
    /**
     * @return Number of instances in scaling group.
     * 
     */
    private final Integer totalCapacity;
    /**
     * @return The number of all ECS instances in the scaling group.
     * 
     */
    private final Integer totalInstanceCount;
    /**
     * @return The ID of the VPC to which the scaling group belongs.
     * 
     */
    private final String vpcId;
    /**
     * @return The ID of the vSwitch to which the scaling group belongs.
     * 
     */
    private final String vswitchId;
    /**
     * @return Vswitches id in which the ECS instance launched.
     * 
     */
    private final List<String> vswitchIds;

    @CustomType.Constructor
    private GetScalingGroupsGroup(
        @CustomType.Parameter("activeCapacity") Integer activeCapacity,
        @CustomType.Parameter("activeScalingConfiguration") String activeScalingConfiguration,
        @CustomType.Parameter("cooldownTime") Integer cooldownTime,
        @CustomType.Parameter("creationTime") String creationTime,
        @CustomType.Parameter("dbInstanceIds") List<String> dbInstanceIds,
        @CustomType.Parameter("groupDeletionProtection") Boolean groupDeletionProtection,
        @CustomType.Parameter("healthCheckType") String healthCheckType,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("launchTemplateId") String launchTemplateId,
        @CustomType.Parameter("launchTemplateVersion") String launchTemplateVersion,
        @CustomType.Parameter("lifecycleState") String lifecycleState,
        @CustomType.Parameter("loadBalancerIds") List<String> loadBalancerIds,
        @CustomType.Parameter("maxSize") Integer maxSize,
        @CustomType.Parameter("minSize") Integer minSize,
        @CustomType.Parameter("modificationTime") String modificationTime,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("pendingCapacity") Integer pendingCapacity,
        @CustomType.Parameter("regionId") String regionId,
        @CustomType.Parameter("removalPolicies") List<String> removalPolicies,
        @CustomType.Parameter("removingCapacity") Integer removingCapacity,
        @CustomType.Parameter("suspendedProcesses") List<String> suspendedProcesses,
        @CustomType.Parameter("tags") @Nullable Map<String,Object> tags,
        @CustomType.Parameter("totalCapacity") Integer totalCapacity,
        @CustomType.Parameter("totalInstanceCount") Integer totalInstanceCount,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchId") String vswitchId,
        @CustomType.Parameter("vswitchIds") List<String> vswitchIds) {
        this.activeCapacity = activeCapacity;
        this.activeScalingConfiguration = activeScalingConfiguration;
        this.cooldownTime = cooldownTime;
        this.creationTime = creationTime;
        this.dbInstanceIds = dbInstanceIds;
        this.groupDeletionProtection = groupDeletionProtection;
        this.healthCheckType = healthCheckType;
        this.id = id;
        this.launchTemplateId = launchTemplateId;
        this.launchTemplateVersion = launchTemplateVersion;
        this.lifecycleState = lifecycleState;
        this.loadBalancerIds = loadBalancerIds;
        this.maxSize = maxSize;
        this.minSize = minSize;
        this.modificationTime = modificationTime;
        this.name = name;
        this.pendingCapacity = pendingCapacity;
        this.regionId = regionId;
        this.removalPolicies = removalPolicies;
        this.removingCapacity = removingCapacity;
        this.suspendedProcesses = suspendedProcesses;
        this.tags = tags;
        this.totalCapacity = totalCapacity;
        this.totalInstanceCount = totalInstanceCount;
        this.vpcId = vpcId;
        this.vswitchId = vswitchId;
        this.vswitchIds = vswitchIds;
    }

    /**
     * @return Number of active instances in scaling group.
     * 
     */
    public Integer activeCapacity() {
        return this.activeCapacity;
    }
    public String activeScalingConfiguration() {
        return this.activeScalingConfiguration;
    }
    /**
     * @return Default cooldown time of scaling group.
     * 
     */
    public Integer cooldownTime() {
        return this.cooldownTime;
    }
    /**
     * @return Creation time of scaling group.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Db instances id which the ECS instance attached to.
     * 
     */
    public List<String> dbInstanceIds() {
        return this.dbInstanceIds;
    }
    /**
     * @return Whether the scaling group deletion protection is enabled.
     * 
     */
    public Boolean groupDeletionProtection() {
        return this.groupDeletionProtection;
    }
    /**
     * @return The health check method of the scaling group.
     * 
     */
    public String healthCheckType() {
        return this.healthCheckType;
    }
    /**
     * @return ID of the scaling group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Active launch template ID for scaling group.
     * 
     */
    public String launchTemplateId() {
        return this.launchTemplateId;
    }
    /**
     * @return Version of active launch template.
     * 
     */
    public String launchTemplateVersion() {
        return this.launchTemplateVersion;
    }
    /**
     * @return Lifecycle state of scaling group.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return Slb instances id which the ECS instance attached to.
     * 
     */
    public List<String> loadBalancerIds() {
        return this.loadBalancerIds;
    }
    /**
     * @return The maximum number of ECS instances.
     * 
     */
    public Integer maxSize() {
        return this.maxSize;
    }
    /**
     * @return The minimum number of ECS instances.
     * 
     */
    public Integer minSize() {
        return this.minSize;
    }
    /**
     * @return The modification time.
     * 
     */
    public String modificationTime() {
        return this.modificationTime;
    }
    /**
     * @return Name of the scaling group.
     * * `active_scaling_configuration` -Active scaling configuration for scaling group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Number of pending instances in scaling group.
     * 
     */
    public Integer pendingCapacity() {
        return this.pendingCapacity;
    }
    /**
     * @return Region ID the scaling group belongs to.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return Removal policy used to select the ECS instance to remove from the scaling group.
     * 
     */
    public List<String> removalPolicies() {
        return this.removalPolicies;
    }
    /**
     * @return Number of removing instances in scaling group.
     * 
     */
    public Integer removingCapacity() {
        return this.removingCapacity;
    }
    /**
     * @return The Process in suspension.
     * 
     */
    public List<String> suspendedProcesses() {
        return this.suspendedProcesses;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Number of instances in scaling group.
     * 
     */
    public Integer totalCapacity() {
        return this.totalCapacity;
    }
    /**
     * @return The number of all ECS instances in the scaling group.
     * 
     */
    public Integer totalInstanceCount() {
        return this.totalInstanceCount;
    }
    /**
     * @return The ID of the VPC to which the scaling group belongs.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of the vSwitch to which the scaling group belongs.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return Vswitches id in which the ECS instance launched.
     * 
     */
    public List<String> vswitchIds() {
        return this.vswitchIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScalingGroupsGroup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer activeCapacity;
        private String activeScalingConfiguration;
        private Integer cooldownTime;
        private String creationTime;
        private List<String> dbInstanceIds;
        private Boolean groupDeletionProtection;
        private String healthCheckType;
        private String id;
        private String launchTemplateId;
        private String launchTemplateVersion;
        private String lifecycleState;
        private List<String> loadBalancerIds;
        private Integer maxSize;
        private Integer minSize;
        private String modificationTime;
        private String name;
        private Integer pendingCapacity;
        private String regionId;
        private List<String> removalPolicies;
        private Integer removingCapacity;
        private List<String> suspendedProcesses;
        private @Nullable Map<String,Object> tags;
        private Integer totalCapacity;
        private Integer totalInstanceCount;
        private String vpcId;
        private String vswitchId;
        private List<String> vswitchIds;

        public Builder() {
    	      // Empty
        }

        public Builder(GetScalingGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeCapacity = defaults.activeCapacity;
    	      this.activeScalingConfiguration = defaults.activeScalingConfiguration;
    	      this.cooldownTime = defaults.cooldownTime;
    	      this.creationTime = defaults.creationTime;
    	      this.dbInstanceIds = defaults.dbInstanceIds;
    	      this.groupDeletionProtection = defaults.groupDeletionProtection;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.id = defaults.id;
    	      this.launchTemplateId = defaults.launchTemplateId;
    	      this.launchTemplateVersion = defaults.launchTemplateVersion;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.loadBalancerIds = defaults.loadBalancerIds;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.modificationTime = defaults.modificationTime;
    	      this.name = defaults.name;
    	      this.pendingCapacity = defaults.pendingCapacity;
    	      this.regionId = defaults.regionId;
    	      this.removalPolicies = defaults.removalPolicies;
    	      this.removingCapacity = defaults.removingCapacity;
    	      this.suspendedProcesses = defaults.suspendedProcesses;
    	      this.tags = defaults.tags;
    	      this.totalCapacity = defaults.totalCapacity;
    	      this.totalInstanceCount = defaults.totalInstanceCount;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.vswitchIds = defaults.vswitchIds;
        }

        public Builder activeCapacity(Integer activeCapacity) {
            this.activeCapacity = Objects.requireNonNull(activeCapacity);
            return this;
        }
        public Builder activeScalingConfiguration(String activeScalingConfiguration) {
            this.activeScalingConfiguration = Objects.requireNonNull(activeScalingConfiguration);
            return this;
        }
        public Builder cooldownTime(Integer cooldownTime) {
            this.cooldownTime = Objects.requireNonNull(cooldownTime);
            return this;
        }
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        public Builder dbInstanceIds(List<String> dbInstanceIds) {
            this.dbInstanceIds = Objects.requireNonNull(dbInstanceIds);
            return this;
        }
        public Builder dbInstanceIds(String... dbInstanceIds) {
            return dbInstanceIds(List.of(dbInstanceIds));
        }
        public Builder groupDeletionProtection(Boolean groupDeletionProtection) {
            this.groupDeletionProtection = Objects.requireNonNull(groupDeletionProtection);
            return this;
        }
        public Builder healthCheckType(String healthCheckType) {
            this.healthCheckType = Objects.requireNonNull(healthCheckType);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder launchTemplateId(String launchTemplateId) {
            this.launchTemplateId = Objects.requireNonNull(launchTemplateId);
            return this;
        }
        public Builder launchTemplateVersion(String launchTemplateVersion) {
            this.launchTemplateVersion = Objects.requireNonNull(launchTemplateVersion);
            return this;
        }
        public Builder lifecycleState(String lifecycleState) {
            this.lifecycleState = Objects.requireNonNull(lifecycleState);
            return this;
        }
        public Builder loadBalancerIds(List<String> loadBalancerIds) {
            this.loadBalancerIds = Objects.requireNonNull(loadBalancerIds);
            return this;
        }
        public Builder loadBalancerIds(String... loadBalancerIds) {
            return loadBalancerIds(List.of(loadBalancerIds));
        }
        public Builder maxSize(Integer maxSize) {
            this.maxSize = Objects.requireNonNull(maxSize);
            return this;
        }
        public Builder minSize(Integer minSize) {
            this.minSize = Objects.requireNonNull(minSize);
            return this;
        }
        public Builder modificationTime(String modificationTime) {
            this.modificationTime = Objects.requireNonNull(modificationTime);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder pendingCapacity(Integer pendingCapacity) {
            this.pendingCapacity = Objects.requireNonNull(pendingCapacity);
            return this;
        }
        public Builder regionId(String regionId) {
            this.regionId = Objects.requireNonNull(regionId);
            return this;
        }
        public Builder removalPolicies(List<String> removalPolicies) {
            this.removalPolicies = Objects.requireNonNull(removalPolicies);
            return this;
        }
        public Builder removalPolicies(String... removalPolicies) {
            return removalPolicies(List.of(removalPolicies));
        }
        public Builder removingCapacity(Integer removingCapacity) {
            this.removingCapacity = Objects.requireNonNull(removingCapacity);
            return this;
        }
        public Builder suspendedProcesses(List<String> suspendedProcesses) {
            this.suspendedProcesses = Objects.requireNonNull(suspendedProcesses);
            return this;
        }
        public Builder suspendedProcesses(String... suspendedProcesses) {
            return suspendedProcesses(List.of(suspendedProcesses));
        }
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        public Builder totalCapacity(Integer totalCapacity) {
            this.totalCapacity = Objects.requireNonNull(totalCapacity);
            return this;
        }
        public Builder totalInstanceCount(Integer totalInstanceCount) {
            this.totalInstanceCount = Objects.requireNonNull(totalInstanceCount);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        public Builder vswitchIds(List<String> vswitchIds) {
            this.vswitchIds = Objects.requireNonNull(vswitchIds);
            return this;
        }
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }        public GetScalingGroupsGroup build() {
            return new GetScalingGroupsGroup(activeCapacity, activeScalingConfiguration, cooldownTime, creationTime, dbInstanceIds, groupDeletionProtection, healthCheckType, id, launchTemplateId, launchTemplateVersion, lifecycleState, loadBalancerIds, maxSize, minSize, modificationTime, name, pendingCapacity, regionId, removalPolicies, removingCapacity, suspendedProcesses, tags, totalCapacity, totalInstanceCount, vpcId, vswitchId, vswitchIds);
        }
    }
}
