// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerGroupsGroupHealthCheckConfig {
    /**
     * @return The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
     * 
     */
    private final List<String> healthCheckCodes;
    /**
     * @return The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of `0` indicates that a backend server port is used for health checks.
     * 
     */
    private final Integer healthCheckConnectPort;
    /**
     * @return Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
     * 
     */
    private final Boolean healthCheckEnabled;
    /**
     * @return The domain name that is used for health checks.
     * 
     */
    private final String healthCheckHost;
    /**
     * @return HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
     * 
     */
    private final String healthCheckHttpVersion;
    /**
     * @return The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
     * 
     */
    private final Integer healthCheckInterval;
    /**
     * @return Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
     * 
     */
    private final String healthCheckMethod;
    /**
     * @return The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
     * 
     */
    private final String healthCheckPath;
    /**
     * @return Health check protocol. Valid values: `HTTP` and `TCP`.
     * 
     */
    private final String healthCheckProtocol;
    /**
     * @return The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: `1` to `300`. Default value: `5`. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
     * 
     */
    private final Integer healthCheckTimeout;
    /**
     * @return The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: `2` to `10`. Default value: `3`.
     * 
     */
    private final Integer healthyThreshold;
    /**
     * @return The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
     * 
     */
    private final Integer unhealthyThreshold;

    @CustomType.Constructor
    private GetServerGroupsGroupHealthCheckConfig(
        @CustomType.Parameter("healthCheckCodes") List<String> healthCheckCodes,
        @CustomType.Parameter("healthCheckConnectPort") Integer healthCheckConnectPort,
        @CustomType.Parameter("healthCheckEnabled") Boolean healthCheckEnabled,
        @CustomType.Parameter("healthCheckHost") String healthCheckHost,
        @CustomType.Parameter("healthCheckHttpVersion") String healthCheckHttpVersion,
        @CustomType.Parameter("healthCheckInterval") Integer healthCheckInterval,
        @CustomType.Parameter("healthCheckMethod") String healthCheckMethod,
        @CustomType.Parameter("healthCheckPath") String healthCheckPath,
        @CustomType.Parameter("healthCheckProtocol") String healthCheckProtocol,
        @CustomType.Parameter("healthCheckTimeout") Integer healthCheckTimeout,
        @CustomType.Parameter("healthyThreshold") Integer healthyThreshold,
        @CustomType.Parameter("unhealthyThreshold") Integer unhealthyThreshold) {
        this.healthCheckCodes = healthCheckCodes;
        this.healthCheckConnectPort = healthCheckConnectPort;
        this.healthCheckEnabled = healthCheckEnabled;
        this.healthCheckHost = healthCheckHost;
        this.healthCheckHttpVersion = healthCheckHttpVersion;
        this.healthCheckInterval = healthCheckInterval;
        this.healthCheckMethod = healthCheckMethod;
        this.healthCheckPath = healthCheckPath;
        this.healthCheckProtocol = healthCheckProtocol;
        this.healthCheckTimeout = healthCheckTimeout;
        this.healthyThreshold = healthyThreshold;
        this.unhealthyThreshold = unhealthyThreshold;
    }

    /**
     * @return The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
     * 
     */
    public List<String> healthCheckCodes() {
        return this.healthCheckCodes;
    }
    /**
     * @return The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of `0` indicates that a backend server port is used for health checks.
     * 
     */
    public Integer healthCheckConnectPort() {
        return this.healthCheckConnectPort;
    }
    /**
     * @return Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
     * 
     */
    public Boolean healthCheckEnabled() {
        return this.healthCheckEnabled;
    }
    /**
     * @return The domain name that is used for health checks.
     * 
     */
    public String healthCheckHost() {
        return this.healthCheckHost;
    }
    /**
     * @return HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
     * 
     */
    public String healthCheckHttpVersion() {
        return this.healthCheckHttpVersion;
    }
    /**
     * @return The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
     * 
     */
    public Integer healthCheckInterval() {
        return this.healthCheckInterval;
    }
    /**
     * @return Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
     * 
     */
    public String healthCheckMethod() {
        return this.healthCheckMethod;
    }
    /**
     * @return The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
     * 
     */
    public String healthCheckPath() {
        return this.healthCheckPath;
    }
    /**
     * @return Health check protocol. Valid values: `HTTP` and `TCP`.
     * 
     */
    public String healthCheckProtocol() {
        return this.healthCheckProtocol;
    }
    /**
     * @return The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: `1` to `300`. Default value: `5`. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
     * 
     */
    public Integer healthCheckTimeout() {
        return this.healthCheckTimeout;
    }
    /**
     * @return The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: `2` to `10`. Default value: `3`.
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * @return The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerGroupsGroupHealthCheckConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> healthCheckCodes;
        private Integer healthCheckConnectPort;
        private Boolean healthCheckEnabled;
        private String healthCheckHost;
        private String healthCheckHttpVersion;
        private Integer healthCheckInterval;
        private String healthCheckMethod;
        private String healthCheckPath;
        private String healthCheckProtocol;
        private Integer healthCheckTimeout;
        private Integer healthyThreshold;
        private Integer unhealthyThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServerGroupsGroupHealthCheckConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckCodes = defaults.healthCheckCodes;
    	      this.healthCheckConnectPort = defaults.healthCheckConnectPort;
    	      this.healthCheckEnabled = defaults.healthCheckEnabled;
    	      this.healthCheckHost = defaults.healthCheckHost;
    	      this.healthCheckHttpVersion = defaults.healthCheckHttpVersion;
    	      this.healthCheckInterval = defaults.healthCheckInterval;
    	      this.healthCheckMethod = defaults.healthCheckMethod;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.healthCheckProtocol = defaults.healthCheckProtocol;
    	      this.healthCheckTimeout = defaults.healthCheckTimeout;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        public Builder healthCheckCodes(List<String> healthCheckCodes) {
            this.healthCheckCodes = Objects.requireNonNull(healthCheckCodes);
            return this;
        }
        public Builder healthCheckCodes(String... healthCheckCodes) {
            return healthCheckCodes(List.of(healthCheckCodes));
        }
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            this.healthCheckConnectPort = Objects.requireNonNull(healthCheckConnectPort);
            return this;
        }
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            this.healthCheckEnabled = Objects.requireNonNull(healthCheckEnabled);
            return this;
        }
        public Builder healthCheckHost(String healthCheckHost) {
            this.healthCheckHost = Objects.requireNonNull(healthCheckHost);
            return this;
        }
        public Builder healthCheckHttpVersion(String healthCheckHttpVersion) {
            this.healthCheckHttpVersion = Objects.requireNonNull(healthCheckHttpVersion);
            return this;
        }
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            this.healthCheckInterval = Objects.requireNonNull(healthCheckInterval);
            return this;
        }
        public Builder healthCheckMethod(String healthCheckMethod) {
            this.healthCheckMethod = Objects.requireNonNull(healthCheckMethod);
            return this;
        }
        public Builder healthCheckPath(String healthCheckPath) {
            this.healthCheckPath = Objects.requireNonNull(healthCheckPath);
            return this;
        }
        public Builder healthCheckProtocol(String healthCheckProtocol) {
            this.healthCheckProtocol = Objects.requireNonNull(healthCheckProtocol);
            return this;
        }
        public Builder healthCheckTimeout(Integer healthCheckTimeout) {
            this.healthCheckTimeout = Objects.requireNonNull(healthCheckTimeout);
            return this;
        }
        public Builder healthyThreshold(Integer healthyThreshold) {
            this.healthyThreshold = Objects.requireNonNull(healthyThreshold);
            return this;
        }
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            this.unhealthyThreshold = Objects.requireNonNull(unhealthyThreshold);
            return this;
        }        public GetServerGroupsGroupHealthCheckConfig build() {
            return new GetServerGroupsGroupHealthCheckConfig(healthCheckCodes, healthCheckConnectPort, healthCheckEnabled, healthCheckHost, healthCheckHttpVersion, healthCheckInterval, healthCheckMethod, healthCheckPath, healthCheckProtocol, healthCheckTimeout, healthyThreshold, unhealthyThreshold);
        }
    }
}
