// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSimpleOfficeSitesSite {
    /**
     * @return The Internet Bandwidth Peak. It has been deprecated from version 1.142.0 and can be found in the new datasource alicloud_ecd_network_packages.
     * 
     * @deprecated
     * Field &#39;bandwidth&#39; has been deprecated from provider version 1.142.0.
     * 
     */
    @Deprecated /* Field 'bandwidth' has been deprecated from provider version 1.142.0. */
    private final Integer bandwidth;
    /**
     * @return Cloud Enterprise Network Instance Id.
     * 
     */
    private final String cenId;
    /**
     * @return Workspace Corresponds to the Security Office Network of IPv4 Segment.
     * 
     */
    private final String cidrBlock;
    /**
     * @return Workspace Creation Time.
     * 
     */
    private final String createTime;
    /**
     * @return Security Group ID.
     * 
     */
    private final String customSecurityGroupId;
    /**
     * @return Connect to the Cloud Desktop Allows the Use of the Access Mode of. Possible Values: the Internet: Only Allows the Client to Public Cloud Desktop. Virtual Private Cloud (VPC): Only Allows in the Virtual Private Cloud (VPC) in the Client to Connect to the Cloud Desktop. Any: Not by Way of Limitation. Use Client to Connect to the Cloud Desktop When It Is Possible to Choose the Connection.
     * 
     */
    private final String desktopAccessType;
    /**
     * @return The Desktop Vpc Endpoint.
     * 
     */
    private final String desktopVpcEndpoint;
    /**
     * @return Enterprise Ad Corresponding DNS Address.
     * 
     */
    private final List<String> dnsAddresses;
    /**
     * @return Easy-to-Use DNS Name.
     * 
     */
    private final String dnsUserName;
    /**
     * @return Enterprise of Ad Domain Name.
     * 
     */
    private final String domainName;
    /**
     * @return Domain of the User Who Will Administer This Target Application Password.
     * 
     */
    private final String domainPassword;
    /**
     * @return The Domain Administrator&#39;s Username.
     * 
     */
    private final String domainUserName;
    /**
     * @return Whether to Use Cloud Desktop User Empowerment of Local Administrator Permissions.
     * 
     */
    private final Boolean enableAdminAccess;
    /**
     * @return Enable Cross-Desktop Access.
     * 
     */
    private final Boolean enableCrossDesktopAccess;
    /**
     * @return Whether the Open Internet Access Function.
     * 
     * @deprecated
     * Field &#39;enable_internet_access&#39; has been deprecated from provider version 1.142.0.
     * 
     */
    @Deprecated /* Field 'enable_internet_access' has been deprecated from provider version 1.142.0. */
    private final Boolean enableInternetAccess;
    /**
     * @return NAS File System ID.
     * 
     */
    private final List<String> fileSystemIds;
    /**
     * @return The ID of the Simple Office Site.
     * 
     */
    private final String id;
    /**
     * @return Whether to Enable Multi-Factor Authentication MFA.
     * 
     */
    private final Boolean mfaEnabled;
    /**
     * @return Internet Access ID.
     * 
     */
    private final String networkPackageId;
    /**
     * @return The Workspace ID.
     * 
     */
    private final String officeSiteId;
    /**
     * @return Workspace Account System Type. Possible Values: Simple: Convenient Account. AD_CONNECTOR: Enterprise Ad Account.
     * 
     */
    private final String officeSiteType;
    /**
     * @return The simple office site name.
     * 
     */
    private final String simpleOfficeSiteName;
    /**
     * @return Whether to Enable Single Sign-on (SSO) for User-Based SSO.
     * 
     */
    private final Boolean ssoEnabled;
    /**
     * @return Whether to Enable Single Sign-on (SSO) for User-Based SSO.
     * 
     */
    private final Boolean ssoStatus;
    /**
     * @return Workspace State. Possible Values: Registering: Registered in the Registered: Registered.
     * 
     */
    private final String status;
    /**
     * @return AD Subdomain of the DNS Address.
     * 
     */
    private final List<String> subDnsAddresses;
    /**
     * @return AD Domain DNS Name.
     * 
     */
    private final String subDomainName;
    /**
     * @return AD Trust Password.
     * 
     */
    private final String trustPassword;
    /**
     * @return Security Office VPC ID.
     * 
     */
    private final String vpcId;
    /**
     * @return The vswitch ids.
     * 
     */
    private final List<String> vswitchIds;

    @CustomType.Constructor
    private GetSimpleOfficeSitesSite(
        @CustomType.Parameter("bandwidth") Integer bandwidth,
        @CustomType.Parameter("cenId") String cenId,
        @CustomType.Parameter("cidrBlock") String cidrBlock,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("customSecurityGroupId") String customSecurityGroupId,
        @CustomType.Parameter("desktopAccessType") String desktopAccessType,
        @CustomType.Parameter("desktopVpcEndpoint") String desktopVpcEndpoint,
        @CustomType.Parameter("dnsAddresses") List<String> dnsAddresses,
        @CustomType.Parameter("dnsUserName") String dnsUserName,
        @CustomType.Parameter("domainName") String domainName,
        @CustomType.Parameter("domainPassword") String domainPassword,
        @CustomType.Parameter("domainUserName") String domainUserName,
        @CustomType.Parameter("enableAdminAccess") Boolean enableAdminAccess,
        @CustomType.Parameter("enableCrossDesktopAccess") Boolean enableCrossDesktopAccess,
        @CustomType.Parameter("enableInternetAccess") Boolean enableInternetAccess,
        @CustomType.Parameter("fileSystemIds") List<String> fileSystemIds,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("mfaEnabled") Boolean mfaEnabled,
        @CustomType.Parameter("networkPackageId") String networkPackageId,
        @CustomType.Parameter("officeSiteId") String officeSiteId,
        @CustomType.Parameter("officeSiteType") String officeSiteType,
        @CustomType.Parameter("simpleOfficeSiteName") String simpleOfficeSiteName,
        @CustomType.Parameter("ssoEnabled") Boolean ssoEnabled,
        @CustomType.Parameter("ssoStatus") Boolean ssoStatus,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("subDnsAddresses") List<String> subDnsAddresses,
        @CustomType.Parameter("subDomainName") String subDomainName,
        @CustomType.Parameter("trustPassword") String trustPassword,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchIds") List<String> vswitchIds) {
        this.bandwidth = bandwidth;
        this.cenId = cenId;
        this.cidrBlock = cidrBlock;
        this.createTime = createTime;
        this.customSecurityGroupId = customSecurityGroupId;
        this.desktopAccessType = desktopAccessType;
        this.desktopVpcEndpoint = desktopVpcEndpoint;
        this.dnsAddresses = dnsAddresses;
        this.dnsUserName = dnsUserName;
        this.domainName = domainName;
        this.domainPassword = domainPassword;
        this.domainUserName = domainUserName;
        this.enableAdminAccess = enableAdminAccess;
        this.enableCrossDesktopAccess = enableCrossDesktopAccess;
        this.enableInternetAccess = enableInternetAccess;
        this.fileSystemIds = fileSystemIds;
        this.id = id;
        this.mfaEnabled = mfaEnabled;
        this.networkPackageId = networkPackageId;
        this.officeSiteId = officeSiteId;
        this.officeSiteType = officeSiteType;
        this.simpleOfficeSiteName = simpleOfficeSiteName;
        this.ssoEnabled = ssoEnabled;
        this.ssoStatus = ssoStatus;
        this.status = status;
        this.subDnsAddresses = subDnsAddresses;
        this.subDomainName = subDomainName;
        this.trustPassword = trustPassword;
        this.vpcId = vpcId;
        this.vswitchIds = vswitchIds;
    }

    /**
     * @return The Internet Bandwidth Peak. It has been deprecated from version 1.142.0 and can be found in the new datasource alicloud_ecd_network_packages.
     * 
     * @deprecated
     * Field &#39;bandwidth&#39; has been deprecated from provider version 1.142.0.
     * 
     */
    @Deprecated /* Field 'bandwidth' has been deprecated from provider version 1.142.0. */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Cloud Enterprise Network Instance Id.
     * 
     */
    public String cenId() {
        return this.cenId;
    }
    /**
     * @return Workspace Corresponds to the Security Office Network of IPv4 Segment.
     * 
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }
    /**
     * @return Workspace Creation Time.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Security Group ID.
     * 
     */
    public String customSecurityGroupId() {
        return this.customSecurityGroupId;
    }
    /**
     * @return Connect to the Cloud Desktop Allows the Use of the Access Mode of. Possible Values: the Internet: Only Allows the Client to Public Cloud Desktop. Virtual Private Cloud (VPC): Only Allows in the Virtual Private Cloud (VPC) in the Client to Connect to the Cloud Desktop. Any: Not by Way of Limitation. Use Client to Connect to the Cloud Desktop When It Is Possible to Choose the Connection.
     * 
     */
    public String desktopAccessType() {
        return this.desktopAccessType;
    }
    /**
     * @return The Desktop Vpc Endpoint.
     * 
     */
    public String desktopVpcEndpoint() {
        return this.desktopVpcEndpoint;
    }
    /**
     * @return Enterprise Ad Corresponding DNS Address.
     * 
     */
    public List<String> dnsAddresses() {
        return this.dnsAddresses;
    }
    /**
     * @return Easy-to-Use DNS Name.
     * 
     */
    public String dnsUserName() {
        return this.dnsUserName;
    }
    /**
     * @return Enterprise of Ad Domain Name.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return Domain of the User Who Will Administer This Target Application Password.
     * 
     */
    public String domainPassword() {
        return this.domainPassword;
    }
    /**
     * @return The Domain Administrator&#39;s Username.
     * 
     */
    public String domainUserName() {
        return this.domainUserName;
    }
    /**
     * @return Whether to Use Cloud Desktop User Empowerment of Local Administrator Permissions.
     * 
     */
    public Boolean enableAdminAccess() {
        return this.enableAdminAccess;
    }
    /**
     * @return Enable Cross-Desktop Access.
     * 
     */
    public Boolean enableCrossDesktopAccess() {
        return this.enableCrossDesktopAccess;
    }
    /**
     * @return Whether the Open Internet Access Function.
     * 
     * @deprecated
     * Field &#39;enable_internet_access&#39; has been deprecated from provider version 1.142.0.
     * 
     */
    @Deprecated /* Field 'enable_internet_access' has been deprecated from provider version 1.142.0. */
    public Boolean enableInternetAccess() {
        return this.enableInternetAccess;
    }
    /**
     * @return NAS File System ID.
     * 
     */
    public List<String> fileSystemIds() {
        return this.fileSystemIds;
    }
    /**
     * @return The ID of the Simple Office Site.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether to Enable Multi-Factor Authentication MFA.
     * 
     */
    public Boolean mfaEnabled() {
        return this.mfaEnabled;
    }
    /**
     * @return Internet Access ID.
     * 
     */
    public String networkPackageId() {
        return this.networkPackageId;
    }
    /**
     * @return The Workspace ID.
     * 
     */
    public String officeSiteId() {
        return this.officeSiteId;
    }
    /**
     * @return Workspace Account System Type. Possible Values: Simple: Convenient Account. AD_CONNECTOR: Enterprise Ad Account.
     * 
     */
    public String officeSiteType() {
        return this.officeSiteType;
    }
    /**
     * @return The simple office site name.
     * 
     */
    public String simpleOfficeSiteName() {
        return this.simpleOfficeSiteName;
    }
    /**
     * @return Whether to Enable Single Sign-on (SSO) for User-Based SSO.
     * 
     */
    public Boolean ssoEnabled() {
        return this.ssoEnabled;
    }
    /**
     * @return Whether to Enable Single Sign-on (SSO) for User-Based SSO.
     * 
     */
    public Boolean ssoStatus() {
        return this.ssoStatus;
    }
    /**
     * @return Workspace State. Possible Values: Registering: Registered in the Registered: Registered.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return AD Subdomain of the DNS Address.
     * 
     */
    public List<String> subDnsAddresses() {
        return this.subDnsAddresses;
    }
    /**
     * @return AD Domain DNS Name.
     * 
     */
    public String subDomainName() {
        return this.subDomainName;
    }
    /**
     * @return AD Trust Password.
     * 
     */
    public String trustPassword() {
        return this.trustPassword;
    }
    /**
     * @return Security Office VPC ID.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch ids.
     * 
     */
    public List<String> vswitchIds() {
        return this.vswitchIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSimpleOfficeSitesSite defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer bandwidth;
        private String cenId;
        private String cidrBlock;
        private String createTime;
        private String customSecurityGroupId;
        private String desktopAccessType;
        private String desktopVpcEndpoint;
        private List<String> dnsAddresses;
        private String dnsUserName;
        private String domainName;
        private String domainPassword;
        private String domainUserName;
        private Boolean enableAdminAccess;
        private Boolean enableCrossDesktopAccess;
        private Boolean enableInternetAccess;
        private List<String> fileSystemIds;
        private String id;
        private Boolean mfaEnabled;
        private String networkPackageId;
        private String officeSiteId;
        private String officeSiteType;
        private String simpleOfficeSiteName;
        private Boolean ssoEnabled;
        private Boolean ssoStatus;
        private String status;
        private List<String> subDnsAddresses;
        private String subDomainName;
        private String trustPassword;
        private String vpcId;
        private List<String> vswitchIds;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSimpleOfficeSitesSite defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.cenId = defaults.cenId;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.createTime = defaults.createTime;
    	      this.customSecurityGroupId = defaults.customSecurityGroupId;
    	      this.desktopAccessType = defaults.desktopAccessType;
    	      this.desktopVpcEndpoint = defaults.desktopVpcEndpoint;
    	      this.dnsAddresses = defaults.dnsAddresses;
    	      this.dnsUserName = defaults.dnsUserName;
    	      this.domainName = defaults.domainName;
    	      this.domainPassword = defaults.domainPassword;
    	      this.domainUserName = defaults.domainUserName;
    	      this.enableAdminAccess = defaults.enableAdminAccess;
    	      this.enableCrossDesktopAccess = defaults.enableCrossDesktopAccess;
    	      this.enableInternetAccess = defaults.enableInternetAccess;
    	      this.fileSystemIds = defaults.fileSystemIds;
    	      this.id = defaults.id;
    	      this.mfaEnabled = defaults.mfaEnabled;
    	      this.networkPackageId = defaults.networkPackageId;
    	      this.officeSiteId = defaults.officeSiteId;
    	      this.officeSiteType = defaults.officeSiteType;
    	      this.simpleOfficeSiteName = defaults.simpleOfficeSiteName;
    	      this.ssoEnabled = defaults.ssoEnabled;
    	      this.ssoStatus = defaults.ssoStatus;
    	      this.status = defaults.status;
    	      this.subDnsAddresses = defaults.subDnsAddresses;
    	      this.subDomainName = defaults.subDomainName;
    	      this.trustPassword = defaults.trustPassword;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchIds = defaults.vswitchIds;
        }

        public Builder bandwidth(Integer bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        public Builder cenId(String cenId) {
            this.cenId = Objects.requireNonNull(cenId);
            return this;
        }
        public Builder cidrBlock(String cidrBlock) {
            this.cidrBlock = Objects.requireNonNull(cidrBlock);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder customSecurityGroupId(String customSecurityGroupId) {
            this.customSecurityGroupId = Objects.requireNonNull(customSecurityGroupId);
            return this;
        }
        public Builder desktopAccessType(String desktopAccessType) {
            this.desktopAccessType = Objects.requireNonNull(desktopAccessType);
            return this;
        }
        public Builder desktopVpcEndpoint(String desktopVpcEndpoint) {
            this.desktopVpcEndpoint = Objects.requireNonNull(desktopVpcEndpoint);
            return this;
        }
        public Builder dnsAddresses(List<String> dnsAddresses) {
            this.dnsAddresses = Objects.requireNonNull(dnsAddresses);
            return this;
        }
        public Builder dnsAddresses(String... dnsAddresses) {
            return dnsAddresses(List.of(dnsAddresses));
        }
        public Builder dnsUserName(String dnsUserName) {
            this.dnsUserName = Objects.requireNonNull(dnsUserName);
            return this;
        }
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        public Builder domainPassword(String domainPassword) {
            this.domainPassword = Objects.requireNonNull(domainPassword);
            return this;
        }
        public Builder domainUserName(String domainUserName) {
            this.domainUserName = Objects.requireNonNull(domainUserName);
            return this;
        }
        public Builder enableAdminAccess(Boolean enableAdminAccess) {
            this.enableAdminAccess = Objects.requireNonNull(enableAdminAccess);
            return this;
        }
        public Builder enableCrossDesktopAccess(Boolean enableCrossDesktopAccess) {
            this.enableCrossDesktopAccess = Objects.requireNonNull(enableCrossDesktopAccess);
            return this;
        }
        public Builder enableInternetAccess(Boolean enableInternetAccess) {
            this.enableInternetAccess = Objects.requireNonNull(enableInternetAccess);
            return this;
        }
        public Builder fileSystemIds(List<String> fileSystemIds) {
            this.fileSystemIds = Objects.requireNonNull(fileSystemIds);
            return this;
        }
        public Builder fileSystemIds(String... fileSystemIds) {
            return fileSystemIds(List.of(fileSystemIds));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder mfaEnabled(Boolean mfaEnabled) {
            this.mfaEnabled = Objects.requireNonNull(mfaEnabled);
            return this;
        }
        public Builder networkPackageId(String networkPackageId) {
            this.networkPackageId = Objects.requireNonNull(networkPackageId);
            return this;
        }
        public Builder officeSiteId(String officeSiteId) {
            this.officeSiteId = Objects.requireNonNull(officeSiteId);
            return this;
        }
        public Builder officeSiteType(String officeSiteType) {
            this.officeSiteType = Objects.requireNonNull(officeSiteType);
            return this;
        }
        public Builder simpleOfficeSiteName(String simpleOfficeSiteName) {
            this.simpleOfficeSiteName = Objects.requireNonNull(simpleOfficeSiteName);
            return this;
        }
        public Builder ssoEnabled(Boolean ssoEnabled) {
            this.ssoEnabled = Objects.requireNonNull(ssoEnabled);
            return this;
        }
        public Builder ssoStatus(Boolean ssoStatus) {
            this.ssoStatus = Objects.requireNonNull(ssoStatus);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder subDnsAddresses(List<String> subDnsAddresses) {
            this.subDnsAddresses = Objects.requireNonNull(subDnsAddresses);
            return this;
        }
        public Builder subDnsAddresses(String... subDnsAddresses) {
            return subDnsAddresses(List.of(subDnsAddresses));
        }
        public Builder subDomainName(String subDomainName) {
            this.subDomainName = Objects.requireNonNull(subDomainName);
            return this;
        }
        public Builder trustPassword(String trustPassword) {
            this.trustPassword = Objects.requireNonNull(trustPassword);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchIds(List<String> vswitchIds) {
            this.vswitchIds = Objects.requireNonNull(vswitchIds);
            return this;
        }
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }        public GetSimpleOfficeSitesSite build() {
            return new GetSimpleOfficeSitesSite(bandwidth, cenId, cidrBlock, createTime, customSecurityGroupId, desktopAccessType, desktopVpcEndpoint, dnsAddresses, dnsUserName, domainName, domainPassword, domainUserName, enableAdminAccess, enableCrossDesktopAccess, enableInternetAccess, fileSystemIds, id, mfaEnabled, networkPackageId, officeSiteId, officeSiteType, simpleOfficeSiteName, ssoEnabled, ssoStatus, status, subDnsAddresses, subDomainName, trustPassword, vpcId, vswitchIds);
        }
    }
}
