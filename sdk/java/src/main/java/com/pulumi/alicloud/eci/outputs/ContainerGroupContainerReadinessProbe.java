// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.outputs;

import com.pulumi.alicloud.eci.outputs.ContainerGroupContainerReadinessProbeExec;
import com.pulumi.alicloud.eci.outputs.ContainerGroupContainerReadinessProbeHttpGet;
import com.pulumi.alicloud.eci.outputs.ContainerGroupContainerReadinessProbeTcpSocket;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerGroupContainerReadinessProbe {
    /**
     * @return Health check using command line method.
     * 
     */
    private final @Nullable List<ContainerGroupContainerReadinessProbeExec> execs;
    /**
     * @return Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
     * 
     */
    private final @Nullable Integer failureThreshold;
    /**
     * @return Health check using HTTP request method.
     * 
     */
    private final @Nullable List<ContainerGroupContainerReadinessProbeHttpGet> httpGets;
    /**
     * @return Check the time to start execution, calculated from the completion of container startup.
     * 
     */
    private final @Nullable Integer initialDelaySeconds;
    /**
     * @return Buffer time for the program to handle operations before closing.
     * 
     */
    private final @Nullable Integer periodSeconds;
    /**
     * @return The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
     * 
     */
    private final @Nullable Integer successThreshold;
    /**
     * @return Health check using TCP socket method.
     * 
     */
    private final @Nullable List<ContainerGroupContainerReadinessProbeTcpSocket> tcpSockets;
    /**
     * @return Check the timeout, the default is 1 second, the minimum is 1 second.
     * 
     */
    private final @Nullable Integer timeoutSeconds;

    @CustomType.Constructor
    private ContainerGroupContainerReadinessProbe(
        @CustomType.Parameter("execs") @Nullable List<ContainerGroupContainerReadinessProbeExec> execs,
        @CustomType.Parameter("failureThreshold") @Nullable Integer failureThreshold,
        @CustomType.Parameter("httpGets") @Nullable List<ContainerGroupContainerReadinessProbeHttpGet> httpGets,
        @CustomType.Parameter("initialDelaySeconds") @Nullable Integer initialDelaySeconds,
        @CustomType.Parameter("periodSeconds") @Nullable Integer periodSeconds,
        @CustomType.Parameter("successThreshold") @Nullable Integer successThreshold,
        @CustomType.Parameter("tcpSockets") @Nullable List<ContainerGroupContainerReadinessProbeTcpSocket> tcpSockets,
        @CustomType.Parameter("timeoutSeconds") @Nullable Integer timeoutSeconds) {
        this.execs = execs;
        this.failureThreshold = failureThreshold;
        this.httpGets = httpGets;
        this.initialDelaySeconds = initialDelaySeconds;
        this.periodSeconds = periodSeconds;
        this.successThreshold = successThreshold;
        this.tcpSockets = tcpSockets;
        this.timeoutSeconds = timeoutSeconds;
    }

    /**
     * @return Health check using command line method.
     * 
     */
    public List<ContainerGroupContainerReadinessProbeExec> execs() {
        return this.execs == null ? List.of() : this.execs;
    }
    /**
     * @return Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
     * 
     */
    public Optional<Integer> failureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }
    /**
     * @return Health check using HTTP request method.
     * 
     */
    public List<ContainerGroupContainerReadinessProbeHttpGet> httpGets() {
        return this.httpGets == null ? List.of() : this.httpGets;
    }
    /**
     * @return Check the time to start execution, calculated from the completion of container startup.
     * 
     */
    public Optional<Integer> initialDelaySeconds() {
        return Optional.ofNullable(this.initialDelaySeconds);
    }
    /**
     * @return Buffer time for the program to handle operations before closing.
     * 
     */
    public Optional<Integer> periodSeconds() {
        return Optional.ofNullable(this.periodSeconds);
    }
    /**
     * @return The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
     * 
     */
    public Optional<Integer> successThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }
    /**
     * @return Health check using TCP socket method.
     * 
     */
    public List<ContainerGroupContainerReadinessProbeTcpSocket> tcpSockets() {
        return this.tcpSockets == null ? List.of() : this.tcpSockets;
    }
    /**
     * @return Check the timeout, the default is 1 second, the minimum is 1 second.
     * 
     */
    public Optional<Integer> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerGroupContainerReadinessProbe defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<ContainerGroupContainerReadinessProbeExec> execs;
        private @Nullable Integer failureThreshold;
        private @Nullable List<ContainerGroupContainerReadinessProbeHttpGet> httpGets;
        private @Nullable Integer initialDelaySeconds;
        private @Nullable Integer periodSeconds;
        private @Nullable Integer successThreshold;
        private @Nullable List<ContainerGroupContainerReadinessProbeTcpSocket> tcpSockets;
        private @Nullable Integer timeoutSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerGroupContainerReadinessProbe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.execs = defaults.execs;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.httpGets = defaults.httpGets;
    	      this.initialDelaySeconds = defaults.initialDelaySeconds;
    	      this.periodSeconds = defaults.periodSeconds;
    	      this.successThreshold = defaults.successThreshold;
    	      this.tcpSockets = defaults.tcpSockets;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        public Builder execs(@Nullable List<ContainerGroupContainerReadinessProbeExec> execs) {
            this.execs = execs;
            return this;
        }
        public Builder execs(ContainerGroupContainerReadinessProbeExec... execs) {
            return execs(List.of(execs));
        }
        public Builder failureThreshold(@Nullable Integer failureThreshold) {
            this.failureThreshold = failureThreshold;
            return this;
        }
        public Builder httpGets(@Nullable List<ContainerGroupContainerReadinessProbeHttpGet> httpGets) {
            this.httpGets = httpGets;
            return this;
        }
        public Builder httpGets(ContainerGroupContainerReadinessProbeHttpGet... httpGets) {
            return httpGets(List.of(httpGets));
        }
        public Builder initialDelaySeconds(@Nullable Integer initialDelaySeconds) {
            this.initialDelaySeconds = initialDelaySeconds;
            return this;
        }
        public Builder periodSeconds(@Nullable Integer periodSeconds) {
            this.periodSeconds = periodSeconds;
            return this;
        }
        public Builder successThreshold(@Nullable Integer successThreshold) {
            this.successThreshold = successThreshold;
            return this;
        }
        public Builder tcpSockets(@Nullable List<ContainerGroupContainerReadinessProbeTcpSocket> tcpSockets) {
            this.tcpSockets = tcpSockets;
            return this;
        }
        public Builder tcpSockets(ContainerGroupContainerReadinessProbeTcpSocket... tcpSockets) {
            return tcpSockets(List.of(tcpSockets));
        }
        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }        public ContainerGroupContainerReadinessProbe build() {
            return new ContainerGroupContainerReadinessProbe(execs, failureThreshold, httpGets, initialDelaySeconds, periodSeconds, successThreshold, tcpSockets, timeoutSeconds);
        }
    }
}
