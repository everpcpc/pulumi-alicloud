// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFoldersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFoldersArgs Empty = new GetFoldersArgs();

    /**
     * -(Optional, Available in v1.114.0+) Default to `false`. Set it to true can output more details.
     * 
     */
    @Import(name="enableDetails")
    private @Nullable Output<Boolean> enableDetails;

    /**
     * @return -(Optional, Available in v1.114.0+) Default to `false`. Set it to true can output more details.
     * 
     */
    public Optional<Output<Boolean>> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }

    /**
     * A list of resource manager folders IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of resource manager folders IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter results by folder name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter results by folder name.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The ID of the parent folder.
     * 
     */
    @Import(name="parentFolderId")
    private @Nullable Output<String> parentFolderId;

    /**
     * @return The ID of the parent folder.
     * 
     */
    public Optional<Output<String>> parentFolderId() {
        return Optional.ofNullable(this.parentFolderId);
    }

    /**
     * The query keyword.
     * 
     */
    @Import(name="queryKeyword")
    private @Nullable Output<String> queryKeyword;

    /**
     * @return The query keyword.
     * 
     */
    public Optional<Output<String>> queryKeyword() {
        return Optional.ofNullable(this.queryKeyword);
    }

    private GetFoldersArgs() {}

    private GetFoldersArgs(GetFoldersArgs $) {
        this.enableDetails = $.enableDetails;
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.parentFolderId = $.parentFolderId;
        this.queryKeyword = $.queryKeyword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFoldersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFoldersArgs $;

        public Builder() {
            $ = new GetFoldersArgs();
        }

        public Builder(GetFoldersArgs defaults) {
            $ = new GetFoldersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableDetails -(Optional, Available in v1.114.0+) Default to `false`. Set it to true can output more details.
         * 
         * @return builder
         * 
         */
        public Builder enableDetails(@Nullable Output<Boolean> enableDetails) {
            $.enableDetails = enableDetails;
            return this;
        }

        /**
         * @param enableDetails -(Optional, Available in v1.114.0+) Default to `false`. Set it to true can output more details.
         * 
         * @return builder
         * 
         */
        public Builder enableDetails(Boolean enableDetails) {
            return enableDetails(Output.of(enableDetails));
        }

        /**
         * @param ids A list of resource manager folders IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of resource manager folders IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of resource manager folders IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter results by folder name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by folder name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param parentFolderId The ID of the parent folder.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(@Nullable Output<String> parentFolderId) {
            $.parentFolderId = parentFolderId;
            return this;
        }

        /**
         * @param parentFolderId The ID of the parent folder.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(String parentFolderId) {
            return parentFolderId(Output.of(parentFolderId));
        }

        /**
         * @param queryKeyword The query keyword.
         * 
         * @return builder
         * 
         */
        public Builder queryKeyword(@Nullable Output<String> queryKeyword) {
            $.queryKeyword = queryKeyword;
            return this;
        }

        /**
         * @param queryKeyword The query keyword.
         * 
         * @return builder
         * 
         */
        public Builder queryKeyword(String queryKeyword) {
            return queryKeyword(Output.of(queryKeyword));
        }

        public GetFoldersArgs build() {
            return $;
        }
    }

}
