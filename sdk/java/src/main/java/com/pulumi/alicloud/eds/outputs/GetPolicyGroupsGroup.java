// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.outputs;

import com.pulumi.alicloud.eds.outputs.GetPolicyGroupsGroupAuthorizeAccessPolicyRule;
import com.pulumi.alicloud.eds.outputs.GetPolicyGroupsGroupAuthorizeSecurityPolicyRule;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPolicyGroupsGroup {
    /**
     * @return The rule of authorize access rule.
     * 
     */
    private final List<GetPolicyGroupsGroupAuthorizeAccessPolicyRule> authorizeAccessPolicyRules;
    /**
     * @return The policy rule.
     * 
     */
    private final List<GetPolicyGroupsGroupAuthorizeSecurityPolicyRule> authorizeSecurityPolicyRules;
    /**
     * @return Whether to enable local camera redirection. Valid values: `on`, `off`.
     * 
     */
    private final String cameraRedirect;
    /**
     * @return The clipboard policy.
     * 
     */
    private final String clipboard;
    /**
     * @return The list of domain.
     * 
     */
    private final String domainList;
    /**
     * @return The count of eds.
     * 
     */
    private final Integer edsCount;
    /**
     * @return The access of html5.
     * 
     */
    private final String htmlAccess;
    /**
     * @return The html5 file transfer.
     * 
     */
    private final String htmlFileTransfer;
    /**
     * @return The ID of the Policy Group.
     * 
     */
    private final String id;
    /**
     * @return Local drive redirect policy.
     * 
     */
    private final String localDrive;
    /**
     * @return The policy group id.
     * 
     */
    private final String policyGroupId;
    /**
     * @return The name of policy group.
     * 
     */
    private final String policyGroupName;
    /**
     * @return The type of policy group.
     * 
     */
    private final String policyGroupType;
    /**
     * @return Whether to enable screen recording. Valid values: `off`, `alltime`, `period`.
     * 
     */
    private final String recording;
    /**
     * @return The end time of recording.
     * 
     */
    private final String recordingEndTime;
    /**
     * @return The fps of recording. Valid values: `2`, `5`, `10`, `15`.
     * 
     */
    private final Integer recordingFps;
    /**
     * @return The start time of recording.
     * 
     */
    private final String recordingStartTime;
    /**
     * @return The status of policy.
     * 
     */
    private final String status;
    /**
     * @return The usb redirect policy.
     * 
     */
    private final String usbRedirect;
    /**
     * @return The quality of visual.sae_ecdsae_nameecd_po
     * 
     */
    private final String visualQuality;
    /**
     * @return The watermark policy.
     * 
     */
    private final String watermark;
    /**
     * @return The watermark transparency.
     * 
     */
    private final String watermarkTransparency;
    /**
     * @return The type of watemark.
     * 
     */
    private final String watermarkType;

    @CustomType.Constructor
    private GetPolicyGroupsGroup(
        @CustomType.Parameter("authorizeAccessPolicyRules") List<GetPolicyGroupsGroupAuthorizeAccessPolicyRule> authorizeAccessPolicyRules,
        @CustomType.Parameter("authorizeSecurityPolicyRules") List<GetPolicyGroupsGroupAuthorizeSecurityPolicyRule> authorizeSecurityPolicyRules,
        @CustomType.Parameter("cameraRedirect") String cameraRedirect,
        @CustomType.Parameter("clipboard") String clipboard,
        @CustomType.Parameter("domainList") String domainList,
        @CustomType.Parameter("edsCount") Integer edsCount,
        @CustomType.Parameter("htmlAccess") String htmlAccess,
        @CustomType.Parameter("htmlFileTransfer") String htmlFileTransfer,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("localDrive") String localDrive,
        @CustomType.Parameter("policyGroupId") String policyGroupId,
        @CustomType.Parameter("policyGroupName") String policyGroupName,
        @CustomType.Parameter("policyGroupType") String policyGroupType,
        @CustomType.Parameter("recording") String recording,
        @CustomType.Parameter("recordingEndTime") String recordingEndTime,
        @CustomType.Parameter("recordingFps") Integer recordingFps,
        @CustomType.Parameter("recordingStartTime") String recordingStartTime,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("usbRedirect") String usbRedirect,
        @CustomType.Parameter("visualQuality") String visualQuality,
        @CustomType.Parameter("watermark") String watermark,
        @CustomType.Parameter("watermarkTransparency") String watermarkTransparency,
        @CustomType.Parameter("watermarkType") String watermarkType) {
        this.authorizeAccessPolicyRules = authorizeAccessPolicyRules;
        this.authorizeSecurityPolicyRules = authorizeSecurityPolicyRules;
        this.cameraRedirect = cameraRedirect;
        this.clipboard = clipboard;
        this.domainList = domainList;
        this.edsCount = edsCount;
        this.htmlAccess = htmlAccess;
        this.htmlFileTransfer = htmlFileTransfer;
        this.id = id;
        this.localDrive = localDrive;
        this.policyGroupId = policyGroupId;
        this.policyGroupName = policyGroupName;
        this.policyGroupType = policyGroupType;
        this.recording = recording;
        this.recordingEndTime = recordingEndTime;
        this.recordingFps = recordingFps;
        this.recordingStartTime = recordingStartTime;
        this.status = status;
        this.usbRedirect = usbRedirect;
        this.visualQuality = visualQuality;
        this.watermark = watermark;
        this.watermarkTransparency = watermarkTransparency;
        this.watermarkType = watermarkType;
    }

    /**
     * @return The rule of authorize access rule.
     * 
     */
    public List<GetPolicyGroupsGroupAuthorizeAccessPolicyRule> authorizeAccessPolicyRules() {
        return this.authorizeAccessPolicyRules;
    }
    /**
     * @return The policy rule.
     * 
     */
    public List<GetPolicyGroupsGroupAuthorizeSecurityPolicyRule> authorizeSecurityPolicyRules() {
        return this.authorizeSecurityPolicyRules;
    }
    /**
     * @return Whether to enable local camera redirection. Valid values: `on`, `off`.
     * 
     */
    public String cameraRedirect() {
        return this.cameraRedirect;
    }
    /**
     * @return The clipboard policy.
     * 
     */
    public String clipboard() {
        return this.clipboard;
    }
    /**
     * @return The list of domain.
     * 
     */
    public String domainList() {
        return this.domainList;
    }
    /**
     * @return The count of eds.
     * 
     */
    public Integer edsCount() {
        return this.edsCount;
    }
    /**
     * @return The access of html5.
     * 
     */
    public String htmlAccess() {
        return this.htmlAccess;
    }
    /**
     * @return The html5 file transfer.
     * 
     */
    public String htmlFileTransfer() {
        return this.htmlFileTransfer;
    }
    /**
     * @return The ID of the Policy Group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Local drive redirect policy.
     * 
     */
    public String localDrive() {
        return this.localDrive;
    }
    /**
     * @return The policy group id.
     * 
     */
    public String policyGroupId() {
        return this.policyGroupId;
    }
    /**
     * @return The name of policy group.
     * 
     */
    public String policyGroupName() {
        return this.policyGroupName;
    }
    /**
     * @return The type of policy group.
     * 
     */
    public String policyGroupType() {
        return this.policyGroupType;
    }
    /**
     * @return Whether to enable screen recording. Valid values: `off`, `alltime`, `period`.
     * 
     */
    public String recording() {
        return this.recording;
    }
    /**
     * @return The end time of recording.
     * 
     */
    public String recordingEndTime() {
        return this.recordingEndTime;
    }
    /**
     * @return The fps of recording. Valid values: `2`, `5`, `10`, `15`.
     * 
     */
    public Integer recordingFps() {
        return this.recordingFps;
    }
    /**
     * @return The start time of recording.
     * 
     */
    public String recordingStartTime() {
        return this.recordingStartTime;
    }
    /**
     * @return The status of policy.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The usb redirect policy.
     * 
     */
    public String usbRedirect() {
        return this.usbRedirect;
    }
    /**
     * @return The quality of visual.sae_ecdsae_nameecd_po
     * 
     */
    public String visualQuality() {
        return this.visualQuality;
    }
    /**
     * @return The watermark policy.
     * 
     */
    public String watermark() {
        return this.watermark;
    }
    /**
     * @return The watermark transparency.
     * 
     */
    public String watermarkTransparency() {
        return this.watermarkTransparency;
    }
    /**
     * @return The type of watemark.
     * 
     */
    public String watermarkType() {
        return this.watermarkType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyGroupsGroup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetPolicyGroupsGroupAuthorizeAccessPolicyRule> authorizeAccessPolicyRules;
        private List<GetPolicyGroupsGroupAuthorizeSecurityPolicyRule> authorizeSecurityPolicyRules;
        private String cameraRedirect;
        private String clipboard;
        private String domainList;
        private Integer edsCount;
        private String htmlAccess;
        private String htmlFileTransfer;
        private String id;
        private String localDrive;
        private String policyGroupId;
        private String policyGroupName;
        private String policyGroupType;
        private String recording;
        private String recordingEndTime;
        private Integer recordingFps;
        private String recordingStartTime;
        private String status;
        private String usbRedirect;
        private String visualQuality;
        private String watermark;
        private String watermarkTransparency;
        private String watermarkType;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPolicyGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizeAccessPolicyRules = defaults.authorizeAccessPolicyRules;
    	      this.authorizeSecurityPolicyRules = defaults.authorizeSecurityPolicyRules;
    	      this.cameraRedirect = defaults.cameraRedirect;
    	      this.clipboard = defaults.clipboard;
    	      this.domainList = defaults.domainList;
    	      this.edsCount = defaults.edsCount;
    	      this.htmlAccess = defaults.htmlAccess;
    	      this.htmlFileTransfer = defaults.htmlFileTransfer;
    	      this.id = defaults.id;
    	      this.localDrive = defaults.localDrive;
    	      this.policyGroupId = defaults.policyGroupId;
    	      this.policyGroupName = defaults.policyGroupName;
    	      this.policyGroupType = defaults.policyGroupType;
    	      this.recording = defaults.recording;
    	      this.recordingEndTime = defaults.recordingEndTime;
    	      this.recordingFps = defaults.recordingFps;
    	      this.recordingStartTime = defaults.recordingStartTime;
    	      this.status = defaults.status;
    	      this.usbRedirect = defaults.usbRedirect;
    	      this.visualQuality = defaults.visualQuality;
    	      this.watermark = defaults.watermark;
    	      this.watermarkTransparency = defaults.watermarkTransparency;
    	      this.watermarkType = defaults.watermarkType;
        }

        public Builder authorizeAccessPolicyRules(List<GetPolicyGroupsGroupAuthorizeAccessPolicyRule> authorizeAccessPolicyRules) {
            this.authorizeAccessPolicyRules = Objects.requireNonNull(authorizeAccessPolicyRules);
            return this;
        }
        public Builder authorizeAccessPolicyRules(GetPolicyGroupsGroupAuthorizeAccessPolicyRule... authorizeAccessPolicyRules) {
            return authorizeAccessPolicyRules(List.of(authorizeAccessPolicyRules));
        }
        public Builder authorizeSecurityPolicyRules(List<GetPolicyGroupsGroupAuthorizeSecurityPolicyRule> authorizeSecurityPolicyRules) {
            this.authorizeSecurityPolicyRules = Objects.requireNonNull(authorizeSecurityPolicyRules);
            return this;
        }
        public Builder authorizeSecurityPolicyRules(GetPolicyGroupsGroupAuthorizeSecurityPolicyRule... authorizeSecurityPolicyRules) {
            return authorizeSecurityPolicyRules(List.of(authorizeSecurityPolicyRules));
        }
        public Builder cameraRedirect(String cameraRedirect) {
            this.cameraRedirect = Objects.requireNonNull(cameraRedirect);
            return this;
        }
        public Builder clipboard(String clipboard) {
            this.clipboard = Objects.requireNonNull(clipboard);
            return this;
        }
        public Builder domainList(String domainList) {
            this.domainList = Objects.requireNonNull(domainList);
            return this;
        }
        public Builder edsCount(Integer edsCount) {
            this.edsCount = Objects.requireNonNull(edsCount);
            return this;
        }
        public Builder htmlAccess(String htmlAccess) {
            this.htmlAccess = Objects.requireNonNull(htmlAccess);
            return this;
        }
        public Builder htmlFileTransfer(String htmlFileTransfer) {
            this.htmlFileTransfer = Objects.requireNonNull(htmlFileTransfer);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder localDrive(String localDrive) {
            this.localDrive = Objects.requireNonNull(localDrive);
            return this;
        }
        public Builder policyGroupId(String policyGroupId) {
            this.policyGroupId = Objects.requireNonNull(policyGroupId);
            return this;
        }
        public Builder policyGroupName(String policyGroupName) {
            this.policyGroupName = Objects.requireNonNull(policyGroupName);
            return this;
        }
        public Builder policyGroupType(String policyGroupType) {
            this.policyGroupType = Objects.requireNonNull(policyGroupType);
            return this;
        }
        public Builder recording(String recording) {
            this.recording = Objects.requireNonNull(recording);
            return this;
        }
        public Builder recordingEndTime(String recordingEndTime) {
            this.recordingEndTime = Objects.requireNonNull(recordingEndTime);
            return this;
        }
        public Builder recordingFps(Integer recordingFps) {
            this.recordingFps = Objects.requireNonNull(recordingFps);
            return this;
        }
        public Builder recordingStartTime(String recordingStartTime) {
            this.recordingStartTime = Objects.requireNonNull(recordingStartTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder usbRedirect(String usbRedirect) {
            this.usbRedirect = Objects.requireNonNull(usbRedirect);
            return this;
        }
        public Builder visualQuality(String visualQuality) {
            this.visualQuality = Objects.requireNonNull(visualQuality);
            return this;
        }
        public Builder watermark(String watermark) {
            this.watermark = Objects.requireNonNull(watermark);
            return this;
        }
        public Builder watermarkTransparency(String watermarkTransparency) {
            this.watermarkTransparency = Objects.requireNonNull(watermarkTransparency);
            return this;
        }
        public Builder watermarkType(String watermarkType) {
            this.watermarkType = Objects.requireNonNull(watermarkType);
            return this;
        }        public GetPolicyGroupsGroup build() {
            return new GetPolicyGroupsGroup(authorizeAccessPolicyRules, authorizeSecurityPolicyRules, cameraRedirect, clipboard, domainList, edsCount, htmlAccess, htmlFileTransfer, id, localDrive, policyGroupId, policyGroupName, policyGroupType, recording, recordingEndTime, recordingFps, recordingStartTime, status, usbRedirect, visualQuality, watermark, watermarkTransparency, watermarkType);
        }
    }
}
