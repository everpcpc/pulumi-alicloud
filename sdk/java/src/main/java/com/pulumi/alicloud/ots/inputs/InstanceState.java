// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * The network limitation of accessing instance. Valid values:
     * 
     */
    @Import(name="accessedBy")
    private @Nullable Output<String> accessedBy;

    /**
     * @return The network limitation of accessing instance. Valid values:
     * 
     */
    public Optional<Output<String>> accessedBy() {
        return Optional.ofNullable(this.accessedBy);
    }

    /**
     * The description of the instance. Currently, it does not support modifying.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the instance. Currently, it does not support modifying.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The type of instance. Valid values are &#34;Capacity&#34; and &#34;HighPerformance&#34;. Default to &#34;HighPerformance&#34;.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The type of instance. Valid values are &#34;Capacity&#34; and &#34;HighPerformance&#34;. Default to &#34;HighPerformance&#34;.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The name of the instance.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the instance.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A mapping of tags to assign to the instance.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the instance.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.accessedBy = $.accessedBy;
        this.description = $.description;
        this.instanceType = $.instanceType;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessedBy The network limitation of accessing instance. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder accessedBy(@Nullable Output<String> accessedBy) {
            $.accessedBy = accessedBy;
            return this;
        }

        /**
         * @param accessedBy The network limitation of accessing instance. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder accessedBy(String accessedBy) {
            return accessedBy(Output.of(accessedBy));
        }

        /**
         * @param description The description of the instance. Currently, it does not support modifying.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the instance. Currently, it does not support modifying.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param instanceType The type of instance. Valid values are &#34;Capacity&#34; and &#34;HighPerformance&#34;. Default to &#34;HighPerformance&#34;.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of instance. Valid values are &#34;Capacity&#34; and &#34;HighPerformance&#34;. Default to &#34;HighPerformance&#34;.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param name The name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags A mapping of tags to assign to the instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public InstanceState build() {
            return $;
        }
    }

}
