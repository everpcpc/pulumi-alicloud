// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.alicloud.ecs.outputs.GetInstancesInstanceDiskDeviceMapping;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return Availability zone where instances are located.
     * 
     */
    private final String availabilityZone;
    /**
     * @return Instance creation time.
     * 
     */
    private final String creationTime;
    /**
     * @return Instance description.
     * 
     */
    private final String description;
    /**
     * @return Description of the attached disks.
     * 
     */
    private final List<GetInstancesInstanceDiskDeviceMapping> diskDeviceMappings;
    /**
     * @return EIP address the VPC instance is using.
     * 
     */
    private final String eip;
    /**
     * @return ID of the instance.
     * 
     */
    private final String id;
    /**
     * @return The image ID of some ECS instance used.
     * 
     */
    private final String imageId;
    /**
     * @return Instance charge type.
     * 
     */
    private final String instanceChargeType;
    /**
     * @return Instance type.
     * 
     */
    private final String instanceType;
    /**
     * @return Instance network charge type.
     * 
     */
    private final String internetChargeType;
    /**
     * @return Max output bandwidth for internet.
     * 
     */
    private final Integer internetMaxBandwidthOut;
    /**
     * @return Key pair the instance is using.
     * 
     */
    private final String keyName;
    /**
     * @return Instance name.
     * 
     */
    private final String name;
    /**
     * @return Instance private IP address.
     * 
     */
    private final String privateIp;
    /**
     * @return Instance public IP address.
     * 
     */
    private final String publicIp;
    /**
     * @return The RAM role name which the instance attaches.
     * 
     */
    private final String ramRoleName;
    /**
     * @return Region ID the instance belongs to.
     * 
     */
    private final String regionId;
    /**
     * @return The Id of resource group which the instance belongs.
     * 
     */
    private final String resourceGroupId;
    /**
     * @return List of security group IDs the instance belongs to.
     * 
     */
    private final List<String> securityGroups;
    /**
     * @return Spot strategy the instance is using.
     * 
     */
    private final String spotStrategy;
    /**
     * @return Instance status. Valid values: &#34;Creating&#34;, &#34;Starting&#34;, &#34;Running&#34;, &#34;Stopping&#34; and &#34;Stopped&#34;. If undefined, all statuses are considered.
     * 
     */
    private final String status;
    /**
     * @return A map of tags assigned to the ECS instances. It must be in the format:
     * 
     */
    private final @Nullable Map<String,Object> tags;
    /**
     * @return ID of the VPC linked to the instances.
     * 
     */
    private final String vpcId;
    /**
     * @return ID of the VSwitch linked to the instances.
     * 
     */
    private final String vswitchId;

    @CustomType.Constructor
    private GetInstancesInstance(
        @CustomType.Parameter("availabilityZone") String availabilityZone,
        @CustomType.Parameter("creationTime") String creationTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("diskDeviceMappings") List<GetInstancesInstanceDiskDeviceMapping> diskDeviceMappings,
        @CustomType.Parameter("eip") String eip,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageId") String imageId,
        @CustomType.Parameter("instanceChargeType") String instanceChargeType,
        @CustomType.Parameter("instanceType") String instanceType,
        @CustomType.Parameter("internetChargeType") String internetChargeType,
        @CustomType.Parameter("internetMaxBandwidthOut") Integer internetMaxBandwidthOut,
        @CustomType.Parameter("keyName") String keyName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("privateIp") String privateIp,
        @CustomType.Parameter("publicIp") String publicIp,
        @CustomType.Parameter("ramRoleName") String ramRoleName,
        @CustomType.Parameter("regionId") String regionId,
        @CustomType.Parameter("resourceGroupId") String resourceGroupId,
        @CustomType.Parameter("securityGroups") List<String> securityGroups,
        @CustomType.Parameter("spotStrategy") String spotStrategy,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tags") @Nullable Map<String,Object> tags,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchId") String vswitchId) {
        this.availabilityZone = availabilityZone;
        this.creationTime = creationTime;
        this.description = description;
        this.diskDeviceMappings = diskDeviceMappings;
        this.eip = eip;
        this.id = id;
        this.imageId = imageId;
        this.instanceChargeType = instanceChargeType;
        this.instanceType = instanceType;
        this.internetChargeType = internetChargeType;
        this.internetMaxBandwidthOut = internetMaxBandwidthOut;
        this.keyName = keyName;
        this.name = name;
        this.privateIp = privateIp;
        this.publicIp = publicIp;
        this.ramRoleName = ramRoleName;
        this.regionId = regionId;
        this.resourceGroupId = resourceGroupId;
        this.securityGroups = securityGroups;
        this.spotStrategy = spotStrategy;
        this.status = status;
        this.tags = tags;
        this.vpcId = vpcId;
        this.vswitchId = vswitchId;
    }

    /**
     * @return Availability zone where instances are located.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return Instance creation time.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Instance description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Description of the attached disks.
     * 
     */
    public List<GetInstancesInstanceDiskDeviceMapping> diskDeviceMappings() {
        return this.diskDeviceMappings;
    }
    /**
     * @return EIP address the VPC instance is using.
     * 
     */
    public String eip() {
        return this.eip;
    }
    /**
     * @return ID of the instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The image ID of some ECS instance used.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return Instance charge type.
     * 
     */
    public String instanceChargeType() {
        return this.instanceChargeType;
    }
    /**
     * @return Instance type.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return Instance network charge type.
     * 
     */
    public String internetChargeType() {
        return this.internetChargeType;
    }
    /**
     * @return Max output bandwidth for internet.
     * 
     */
    public Integer internetMaxBandwidthOut() {
        return this.internetMaxBandwidthOut;
    }
    /**
     * @return Key pair the instance is using.
     * 
     */
    public String keyName() {
        return this.keyName;
    }
    /**
     * @return Instance name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Instance private IP address.
     * 
     */
    public String privateIp() {
        return this.privateIp;
    }
    /**
     * @return Instance public IP address.
     * 
     */
    public String publicIp() {
        return this.publicIp;
    }
    /**
     * @return The RAM role name which the instance attaches.
     * 
     */
    public String ramRoleName() {
        return this.ramRoleName;
    }
    /**
     * @return Region ID the instance belongs to.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return The Id of resource group which the instance belongs.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return List of security group IDs the instance belongs to.
     * 
     */
    public List<String> securityGroups() {
        return this.securityGroups;
    }
    /**
     * @return Spot strategy the instance is using.
     * 
     */
    public String spotStrategy() {
        return this.spotStrategy;
    }
    /**
     * @return Instance status. Valid values: &#34;Creating&#34;, &#34;Starting&#34;, &#34;Running&#34;, &#34;Stopping&#34; and &#34;Stopped&#34;. If undefined, all statuses are considered.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A map of tags assigned to the ECS instances. It must be in the format:
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return ID of the VPC linked to the instances.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return ID of the VSwitch linked to the instances.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String availabilityZone;
        private String creationTime;
        private String description;
        private List<GetInstancesInstanceDiskDeviceMapping> diskDeviceMappings;
        private String eip;
        private String id;
        private String imageId;
        private String instanceChargeType;
        private String instanceType;
        private String internetChargeType;
        private Integer internetMaxBandwidthOut;
        private String keyName;
        private String name;
        private String privateIp;
        private String publicIp;
        private String ramRoleName;
        private String regionId;
        private String resourceGroupId;
        private List<String> securityGroups;
        private String spotStrategy;
        private String status;
        private @Nullable Map<String,Object> tags;
        private String vpcId;
        private String vswitchId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.diskDeviceMappings = defaults.diskDeviceMappings;
    	      this.eip = defaults.eip;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.instanceChargeType = defaults.instanceChargeType;
    	      this.instanceType = defaults.instanceType;
    	      this.internetChargeType = defaults.internetChargeType;
    	      this.internetMaxBandwidthOut = defaults.internetMaxBandwidthOut;
    	      this.keyName = defaults.keyName;
    	      this.name = defaults.name;
    	      this.privateIp = defaults.privateIp;
    	      this.publicIp = defaults.publicIp;
    	      this.ramRoleName = defaults.ramRoleName;
    	      this.regionId = defaults.regionId;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.securityGroups = defaults.securityGroups;
    	      this.spotStrategy = defaults.spotStrategy;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
        }

        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder diskDeviceMappings(List<GetInstancesInstanceDiskDeviceMapping> diskDeviceMappings) {
            this.diskDeviceMappings = Objects.requireNonNull(diskDeviceMappings);
            return this;
        }
        public Builder diskDeviceMappings(GetInstancesInstanceDiskDeviceMapping... diskDeviceMappings) {
            return diskDeviceMappings(List.of(diskDeviceMappings));
        }
        public Builder eip(String eip) {
            this.eip = Objects.requireNonNull(eip);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        public Builder instanceChargeType(String instanceChargeType) {
            this.instanceChargeType = Objects.requireNonNull(instanceChargeType);
            return this;
        }
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        public Builder internetChargeType(String internetChargeType) {
            this.internetChargeType = Objects.requireNonNull(internetChargeType);
            return this;
        }
        public Builder internetMaxBandwidthOut(Integer internetMaxBandwidthOut) {
            this.internetMaxBandwidthOut = Objects.requireNonNull(internetMaxBandwidthOut);
            return this;
        }
        public Builder keyName(String keyName) {
            this.keyName = Objects.requireNonNull(keyName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder privateIp(String privateIp) {
            this.privateIp = Objects.requireNonNull(privateIp);
            return this;
        }
        public Builder publicIp(String publicIp) {
            this.publicIp = Objects.requireNonNull(publicIp);
            return this;
        }
        public Builder ramRoleName(String ramRoleName) {
            this.ramRoleName = Objects.requireNonNull(ramRoleName);
            return this;
        }
        public Builder regionId(String regionId) {
            this.regionId = Objects.requireNonNull(regionId);
            return this;
        }
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        public Builder securityGroups(List<String> securityGroups) {
            this.securityGroups = Objects.requireNonNull(securityGroups);
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        public Builder spotStrategy(String spotStrategy) {
            this.spotStrategy = Objects.requireNonNull(spotStrategy);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }        public GetInstancesInstance build() {
            return new GetInstancesInstance(availabilityZone, creationTime, description, diskDeviceMappings, eip, id, imageId, instanceChargeType, instanceType, internetChargeType, internetMaxBandwidthOut, keyName, name, privateIp, publicIp, ramRoleName, regionId, resourceGroupId, securityGroups, spotStrategy, status, tags, vpcId, vswitchId);
        }
    }
}
