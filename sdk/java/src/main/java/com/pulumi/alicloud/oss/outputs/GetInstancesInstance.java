// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return The cluster type of the instance. Possible values: `SSD`, `HYBRID`.
     * 
     */
    private final String clusterType;
    /**
     * @return The create time of the instance.
     * 
     */
    private final String createTime;
    /**
     * @return The description of the instance.
     * 
     */
    private final String description;
    /**
     * @return The instance quota which indicating the maximum number of tables.
     * 
     */
    private final Integer entityQuota;
    /**
     * @return ID of the instance.
     * 
     */
    private final String id;
    /**
     * @return Instance name.
     * 
     */
    private final String name;
    /**
     * @return The network type of the instance. Possible values: `NORMAL`, `VPC`, `VPC_CONSOLE`.
     * 
     */
    private final String network;
    /**
     * @return The maximum adjustable read capacity unit of the instance.
     * 
     */
    private final Integer readCapacity;
    /**
     * @return Instance status. Possible values: `Running`, `Disabled`, `Deleting`.
     * 
     */
    private final String status;
    /**
     * @return A map of tags assigned to the instance. It must be in the format:
     * 
     */
    private final Map<String,Object> tags;
    /**
     * @return The user id of the instance.
     * 
     */
    private final String userId;
    /**
     * @return The maximum adjustable write capacity unit of the instance.
     * 
     */
    private final Integer writeCapacity;

    @CustomType.Constructor
    private GetInstancesInstance(
        @CustomType.Parameter("clusterType") String clusterType,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("entityQuota") Integer entityQuota,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("network") String network,
        @CustomType.Parameter("readCapacity") Integer readCapacity,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tags") Map<String,Object> tags,
        @CustomType.Parameter("userId") String userId,
        @CustomType.Parameter("writeCapacity") Integer writeCapacity) {
        this.clusterType = clusterType;
        this.createTime = createTime;
        this.description = description;
        this.entityQuota = entityQuota;
        this.id = id;
        this.name = name;
        this.network = network;
        this.readCapacity = readCapacity;
        this.status = status;
        this.tags = tags;
        this.userId = userId;
        this.writeCapacity = writeCapacity;
    }

    /**
     * @return The cluster type of the instance. Possible values: `SSD`, `HYBRID`.
     * 
     */
    public String clusterType() {
        return this.clusterType;
    }
    /**
     * @return The create time of the instance.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The description of the instance.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The instance quota which indicating the maximum number of tables.
     * 
     */
    public Integer entityQuota() {
        return this.entityQuota;
    }
    /**
     * @return ID of the instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Instance name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The network type of the instance. Possible values: `NORMAL`, `VPC`, `VPC_CONSOLE`.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return The maximum adjustable read capacity unit of the instance.
     * 
     */
    public Integer readCapacity() {
        return this.readCapacity;
    }
    /**
     * @return Instance status. Possible values: `Running`, `Disabled`, `Deleting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A map of tags assigned to the instance. It must be in the format:
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The user id of the instance.
     * 
     */
    public String userId() {
        return this.userId;
    }
    /**
     * @return The maximum adjustable write capacity unit of the instance.
     * 
     */
    public Integer writeCapacity() {
        return this.writeCapacity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clusterType;
        private String createTime;
        private String description;
        private Integer entityQuota;
        private String id;
        private String name;
        private String network;
        private Integer readCapacity;
        private String status;
        private Map<String,Object> tags;
        private String userId;
        private Integer writeCapacity;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterType = defaults.clusterType;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.entityQuota = defaults.entityQuota;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.readCapacity = defaults.readCapacity;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.userId = defaults.userId;
    	      this.writeCapacity = defaults.writeCapacity;
        }

        public Builder clusterType(String clusterType) {
            this.clusterType = Objects.requireNonNull(clusterType);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder entityQuota(Integer entityQuota) {
            this.entityQuota = Objects.requireNonNull(entityQuota);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        public Builder readCapacity(Integer readCapacity) {
            this.readCapacity = Objects.requireNonNull(readCapacity);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }
        public Builder writeCapacity(Integer writeCapacity) {
            this.writeCapacity = Objects.requireNonNull(writeCapacity);
            return this;
        }        public GetInstancesInstance build() {
            return new GetInstancesInstance(clusterType, createTime, description, entityQuota, id, name, network, readCapacity, status, tags, userId, writeCapacity);
        }
    }
}
