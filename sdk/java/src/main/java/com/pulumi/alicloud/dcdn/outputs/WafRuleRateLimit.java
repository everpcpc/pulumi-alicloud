// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dcdn.outputs;

import com.pulumi.alicloud.dcdn.outputs.WafRuleRateLimitStatus;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WafRuleRateLimit {
    /**
     * @return Statistical duration, 5-1800.
     * 
     */
    private final @Nullable Integer interval;
    /**
     * @return The status of the waf rule. Valid values: `on` and `off`. Default value: on.
     * 
     */
    private final @Nullable WafRuleRateLimitStatus status;
    /**
     * @return The match subfield.
     * 
     */
    private final @Nullable String subKey;
    /**
     * @return The statistical field for frequency control. Currently, `IP`, `Header`, `Query String Parameter`, `Cookie Name`, `Session` is supported.
     * 
     */
    private final @Nullable String target;
    /**
     * @return The trigger threshold of rate limiting. Valid values: 2 to 500000. Unit: requests.
     * 
     */
    private final @Nullable Integer threshold;
    /**
     * @return The validity period of the blacklist. Valid values: 60 to 86400. Unit: seconds.
     * 
     */
    private final @Nullable Integer ttl;

    @CustomType.Constructor
    private WafRuleRateLimit(
        @CustomType.Parameter("interval") @Nullable Integer interval,
        @CustomType.Parameter("status") @Nullable WafRuleRateLimitStatus status,
        @CustomType.Parameter("subKey") @Nullable String subKey,
        @CustomType.Parameter("target") @Nullable String target,
        @CustomType.Parameter("threshold") @Nullable Integer threshold,
        @CustomType.Parameter("ttl") @Nullable Integer ttl) {
        this.interval = interval;
        this.status = status;
        this.subKey = subKey;
        this.target = target;
        this.threshold = threshold;
        this.ttl = ttl;
    }

    /**
     * @return Statistical duration, 5-1800.
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return The status of the waf rule. Valid values: `on` and `off`. Default value: on.
     * 
     */
    public Optional<WafRuleRateLimitStatus> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The match subfield.
     * 
     */
    public Optional<String> subKey() {
        return Optional.ofNullable(this.subKey);
    }
    /**
     * @return The statistical field for frequency control. Currently, `IP`, `Header`, `Query String Parameter`, `Cookie Name`, `Session` is supported.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return The trigger threshold of rate limiting. Valid values: 2 to 500000. Unit: requests.
     * 
     */
    public Optional<Integer> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return The validity period of the blacklist. Valid values: 60 to 86400. Unit: seconds.
     * 
     */
    public Optional<Integer> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WafRuleRateLimit defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer interval;
        private @Nullable WafRuleRateLimitStatus status;
        private @Nullable String subKey;
        private @Nullable String target;
        private @Nullable Integer threshold;
        private @Nullable Integer ttl;

        public Builder() {
    	      // Empty
        }

        public Builder(WafRuleRateLimit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.status = defaults.status;
    	      this.subKey = defaults.subKey;
    	      this.target = defaults.target;
    	      this.threshold = defaults.threshold;
    	      this.ttl = defaults.ttl;
        }

        public Builder interval(@Nullable Integer interval) {
            this.interval = interval;
            return this;
        }
        public Builder status(@Nullable WafRuleRateLimitStatus status) {
            this.status = status;
            return this;
        }
        public Builder subKey(@Nullable String subKey) {
            this.subKey = subKey;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        public Builder threshold(@Nullable Integer threshold) {
            this.threshold = threshold;
            return this;
        }
        public Builder ttl(@Nullable Integer ttl) {
            this.ttl = ttl;
            return this;
        }        public WafRuleRateLimit build() {
            return new WafRuleRateLimit(interval, status, subKey, target, threshold, ttl);
        }
    }
}
