// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEipAddressesAddress {
    /**
     * @return The name of the EIP.
     * 
     */
    private final String addressName;
    /**
     * @return The ID of the EIP.
     * 
     */
    private final String allocationId;
    /**
     * @return The ID of the region to which the EIP belongs.
     * 
     */
    private final List<String> availableRegions;
    /**
     * @return The maximum bandwidth of the EIP. Unit: Mbit/s.
     * 
     */
    private final String bandwidth;
    /**
     * @return The bandwidth value of the EIP bandwidth plan with which the EIP is associated.
     * 
     */
    private final String bandwidthPackageBandwidth;
    /**
     * @return The ID of the EIP bandwidth plan.
     * 
     */
    private final String bandwidthPackageId;
    /**
     * @return The type of the bandwidth. Only CommonBandwidthPackage (an EIP bandwidth plan) is returned.
     * 
     */
    private final String bandwidthPackageType;
    /**
     * @return The time when the EIP was created.
     * 
     */
    private final String createTime;
    /**
     * @return Indicates whether deletion protection is enabled.
     * 
     */
    private final Boolean deletionProtection;
    /**
     * @return The description of the EIP.
     * 
     */
    private final String description;
    /**
     * @return The expiration date. The time follows the ISO 8601 standard and is displayed in UTC. Format: YYYY-MM-DDThh:mmZ.
     * 
     */
    private final String expiredTime;
    /**
     * @return Indicates whether renewal data is included. This parameter returns true only when the parameter IncludeReservationData is set to true, and some orders have not taken effect.
     * 
     */
    private final String hasReservationData;
    /**
     * @return Indicates whether fine-grained monitoring is enabled for the EIP.
     * 
     */
    private final String hdMonitorStatus;
    /**
     * @return The ID of the Address.
     * 
     */
    private final String id;
    /**
     * @return The ID of the instance with which the EIP is associated.
     * 
     */
    private final String instanceId;
    /**
     * @return The region ID of the associated resource.
     * 
     */
    private final String instanceRegionId;
    /**
     * @return The type of the instance with which the EIP is associated.
     * 
     */
    private final String instanceType;
    /**
     * @return The metering method of the EIP.
     * 
     */
    private final String internetChargeType;
    /**
     * @return The IP address of the EIP.
     * 
     */
    private final String ipAddress;
    /**
     * @return The Internet service provider (ISP).
     * 
     */
    private final String isp;
    /**
     * @return The details about the locked EIP.
     * 
     */
    private final List<String> operationLocks;
    /**
     * @return The billing method of the EIP.
     * 
     */
    private final String paymentType;
    /**
     * @return The time when the renewal takes effect.
     * 
     */
    private final String reservationActiveTime;
    /**
     * @return The bandwidth after the renewal takes effect.
     * 
     */
    private final String reservationBandwidth;
    /**
     * @return The metering method of the renewal.
     * 
     */
    private final String reservationInternetChargeType;
    /**
     * @return The type of the renewal order.
     * 
     */
    private final String reservationOrderType;
    /**
     * @return The ID of the resource group.
     * 
     */
    private final String resourceGroupId;
    /**
     * @return Indicates whether level-2 throttling is configured.
     * 
     */
    private final Boolean secondLimited;
    /**
     * @return The IDs of the contiguous EIPs.
     * 
     */
    private final String segmentInstanceId;
    /**
     * @return The status of the EIP.
     * 
     */
    private final String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private final Map<String,Object> tags;

    @CustomType.Constructor
    private GetEipAddressesAddress(
        @CustomType.Parameter("addressName") String addressName,
        @CustomType.Parameter("allocationId") String allocationId,
        @CustomType.Parameter("availableRegions") List<String> availableRegions,
        @CustomType.Parameter("bandwidth") String bandwidth,
        @CustomType.Parameter("bandwidthPackageBandwidth") String bandwidthPackageBandwidth,
        @CustomType.Parameter("bandwidthPackageId") String bandwidthPackageId,
        @CustomType.Parameter("bandwidthPackageType") String bandwidthPackageType,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("deletionProtection") Boolean deletionProtection,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("expiredTime") String expiredTime,
        @CustomType.Parameter("hasReservationData") String hasReservationData,
        @CustomType.Parameter("hdMonitorStatus") String hdMonitorStatus,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceId") String instanceId,
        @CustomType.Parameter("instanceRegionId") String instanceRegionId,
        @CustomType.Parameter("instanceType") String instanceType,
        @CustomType.Parameter("internetChargeType") String internetChargeType,
        @CustomType.Parameter("ipAddress") String ipAddress,
        @CustomType.Parameter("isp") String isp,
        @CustomType.Parameter("operationLocks") List<String> operationLocks,
        @CustomType.Parameter("paymentType") String paymentType,
        @CustomType.Parameter("reservationActiveTime") String reservationActiveTime,
        @CustomType.Parameter("reservationBandwidth") String reservationBandwidth,
        @CustomType.Parameter("reservationInternetChargeType") String reservationInternetChargeType,
        @CustomType.Parameter("reservationOrderType") String reservationOrderType,
        @CustomType.Parameter("resourceGroupId") String resourceGroupId,
        @CustomType.Parameter("secondLimited") Boolean secondLimited,
        @CustomType.Parameter("segmentInstanceId") String segmentInstanceId,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tags") Map<String,Object> tags) {
        this.addressName = addressName;
        this.allocationId = allocationId;
        this.availableRegions = availableRegions;
        this.bandwidth = bandwidth;
        this.bandwidthPackageBandwidth = bandwidthPackageBandwidth;
        this.bandwidthPackageId = bandwidthPackageId;
        this.bandwidthPackageType = bandwidthPackageType;
        this.createTime = createTime;
        this.deletionProtection = deletionProtection;
        this.description = description;
        this.expiredTime = expiredTime;
        this.hasReservationData = hasReservationData;
        this.hdMonitorStatus = hdMonitorStatus;
        this.id = id;
        this.instanceId = instanceId;
        this.instanceRegionId = instanceRegionId;
        this.instanceType = instanceType;
        this.internetChargeType = internetChargeType;
        this.ipAddress = ipAddress;
        this.isp = isp;
        this.operationLocks = operationLocks;
        this.paymentType = paymentType;
        this.reservationActiveTime = reservationActiveTime;
        this.reservationBandwidth = reservationBandwidth;
        this.reservationInternetChargeType = reservationInternetChargeType;
        this.reservationOrderType = reservationOrderType;
        this.resourceGroupId = resourceGroupId;
        this.secondLimited = secondLimited;
        this.segmentInstanceId = segmentInstanceId;
        this.status = status;
        this.tags = tags;
    }

    /**
     * @return The name of the EIP.
     * 
     */
    public String addressName() {
        return this.addressName;
    }
    /**
     * @return The ID of the EIP.
     * 
     */
    public String allocationId() {
        return this.allocationId;
    }
    /**
     * @return The ID of the region to which the EIP belongs.
     * 
     */
    public List<String> availableRegions() {
        return this.availableRegions;
    }
    /**
     * @return The maximum bandwidth of the EIP. Unit: Mbit/s.
     * 
     */
    public String bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return The bandwidth value of the EIP bandwidth plan with which the EIP is associated.
     * 
     */
    public String bandwidthPackageBandwidth() {
        return this.bandwidthPackageBandwidth;
    }
    /**
     * @return The ID of the EIP bandwidth plan.
     * 
     */
    public String bandwidthPackageId() {
        return this.bandwidthPackageId;
    }
    /**
     * @return The type of the bandwidth. Only CommonBandwidthPackage (an EIP bandwidth plan) is returned.
     * 
     */
    public String bandwidthPackageType() {
        return this.bandwidthPackageType;
    }
    /**
     * @return The time when the EIP was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Indicates whether deletion protection is enabled.
     * 
     */
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * @return The description of the EIP.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The expiration date. The time follows the ISO 8601 standard and is displayed in UTC. Format: YYYY-MM-DDThh:mmZ.
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return Indicates whether renewal data is included. This parameter returns true only when the parameter IncludeReservationData is set to true, and some orders have not taken effect.
     * 
     */
    public String hasReservationData() {
        return this.hasReservationData;
    }
    /**
     * @return Indicates whether fine-grained monitoring is enabled for the EIP.
     * 
     */
    public String hdMonitorStatus() {
        return this.hdMonitorStatus;
    }
    /**
     * @return The ID of the Address.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the instance with which the EIP is associated.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The region ID of the associated resource.
     * 
     */
    public String instanceRegionId() {
        return this.instanceRegionId;
    }
    /**
     * @return The type of the instance with which the EIP is associated.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return The metering method of the EIP.
     * 
     */
    public String internetChargeType() {
        return this.internetChargeType;
    }
    /**
     * @return The IP address of the EIP.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The Internet service provider (ISP).
     * 
     */
    public String isp() {
        return this.isp;
    }
    /**
     * @return The details about the locked EIP.
     * 
     */
    public List<String> operationLocks() {
        return this.operationLocks;
    }
    /**
     * @return The billing method of the EIP.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The time when the renewal takes effect.
     * 
     */
    public String reservationActiveTime() {
        return this.reservationActiveTime;
    }
    /**
     * @return The bandwidth after the renewal takes effect.
     * 
     */
    public String reservationBandwidth() {
        return this.reservationBandwidth;
    }
    /**
     * @return The metering method of the renewal.
     * 
     */
    public String reservationInternetChargeType() {
        return this.reservationInternetChargeType;
    }
    /**
     * @return The type of the renewal order.
     * 
     */
    public String reservationOrderType() {
        return this.reservationOrderType;
    }
    /**
     * @return The ID of the resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return Indicates whether level-2 throttling is configured.
     * 
     */
    public Boolean secondLimited() {
        return this.secondLimited;
    }
    /**
     * @return The IDs of the contiguous EIPs.
     * 
     */
    public String segmentInstanceId() {
        return this.segmentInstanceId;
    }
    /**
     * @return The status of the EIP.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEipAddressesAddress defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String addressName;
        private String allocationId;
        private List<String> availableRegions;
        private String bandwidth;
        private String bandwidthPackageBandwidth;
        private String bandwidthPackageId;
        private String bandwidthPackageType;
        private String createTime;
        private Boolean deletionProtection;
        private String description;
        private String expiredTime;
        private String hasReservationData;
        private String hdMonitorStatus;
        private String id;
        private String instanceId;
        private String instanceRegionId;
        private String instanceType;
        private String internetChargeType;
        private String ipAddress;
        private String isp;
        private List<String> operationLocks;
        private String paymentType;
        private String reservationActiveTime;
        private String reservationBandwidth;
        private String reservationInternetChargeType;
        private String reservationOrderType;
        private String resourceGroupId;
        private Boolean secondLimited;
        private String segmentInstanceId;
        private String status;
        private Map<String,Object> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEipAddressesAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressName = defaults.addressName;
    	      this.allocationId = defaults.allocationId;
    	      this.availableRegions = defaults.availableRegions;
    	      this.bandwidth = defaults.bandwidth;
    	      this.bandwidthPackageBandwidth = defaults.bandwidthPackageBandwidth;
    	      this.bandwidthPackageId = defaults.bandwidthPackageId;
    	      this.bandwidthPackageType = defaults.bandwidthPackageType;
    	      this.createTime = defaults.createTime;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.expiredTime = defaults.expiredTime;
    	      this.hasReservationData = defaults.hasReservationData;
    	      this.hdMonitorStatus = defaults.hdMonitorStatus;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceRegionId = defaults.instanceRegionId;
    	      this.instanceType = defaults.instanceType;
    	      this.internetChargeType = defaults.internetChargeType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isp = defaults.isp;
    	      this.operationLocks = defaults.operationLocks;
    	      this.paymentType = defaults.paymentType;
    	      this.reservationActiveTime = defaults.reservationActiveTime;
    	      this.reservationBandwidth = defaults.reservationBandwidth;
    	      this.reservationInternetChargeType = defaults.reservationInternetChargeType;
    	      this.reservationOrderType = defaults.reservationOrderType;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.secondLimited = defaults.secondLimited;
    	      this.segmentInstanceId = defaults.segmentInstanceId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        public Builder addressName(String addressName) {
            this.addressName = Objects.requireNonNull(addressName);
            return this;
        }
        public Builder allocationId(String allocationId) {
            this.allocationId = Objects.requireNonNull(allocationId);
            return this;
        }
        public Builder availableRegions(List<String> availableRegions) {
            this.availableRegions = Objects.requireNonNull(availableRegions);
            return this;
        }
        public Builder availableRegions(String... availableRegions) {
            return availableRegions(List.of(availableRegions));
        }
        public Builder bandwidth(String bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        public Builder bandwidthPackageBandwidth(String bandwidthPackageBandwidth) {
            this.bandwidthPackageBandwidth = Objects.requireNonNull(bandwidthPackageBandwidth);
            return this;
        }
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            this.bandwidthPackageId = Objects.requireNonNull(bandwidthPackageId);
            return this;
        }
        public Builder bandwidthPackageType(String bandwidthPackageType) {
            this.bandwidthPackageType = Objects.requireNonNull(bandwidthPackageType);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder deletionProtection(Boolean deletionProtection) {
            this.deletionProtection = Objects.requireNonNull(deletionProtection);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder expiredTime(String expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        public Builder hasReservationData(String hasReservationData) {
            this.hasReservationData = Objects.requireNonNull(hasReservationData);
            return this;
        }
        public Builder hdMonitorStatus(String hdMonitorStatus) {
            this.hdMonitorStatus = Objects.requireNonNull(hdMonitorStatus);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder instanceRegionId(String instanceRegionId) {
            this.instanceRegionId = Objects.requireNonNull(instanceRegionId);
            return this;
        }
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        public Builder internetChargeType(String internetChargeType) {
            this.internetChargeType = Objects.requireNonNull(internetChargeType);
            return this;
        }
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        public Builder isp(String isp) {
            this.isp = Objects.requireNonNull(isp);
            return this;
        }
        public Builder operationLocks(List<String> operationLocks) {
            this.operationLocks = Objects.requireNonNull(operationLocks);
            return this;
        }
        public Builder operationLocks(String... operationLocks) {
            return operationLocks(List.of(operationLocks));
        }
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        public Builder reservationActiveTime(String reservationActiveTime) {
            this.reservationActiveTime = Objects.requireNonNull(reservationActiveTime);
            return this;
        }
        public Builder reservationBandwidth(String reservationBandwidth) {
            this.reservationBandwidth = Objects.requireNonNull(reservationBandwidth);
            return this;
        }
        public Builder reservationInternetChargeType(String reservationInternetChargeType) {
            this.reservationInternetChargeType = Objects.requireNonNull(reservationInternetChargeType);
            return this;
        }
        public Builder reservationOrderType(String reservationOrderType) {
            this.reservationOrderType = Objects.requireNonNull(reservationOrderType);
            return this;
        }
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        public Builder secondLimited(Boolean secondLimited) {
            this.secondLimited = Objects.requireNonNull(secondLimited);
            return this;
        }
        public Builder segmentInstanceId(String segmentInstanceId) {
            this.segmentInstanceId = Objects.requireNonNull(segmentInstanceId);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }        public GetEipAddressesAddress build() {
            return new GetEipAddressesAddress(addressName, allocationId, availableRegions, bandwidth, bandwidthPackageBandwidth, bandwidthPackageId, bandwidthPackageType, createTime, deletionProtection, description, expiredTime, hasReservationData, hdMonitorStatus, id, instanceId, instanceRegionId, instanceType, internetChargeType, ipAddress, isp, operationLocks, paymentType, reservationActiveTime, reservationBandwidth, reservationInternetChargeType, reservationOrderType, resourceGroupId, secondLimited, segmentInstanceId, status, tags);
        }
    }
}
