// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.outputs;

import com.pulumi.alicloud.cms.outputs.GetGroupMetricRulesRuleEscalation;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupMetricRulesRule {
    /**
     * @return Alarm contact group.
     * 
     */
    private final String contactGroups;
    /**
     * @return The dimensions that specify the resources to be associated with the alert rule.
     * 
     */
    private final String dimensions;
    /**
     * @return The time period during which the alert rule is effective.
     * 
     */
    private final String effectiveInterval;
    /**
     * @return The subject of the alert notification email.
     * 
     */
    private final String emailSubject;
    /**
     * @return Indicates whether the alert rule is enabled.
     * 
     */
    private final Boolean enableState;
    /**
     * @return Alarm level.
     * 
     */
    private final List<GetGroupMetricRulesRuleEscalation> escalations;
    /**
     * @return The ID of the application group.
     * 
     */
    private final String groupId;
    /**
     * @return The name of the alert rule.
     * 
     */
    private final String groupMetricRuleName;
    /**
     * @return The ID of the Group Metric Rule.
     * 
     */
    private final String id;
    /**
     * @return The name of the metric.
     * 
     */
    private final String metricName;
    /**
     * @return The namespace of the service.
     * 
     */
    private final String namespace;
    /**
     * @return The time period during which the alert rule is ineffective.
     * 
     */
    private final String noEffectiveInterval;
    /**
     * @return The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
     * 
     */
    private final Integer period;
    /**
     * @return The resources that are associated with the alert rule.
     * 
     */
    private final String resources;
    /**
     * @return The ID of the alert rule.
     * 
     */
    private final String ruleId;
    /**
     * @return The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
     * 
     */
    private final Integer silenceTime;
    /**
     * @return The type of the alert rule. The value is fixed to METRIC, indicating an alert rule for time series metrics.
     * 
     */
    private final String sourceType;
    /**
     * @return The status of Group Metric Rule..
     * 
     */
    private final String status;
    /**
     * @return The callback URL.
     * 
     */
    private final String webhook;

    @CustomType.Constructor
    private GetGroupMetricRulesRule(
        @CustomType.Parameter("contactGroups") String contactGroups,
        @CustomType.Parameter("dimensions") String dimensions,
        @CustomType.Parameter("effectiveInterval") String effectiveInterval,
        @CustomType.Parameter("emailSubject") String emailSubject,
        @CustomType.Parameter("enableState") Boolean enableState,
        @CustomType.Parameter("escalations") List<GetGroupMetricRulesRuleEscalation> escalations,
        @CustomType.Parameter("groupId") String groupId,
        @CustomType.Parameter("groupMetricRuleName") String groupMetricRuleName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("metricName") String metricName,
        @CustomType.Parameter("namespace") String namespace,
        @CustomType.Parameter("noEffectiveInterval") String noEffectiveInterval,
        @CustomType.Parameter("period") Integer period,
        @CustomType.Parameter("resources") String resources,
        @CustomType.Parameter("ruleId") String ruleId,
        @CustomType.Parameter("silenceTime") Integer silenceTime,
        @CustomType.Parameter("sourceType") String sourceType,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("webhook") String webhook) {
        this.contactGroups = contactGroups;
        this.dimensions = dimensions;
        this.effectiveInterval = effectiveInterval;
        this.emailSubject = emailSubject;
        this.enableState = enableState;
        this.escalations = escalations;
        this.groupId = groupId;
        this.groupMetricRuleName = groupMetricRuleName;
        this.id = id;
        this.metricName = metricName;
        this.namespace = namespace;
        this.noEffectiveInterval = noEffectiveInterval;
        this.period = period;
        this.resources = resources;
        this.ruleId = ruleId;
        this.silenceTime = silenceTime;
        this.sourceType = sourceType;
        this.status = status;
        this.webhook = webhook;
    }

    /**
     * @return Alarm contact group.
     * 
     */
    public String contactGroups() {
        return this.contactGroups;
    }
    /**
     * @return The dimensions that specify the resources to be associated with the alert rule.
     * 
     */
    public String dimensions() {
        return this.dimensions;
    }
    /**
     * @return The time period during which the alert rule is effective.
     * 
     */
    public String effectiveInterval() {
        return this.effectiveInterval;
    }
    /**
     * @return The subject of the alert notification email.
     * 
     */
    public String emailSubject() {
        return this.emailSubject;
    }
    /**
     * @return Indicates whether the alert rule is enabled.
     * 
     */
    public Boolean enableState() {
        return this.enableState;
    }
    /**
     * @return Alarm level.
     * 
     */
    public List<GetGroupMetricRulesRuleEscalation> escalations() {
        return this.escalations;
    }
    /**
     * @return The ID of the application group.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The name of the alert rule.
     * 
     */
    public String groupMetricRuleName() {
        return this.groupMetricRuleName;
    }
    /**
     * @return The ID of the Group Metric Rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the metric.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return The namespace of the service.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The time period during which the alert rule is ineffective.
     * 
     */
    public String noEffectiveInterval() {
        return this.noEffectiveInterval;
    }
    /**
     * @return The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
     * 
     */
    public Integer period() {
        return this.period;
    }
    /**
     * @return The resources that are associated with the alert rule.
     * 
     */
    public String resources() {
        return this.resources;
    }
    /**
     * @return The ID of the alert rule.
     * 
     */
    public String ruleId() {
        return this.ruleId;
    }
    /**
     * @return The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
     * 
     */
    public Integer silenceTime() {
        return this.silenceTime;
    }
    /**
     * @return The type of the alert rule. The value is fixed to METRIC, indicating an alert rule for time series metrics.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return The status of Group Metric Rule..
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The callback URL.
     * 
     */
    public String webhook() {
        return this.webhook;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupMetricRulesRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String contactGroups;
        private String dimensions;
        private String effectiveInterval;
        private String emailSubject;
        private Boolean enableState;
        private List<GetGroupMetricRulesRuleEscalation> escalations;
        private String groupId;
        private String groupMetricRuleName;
        private String id;
        private String metricName;
        private String namespace;
        private String noEffectiveInterval;
        private Integer period;
        private String resources;
        private String ruleId;
        private Integer silenceTime;
        private String sourceType;
        private String status;
        private String webhook;

        public Builder() {
    	      // Empty
        }

        public Builder(GetGroupMetricRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contactGroups = defaults.contactGroups;
    	      this.dimensions = defaults.dimensions;
    	      this.effectiveInterval = defaults.effectiveInterval;
    	      this.emailSubject = defaults.emailSubject;
    	      this.enableState = defaults.enableState;
    	      this.escalations = defaults.escalations;
    	      this.groupId = defaults.groupId;
    	      this.groupMetricRuleName = defaults.groupMetricRuleName;
    	      this.id = defaults.id;
    	      this.metricName = defaults.metricName;
    	      this.namespace = defaults.namespace;
    	      this.noEffectiveInterval = defaults.noEffectiveInterval;
    	      this.period = defaults.period;
    	      this.resources = defaults.resources;
    	      this.ruleId = defaults.ruleId;
    	      this.silenceTime = defaults.silenceTime;
    	      this.sourceType = defaults.sourceType;
    	      this.status = defaults.status;
    	      this.webhook = defaults.webhook;
        }

        public Builder contactGroups(String contactGroups) {
            this.contactGroups = Objects.requireNonNull(contactGroups);
            return this;
        }
        public Builder dimensions(String dimensions) {
            this.dimensions = Objects.requireNonNull(dimensions);
            return this;
        }
        public Builder effectiveInterval(String effectiveInterval) {
            this.effectiveInterval = Objects.requireNonNull(effectiveInterval);
            return this;
        }
        public Builder emailSubject(String emailSubject) {
            this.emailSubject = Objects.requireNonNull(emailSubject);
            return this;
        }
        public Builder enableState(Boolean enableState) {
            this.enableState = Objects.requireNonNull(enableState);
            return this;
        }
        public Builder escalations(List<GetGroupMetricRulesRuleEscalation> escalations) {
            this.escalations = Objects.requireNonNull(escalations);
            return this;
        }
        public Builder escalations(GetGroupMetricRulesRuleEscalation... escalations) {
            return escalations(List.of(escalations));
        }
        public Builder groupId(String groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        public Builder groupMetricRuleName(String groupMetricRuleName) {
            this.groupMetricRuleName = Objects.requireNonNull(groupMetricRuleName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder metricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        public Builder noEffectiveInterval(String noEffectiveInterval) {
            this.noEffectiveInterval = Objects.requireNonNull(noEffectiveInterval);
            return this;
        }
        public Builder period(Integer period) {
            this.period = Objects.requireNonNull(period);
            return this;
        }
        public Builder resources(String resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public Builder ruleId(String ruleId) {
            this.ruleId = Objects.requireNonNull(ruleId);
            return this;
        }
        public Builder silenceTime(Integer silenceTime) {
            this.silenceTime = Objects.requireNonNull(silenceTime);
            return this;
        }
        public Builder sourceType(String sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder webhook(String webhook) {
            this.webhook = Objects.requireNonNull(webhook);
            return this;
        }        public GetGroupMetricRulesRule build() {
            return new GetGroupMetricRulesRule(contactGroups, dimensions, effectiveInterval, emailSubject, enableState, escalations, groupId, groupMetricRuleName, id, metricName, namespace, noEffectiveInterval, period, resources, ruleId, silenceTime, sourceType, status, webhook);
        }
    }
}
