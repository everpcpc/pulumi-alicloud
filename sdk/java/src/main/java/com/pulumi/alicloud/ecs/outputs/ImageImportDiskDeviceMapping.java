// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageImportDiskDeviceMapping {
    /**
     * @return The name of disk N in the custom image.
     * 
     */
    private final @Nullable String device;
    /**
     * @return Resolution size. You must ensure that the system disk space ≥ file system space. Ranges: When n = 1, the system disk: 5 ~ 500GiB, When n = 2 ~ 17, that is, data disk: 5 ~ 1000GiB, When temporary is introduced, the system automatically detects the size, which is subject to the detection result.
     * 
     */
    private final @Nullable Integer diskImageSize;
    /**
     * @return Image format. Value range: When the `RAW`, `VHD`, `qcow2` is imported into the image, the system automatically detects the image format, whichever comes first.
     * 
     */
    private final @Nullable String format;
    /**
     * @return Save the exported OSS bucket.
     * 
     */
    private final @Nullable String ossBucket;
    /**
     * @return The file name of your OSS Object.
     * 
     */
    private final @Nullable String ossObject;

    @CustomType.Constructor
    private ImageImportDiskDeviceMapping(
        @CustomType.Parameter("device") @Nullable String device,
        @CustomType.Parameter("diskImageSize") @Nullable Integer diskImageSize,
        @CustomType.Parameter("format") @Nullable String format,
        @CustomType.Parameter("ossBucket") @Nullable String ossBucket,
        @CustomType.Parameter("ossObject") @Nullable String ossObject) {
        this.device = device;
        this.diskImageSize = diskImageSize;
        this.format = format;
        this.ossBucket = ossBucket;
        this.ossObject = ossObject;
    }

    /**
     * @return The name of disk N in the custom image.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return Resolution size. You must ensure that the system disk space ≥ file system space. Ranges: When n = 1, the system disk: 5 ~ 500GiB, When n = 2 ~ 17, that is, data disk: 5 ~ 1000GiB, When temporary is introduced, the system automatically detects the size, which is subject to the detection result.
     * 
     */
    public Optional<Integer> diskImageSize() {
        return Optional.ofNullable(this.diskImageSize);
    }
    /**
     * @return Image format. Value range: When the `RAW`, `VHD`, `qcow2` is imported into the image, the system automatically detects the image format, whichever comes first.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return Save the exported OSS bucket.
     * 
     */
    public Optional<String> ossBucket() {
        return Optional.ofNullable(this.ossBucket);
    }
    /**
     * @return The file name of your OSS Object.
     * 
     */
    public Optional<String> ossObject() {
        return Optional.ofNullable(this.ossObject);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageImportDiskDeviceMapping defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String device;
        private @Nullable Integer diskImageSize;
        private @Nullable String format;
        private @Nullable String ossBucket;
        private @Nullable String ossObject;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageImportDiskDeviceMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.device = defaults.device;
    	      this.diskImageSize = defaults.diskImageSize;
    	      this.format = defaults.format;
    	      this.ossBucket = defaults.ossBucket;
    	      this.ossObject = defaults.ossObject;
        }

        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        public Builder diskImageSize(@Nullable Integer diskImageSize) {
            this.diskImageSize = diskImageSize;
            return this;
        }
        public Builder format(@Nullable String format) {
            this.format = format;
            return this;
        }
        public Builder ossBucket(@Nullable String ossBucket) {
            this.ossBucket = ossBucket;
            return this;
        }
        public Builder ossObject(@Nullable String ossObject) {
            this.ossObject = ossObject;
            return this;
        }        public ImageImportDiskDeviceMapping build() {
            return new ImageImportDiskDeviceMapping(device, diskImageSize, format, ossBucket, ossObject);
        }
    }
}
