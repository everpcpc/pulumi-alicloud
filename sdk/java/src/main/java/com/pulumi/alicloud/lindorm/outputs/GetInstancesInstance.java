// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.lindorm.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return AutoRenew.
     * 
     */
    private final String autoRenew;
    /**
     * @return The cold storage capacity of the instance. Unit: GB.
     * 
     */
    private final Integer coldStorage;
    /**
     * @return The creation date of Instance.
     * 
     */
    private final String createTime;
    /**
     * @return The deletion protection of instance.
     * 
     */
    private final Boolean deletionProection;
    /**
     * @return The disk type of instance. Valid values: `capacity_cloud_storage`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`.
     * 
     */
    private final String diskCategory;
    /**
     * @return The usage of disk.
     * 
     */
    private final String diskUsage;
    /**
     * @return The threshold of disk.
     * 
     */
    private final String diskWarningThreshold;
    /**
     * @return The type of Instance engine .
     * 
     */
    private final Integer engineType;
    /**
     * @return The expiration time of Instance.
     * 
     */
    private final String expiredTime;
    /**
     * @return The count of file engine.
     * 
     */
    private final Integer fileEngineNodeCount;
    /**
     * @return The specification of file engine. Valid values: `lindorm.c.xlarge`.
     * 
     */
    private final String fileEngineSpecification;
    /**
     * @return The ID of the Instance.
     * 
     */
    private final String id;
    /**
     * @return The ID of the instance.
     * 
     */
    private final String instanceId;
    /**
     * @return The name of the instance.
     * 
     */
    private final String instanceName;
    /**
     * @return The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    private final String instanceStorage;
    /**
     * @return The ip white list of instance.
     * 
     */
    private final List<String> ipWhiteLists;
    /**
     * @return The count of lindorm tunnel service.
     * 
     */
    private final Integer ltsNodeCount;
    /**
     * @return The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private final String ltsNodeSpecification;
    /**
     * @return Instance network type, enumerative.VPC.
     * 
     */
    private final String networkType;
    /**
     * @return The billing method. Valid values: `PayAsYouGo` and `Subscription`.
     * 
     */
    private final String paymentType;
    /**
     * @return The count of phoenix.
     * 
     */
    private final Integer phoenixNodeCount;
    /**
     * @return The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private final String phoenixNodeSpecification;
    /**
     * @return The owner id of resource.
     * 
     */
    private final String resourceOwnerId;
    /**
     * @return The count of search engine.
     * 
     */
    private final Integer searchEngineNodeCount;
    /**
     * @return The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private final String searchEngineSpecification;
    /**
     * @return The service type of Instance, Valid values:  `lindorm`, `serverless_lindorm`, `lindorm_standalone`.
     * 
     */
    private final String serviceType;
    /**
     * @return The status of Instance, enumerative: Valid values: `ACTIVATION`, `DELETED`, `CREATING`, `CLASS_CHANGING`, `LOCKED`, `INSTANCE_LEVEL_MODIFY`, `NET_MODIFYING`, `RESIZING`, `RESTARTING`, `MINOR_VERSION_TRANSING`.
     * 
     */
    private final String status;
    /**
     * @return The count of table engine.
     * 
     */
    private final Integer tableEngineNodeCount;
    /**
     * @return The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private final String tableEngineSpecification;
    /**
     * @return The count of time series engine.
     * 
     */
    private final Integer timeSeriesEngineNodeCount;
    /**
     * @return The specification of time series engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    private final String timeSeriresEngineSpecification;
    /**
     * @return The ID of the virtual private cloud (VPC) that is connected to the instance.
     * 
     */
    private final String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private final String vswitchId;
    /**
     * @return The zone ID of the instance.
     * 
     */
    private final String zoneId;

    @CustomType.Constructor
    private GetInstancesInstance(
        @CustomType.Parameter("autoRenew") String autoRenew,
        @CustomType.Parameter("coldStorage") Integer coldStorage,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("deletionProection") Boolean deletionProection,
        @CustomType.Parameter("diskCategory") String diskCategory,
        @CustomType.Parameter("diskUsage") String diskUsage,
        @CustomType.Parameter("diskWarningThreshold") String diskWarningThreshold,
        @CustomType.Parameter("engineType") Integer engineType,
        @CustomType.Parameter("expiredTime") String expiredTime,
        @CustomType.Parameter("fileEngineNodeCount") Integer fileEngineNodeCount,
        @CustomType.Parameter("fileEngineSpecification") String fileEngineSpecification,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceId") String instanceId,
        @CustomType.Parameter("instanceName") String instanceName,
        @CustomType.Parameter("instanceStorage") String instanceStorage,
        @CustomType.Parameter("ipWhiteLists") List<String> ipWhiteLists,
        @CustomType.Parameter("ltsNodeCount") Integer ltsNodeCount,
        @CustomType.Parameter("ltsNodeSpecification") String ltsNodeSpecification,
        @CustomType.Parameter("networkType") String networkType,
        @CustomType.Parameter("paymentType") String paymentType,
        @CustomType.Parameter("phoenixNodeCount") Integer phoenixNodeCount,
        @CustomType.Parameter("phoenixNodeSpecification") String phoenixNodeSpecification,
        @CustomType.Parameter("resourceOwnerId") String resourceOwnerId,
        @CustomType.Parameter("searchEngineNodeCount") Integer searchEngineNodeCount,
        @CustomType.Parameter("searchEngineSpecification") String searchEngineSpecification,
        @CustomType.Parameter("serviceType") String serviceType,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tableEngineNodeCount") Integer tableEngineNodeCount,
        @CustomType.Parameter("tableEngineSpecification") String tableEngineSpecification,
        @CustomType.Parameter("timeSeriesEngineNodeCount") Integer timeSeriesEngineNodeCount,
        @CustomType.Parameter("timeSeriresEngineSpecification") String timeSeriresEngineSpecification,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchId") String vswitchId,
        @CustomType.Parameter("zoneId") String zoneId) {
        this.autoRenew = autoRenew;
        this.coldStorage = coldStorage;
        this.createTime = createTime;
        this.deletionProection = deletionProection;
        this.diskCategory = diskCategory;
        this.diskUsage = diskUsage;
        this.diskWarningThreshold = diskWarningThreshold;
        this.engineType = engineType;
        this.expiredTime = expiredTime;
        this.fileEngineNodeCount = fileEngineNodeCount;
        this.fileEngineSpecification = fileEngineSpecification;
        this.id = id;
        this.instanceId = instanceId;
        this.instanceName = instanceName;
        this.instanceStorage = instanceStorage;
        this.ipWhiteLists = ipWhiteLists;
        this.ltsNodeCount = ltsNodeCount;
        this.ltsNodeSpecification = ltsNodeSpecification;
        this.networkType = networkType;
        this.paymentType = paymentType;
        this.phoenixNodeCount = phoenixNodeCount;
        this.phoenixNodeSpecification = phoenixNodeSpecification;
        this.resourceOwnerId = resourceOwnerId;
        this.searchEngineNodeCount = searchEngineNodeCount;
        this.searchEngineSpecification = searchEngineSpecification;
        this.serviceType = serviceType;
        this.status = status;
        this.tableEngineNodeCount = tableEngineNodeCount;
        this.tableEngineSpecification = tableEngineSpecification;
        this.timeSeriesEngineNodeCount = timeSeriesEngineNodeCount;
        this.timeSeriresEngineSpecification = timeSeriresEngineSpecification;
        this.vpcId = vpcId;
        this.vswitchId = vswitchId;
        this.zoneId = zoneId;
    }

    /**
     * @return AutoRenew.
     * 
     */
    public String autoRenew() {
        return this.autoRenew;
    }
    /**
     * @return The cold storage capacity of the instance. Unit: GB.
     * 
     */
    public Integer coldStorage() {
        return this.coldStorage;
    }
    /**
     * @return The creation date of Instance.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The deletion protection of instance.
     * 
     */
    public Boolean deletionProection() {
        return this.deletionProection;
    }
    /**
     * @return The disk type of instance. Valid values: `capacity_cloud_storage`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`.
     * 
     */
    public String diskCategory() {
        return this.diskCategory;
    }
    /**
     * @return The usage of disk.
     * 
     */
    public String diskUsage() {
        return this.diskUsage;
    }
    /**
     * @return The threshold of disk.
     * 
     */
    public String diskWarningThreshold() {
        return this.diskWarningThreshold;
    }
    /**
     * @return The type of Instance engine .
     * 
     */
    public Integer engineType() {
        return this.engineType;
    }
    /**
     * @return The expiration time of Instance.
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The count of file engine.
     * 
     */
    public Integer fileEngineNodeCount() {
        return this.fileEngineNodeCount;
    }
    /**
     * @return The specification of file engine. Valid values: `lindorm.c.xlarge`.
     * 
     */
    public String fileEngineSpecification() {
        return this.fileEngineSpecification;
    }
    /**
     * @return The ID of the Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The name of the instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    public String instanceStorage() {
        return this.instanceStorage;
    }
    /**
     * @return The ip white list of instance.
     * 
     */
    public List<String> ipWhiteLists() {
        return this.ipWhiteLists;
    }
    /**
     * @return The count of lindorm tunnel service.
     * 
     */
    public Integer ltsNodeCount() {
        return this.ltsNodeCount;
    }
    /**
     * @return The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String ltsNodeSpecification() {
        return this.ltsNodeSpecification;
    }
    /**
     * @return Instance network type, enumerative.VPC.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The billing method. Valid values: `PayAsYouGo` and `Subscription`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The count of phoenix.
     * 
     */
    public Integer phoenixNodeCount() {
        return this.phoenixNodeCount;
    }
    /**
     * @return The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String phoenixNodeSpecification() {
        return this.phoenixNodeSpecification;
    }
    /**
     * @return The owner id of resource.
     * 
     */
    public String resourceOwnerId() {
        return this.resourceOwnerId;
    }
    /**
     * @return The count of search engine.
     * 
     */
    public Integer searchEngineNodeCount() {
        return this.searchEngineNodeCount;
    }
    /**
     * @return The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String searchEngineSpecification() {
        return this.searchEngineSpecification;
    }
    /**
     * @return The service type of Instance, Valid values:  `lindorm`, `serverless_lindorm`, `lindorm_standalone`.
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return The status of Instance, enumerative: Valid values: `ACTIVATION`, `DELETED`, `CREATING`, `CLASS_CHANGING`, `LOCKED`, `INSTANCE_LEVEL_MODIFY`, `NET_MODIFYING`, `RESIZING`, `RESTARTING`, `MINOR_VERSION_TRANSING`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The count of table engine.
     * 
     */
    public Integer tableEngineNodeCount() {
        return this.tableEngineNodeCount;
    }
    /**
     * @return The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String tableEngineSpecification() {
        return this.tableEngineSpecification;
    }
    /**
     * @return The count of time series engine.
     * 
     */
    public Integer timeSeriesEngineNodeCount() {
        return this.timeSeriesEngineNodeCount;
    }
    /**
     * @return The specification of time series engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public String timeSeriresEngineSpecification() {
        return this.timeSeriresEngineSpecification;
    }
    /**
     * @return The ID of the virtual private cloud (VPC) that is connected to the instance.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the instance.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String autoRenew;
        private Integer coldStorage;
        private String createTime;
        private Boolean deletionProection;
        private String diskCategory;
        private String diskUsage;
        private String diskWarningThreshold;
        private Integer engineType;
        private String expiredTime;
        private Integer fileEngineNodeCount;
        private String fileEngineSpecification;
        private String id;
        private String instanceId;
        private String instanceName;
        private String instanceStorage;
        private List<String> ipWhiteLists;
        private Integer ltsNodeCount;
        private String ltsNodeSpecification;
        private String networkType;
        private String paymentType;
        private Integer phoenixNodeCount;
        private String phoenixNodeSpecification;
        private String resourceOwnerId;
        private Integer searchEngineNodeCount;
        private String searchEngineSpecification;
        private String serviceType;
        private String status;
        private Integer tableEngineNodeCount;
        private String tableEngineSpecification;
        private Integer timeSeriesEngineNodeCount;
        private String timeSeriresEngineSpecification;
        private String vpcId;
        private String vswitchId;
        private String zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRenew = defaults.autoRenew;
    	      this.coldStorage = defaults.coldStorage;
    	      this.createTime = defaults.createTime;
    	      this.deletionProection = defaults.deletionProection;
    	      this.diskCategory = defaults.diskCategory;
    	      this.diskUsage = defaults.diskUsage;
    	      this.diskWarningThreshold = defaults.diskWarningThreshold;
    	      this.engineType = defaults.engineType;
    	      this.expiredTime = defaults.expiredTime;
    	      this.fileEngineNodeCount = defaults.fileEngineNodeCount;
    	      this.fileEngineSpecification = defaults.fileEngineSpecification;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.instanceStorage = defaults.instanceStorage;
    	      this.ipWhiteLists = defaults.ipWhiteLists;
    	      this.ltsNodeCount = defaults.ltsNodeCount;
    	      this.ltsNodeSpecification = defaults.ltsNodeSpecification;
    	      this.networkType = defaults.networkType;
    	      this.paymentType = defaults.paymentType;
    	      this.phoenixNodeCount = defaults.phoenixNodeCount;
    	      this.phoenixNodeSpecification = defaults.phoenixNodeSpecification;
    	      this.resourceOwnerId = defaults.resourceOwnerId;
    	      this.searchEngineNodeCount = defaults.searchEngineNodeCount;
    	      this.searchEngineSpecification = defaults.searchEngineSpecification;
    	      this.serviceType = defaults.serviceType;
    	      this.status = defaults.status;
    	      this.tableEngineNodeCount = defaults.tableEngineNodeCount;
    	      this.tableEngineSpecification = defaults.tableEngineSpecification;
    	      this.timeSeriesEngineNodeCount = defaults.timeSeriesEngineNodeCount;
    	      this.timeSeriresEngineSpecification = defaults.timeSeriresEngineSpecification;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder autoRenew(String autoRenew) {
            this.autoRenew = Objects.requireNonNull(autoRenew);
            return this;
        }
        public Builder coldStorage(Integer coldStorage) {
            this.coldStorage = Objects.requireNonNull(coldStorage);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder deletionProection(Boolean deletionProection) {
            this.deletionProection = Objects.requireNonNull(deletionProection);
            return this;
        }
        public Builder diskCategory(String diskCategory) {
            this.diskCategory = Objects.requireNonNull(diskCategory);
            return this;
        }
        public Builder diskUsage(String diskUsage) {
            this.diskUsage = Objects.requireNonNull(diskUsage);
            return this;
        }
        public Builder diskWarningThreshold(String diskWarningThreshold) {
            this.diskWarningThreshold = Objects.requireNonNull(diskWarningThreshold);
            return this;
        }
        public Builder engineType(Integer engineType) {
            this.engineType = Objects.requireNonNull(engineType);
            return this;
        }
        public Builder expiredTime(String expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        public Builder fileEngineNodeCount(Integer fileEngineNodeCount) {
            this.fileEngineNodeCount = Objects.requireNonNull(fileEngineNodeCount);
            return this;
        }
        public Builder fileEngineSpecification(String fileEngineSpecification) {
            this.fileEngineSpecification = Objects.requireNonNull(fileEngineSpecification);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder instanceName(String instanceName) {
            this.instanceName = Objects.requireNonNull(instanceName);
            return this;
        }
        public Builder instanceStorage(String instanceStorage) {
            this.instanceStorage = Objects.requireNonNull(instanceStorage);
            return this;
        }
        public Builder ipWhiteLists(List<String> ipWhiteLists) {
            this.ipWhiteLists = Objects.requireNonNull(ipWhiteLists);
            return this;
        }
        public Builder ipWhiteLists(String... ipWhiteLists) {
            return ipWhiteLists(List.of(ipWhiteLists));
        }
        public Builder ltsNodeCount(Integer ltsNodeCount) {
            this.ltsNodeCount = Objects.requireNonNull(ltsNodeCount);
            return this;
        }
        public Builder ltsNodeSpecification(String ltsNodeSpecification) {
            this.ltsNodeSpecification = Objects.requireNonNull(ltsNodeSpecification);
            return this;
        }
        public Builder networkType(String networkType) {
            this.networkType = Objects.requireNonNull(networkType);
            return this;
        }
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        public Builder phoenixNodeCount(Integer phoenixNodeCount) {
            this.phoenixNodeCount = Objects.requireNonNull(phoenixNodeCount);
            return this;
        }
        public Builder phoenixNodeSpecification(String phoenixNodeSpecification) {
            this.phoenixNodeSpecification = Objects.requireNonNull(phoenixNodeSpecification);
            return this;
        }
        public Builder resourceOwnerId(String resourceOwnerId) {
            this.resourceOwnerId = Objects.requireNonNull(resourceOwnerId);
            return this;
        }
        public Builder searchEngineNodeCount(Integer searchEngineNodeCount) {
            this.searchEngineNodeCount = Objects.requireNonNull(searchEngineNodeCount);
            return this;
        }
        public Builder searchEngineSpecification(String searchEngineSpecification) {
            this.searchEngineSpecification = Objects.requireNonNull(searchEngineSpecification);
            return this;
        }
        public Builder serviceType(String serviceType) {
            this.serviceType = Objects.requireNonNull(serviceType);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tableEngineNodeCount(Integer tableEngineNodeCount) {
            this.tableEngineNodeCount = Objects.requireNonNull(tableEngineNodeCount);
            return this;
        }
        public Builder tableEngineSpecification(String tableEngineSpecification) {
            this.tableEngineSpecification = Objects.requireNonNull(tableEngineSpecification);
            return this;
        }
        public Builder timeSeriesEngineNodeCount(Integer timeSeriesEngineNodeCount) {
            this.timeSeriesEngineNodeCount = Objects.requireNonNull(timeSeriesEngineNodeCount);
            return this;
        }
        public Builder timeSeriresEngineSpecification(String timeSeriresEngineSpecification) {
            this.timeSeriresEngineSpecification = Objects.requireNonNull(timeSeriresEngineSpecification);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }        public GetInstancesInstance build() {
            return new GetInstancesInstance(autoRenew, coldStorage, createTime, deletionProection, diskCategory, diskUsage, diskWarningThreshold, engineType, expiredTime, fileEngineNodeCount, fileEngineSpecification, id, instanceId, instanceName, instanceStorage, ipWhiteLists, ltsNodeCount, ltsNodeSpecification, networkType, paymentType, phoenixNodeCount, phoenixNodeSpecification, resourceOwnerId, searchEngineNodeCount, searchEngineSpecification, serviceType, status, tableEngineNodeCount, tableEngineSpecification, timeSeriesEngineNodeCount, timeSeriresEngineSpecification, vpcId, vswitchId, zoneId);
        }
    }
}
