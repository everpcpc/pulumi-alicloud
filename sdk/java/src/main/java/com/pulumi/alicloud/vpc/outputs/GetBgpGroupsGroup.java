// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBgpGroupsGroup {
    /**
     * @return The key used by the BGP group.
     * 
     */
    private final String authKey;
    /**
     * @return The name of the BGP group.
     * 
     */
    private final String bgpGroupName;
    /**
     * @return Description of the BGP group.
     * 
     */
    private final String description;
    /**
     * @return The hold time to wait for the incoming BGP message. If no message has been passed in after the hold time, the BGP neighbor is considered disconnected.
     * 
     */
    private final String hold;
    /**
     * @return The ID of the Bgp Group.
     * 
     */
    private final String id;
    /**
     * @return IP version.
     * 
     */
    private final String ipVersion;
    /**
     * @return Whether the AS number is false.
     * 
     */
    private final Boolean isFakeAsn;
    /**
     * @return The keepalive time.
     * 
     */
    private final String keepalive;
    /**
     * @return The local AS number.
     * 
     */
    private final Integer localAsn;
    /**
     * @return The autonomous system (AS) number of the BGP peer.
     * 
     */
    private final Integer peerAsn;
    /**
     * @return Routing limits.
     * 
     */
    private final String routeLimit;
    /**
     * @return The ID of the VBR.
     * 
     */
    private final String routerId;
    /**
     * @return The status of the resource.
     * 
     */
    private final String status;

    @CustomType.Constructor
    private GetBgpGroupsGroup(
        @CustomType.Parameter("authKey") String authKey,
        @CustomType.Parameter("bgpGroupName") String bgpGroupName,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("hold") String hold,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ipVersion") String ipVersion,
        @CustomType.Parameter("isFakeAsn") Boolean isFakeAsn,
        @CustomType.Parameter("keepalive") String keepalive,
        @CustomType.Parameter("localAsn") Integer localAsn,
        @CustomType.Parameter("peerAsn") Integer peerAsn,
        @CustomType.Parameter("routeLimit") String routeLimit,
        @CustomType.Parameter("routerId") String routerId,
        @CustomType.Parameter("status") String status) {
        this.authKey = authKey;
        this.bgpGroupName = bgpGroupName;
        this.description = description;
        this.hold = hold;
        this.id = id;
        this.ipVersion = ipVersion;
        this.isFakeAsn = isFakeAsn;
        this.keepalive = keepalive;
        this.localAsn = localAsn;
        this.peerAsn = peerAsn;
        this.routeLimit = routeLimit;
        this.routerId = routerId;
        this.status = status;
    }

    /**
     * @return The key used by the BGP group.
     * 
     */
    public String authKey() {
        return this.authKey;
    }
    /**
     * @return The name of the BGP group.
     * 
     */
    public String bgpGroupName() {
        return this.bgpGroupName;
    }
    /**
     * @return Description of the BGP group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The hold time to wait for the incoming BGP message. If no message has been passed in after the hold time, the BGP neighbor is considered disconnected.
     * 
     */
    public String hold() {
        return this.hold;
    }
    /**
     * @return The ID of the Bgp Group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IP version.
     * 
     */
    public String ipVersion() {
        return this.ipVersion;
    }
    /**
     * @return Whether the AS number is false.
     * 
     */
    public Boolean isFakeAsn() {
        return this.isFakeAsn;
    }
    /**
     * @return The keepalive time.
     * 
     */
    public String keepalive() {
        return this.keepalive;
    }
    /**
     * @return The local AS number.
     * 
     */
    public Integer localAsn() {
        return this.localAsn;
    }
    /**
     * @return The autonomous system (AS) number of the BGP peer.
     * 
     */
    public Integer peerAsn() {
        return this.peerAsn;
    }
    /**
     * @return Routing limits.
     * 
     */
    public String routeLimit() {
        return this.routeLimit;
    }
    /**
     * @return The ID of the VBR.
     * 
     */
    public String routerId() {
        return this.routerId;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBgpGroupsGroup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String authKey;
        private String bgpGroupName;
        private String description;
        private String hold;
        private String id;
        private String ipVersion;
        private Boolean isFakeAsn;
        private String keepalive;
        private Integer localAsn;
        private Integer peerAsn;
        private String routeLimit;
        private String routerId;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBgpGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authKey = defaults.authKey;
    	      this.bgpGroupName = defaults.bgpGroupName;
    	      this.description = defaults.description;
    	      this.hold = defaults.hold;
    	      this.id = defaults.id;
    	      this.ipVersion = defaults.ipVersion;
    	      this.isFakeAsn = defaults.isFakeAsn;
    	      this.keepalive = defaults.keepalive;
    	      this.localAsn = defaults.localAsn;
    	      this.peerAsn = defaults.peerAsn;
    	      this.routeLimit = defaults.routeLimit;
    	      this.routerId = defaults.routerId;
    	      this.status = defaults.status;
        }

        public Builder authKey(String authKey) {
            this.authKey = Objects.requireNonNull(authKey);
            return this;
        }
        public Builder bgpGroupName(String bgpGroupName) {
            this.bgpGroupName = Objects.requireNonNull(bgpGroupName);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder hold(String hold) {
            this.hold = Objects.requireNonNull(hold);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ipVersion(String ipVersion) {
            this.ipVersion = Objects.requireNonNull(ipVersion);
            return this;
        }
        public Builder isFakeAsn(Boolean isFakeAsn) {
            this.isFakeAsn = Objects.requireNonNull(isFakeAsn);
            return this;
        }
        public Builder keepalive(String keepalive) {
            this.keepalive = Objects.requireNonNull(keepalive);
            return this;
        }
        public Builder localAsn(Integer localAsn) {
            this.localAsn = Objects.requireNonNull(localAsn);
            return this;
        }
        public Builder peerAsn(Integer peerAsn) {
            this.peerAsn = Objects.requireNonNull(peerAsn);
            return this;
        }
        public Builder routeLimit(String routeLimit) {
            this.routeLimit = Objects.requireNonNull(routeLimit);
            return this;
        }
        public Builder routerId(String routerId) {
            this.routerId = Objects.requireNonNull(routerId);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetBgpGroupsGroup build() {
            return new GetBgpGroupsGroup(authKey, bgpGroupName, description, hold, id, ipVersion, isFakeAsn, keepalive, localAsn, peerAsn, routeLimit, routerId, status);
        }
    }
}
