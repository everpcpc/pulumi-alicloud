// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainNewCertificateConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainNewCertificateConfigArgs Empty = new DomainNewCertificateConfigArgs();

    /**
     * The SSL certificate name.
     * 
     */
    @Import(name="certName")
    private @Nullable Output<String> certName;

    /**
     * @return The SSL certificate name.
     * 
     */
    public Optional<Output<String>> certName() {
        return Optional.ofNullable(this.certName);
    }

    /**
     * The SSL certificate type, can be &#34;upload&#34;, &#34;cas&#34; and &#34;free&#34;.
     * 
     */
    @Import(name="certType")
    private @Nullable Output<String> certType;

    /**
     * @return The SSL certificate type, can be &#34;upload&#34;, &#34;cas&#34; and &#34;free&#34;.
     * 
     */
    public Optional<Output<String>> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
     * 
     */
    @Import(name="forceSet")
    private @Nullable Output<String> forceSet;

    /**
     * @return Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
     * 
     */
    public Optional<Output<String>> forceSet() {
        return Optional.ofNullable(this.forceSet);
    }

    /**
     * The SSL private key. This is required if `server_certificate_status` is `on`
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The SSL private key. This is required if `server_certificate_status` is `on`
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The SSL server certificate string. This is required if `server_certificate_status` is `on`
     * 
     */
    @Import(name="serverCertificate")
    private @Nullable Output<String> serverCertificate;

    /**
     * @return The SSL server certificate string. This is required if `server_certificate_status` is `on`
     * 
     */
    public Optional<Output<String>> serverCertificate() {
        return Optional.ofNullable(this.serverCertificate);
    }

    /**
     * This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
     * 
     */
    @Import(name="serverCertificateStatus")
    private @Nullable Output<String> serverCertificateStatus;

    /**
     * @return This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
     * 
     */
    public Optional<Output<String>> serverCertificateStatus() {
        return Optional.ofNullable(this.serverCertificateStatus);
    }

    private DomainNewCertificateConfigArgs() {}

    private DomainNewCertificateConfigArgs(DomainNewCertificateConfigArgs $) {
        this.certName = $.certName;
        this.certType = $.certType;
        this.forceSet = $.forceSet;
        this.privateKey = $.privateKey;
        this.serverCertificate = $.serverCertificate;
        this.serverCertificateStatus = $.serverCertificateStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainNewCertificateConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainNewCertificateConfigArgs $;

        public Builder() {
            $ = new DomainNewCertificateConfigArgs();
        }

        public Builder(DomainNewCertificateConfigArgs defaults) {
            $ = new DomainNewCertificateConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certName The SSL certificate name.
         * 
         * @return builder
         * 
         */
        public Builder certName(@Nullable Output<String> certName) {
            $.certName = certName;
            return this;
        }

        /**
         * @param certName The SSL certificate name.
         * 
         * @return builder
         * 
         */
        public Builder certName(String certName) {
            return certName(Output.of(certName));
        }

        /**
         * @param certType The SSL certificate type, can be &#34;upload&#34;, &#34;cas&#34; and &#34;free&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable Output<String> certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param certType The SSL certificate type, can be &#34;upload&#34;, &#34;cas&#34; and &#34;free&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certType(String certType) {
            return certType(Output.of(certType));
        }

        /**
         * @param forceSet Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
         * 
         * @return builder
         * 
         */
        public Builder forceSet(@Nullable Output<String> forceSet) {
            $.forceSet = forceSet;
            return this;
        }

        /**
         * @param forceSet Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
         * 
         * @return builder
         * 
         */
        public Builder forceSet(String forceSet) {
            return forceSet(Output.of(forceSet));
        }

        /**
         * @param privateKey The SSL private key. This is required if `server_certificate_status` is `on`
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The SSL private key. This is required if `server_certificate_status` is `on`
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param serverCertificate The SSL server certificate string. This is required if `server_certificate_status` is `on`
         * 
         * @return builder
         * 
         */
        public Builder serverCertificate(@Nullable Output<String> serverCertificate) {
            $.serverCertificate = serverCertificate;
            return this;
        }

        /**
         * @param serverCertificate The SSL server certificate string. This is required if `server_certificate_status` is `on`
         * 
         * @return builder
         * 
         */
        public Builder serverCertificate(String serverCertificate) {
            return serverCertificate(Output.of(serverCertificate));
        }

        /**
         * @param serverCertificateStatus This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateStatus(@Nullable Output<String> serverCertificateStatus) {
            $.serverCertificateStatus = serverCertificateStatus;
            return this;
        }

        /**
         * @param serverCertificateStatus This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateStatus(String serverCertificateStatus) {
            return serverCertificateStatus(Output.of(serverCertificateStatus));
        }

        public DomainNewCertificateConfigArgs build() {
            return $;
        }
    }

}
