// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.message.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceTopicsTopic {
    /**
     * @return The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    private final Integer createTime;
    /**
     * @return The id of the Topic. Its value is same as Topic Name.
     * 
     */
    private final String id;
    /**
     * @return The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    private final Integer lastModifyTime;
    /**
     * @return Indicates whether the log management feature is enabled.
     * 
     */
    private final Boolean loggingEnabled;
    /**
     * @return The maximum size of a message body that can be sent to the topic. Unit: bytes.
     * 
     */
    private final Integer maxMessageSize;
    /**
     * @return The number of messages in the topic.
     * 
     */
    private final Integer messageCount;
    /**
     * @return The maximum period for which a message can be retained in the topic. A message that is sent to the topic can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is pushed to the specified endpoints. Unit: seconds.
     * 
     */
    private final Integer messageRetentionPeriod;
    /**
     * @return The inner url of the topic.
     * 
     */
    private final String topicInnerUrl;
    /**
     * @return The name of the topic.
     * 
     */
    private final String topicName;
    /**
     * @return The url of the topic.
     * 
     */
    private final String topicUrl;

    @CustomType.Constructor
    private GetServiceTopicsTopic(
        @CustomType.Parameter("createTime") Integer createTime,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lastModifyTime") Integer lastModifyTime,
        @CustomType.Parameter("loggingEnabled") Boolean loggingEnabled,
        @CustomType.Parameter("maxMessageSize") Integer maxMessageSize,
        @CustomType.Parameter("messageCount") Integer messageCount,
        @CustomType.Parameter("messageRetentionPeriod") Integer messageRetentionPeriod,
        @CustomType.Parameter("topicInnerUrl") String topicInnerUrl,
        @CustomType.Parameter("topicName") String topicName,
        @CustomType.Parameter("topicUrl") String topicUrl) {
        this.createTime = createTime;
        this.id = id;
        this.lastModifyTime = lastModifyTime;
        this.loggingEnabled = loggingEnabled;
        this.maxMessageSize = maxMessageSize;
        this.messageCount = messageCount;
        this.messageRetentionPeriod = messageRetentionPeriod;
        this.topicInnerUrl = topicInnerUrl;
        this.topicName = topicName;
        this.topicUrl = topicUrl;
    }

    /**
     * @return The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    public Integer createTime() {
        return this.createTime;
    }
    /**
     * @return The id of the Topic. Its value is same as Topic Name.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    public Integer lastModifyTime() {
        return this.lastModifyTime;
    }
    /**
     * @return Indicates whether the log management feature is enabled.
     * 
     */
    public Boolean loggingEnabled() {
        return this.loggingEnabled;
    }
    /**
     * @return The maximum size of a message body that can be sent to the topic. Unit: bytes.
     * 
     */
    public Integer maxMessageSize() {
        return this.maxMessageSize;
    }
    /**
     * @return The number of messages in the topic.
     * 
     */
    public Integer messageCount() {
        return this.messageCount;
    }
    /**
     * @return The maximum period for which a message can be retained in the topic. A message that is sent to the topic can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is pushed to the specified endpoints. Unit: seconds.
     * 
     */
    public Integer messageRetentionPeriod() {
        return this.messageRetentionPeriod;
    }
    /**
     * @return The inner url of the topic.
     * 
     */
    public String topicInnerUrl() {
        return this.topicInnerUrl;
    }
    /**
     * @return The name of the topic.
     * 
     */
    public String topicName() {
        return this.topicName;
    }
    /**
     * @return The url of the topic.
     * 
     */
    public String topicUrl() {
        return this.topicUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTopicsTopic defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer createTime;
        private String id;
        private Integer lastModifyTime;
        private Boolean loggingEnabled;
        private Integer maxMessageSize;
        private Integer messageCount;
        private Integer messageRetentionPeriod;
        private String topicInnerUrl;
        private String topicName;
        private String topicUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceTopicsTopic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.id = defaults.id;
    	      this.lastModifyTime = defaults.lastModifyTime;
    	      this.loggingEnabled = defaults.loggingEnabled;
    	      this.maxMessageSize = defaults.maxMessageSize;
    	      this.messageCount = defaults.messageCount;
    	      this.messageRetentionPeriod = defaults.messageRetentionPeriod;
    	      this.topicInnerUrl = defaults.topicInnerUrl;
    	      this.topicName = defaults.topicName;
    	      this.topicUrl = defaults.topicUrl;
        }

        public Builder createTime(Integer createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lastModifyTime(Integer lastModifyTime) {
            this.lastModifyTime = Objects.requireNonNull(lastModifyTime);
            return this;
        }
        public Builder loggingEnabled(Boolean loggingEnabled) {
            this.loggingEnabled = Objects.requireNonNull(loggingEnabled);
            return this;
        }
        public Builder maxMessageSize(Integer maxMessageSize) {
            this.maxMessageSize = Objects.requireNonNull(maxMessageSize);
            return this;
        }
        public Builder messageCount(Integer messageCount) {
            this.messageCount = Objects.requireNonNull(messageCount);
            return this;
        }
        public Builder messageRetentionPeriod(Integer messageRetentionPeriod) {
            this.messageRetentionPeriod = Objects.requireNonNull(messageRetentionPeriod);
            return this;
        }
        public Builder topicInnerUrl(String topicInnerUrl) {
            this.topicInnerUrl = Objects.requireNonNull(topicInnerUrl);
            return this;
        }
        public Builder topicName(String topicName) {
            this.topicName = Objects.requireNonNull(topicName);
            return this;
        }
        public Builder topicUrl(String topicUrl) {
            this.topicUrl = Objects.requireNonNull(topicUrl);
            return this;
        }        public GetServiceTopicsTopic build() {
            return new GetServiceTopicsTopic(createTime, id, lastModifyTime, loggingEnabled, maxMessageSize, messageCount, messageRetentionPeriod, topicInnerUrl, topicName, topicUrl);
        }
    }
}
