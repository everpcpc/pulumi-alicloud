// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerGroupHealthCheck {
    /**
     * @return The backend port that is used for health checks. Valid values: 0 to 65535. Default value: 0. If you set the value to 0, the port of a backend server is used for health checks.
     * 
     */
    private final @Nullable Integer healthCheckConnectPort;
    /**
     * @return The maximum timeout period of a health check response. Unit: seconds. Valid values: 1 to 300. Default value: 5.
     * 
     */
    private final @Nullable Integer healthCheckConnectTimeout;
    /**
     * @return The domain name that is used for health checks. Valid values:
     * - `$SERVER_IP`: the private IP address of a backend server.
     * 
     */
    private final @Nullable String healthCheckDomain;
    /**
     * @return Specifies whether to enable health checks.
     * 
     */
    private final @Nullable Boolean healthCheckEnabled;
    /**
     * @return The HTTP status codes to return to health checks. Separate multiple HTTP status codes with commas (,). Valid values: http_2xx (default), http_3xx, http_4xx, and http_5xx. **Note:** This parameter takes effect only if `health_check_type` is set to `http`.
     * 
     */
    private final @Nullable List<String> healthCheckHttpCodes;
    /**
     * @return The interval between two consecutive health checks. Unit: seconds. Valid values: 5 to 5000. Default value: 10.
     * 
     */
    private final @Nullable Integer healthCheckInterval;
    /**
     * @return The protocol that is used for health checks. Valid values: `TCP` (default) and `HTTP`.
     * 
     */
    private final @Nullable String healthCheckType;
    /**
     * @return The path to which health check requests are sent. The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : &#39; , +`. The path must start with a forward slash (/). **Note:** This parameter takes effect only if `health_check_type` is set to `http`.
     * 
     */
    private final @Nullable String healthCheckUrl;
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status is changed from fail to success. Valid values: 2 to 10. Default value: 2.
     * 
     */
    private final @Nullable Integer healthyThreshold;
    /**
     * @return The HTTP method that is used for health checks. Valid values: `GET` and `HEAD`. **Note:** This parameter takes effect only if `health_check_type` is set to `http`.
     * 
     */
    private final @Nullable String httpCheckMethod;
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status is changed from success to fail. Valid values: 2 to 10. Default value: 2.
     * 
     */
    private final @Nullable Integer unhealthyThreshold;

    @CustomType.Constructor
    private ServerGroupHealthCheck(
        @CustomType.Parameter("healthCheckConnectPort") @Nullable Integer healthCheckConnectPort,
        @CustomType.Parameter("healthCheckConnectTimeout") @Nullable Integer healthCheckConnectTimeout,
        @CustomType.Parameter("healthCheckDomain") @Nullable String healthCheckDomain,
        @CustomType.Parameter("healthCheckEnabled") @Nullable Boolean healthCheckEnabled,
        @CustomType.Parameter("healthCheckHttpCodes") @Nullable List<String> healthCheckHttpCodes,
        @CustomType.Parameter("healthCheckInterval") @Nullable Integer healthCheckInterval,
        @CustomType.Parameter("healthCheckType") @Nullable String healthCheckType,
        @CustomType.Parameter("healthCheckUrl") @Nullable String healthCheckUrl,
        @CustomType.Parameter("healthyThreshold") @Nullable Integer healthyThreshold,
        @CustomType.Parameter("httpCheckMethod") @Nullable String httpCheckMethod,
        @CustomType.Parameter("unhealthyThreshold") @Nullable Integer unhealthyThreshold) {
        this.healthCheckConnectPort = healthCheckConnectPort;
        this.healthCheckConnectTimeout = healthCheckConnectTimeout;
        this.healthCheckDomain = healthCheckDomain;
        this.healthCheckEnabled = healthCheckEnabled;
        this.healthCheckHttpCodes = healthCheckHttpCodes;
        this.healthCheckInterval = healthCheckInterval;
        this.healthCheckType = healthCheckType;
        this.healthCheckUrl = healthCheckUrl;
        this.healthyThreshold = healthyThreshold;
        this.httpCheckMethod = httpCheckMethod;
        this.unhealthyThreshold = unhealthyThreshold;
    }

    /**
     * @return The backend port that is used for health checks. Valid values: 0 to 65535. Default value: 0. If you set the value to 0, the port of a backend server is used for health checks.
     * 
     */
    public Optional<Integer> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }
    /**
     * @return The maximum timeout period of a health check response. Unit: seconds. Valid values: 1 to 300. Default value: 5.
     * 
     */
    public Optional<Integer> healthCheckConnectTimeout() {
        return Optional.ofNullable(this.healthCheckConnectTimeout);
    }
    /**
     * @return The domain name that is used for health checks. Valid values:
     * - `$SERVER_IP`: the private IP address of a backend server.
     * 
     */
    public Optional<String> healthCheckDomain() {
        return Optional.ofNullable(this.healthCheckDomain);
    }
    /**
     * @return Specifies whether to enable health checks.
     * 
     */
    public Optional<Boolean> healthCheckEnabled() {
        return Optional.ofNullable(this.healthCheckEnabled);
    }
    /**
     * @return The HTTP status codes to return to health checks. Separate multiple HTTP status codes with commas (,). Valid values: http_2xx (default), http_3xx, http_4xx, and http_5xx. **Note:** This parameter takes effect only if `health_check_type` is set to `http`.
     * 
     */
    public List<String> healthCheckHttpCodes() {
        return this.healthCheckHttpCodes == null ? List.of() : this.healthCheckHttpCodes;
    }
    /**
     * @return The interval between two consecutive health checks. Unit: seconds. Valid values: 5 to 5000. Default value: 10.
     * 
     */
    public Optional<Integer> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }
    /**
     * @return The protocol that is used for health checks. Valid values: `TCP` (default) and `HTTP`.
     * 
     */
    public Optional<String> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }
    /**
     * @return The path to which health check requests are sent. The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : &#39; , +`. The path must start with a forward slash (/). **Note:** This parameter takes effect only if `health_check_type` is set to `http`.
     * 
     */
    public Optional<String> healthCheckUrl() {
        return Optional.ofNullable(this.healthCheckUrl);
    }
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status is changed from fail to success. Valid values: 2 to 10. Default value: 2.
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return The HTTP method that is used for health checks. Valid values: `GET` and `HEAD`. **Note:** This parameter takes effect only if `health_check_type` is set to `http`.
     * 
     */
    public Optional<String> httpCheckMethod() {
        return Optional.ofNullable(this.httpCheckMethod);
    }
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status is changed from success to fail. Valid values: 2 to 10. Default value: 2.
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerGroupHealthCheck defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer healthCheckConnectPort;
        private @Nullable Integer healthCheckConnectTimeout;
        private @Nullable String healthCheckDomain;
        private @Nullable Boolean healthCheckEnabled;
        private @Nullable List<String> healthCheckHttpCodes;
        private @Nullable Integer healthCheckInterval;
        private @Nullable String healthCheckType;
        private @Nullable String healthCheckUrl;
        private @Nullable Integer healthyThreshold;
        private @Nullable String httpCheckMethod;
        private @Nullable Integer unhealthyThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(ServerGroupHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckConnectPort = defaults.healthCheckConnectPort;
    	      this.healthCheckConnectTimeout = defaults.healthCheckConnectTimeout;
    	      this.healthCheckDomain = defaults.healthCheckDomain;
    	      this.healthCheckEnabled = defaults.healthCheckEnabled;
    	      this.healthCheckHttpCodes = defaults.healthCheckHttpCodes;
    	      this.healthCheckInterval = defaults.healthCheckInterval;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.healthCheckUrl = defaults.healthCheckUrl;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.httpCheckMethod = defaults.httpCheckMethod;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        public Builder healthCheckConnectPort(@Nullable Integer healthCheckConnectPort) {
            this.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }
        public Builder healthCheckConnectTimeout(@Nullable Integer healthCheckConnectTimeout) {
            this.healthCheckConnectTimeout = healthCheckConnectTimeout;
            return this;
        }
        public Builder healthCheckDomain(@Nullable String healthCheckDomain) {
            this.healthCheckDomain = healthCheckDomain;
            return this;
        }
        public Builder healthCheckEnabled(@Nullable Boolean healthCheckEnabled) {
            this.healthCheckEnabled = healthCheckEnabled;
            return this;
        }
        public Builder healthCheckHttpCodes(@Nullable List<String> healthCheckHttpCodes) {
            this.healthCheckHttpCodes = healthCheckHttpCodes;
            return this;
        }
        public Builder healthCheckHttpCodes(String... healthCheckHttpCodes) {
            return healthCheckHttpCodes(List.of(healthCheckHttpCodes));
        }
        public Builder healthCheckInterval(@Nullable Integer healthCheckInterval) {
            this.healthCheckInterval = healthCheckInterval;
            return this;
        }
        public Builder healthCheckType(@Nullable String healthCheckType) {
            this.healthCheckType = healthCheckType;
            return this;
        }
        public Builder healthCheckUrl(@Nullable String healthCheckUrl) {
            this.healthCheckUrl = healthCheckUrl;
            return this;
        }
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        public Builder httpCheckMethod(@Nullable String httpCheckMethod) {
            this.httpCheckMethod = httpCheckMethod;
            return this;
        }
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }        public ServerGroupHealthCheck build() {
            return new ServerGroupHealthCheck(healthCheckConnectPort, healthCheckConnectTimeout, healthCheckDomain, healthCheckEnabled, healthCheckHttpCodes, healthCheckInterval, healthCheckType, healthCheckUrl, healthyThreshold, httpCheckMethod, unhealthyThreshold);
        }
    }
}
