// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.outputs;

import com.pulumi.alicloud.cs.outputs.GetKubernetesClustersClusterConnections;
import com.pulumi.alicloud.cs.outputs.GetKubernetesClustersClusterLogConfig;
import com.pulumi.alicloud.cs.outputs.GetKubernetesClustersClusterMasterNode;
import com.pulumi.alicloud.cs.outputs.GetKubernetesClustersClusterWorkerNode;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKubernetesClustersCluster {
    /**
     * @return The ID of availability zone.
     * 
     */
    private final String availabilityZone;
    private final String clusterNetworkType;
    /**
     * @return Map of kubernetes cluster connection information. It contains several attributes to `Block Connections`.
     * 
     */
    private final GetKubernetesClustersClusterConnections connections;
    /**
     * @return ID of the node.
     * 
     */
    private final String id;
    /**
     * @return The ID of node image.
     * 
     */
    private final String imageId;
    /**
     * @return The keypair of ssh login cluster node, you have to create it first.
     * 
     */
    private final String keyName;
    /**
     * @return A list of one element containing information about the associated log store. It contains the following attributes:
     * 
     */
    private final List<GetKubernetesClustersClusterLogConfig> logConfigs;
    private final Boolean masterAutoRenew;
    private final Integer masterAutoRenewPeriod;
    /**
     * @return The system disk category of master node.
     * 
     */
    private final String masterDiskCategory;
    /**
     * @return The system disk size of master node.
     * 
     */
    private final Integer masterDiskSize;
    private final String masterInstanceChargeType;
    /**
     * @return The instance type of master node.
     * 
     */
    private final List<String> masterInstanceTypes;
    /**
     * @return List of cluster master nodes. It contains several attributes to `Block Nodes`.
     * 
     */
    private final List<GetKubernetesClustersClusterMasterNode> masterNodes;
    private final Integer masterPeriod;
    private final String masterPeriodUnit;
    /**
     * @return Node name.
     * 
     */
    private final String name;
    /**
     * @return The ID of nat gateway used to launch kubernetes cluster.
     * 
     */
    private final String natGatewayId;
    /**
     * @return The network mask used on pods for each node.
     * 
     */
    private final Integer nodeCidrMask;
    private final String podCidr;
    /**
     * @return The ID of security group where the current cluster worker node is located.
     * 
     */
    private final String securityGroupId;
    private final String serviceCidr;
    /**
     * @return Whether internet load balancer for API Server is created
     * 
     */
    private final Boolean slbInternetEnabled;
    /**
     * @return The ID of VPC where the current cluster is located.
     * 
     */
    private final String vpcId;
    /**
     * @return The ID of VSwitches where the current cluster is located.
     * 
     */
    private final List<String> vswitchIds;
    private final Boolean workerAutoRenew;
    private final Integer workerAutoRenewPeriod;
    /**
     * @return The data disk size of worker node.
     * 
     */
    private final String workerDataDiskCategory;
    /**
     * @return The data disk category of worker node.
     * 
     */
    private final Integer workerDataDiskSize;
    /**
     * @return The system disk category of worker node.
     * 
     */
    private final String workerDiskCategory;
    /**
     * @return The system disk size of worker node.
     * 
     */
    private final Integer workerDiskSize;
    private final String workerInstanceChargeType;
    /**
     * @return The instance type of worker node.
     * 
     */
    private final List<String> workerInstanceTypes;
    /**
     * @return List of cluster worker nodes. It contains several attributes to `Block Nodes`.
     * 
     */
    private final List<GetKubernetesClustersClusterWorkerNode> workerNodes;
    /**
     * @return The ECS instance node number in the current container cluster.
     * 
     */
    private final List<Integer> workerNumbers;
    private final Integer workerPeriod;
    private final String workerPeriodUnit;

    @CustomType.Constructor
    private GetKubernetesClustersCluster(
        @CustomType.Parameter("availabilityZone") String availabilityZone,
        @CustomType.Parameter("clusterNetworkType") String clusterNetworkType,
        @CustomType.Parameter("connections") GetKubernetesClustersClusterConnections connections,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageId") String imageId,
        @CustomType.Parameter("keyName") String keyName,
        @CustomType.Parameter("logConfigs") List<GetKubernetesClustersClusterLogConfig> logConfigs,
        @CustomType.Parameter("masterAutoRenew") Boolean masterAutoRenew,
        @CustomType.Parameter("masterAutoRenewPeriod") Integer masterAutoRenewPeriod,
        @CustomType.Parameter("masterDiskCategory") String masterDiskCategory,
        @CustomType.Parameter("masterDiskSize") Integer masterDiskSize,
        @CustomType.Parameter("masterInstanceChargeType") String masterInstanceChargeType,
        @CustomType.Parameter("masterInstanceTypes") List<String> masterInstanceTypes,
        @CustomType.Parameter("masterNodes") List<GetKubernetesClustersClusterMasterNode> masterNodes,
        @CustomType.Parameter("masterPeriod") Integer masterPeriod,
        @CustomType.Parameter("masterPeriodUnit") String masterPeriodUnit,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("natGatewayId") String natGatewayId,
        @CustomType.Parameter("nodeCidrMask") Integer nodeCidrMask,
        @CustomType.Parameter("podCidr") String podCidr,
        @CustomType.Parameter("securityGroupId") String securityGroupId,
        @CustomType.Parameter("serviceCidr") String serviceCidr,
        @CustomType.Parameter("slbInternetEnabled") Boolean slbInternetEnabled,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vswitchIds") List<String> vswitchIds,
        @CustomType.Parameter("workerAutoRenew") Boolean workerAutoRenew,
        @CustomType.Parameter("workerAutoRenewPeriod") Integer workerAutoRenewPeriod,
        @CustomType.Parameter("workerDataDiskCategory") String workerDataDiskCategory,
        @CustomType.Parameter("workerDataDiskSize") Integer workerDataDiskSize,
        @CustomType.Parameter("workerDiskCategory") String workerDiskCategory,
        @CustomType.Parameter("workerDiskSize") Integer workerDiskSize,
        @CustomType.Parameter("workerInstanceChargeType") String workerInstanceChargeType,
        @CustomType.Parameter("workerInstanceTypes") List<String> workerInstanceTypes,
        @CustomType.Parameter("workerNodes") List<GetKubernetesClustersClusterWorkerNode> workerNodes,
        @CustomType.Parameter("workerNumbers") List<Integer> workerNumbers,
        @CustomType.Parameter("workerPeriod") Integer workerPeriod,
        @CustomType.Parameter("workerPeriodUnit") String workerPeriodUnit) {
        this.availabilityZone = availabilityZone;
        this.clusterNetworkType = clusterNetworkType;
        this.connections = connections;
        this.id = id;
        this.imageId = imageId;
        this.keyName = keyName;
        this.logConfigs = logConfigs;
        this.masterAutoRenew = masterAutoRenew;
        this.masterAutoRenewPeriod = masterAutoRenewPeriod;
        this.masterDiskCategory = masterDiskCategory;
        this.masterDiskSize = masterDiskSize;
        this.masterInstanceChargeType = masterInstanceChargeType;
        this.masterInstanceTypes = masterInstanceTypes;
        this.masterNodes = masterNodes;
        this.masterPeriod = masterPeriod;
        this.masterPeriodUnit = masterPeriodUnit;
        this.name = name;
        this.natGatewayId = natGatewayId;
        this.nodeCidrMask = nodeCidrMask;
        this.podCidr = podCidr;
        this.securityGroupId = securityGroupId;
        this.serviceCidr = serviceCidr;
        this.slbInternetEnabled = slbInternetEnabled;
        this.vpcId = vpcId;
        this.vswitchIds = vswitchIds;
        this.workerAutoRenew = workerAutoRenew;
        this.workerAutoRenewPeriod = workerAutoRenewPeriod;
        this.workerDataDiskCategory = workerDataDiskCategory;
        this.workerDataDiskSize = workerDataDiskSize;
        this.workerDiskCategory = workerDiskCategory;
        this.workerDiskSize = workerDiskSize;
        this.workerInstanceChargeType = workerInstanceChargeType;
        this.workerInstanceTypes = workerInstanceTypes;
        this.workerNodes = workerNodes;
        this.workerNumbers = workerNumbers;
        this.workerPeriod = workerPeriod;
        this.workerPeriodUnit = workerPeriodUnit;
    }

    /**
     * @return The ID of availability zone.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    public String clusterNetworkType() {
        return this.clusterNetworkType;
    }
    /**
     * @return Map of kubernetes cluster connection information. It contains several attributes to `Block Connections`.
     * 
     */
    public GetKubernetesClustersClusterConnections connections() {
        return this.connections;
    }
    /**
     * @return ID of the node.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of node image.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return The keypair of ssh login cluster node, you have to create it first.
     * 
     */
    public String keyName() {
        return this.keyName;
    }
    /**
     * @return A list of one element containing information about the associated log store. It contains the following attributes:
     * 
     */
    public List<GetKubernetesClustersClusterLogConfig> logConfigs() {
        return this.logConfigs;
    }
    public Boolean masterAutoRenew() {
        return this.masterAutoRenew;
    }
    public Integer masterAutoRenewPeriod() {
        return this.masterAutoRenewPeriod;
    }
    /**
     * @return The system disk category of master node.
     * 
     */
    public String masterDiskCategory() {
        return this.masterDiskCategory;
    }
    /**
     * @return The system disk size of master node.
     * 
     */
    public Integer masterDiskSize() {
        return this.masterDiskSize;
    }
    public String masterInstanceChargeType() {
        return this.masterInstanceChargeType;
    }
    /**
     * @return The instance type of master node.
     * 
     */
    public List<String> masterInstanceTypes() {
        return this.masterInstanceTypes;
    }
    /**
     * @return List of cluster master nodes. It contains several attributes to `Block Nodes`.
     * 
     */
    public List<GetKubernetesClustersClusterMasterNode> masterNodes() {
        return this.masterNodes;
    }
    public Integer masterPeriod() {
        return this.masterPeriod;
    }
    public String masterPeriodUnit() {
        return this.masterPeriodUnit;
    }
    /**
     * @return Node name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of nat gateway used to launch kubernetes cluster.
     * 
     */
    public String natGatewayId() {
        return this.natGatewayId;
    }
    /**
     * @return The network mask used on pods for each node.
     * 
     */
    public Integer nodeCidrMask() {
        return this.nodeCidrMask;
    }
    public String podCidr() {
        return this.podCidr;
    }
    /**
     * @return The ID of security group where the current cluster worker node is located.
     * 
     */
    public String securityGroupId() {
        return this.securityGroupId;
    }
    public String serviceCidr() {
        return this.serviceCidr;
    }
    /**
     * @return Whether internet load balancer for API Server is created
     * 
     */
    public Boolean slbInternetEnabled() {
        return this.slbInternetEnabled;
    }
    /**
     * @return The ID of VPC where the current cluster is located.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of VSwitches where the current cluster is located.
     * 
     */
    public List<String> vswitchIds() {
        return this.vswitchIds;
    }
    public Boolean workerAutoRenew() {
        return this.workerAutoRenew;
    }
    public Integer workerAutoRenewPeriod() {
        return this.workerAutoRenewPeriod;
    }
    /**
     * @return The data disk size of worker node.
     * 
     */
    public String workerDataDiskCategory() {
        return this.workerDataDiskCategory;
    }
    /**
     * @return The data disk category of worker node.
     * 
     */
    public Integer workerDataDiskSize() {
        return this.workerDataDiskSize;
    }
    /**
     * @return The system disk category of worker node.
     * 
     */
    public String workerDiskCategory() {
        return this.workerDiskCategory;
    }
    /**
     * @return The system disk size of worker node.
     * 
     */
    public Integer workerDiskSize() {
        return this.workerDiskSize;
    }
    public String workerInstanceChargeType() {
        return this.workerInstanceChargeType;
    }
    /**
     * @return The instance type of worker node.
     * 
     */
    public List<String> workerInstanceTypes() {
        return this.workerInstanceTypes;
    }
    /**
     * @return List of cluster worker nodes. It contains several attributes to `Block Nodes`.
     * 
     */
    public List<GetKubernetesClustersClusterWorkerNode> workerNodes() {
        return this.workerNodes;
    }
    /**
     * @return The ECS instance node number in the current container cluster.
     * 
     */
    public List<Integer> workerNumbers() {
        return this.workerNumbers;
    }
    public Integer workerPeriod() {
        return this.workerPeriod;
    }
    public String workerPeriodUnit() {
        return this.workerPeriodUnit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesClustersCluster defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String availabilityZone;
        private String clusterNetworkType;
        private GetKubernetesClustersClusterConnections connections;
        private String id;
        private String imageId;
        private String keyName;
        private List<GetKubernetesClustersClusterLogConfig> logConfigs;
        private Boolean masterAutoRenew;
        private Integer masterAutoRenewPeriod;
        private String masterDiskCategory;
        private Integer masterDiskSize;
        private String masterInstanceChargeType;
        private List<String> masterInstanceTypes;
        private List<GetKubernetesClustersClusterMasterNode> masterNodes;
        private Integer masterPeriod;
        private String masterPeriodUnit;
        private String name;
        private String natGatewayId;
        private Integer nodeCidrMask;
        private String podCidr;
        private String securityGroupId;
        private String serviceCidr;
        private Boolean slbInternetEnabled;
        private String vpcId;
        private List<String> vswitchIds;
        private Boolean workerAutoRenew;
        private Integer workerAutoRenewPeriod;
        private String workerDataDiskCategory;
        private Integer workerDataDiskSize;
        private String workerDiskCategory;
        private Integer workerDiskSize;
        private String workerInstanceChargeType;
        private List<String> workerInstanceTypes;
        private List<GetKubernetesClustersClusterWorkerNode> workerNodes;
        private List<Integer> workerNumbers;
        private Integer workerPeriod;
        private String workerPeriodUnit;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKubernetesClustersCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.clusterNetworkType = defaults.clusterNetworkType;
    	      this.connections = defaults.connections;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.keyName = defaults.keyName;
    	      this.logConfigs = defaults.logConfigs;
    	      this.masterAutoRenew = defaults.masterAutoRenew;
    	      this.masterAutoRenewPeriod = defaults.masterAutoRenewPeriod;
    	      this.masterDiskCategory = defaults.masterDiskCategory;
    	      this.masterDiskSize = defaults.masterDiskSize;
    	      this.masterInstanceChargeType = defaults.masterInstanceChargeType;
    	      this.masterInstanceTypes = defaults.masterInstanceTypes;
    	      this.masterNodes = defaults.masterNodes;
    	      this.masterPeriod = defaults.masterPeriod;
    	      this.masterPeriodUnit = defaults.masterPeriodUnit;
    	      this.name = defaults.name;
    	      this.natGatewayId = defaults.natGatewayId;
    	      this.nodeCidrMask = defaults.nodeCidrMask;
    	      this.podCidr = defaults.podCidr;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.serviceCidr = defaults.serviceCidr;
    	      this.slbInternetEnabled = defaults.slbInternetEnabled;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchIds = defaults.vswitchIds;
    	      this.workerAutoRenew = defaults.workerAutoRenew;
    	      this.workerAutoRenewPeriod = defaults.workerAutoRenewPeriod;
    	      this.workerDataDiskCategory = defaults.workerDataDiskCategory;
    	      this.workerDataDiskSize = defaults.workerDataDiskSize;
    	      this.workerDiskCategory = defaults.workerDiskCategory;
    	      this.workerDiskSize = defaults.workerDiskSize;
    	      this.workerInstanceChargeType = defaults.workerInstanceChargeType;
    	      this.workerInstanceTypes = defaults.workerInstanceTypes;
    	      this.workerNodes = defaults.workerNodes;
    	      this.workerNumbers = defaults.workerNumbers;
    	      this.workerPeriod = defaults.workerPeriod;
    	      this.workerPeriodUnit = defaults.workerPeriodUnit;
        }

        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        public Builder clusterNetworkType(String clusterNetworkType) {
            this.clusterNetworkType = Objects.requireNonNull(clusterNetworkType);
            return this;
        }
        public Builder connections(GetKubernetesClustersClusterConnections connections) {
            this.connections = Objects.requireNonNull(connections);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        public Builder keyName(String keyName) {
            this.keyName = Objects.requireNonNull(keyName);
            return this;
        }
        public Builder logConfigs(List<GetKubernetesClustersClusterLogConfig> logConfigs) {
            this.logConfigs = Objects.requireNonNull(logConfigs);
            return this;
        }
        public Builder logConfigs(GetKubernetesClustersClusterLogConfig... logConfigs) {
            return logConfigs(List.of(logConfigs));
        }
        public Builder masterAutoRenew(Boolean masterAutoRenew) {
            this.masterAutoRenew = Objects.requireNonNull(masterAutoRenew);
            return this;
        }
        public Builder masterAutoRenewPeriod(Integer masterAutoRenewPeriod) {
            this.masterAutoRenewPeriod = Objects.requireNonNull(masterAutoRenewPeriod);
            return this;
        }
        public Builder masterDiskCategory(String masterDiskCategory) {
            this.masterDiskCategory = Objects.requireNonNull(masterDiskCategory);
            return this;
        }
        public Builder masterDiskSize(Integer masterDiskSize) {
            this.masterDiskSize = Objects.requireNonNull(masterDiskSize);
            return this;
        }
        public Builder masterInstanceChargeType(String masterInstanceChargeType) {
            this.masterInstanceChargeType = Objects.requireNonNull(masterInstanceChargeType);
            return this;
        }
        public Builder masterInstanceTypes(List<String> masterInstanceTypes) {
            this.masterInstanceTypes = Objects.requireNonNull(masterInstanceTypes);
            return this;
        }
        public Builder masterInstanceTypes(String... masterInstanceTypes) {
            return masterInstanceTypes(List.of(masterInstanceTypes));
        }
        public Builder masterNodes(List<GetKubernetesClustersClusterMasterNode> masterNodes) {
            this.masterNodes = Objects.requireNonNull(masterNodes);
            return this;
        }
        public Builder masterNodes(GetKubernetesClustersClusterMasterNode... masterNodes) {
            return masterNodes(List.of(masterNodes));
        }
        public Builder masterPeriod(Integer masterPeriod) {
            this.masterPeriod = Objects.requireNonNull(masterPeriod);
            return this;
        }
        public Builder masterPeriodUnit(String masterPeriodUnit) {
            this.masterPeriodUnit = Objects.requireNonNull(masterPeriodUnit);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder natGatewayId(String natGatewayId) {
            this.natGatewayId = Objects.requireNonNull(natGatewayId);
            return this;
        }
        public Builder nodeCidrMask(Integer nodeCidrMask) {
            this.nodeCidrMask = Objects.requireNonNull(nodeCidrMask);
            return this;
        }
        public Builder podCidr(String podCidr) {
            this.podCidr = Objects.requireNonNull(podCidr);
            return this;
        }
        public Builder securityGroupId(String securityGroupId) {
            this.securityGroupId = Objects.requireNonNull(securityGroupId);
            return this;
        }
        public Builder serviceCidr(String serviceCidr) {
            this.serviceCidr = Objects.requireNonNull(serviceCidr);
            return this;
        }
        public Builder slbInternetEnabled(Boolean slbInternetEnabled) {
            this.slbInternetEnabled = Objects.requireNonNull(slbInternetEnabled);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vswitchIds(List<String> vswitchIds) {
            this.vswitchIds = Objects.requireNonNull(vswitchIds);
            return this;
        }
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }
        public Builder workerAutoRenew(Boolean workerAutoRenew) {
            this.workerAutoRenew = Objects.requireNonNull(workerAutoRenew);
            return this;
        }
        public Builder workerAutoRenewPeriod(Integer workerAutoRenewPeriod) {
            this.workerAutoRenewPeriod = Objects.requireNonNull(workerAutoRenewPeriod);
            return this;
        }
        public Builder workerDataDiskCategory(String workerDataDiskCategory) {
            this.workerDataDiskCategory = Objects.requireNonNull(workerDataDiskCategory);
            return this;
        }
        public Builder workerDataDiskSize(Integer workerDataDiskSize) {
            this.workerDataDiskSize = Objects.requireNonNull(workerDataDiskSize);
            return this;
        }
        public Builder workerDiskCategory(String workerDiskCategory) {
            this.workerDiskCategory = Objects.requireNonNull(workerDiskCategory);
            return this;
        }
        public Builder workerDiskSize(Integer workerDiskSize) {
            this.workerDiskSize = Objects.requireNonNull(workerDiskSize);
            return this;
        }
        public Builder workerInstanceChargeType(String workerInstanceChargeType) {
            this.workerInstanceChargeType = Objects.requireNonNull(workerInstanceChargeType);
            return this;
        }
        public Builder workerInstanceTypes(List<String> workerInstanceTypes) {
            this.workerInstanceTypes = Objects.requireNonNull(workerInstanceTypes);
            return this;
        }
        public Builder workerInstanceTypes(String... workerInstanceTypes) {
            return workerInstanceTypes(List.of(workerInstanceTypes));
        }
        public Builder workerNodes(List<GetKubernetesClustersClusterWorkerNode> workerNodes) {
            this.workerNodes = Objects.requireNonNull(workerNodes);
            return this;
        }
        public Builder workerNodes(GetKubernetesClustersClusterWorkerNode... workerNodes) {
            return workerNodes(List.of(workerNodes));
        }
        public Builder workerNumbers(List<Integer> workerNumbers) {
            this.workerNumbers = Objects.requireNonNull(workerNumbers);
            return this;
        }
        public Builder workerNumbers(Integer... workerNumbers) {
            return workerNumbers(List.of(workerNumbers));
        }
        public Builder workerPeriod(Integer workerPeriod) {
            this.workerPeriod = Objects.requireNonNull(workerPeriod);
            return this;
        }
        public Builder workerPeriodUnit(String workerPeriodUnit) {
            this.workerPeriodUnit = Objects.requireNonNull(workerPeriodUnit);
            return this;
        }        public GetKubernetesClustersCluster build() {
            return new GetKubernetesClustersCluster(availabilityZone, clusterNetworkType, connections, id, imageId, keyName, logConfigs, masterAutoRenew, masterAutoRenewPeriod, masterDiskCategory, masterDiskSize, masterInstanceChargeType, masterInstanceTypes, masterNodes, masterPeriod, masterPeriodUnit, name, natGatewayId, nodeCidrMask, podCidr, securityGroupId, serviceCidr, slbInternetEnabled, vpcId, vswitchIds, workerAutoRenew, workerAutoRenewPeriod, workerDataDiskCategory, workerDataDiskSize, workerDiskCategory, workerDiskSize, workerInstanceChargeType, workerInstanceTypes, workerNodes, workerNumbers, workerPeriod, workerPeriodUnit);
        }
    }
}
