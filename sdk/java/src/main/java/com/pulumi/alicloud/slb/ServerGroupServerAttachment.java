// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.slb.ServerGroupServerAttachmentArgs;
import com.pulumi.alicloud.slb.inputs.ServerGroupServerAttachmentState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * &gt; **NOTE:** Available in v1.163.0+.
 * 
 * For information about server group server attachment and how to use it, see [Configure a server group server attachment](https://www.alibabacloud.com/help/en/doc-detail/35218.html).
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.AlicloudFunctions;
 * import com.pulumi.alicloud.adb.inputs.GetZonesArgs;
 * import com.pulumi.alicloud.ecs.EcsFunctions;
 * import com.pulumi.alicloud.ecp.inputs.GetInstanceTypesArgs;
 * import com.pulumi.alicloud.ecs.inputs.GetImagesArgs;
 * import com.pulumi.alicloud.vpc.VpcFunctions;
 * import com.pulumi.alicloud.cloudconnect.inputs.GetNetworksArgs;
 * import com.pulumi.alicloud.vpc.inputs.GetSwitchesArgs;
 * import com.pulumi.alicloud.ecs.SecurityGroup;
 * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
 * import com.pulumi.alicloud.ecs.Instance;
 * import com.pulumi.alicloud.ecs.InstanceArgs;
 * import com.pulumi.alicloud.slb.ApplicationLoadBalancer;
 * import com.pulumi.alicloud.slb.ApplicationLoadBalancerArgs;
 * import com.pulumi.alicloud.slb.ServerGroup;
 * import com.pulumi.alicloud.slb.ServerGroupArgs;
 * import com.pulumi.alicloud.slb.ServerGroupServerAttachment;
 * import com.pulumi.alicloud.slb.ServerGroupServerAttachmentArgs;
 * import com.pulumi.alicloud.slb.Listener;
 * import com.pulumi.alicloud.slb.ListenerArgs;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get(&#34;name&#34;).orElse(&#34;slbservergroupvpc&#34;);
 *         final var num = config.get(&#34;num&#34;).orElse(5);
 *         final var defaultZones = AlicloudFunctions.getZones(GetZonesArgs.builder()
 *             .availableDiskCategory(&#34;cloud_efficiency&#34;)
 *             .availableResourceCreation(&#34;VSwitch&#34;)
 *             .build());
 * 
 *         final var defaultInstanceTypes = EcsFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
 *             .availabilityZone(defaultZones.applyValue(getZonesResult -&gt; getZonesResult.zones()[0].id()))
 *             .cpuCoreCount(1)
 *             .memorySize(2)
 *             .build());
 * 
 *         final var defaultImages = EcsFunctions.getImages(GetImagesArgs.builder()
 *             .nameRegex(&#34;^ubuntu_[0-9]+_[0-9]+_x64*&#34;)
 *             .mostRecent(true)
 *             .owners(&#34;system&#34;)
 *             .build());
 * 
 *         final var defaultNetworks = VpcFunctions.getNetworks(GetNetworksArgs.builder()
 *             .nameRegex(&#34;default-NODELETING&#34;)
 *             .build());
 * 
 *         final var defaultSwitches = VpcFunctions.getSwitches(GetSwitchesArgs.builder()
 *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
 *             .zoneId(defaultZones.applyValue(getZonesResult -&gt; getZonesResult.zones()[0].id()))
 *             .build());
 * 
 *         var defaultSecurityGroup = new SecurityGroup(&#34;defaultSecurityGroup&#34;, SecurityGroupArgs.builder()        
 *             .vpcId(defaultNetworks.applyValue(getNetworksResult -&gt; getNetworksResult.ids()[0]))
 *             .build());
 * 
 *         for (var i = 0; i &lt; num; i++) {
 *             new Instance(&#34;defaultInstance-&#34; + i, InstanceArgs.builder()            
 *                 .imageId(defaultImages.applyValue(getImagesResult -&gt; getImagesResult.images()[0].id()))
 *                 .instanceType(defaultInstanceTypes.applyValue(getInstanceTypesResult -&gt; getInstanceTypesResult.instanceTypes()[0].id()))
 *                 .instanceName(name)
 *                 .securityGroups(defaultSecurityGroup.stream().map(element -&gt; element.id()).collect(toList()))
 *                 .internetChargeType(&#34;PayByTraffic&#34;)
 *                 .internetMaxBandwidthOut(&#34;10&#34;)
 *                 .availabilityZone(defaultZones.applyValue(getZonesResult -&gt; getZonesResult.zones()[0].id()))
 *                 .instanceChargeType(&#34;PostPaid&#34;)
 *                 .systemDiskCategory(&#34;cloud_efficiency&#34;)
 *                 .vswitchId(defaultSwitches.applyValue(getSwitchesResult -&gt; getSwitchesResult.ids()[0]))
 *                 .build());
 * 
 *         
 * }
 *         var defaultApplicationLoadBalancer = new ApplicationLoadBalancer(&#34;defaultApplicationLoadBalancer&#34;, ApplicationLoadBalancerArgs.builder()        
 *             .loadBalancerName(name)
 *             .vswitchId(defaultSwitches.applyValue(getSwitchesResult -&gt; getSwitchesResult.vswitches()[0].id()))
 *             .loadBalancerSpec(&#34;slb.s2.small&#34;)
 *             .addressType(&#34;intranet&#34;)
 *             .build());
 * 
 *         var defaultServerGroup = new ServerGroup(&#34;defaultServerGroup&#34;, ServerGroupArgs.builder()        
 *             .loadBalancerId(defaultApplicationLoadBalancer.id())
 *             .build());
 * 
 *         for (var i = 0; i &lt; num; i++) {
 *             new ServerGroupServerAttachment(&#34;defaultServerGroupServerAttachment-&#34; + i, ServerGroupServerAttachmentArgs.builder()            
 *                 .serverGroupId(defaultServerGroup.id())
 *                 .serverId(defaultInstance[range.index()].id())
 *                 .port(8080)
 *                 .weight(0)
 *                 .build());
 * 
 *         
 * }
 *         var defaultListener = new Listener(&#34;defaultListener&#34;, ListenerArgs.builder()        
 *             .loadBalancerId(defaultApplicationLoadBalancer.id())
 *             .backendPort(&#34;80&#34;)
 *             .frontendPort(&#34;80&#34;)
 *             .protocol(&#34;tcp&#34;)
 *             .bandwidth(10)
 *             .scheduler(&#34;rr&#34;)
 *             .serverGroupId(defaultServerGroup.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Load balancer backend server group server attachment can be imported using the id, e.g.
 * 
 * ```sh
 *  $ pulumi import alicloud:slb/serverGroupServerAttachment:ServerGroupServerAttachment example &lt;server_group_id&gt;:&lt;server_id&gt;:&lt;port&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:slb/serverGroupServerAttachment:ServerGroupServerAttachment")
public class ServerGroupServerAttachment extends com.pulumi.resources.CustomResource {
    /**
     * The description of the backend server.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return The description of the backend server.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The port that is used by the backend server. Valid values: `1` to `65535`.
     * 
     */
    @Export(name="port", type=Integer.class, parameters={})
    private Output<Integer> port;

    /**
     * @return The port that is used by the backend server. Valid values: `1` to `65535`.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * The ID of the server group.
     * 
     */
    @Export(name="serverGroupId", type=String.class, parameters={})
    private Output<String> serverGroupId;

    /**
     * @return The ID of the server group.
     * 
     */
    public Output<String> serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * The ID of the backend server. You can specify the ID of an Elastic Compute Service (ECS) instance or an elastic network interface (ENI).
     * 
     */
    @Export(name="serverId", type=String.class, parameters={})
    private Output<String> serverId;

    /**
     * @return The ID of the backend server. You can specify the ID of an Elastic Compute Service (ECS) instance or an elastic network interface (ENI).
     * 
     */
    public Output<String> serverId() {
        return this.serverId;
    }
    /**
     * The type of backend server. Valid values: `ecs`, `eni`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of backend server. Valid values: `ecs`, `eni`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The weight of the backend server. Valid values: `0` to `100`. Default value: `100`. If the value is set to `0`, no requests are forwarded to the backend server.
     * 
     */
    @Export(name="weight", type=Integer.class, parameters={})
    private Output<Integer> weight;

    /**
     * @return The weight of the backend server. Valid values: `0` to `100`. Default value: `100`. If the value is set to `0`, no requests are forwarded to the backend server.
     * 
     */
    public Output<Integer> weight() {
        return this.weight;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServerGroupServerAttachment(String name) {
        this(name, ServerGroupServerAttachmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServerGroupServerAttachment(String name, ServerGroupServerAttachmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServerGroupServerAttachment(String name, ServerGroupServerAttachmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:slb/serverGroupServerAttachment:ServerGroupServerAttachment", name, args == null ? ServerGroupServerAttachmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServerGroupServerAttachment(String name, Output<String> id, @Nullable ServerGroupServerAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:slb/serverGroupServerAttachment:ServerGroupServerAttachment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServerGroupServerAttachment get(String name, Output<String> id, @Nullable ServerGroupServerAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServerGroupServerAttachment(name, id, state, options);
    }
}
