// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ehpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetJobTemplatesTemplate {
    /**
     * @return Queue Jobs, Is of the Form: 1-10:2.
     * 
     */
    private final String arrayRequest;
    /**
     * @return Job Maximum Run Time.
     * 
     */
    private final String clockTime;
    /**
     * @return Job Commands.
     * 
     */
    private final String commandLine;
    /**
     * @return A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
     * 
     */
    private final Integer gpu;
    /**
     * @return The ID of the Job Template.
     * 
     */
    private final String id;
    /**
     * @return The first ID of the resource.
     * 
     */
    private final String jobTemplateId;
    /**
     * @return A Job Template Name.
     * 
     */
    private final String jobTemplateName;
    /**
     * @return A Single Compute Node Maximum Memory.
     * 
     */
    private final String mem;
    /**
     * @return Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
     * 
     */
    private final Integer node;
    /**
     * @return Job Commands the Directory.
     * 
     */
    private final String packagePath;
    /**
     * @return The Job Priority.Possible Values: 0~9.
     * 
     */
    private final Integer priority;
    /**
     * @return The Job Queue.
     * 
     */
    private final String queue;
    /**
     * @return If the Job Is Support for the Re-Run.
     * 
     */
    private final Boolean reRunable;
    /**
     * @return The name of the user who performed the job.
     * 
     */
    private final String runasUser;
    /**
     * @return Error Output Path.
     * 
     */
    private final String stderrRedirectPath;
    /**
     * @return Standard Output Path and.
     * 
     */
    private final String stdoutRedirectPath;
    /**
     * @return A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
     * 
     */
    private final Integer task;
    /**
     * @return A Single Task and the Number of Required Threads.Possible Values: 1~20000.
     * 
     */
    private final Integer thread;
    /**
     * @return The Job of the Environment Variable.
     * 
     */
    private final String variables;

    @CustomType.Constructor
    private GetJobTemplatesTemplate(
        @CustomType.Parameter("arrayRequest") String arrayRequest,
        @CustomType.Parameter("clockTime") String clockTime,
        @CustomType.Parameter("commandLine") String commandLine,
        @CustomType.Parameter("gpu") Integer gpu,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("jobTemplateId") String jobTemplateId,
        @CustomType.Parameter("jobTemplateName") String jobTemplateName,
        @CustomType.Parameter("mem") String mem,
        @CustomType.Parameter("node") Integer node,
        @CustomType.Parameter("packagePath") String packagePath,
        @CustomType.Parameter("priority") Integer priority,
        @CustomType.Parameter("queue") String queue,
        @CustomType.Parameter("reRunable") Boolean reRunable,
        @CustomType.Parameter("runasUser") String runasUser,
        @CustomType.Parameter("stderrRedirectPath") String stderrRedirectPath,
        @CustomType.Parameter("stdoutRedirectPath") String stdoutRedirectPath,
        @CustomType.Parameter("task") Integer task,
        @CustomType.Parameter("thread") Integer thread,
        @CustomType.Parameter("variables") String variables) {
        this.arrayRequest = arrayRequest;
        this.clockTime = clockTime;
        this.commandLine = commandLine;
        this.gpu = gpu;
        this.id = id;
        this.jobTemplateId = jobTemplateId;
        this.jobTemplateName = jobTemplateName;
        this.mem = mem;
        this.node = node;
        this.packagePath = packagePath;
        this.priority = priority;
        this.queue = queue;
        this.reRunable = reRunable;
        this.runasUser = runasUser;
        this.stderrRedirectPath = stderrRedirectPath;
        this.stdoutRedirectPath = stdoutRedirectPath;
        this.task = task;
        this.thread = thread;
        this.variables = variables;
    }

    /**
     * @return Queue Jobs, Is of the Form: 1-10:2.
     * 
     */
    public String arrayRequest() {
        return this.arrayRequest;
    }
    /**
     * @return Job Maximum Run Time.
     * 
     */
    public String clockTime() {
        return this.clockTime;
    }
    /**
     * @return Job Commands.
     * 
     */
    public String commandLine() {
        return this.commandLine;
    }
    /**
     * @return A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
     * 
     */
    public Integer gpu() {
        return this.gpu;
    }
    /**
     * @return The ID of the Job Template.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The first ID of the resource.
     * 
     */
    public String jobTemplateId() {
        return this.jobTemplateId;
    }
    /**
     * @return A Job Template Name.
     * 
     */
    public String jobTemplateName() {
        return this.jobTemplateName;
    }
    /**
     * @return A Single Compute Node Maximum Memory.
     * 
     */
    public String mem() {
        return this.mem;
    }
    /**
     * @return Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
     * 
     */
    public Integer node() {
        return this.node;
    }
    /**
     * @return Job Commands the Directory.
     * 
     */
    public String packagePath() {
        return this.packagePath;
    }
    /**
     * @return The Job Priority.Possible Values: 0~9.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The Job Queue.
     * 
     */
    public String queue() {
        return this.queue;
    }
    /**
     * @return If the Job Is Support for the Re-Run.
     * 
     */
    public Boolean reRunable() {
        return this.reRunable;
    }
    /**
     * @return The name of the user who performed the job.
     * 
     */
    public String runasUser() {
        return this.runasUser;
    }
    /**
     * @return Error Output Path.
     * 
     */
    public String stderrRedirectPath() {
        return this.stderrRedirectPath;
    }
    /**
     * @return Standard Output Path and.
     * 
     */
    public String stdoutRedirectPath() {
        return this.stdoutRedirectPath;
    }
    /**
     * @return A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
     * 
     */
    public Integer task() {
        return this.task;
    }
    /**
     * @return A Single Task and the Number of Required Threads.Possible Values: 1~20000.
     * 
     */
    public Integer thread() {
        return this.thread;
    }
    /**
     * @return The Job of the Environment Variable.
     * 
     */
    public String variables() {
        return this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobTemplatesTemplate defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String arrayRequest;
        private String clockTime;
        private String commandLine;
        private Integer gpu;
        private String id;
        private String jobTemplateId;
        private String jobTemplateName;
        private String mem;
        private Integer node;
        private String packagePath;
        private Integer priority;
        private String queue;
        private Boolean reRunable;
        private String runasUser;
        private String stderrRedirectPath;
        private String stdoutRedirectPath;
        private Integer task;
        private Integer thread;
        private String variables;

        public Builder() {
    	      // Empty
        }

        public Builder(GetJobTemplatesTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arrayRequest = defaults.arrayRequest;
    	      this.clockTime = defaults.clockTime;
    	      this.commandLine = defaults.commandLine;
    	      this.gpu = defaults.gpu;
    	      this.id = defaults.id;
    	      this.jobTemplateId = defaults.jobTemplateId;
    	      this.jobTemplateName = defaults.jobTemplateName;
    	      this.mem = defaults.mem;
    	      this.node = defaults.node;
    	      this.packagePath = defaults.packagePath;
    	      this.priority = defaults.priority;
    	      this.queue = defaults.queue;
    	      this.reRunable = defaults.reRunable;
    	      this.runasUser = defaults.runasUser;
    	      this.stderrRedirectPath = defaults.stderrRedirectPath;
    	      this.stdoutRedirectPath = defaults.stdoutRedirectPath;
    	      this.task = defaults.task;
    	      this.thread = defaults.thread;
    	      this.variables = defaults.variables;
        }

        public Builder arrayRequest(String arrayRequest) {
            this.arrayRequest = Objects.requireNonNull(arrayRequest);
            return this;
        }
        public Builder clockTime(String clockTime) {
            this.clockTime = Objects.requireNonNull(clockTime);
            return this;
        }
        public Builder commandLine(String commandLine) {
            this.commandLine = Objects.requireNonNull(commandLine);
            return this;
        }
        public Builder gpu(Integer gpu) {
            this.gpu = Objects.requireNonNull(gpu);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder jobTemplateId(String jobTemplateId) {
            this.jobTemplateId = Objects.requireNonNull(jobTemplateId);
            return this;
        }
        public Builder jobTemplateName(String jobTemplateName) {
            this.jobTemplateName = Objects.requireNonNull(jobTemplateName);
            return this;
        }
        public Builder mem(String mem) {
            this.mem = Objects.requireNonNull(mem);
            return this;
        }
        public Builder node(Integer node) {
            this.node = Objects.requireNonNull(node);
            return this;
        }
        public Builder packagePath(String packagePath) {
            this.packagePath = Objects.requireNonNull(packagePath);
            return this;
        }
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public Builder queue(String queue) {
            this.queue = Objects.requireNonNull(queue);
            return this;
        }
        public Builder reRunable(Boolean reRunable) {
            this.reRunable = Objects.requireNonNull(reRunable);
            return this;
        }
        public Builder runasUser(String runasUser) {
            this.runasUser = Objects.requireNonNull(runasUser);
            return this;
        }
        public Builder stderrRedirectPath(String stderrRedirectPath) {
            this.stderrRedirectPath = Objects.requireNonNull(stderrRedirectPath);
            return this;
        }
        public Builder stdoutRedirectPath(String stdoutRedirectPath) {
            this.stdoutRedirectPath = Objects.requireNonNull(stdoutRedirectPath);
            return this;
        }
        public Builder task(Integer task) {
            this.task = Objects.requireNonNull(task);
            return this;
        }
        public Builder thread(Integer thread) {
            this.thread = Objects.requireNonNull(thread);
            return this;
        }
        public Builder variables(String variables) {
            this.variables = Objects.requireNonNull(variables);
            return this;
        }        public GetJobTemplatesTemplate build() {
            return new GetJobTemplatesTemplate(arrayRequest, clockTime, commandLine, gpu, id, jobTemplateId, jobTemplateName, mem, node, packagePath, priority, queue, reRunable, runasUser, stderrRedirectPath, stdoutRedirectPath, task, thread, variables);
        }
    }
}
