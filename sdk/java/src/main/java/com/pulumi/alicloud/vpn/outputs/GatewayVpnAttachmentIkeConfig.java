// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GatewayVpnAttachmentIkeConfig {
    /**
     * @return IKE authentication algorithm supports sha1 and MD5.
     * 
     */
    private final @Nullable String ikeAuthAlg;
    /**
     * @return The encryption algorithm of phase-one negotiation. Valid value: aes | aes192 | aes256 | des | 3des. Default Valid value: aes.
     * 
     */
    private final @Nullable String ikeEncAlg;
    /**
     * @return The SA lifecycle as the result of phase-one negotiation. The valid value of n is [0, 86400], the unit is second and the default value is 86400.
     * 
     */
    private final @Nullable Integer ikeLifetime;
    /**
     * @return The negotiation mode of IKE V1. Valid value: main (main mode) | aggressive (aggressive mode). Default value: `main`.
     * 
     */
    private final @Nullable String ikeMode;
    /**
     * @return The Diffie-Hellman key exchange algorithm used by phase-one negotiation. Valid value: group1 | group2 | group5 | group14 | group24. Default value: group2
     * 
     */
    private final @Nullable String ikePfs;
    /**
     * @return The version of the IKE protocol. Valid value: `ikev1`, `ikev2`. Default value: `ikev1`.
     * 
     */
    private final @Nullable String ikeVersion;
    /**
     * @return The local ID, which supports the FQDN and IP formats. The current VPN gateway IP address is selected by default.
     * 
     */
    private final @Nullable String localId;
    /**
     * @return Used for authentication between the IPsec VPN gateway and the customer gateway.
     * 
     */
    private final @Nullable String psk;
    /**
     * @return The peer ID, which supports FQDN and IP formats. By default, the IP address of the currently selected user gateway.
     * 
     */
    private final @Nullable String remoteId;

    @CustomType.Constructor
    private GatewayVpnAttachmentIkeConfig(
        @CustomType.Parameter("ikeAuthAlg") @Nullable String ikeAuthAlg,
        @CustomType.Parameter("ikeEncAlg") @Nullable String ikeEncAlg,
        @CustomType.Parameter("ikeLifetime") @Nullable Integer ikeLifetime,
        @CustomType.Parameter("ikeMode") @Nullable String ikeMode,
        @CustomType.Parameter("ikePfs") @Nullable String ikePfs,
        @CustomType.Parameter("ikeVersion") @Nullable String ikeVersion,
        @CustomType.Parameter("localId") @Nullable String localId,
        @CustomType.Parameter("psk") @Nullable String psk,
        @CustomType.Parameter("remoteId") @Nullable String remoteId) {
        this.ikeAuthAlg = ikeAuthAlg;
        this.ikeEncAlg = ikeEncAlg;
        this.ikeLifetime = ikeLifetime;
        this.ikeMode = ikeMode;
        this.ikePfs = ikePfs;
        this.ikeVersion = ikeVersion;
        this.localId = localId;
        this.psk = psk;
        this.remoteId = remoteId;
    }

    /**
     * @return IKE authentication algorithm supports sha1 and MD5.
     * 
     */
    public Optional<String> ikeAuthAlg() {
        return Optional.ofNullable(this.ikeAuthAlg);
    }
    /**
     * @return The encryption algorithm of phase-one negotiation. Valid value: aes | aes192 | aes256 | des | 3des. Default Valid value: aes.
     * 
     */
    public Optional<String> ikeEncAlg() {
        return Optional.ofNullable(this.ikeEncAlg);
    }
    /**
     * @return The SA lifecycle as the result of phase-one negotiation. The valid value of n is [0, 86400], the unit is second and the default value is 86400.
     * 
     */
    public Optional<Integer> ikeLifetime() {
        return Optional.ofNullable(this.ikeLifetime);
    }
    /**
     * @return The negotiation mode of IKE V1. Valid value: main (main mode) | aggressive (aggressive mode). Default value: `main`.
     * 
     */
    public Optional<String> ikeMode() {
        return Optional.ofNullable(this.ikeMode);
    }
    /**
     * @return The Diffie-Hellman key exchange algorithm used by phase-one negotiation. Valid value: group1 | group2 | group5 | group14 | group24. Default value: group2
     * 
     */
    public Optional<String> ikePfs() {
        return Optional.ofNullable(this.ikePfs);
    }
    /**
     * @return The version of the IKE protocol. Valid value: `ikev1`, `ikev2`. Default value: `ikev1`.
     * 
     */
    public Optional<String> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }
    /**
     * @return The local ID, which supports the FQDN and IP formats. The current VPN gateway IP address is selected by default.
     * 
     */
    public Optional<String> localId() {
        return Optional.ofNullable(this.localId);
    }
    /**
     * @return Used for authentication between the IPsec VPN gateway and the customer gateway.
     * 
     */
    public Optional<String> psk() {
        return Optional.ofNullable(this.psk);
    }
    /**
     * @return The peer ID, which supports FQDN and IP formats. By default, the IP address of the currently selected user gateway.
     * 
     */
    public Optional<String> remoteId() {
        return Optional.ofNullable(this.remoteId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GatewayVpnAttachmentIkeConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String ikeAuthAlg;
        private @Nullable String ikeEncAlg;
        private @Nullable Integer ikeLifetime;
        private @Nullable String ikeMode;
        private @Nullable String ikePfs;
        private @Nullable String ikeVersion;
        private @Nullable String localId;
        private @Nullable String psk;
        private @Nullable String remoteId;

        public Builder() {
    	      // Empty
        }

        public Builder(GatewayVpnAttachmentIkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ikeAuthAlg = defaults.ikeAuthAlg;
    	      this.ikeEncAlg = defaults.ikeEncAlg;
    	      this.ikeLifetime = defaults.ikeLifetime;
    	      this.ikeMode = defaults.ikeMode;
    	      this.ikePfs = defaults.ikePfs;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.localId = defaults.localId;
    	      this.psk = defaults.psk;
    	      this.remoteId = defaults.remoteId;
        }

        public Builder ikeAuthAlg(@Nullable String ikeAuthAlg) {
            this.ikeAuthAlg = ikeAuthAlg;
            return this;
        }
        public Builder ikeEncAlg(@Nullable String ikeEncAlg) {
            this.ikeEncAlg = ikeEncAlg;
            return this;
        }
        public Builder ikeLifetime(@Nullable Integer ikeLifetime) {
            this.ikeLifetime = ikeLifetime;
            return this;
        }
        public Builder ikeMode(@Nullable String ikeMode) {
            this.ikeMode = ikeMode;
            return this;
        }
        public Builder ikePfs(@Nullable String ikePfs) {
            this.ikePfs = ikePfs;
            return this;
        }
        public Builder ikeVersion(@Nullable String ikeVersion) {
            this.ikeVersion = ikeVersion;
            return this;
        }
        public Builder localId(@Nullable String localId) {
            this.localId = localId;
            return this;
        }
        public Builder psk(@Nullable String psk) {
            this.psk = psk;
            return this;
        }
        public Builder remoteId(@Nullable String remoteId) {
            this.remoteId = remoteId;
            return this;
        }        public GatewayVpnAttachmentIkeConfig build() {
            return new GatewayVpnAttachmentIkeConfig(ikeAuthAlg, ikeEncAlg, ikeLifetime, ikeMode, ikePfs, ikeVersion, localId, psk, remoteId);
        }
    }
}
