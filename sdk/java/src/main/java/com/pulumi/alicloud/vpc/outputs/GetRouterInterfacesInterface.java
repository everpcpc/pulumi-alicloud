// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRouterInterfacesInterface {
    /**
     * @return ID of the access point used by the VBR.
     * 
     */
    private final String accessPointId;
    /**
     * @return Router interface creation time.
     * 
     */
    private final String creationTime;
    /**
     * @return Router interface description.
     * 
     */
    private final String description;
    /**
     * @return Source IP address used to perform health check on the physical connection.
     * 
     */
    private final String healthCheckSourceIp;
    /**
     * @return Destination IP address used to perform health check on the physical connection.
     * 
     */
    private final String healthCheckTargetIp;
    /**
     * @return Router interface ID.
     * 
     */
    private final String id;
    /**
     * @return Router interface name.
     * 
     */
    private final String name;
    /**
     * @return ID of the peer router interface.
     * 
     */
    private final String oppositeInterfaceId;
    /**
     * @return Account ID of the owner of the peer router interface.
     * 
     */
    private final String oppositeInterfaceOwnerId;
    /**
     * @return Peer router region ID.
     * 
     */
    private final String oppositeRegionId;
    /**
     * @return Peer router ID.
     * 
     */
    private final String oppositeRouterId;
    /**
     * @return Router type in the peer region. Possible values: `VRouter` and `VBR`.
     * 
     */
    private final String oppositeRouterType;
    /**
     * @return Role of the router interface. Valid values are `InitiatingSide` (connection initiator) and
     * `AcceptingSide` (connection receiver). The value of this parameter must be `InitiatingSide` if the `router_type` is set to `VBR`.
     * 
     */
    private final String role;
    /**
     * @return ID of the VRouter located in the local region.
     * 
     */
    private final String routerId;
    /**
     * @return Router type in the local region. Valid values are `VRouter` and `VBR` (physical connection).
     * 
     */
    private final String routerType;
    /**
     * @return Specification of the link, such as `Small.1` (10Mb), `Middle.1` (100Mb), `Large.2` (2Gb), ...etc.
     * 
     */
    private final String specification;
    /**
     * @return Expected status. Valid values are `Active`, `Inactive` and `Idle`.
     * 
     */
    private final String status;
    /**
     * @return ID of the VPC that owns the router in the local region.
     * 
     */
    private final String vpcId;

    @CustomType.Constructor
    private GetRouterInterfacesInterface(
        @CustomType.Parameter("accessPointId") String accessPointId,
        @CustomType.Parameter("creationTime") String creationTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("healthCheckSourceIp") String healthCheckSourceIp,
        @CustomType.Parameter("healthCheckTargetIp") String healthCheckTargetIp,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("oppositeInterfaceId") String oppositeInterfaceId,
        @CustomType.Parameter("oppositeInterfaceOwnerId") String oppositeInterfaceOwnerId,
        @CustomType.Parameter("oppositeRegionId") String oppositeRegionId,
        @CustomType.Parameter("oppositeRouterId") String oppositeRouterId,
        @CustomType.Parameter("oppositeRouterType") String oppositeRouterType,
        @CustomType.Parameter("role") String role,
        @CustomType.Parameter("routerId") String routerId,
        @CustomType.Parameter("routerType") String routerType,
        @CustomType.Parameter("specification") String specification,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("vpcId") String vpcId) {
        this.accessPointId = accessPointId;
        this.creationTime = creationTime;
        this.description = description;
        this.healthCheckSourceIp = healthCheckSourceIp;
        this.healthCheckTargetIp = healthCheckTargetIp;
        this.id = id;
        this.name = name;
        this.oppositeInterfaceId = oppositeInterfaceId;
        this.oppositeInterfaceOwnerId = oppositeInterfaceOwnerId;
        this.oppositeRegionId = oppositeRegionId;
        this.oppositeRouterId = oppositeRouterId;
        this.oppositeRouterType = oppositeRouterType;
        this.role = role;
        this.routerId = routerId;
        this.routerType = routerType;
        this.specification = specification;
        this.status = status;
        this.vpcId = vpcId;
    }

    /**
     * @return ID of the access point used by the VBR.
     * 
     */
    public String accessPointId() {
        return this.accessPointId;
    }
    /**
     * @return Router interface creation time.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Router interface description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Source IP address used to perform health check on the physical connection.
     * 
     */
    public String healthCheckSourceIp() {
        return this.healthCheckSourceIp;
    }
    /**
     * @return Destination IP address used to perform health check on the physical connection.
     * 
     */
    public String healthCheckTargetIp() {
        return this.healthCheckTargetIp;
    }
    /**
     * @return Router interface ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Router interface name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return ID of the peer router interface.
     * 
     */
    public String oppositeInterfaceId() {
        return this.oppositeInterfaceId;
    }
    /**
     * @return Account ID of the owner of the peer router interface.
     * 
     */
    public String oppositeInterfaceOwnerId() {
        return this.oppositeInterfaceOwnerId;
    }
    /**
     * @return Peer router region ID.
     * 
     */
    public String oppositeRegionId() {
        return this.oppositeRegionId;
    }
    /**
     * @return Peer router ID.
     * 
     */
    public String oppositeRouterId() {
        return this.oppositeRouterId;
    }
    /**
     * @return Router type in the peer region. Possible values: `VRouter` and `VBR`.
     * 
     */
    public String oppositeRouterType() {
        return this.oppositeRouterType;
    }
    /**
     * @return Role of the router interface. Valid values are `InitiatingSide` (connection initiator) and
     * `AcceptingSide` (connection receiver). The value of this parameter must be `InitiatingSide` if the `router_type` is set to `VBR`.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return ID of the VRouter located in the local region.
     * 
     */
    public String routerId() {
        return this.routerId;
    }
    /**
     * @return Router type in the local region. Valid values are `VRouter` and `VBR` (physical connection).
     * 
     */
    public String routerType() {
        return this.routerType;
    }
    /**
     * @return Specification of the link, such as `Small.1` (10Mb), `Middle.1` (100Mb), `Large.2` (2Gb), ...etc.
     * 
     */
    public String specification() {
        return this.specification;
    }
    /**
     * @return Expected status. Valid values are `Active`, `Inactive` and `Idle`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return ID of the VPC that owns the router in the local region.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouterInterfacesInterface defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessPointId;
        private String creationTime;
        private String description;
        private String healthCheckSourceIp;
        private String healthCheckTargetIp;
        private String id;
        private String name;
        private String oppositeInterfaceId;
        private String oppositeInterfaceOwnerId;
        private String oppositeRegionId;
        private String oppositeRouterId;
        private String oppositeRouterType;
        private String role;
        private String routerId;
        private String routerType;
        private String specification;
        private String status;
        private String vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRouterInterfacesInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPointId = defaults.accessPointId;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.healthCheckSourceIp = defaults.healthCheckSourceIp;
    	      this.healthCheckTargetIp = defaults.healthCheckTargetIp;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.oppositeInterfaceId = defaults.oppositeInterfaceId;
    	      this.oppositeInterfaceOwnerId = defaults.oppositeInterfaceOwnerId;
    	      this.oppositeRegionId = defaults.oppositeRegionId;
    	      this.oppositeRouterId = defaults.oppositeRouterId;
    	      this.oppositeRouterType = defaults.oppositeRouterType;
    	      this.role = defaults.role;
    	      this.routerId = defaults.routerId;
    	      this.routerType = defaults.routerType;
    	      this.specification = defaults.specification;
    	      this.status = defaults.status;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder accessPointId(String accessPointId) {
            this.accessPointId = Objects.requireNonNull(accessPointId);
            return this;
        }
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder healthCheckSourceIp(String healthCheckSourceIp) {
            this.healthCheckSourceIp = Objects.requireNonNull(healthCheckSourceIp);
            return this;
        }
        public Builder healthCheckTargetIp(String healthCheckTargetIp) {
            this.healthCheckTargetIp = Objects.requireNonNull(healthCheckTargetIp);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder oppositeInterfaceId(String oppositeInterfaceId) {
            this.oppositeInterfaceId = Objects.requireNonNull(oppositeInterfaceId);
            return this;
        }
        public Builder oppositeInterfaceOwnerId(String oppositeInterfaceOwnerId) {
            this.oppositeInterfaceOwnerId = Objects.requireNonNull(oppositeInterfaceOwnerId);
            return this;
        }
        public Builder oppositeRegionId(String oppositeRegionId) {
            this.oppositeRegionId = Objects.requireNonNull(oppositeRegionId);
            return this;
        }
        public Builder oppositeRouterId(String oppositeRouterId) {
            this.oppositeRouterId = Objects.requireNonNull(oppositeRouterId);
            return this;
        }
        public Builder oppositeRouterType(String oppositeRouterType) {
            this.oppositeRouterType = Objects.requireNonNull(oppositeRouterType);
            return this;
        }
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder routerId(String routerId) {
            this.routerId = Objects.requireNonNull(routerId);
            return this;
        }
        public Builder routerType(String routerType) {
            this.routerType = Objects.requireNonNull(routerType);
            return this;
        }
        public Builder specification(String specification) {
            this.specification = Objects.requireNonNull(specification);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }        public GetRouterInterfacesInterface build() {
            return new GetRouterInterfacesInterface(accessPointId, creationTime, description, healthCheckSourceIp, healthCheckTargetIp, id, name, oppositeInterfaceId, oppositeInterfaceOwnerId, oppositeRegionId, oppositeRouterId, oppositeRouterType, role, routerId, routerType, specification, status, vpcId);
        }
    }
}
