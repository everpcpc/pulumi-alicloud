// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cr.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ChainChainConfigNodeNodeConfigDenyPolicy {
    /**
     * @return The action of trigger blocking. Valid values: `BLOCK`, `BLOCK_RETAG`, `BLOCK_DELETE_TAG`. While `Block` means block the delivery chain from continuing to execute, `BLOCK_RETAG` means block overwriting push image tag, `BLOCK_DELETE_TAG` means block deletion of mirror tags.
     * 
     */
    private final @Nullable String action;
    /**
     * @return The count of scanning vulnerabilities that triggers blocking.
     * 
     */
    private final @Nullable String issueCount;
    /**
     * @return The level of scanning vulnerability that triggers blocking. Valid values: `LOW`, `MEDIUM`, `HIGH`, `UNKNOWN`.
     * 
     */
    private final @Nullable String issueLevel;
    /**
     * @return The logic of trigger blocking. Valid values: `AND`, `OR`.
     * 
     */
    private final @Nullable String logic;

    @CustomType.Constructor
    private ChainChainConfigNodeNodeConfigDenyPolicy(
        @CustomType.Parameter("action") @Nullable String action,
        @CustomType.Parameter("issueCount") @Nullable String issueCount,
        @CustomType.Parameter("issueLevel") @Nullable String issueLevel,
        @CustomType.Parameter("logic") @Nullable String logic) {
        this.action = action;
        this.issueCount = issueCount;
        this.issueLevel = issueLevel;
        this.logic = logic;
    }

    /**
     * @return The action of trigger blocking. Valid values: `BLOCK`, `BLOCK_RETAG`, `BLOCK_DELETE_TAG`. While `Block` means block the delivery chain from continuing to execute, `BLOCK_RETAG` means block overwriting push image tag, `BLOCK_DELETE_TAG` means block deletion of mirror tags.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return The count of scanning vulnerabilities that triggers blocking.
     * 
     */
    public Optional<String> issueCount() {
        return Optional.ofNullable(this.issueCount);
    }
    /**
     * @return The level of scanning vulnerability that triggers blocking. Valid values: `LOW`, `MEDIUM`, `HIGH`, `UNKNOWN`.
     * 
     */
    public Optional<String> issueLevel() {
        return Optional.ofNullable(this.issueLevel);
    }
    /**
     * @return The logic of trigger blocking. Valid values: `AND`, `OR`.
     * 
     */
    public Optional<String> logic() {
        return Optional.ofNullable(this.logic);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChainChainConfigNodeNodeConfigDenyPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String action;
        private @Nullable String issueCount;
        private @Nullable String issueLevel;
        private @Nullable String logic;

        public Builder() {
    	      // Empty
        }

        public Builder(ChainChainConfigNodeNodeConfigDenyPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.issueCount = defaults.issueCount;
    	      this.issueLevel = defaults.issueLevel;
    	      this.logic = defaults.logic;
        }

        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        public Builder issueCount(@Nullable String issueCount) {
            this.issueCount = issueCount;
            return this;
        }
        public Builder issueLevel(@Nullable String issueLevel) {
            this.issueLevel = issueLevel;
            return this;
        }
        public Builder logic(@Nullable String logic) {
            this.logic = logic;
            return this;
        }        public ChainChainConfigNodeNodeConfigDenyPolicy build() {
            return new ChainChainConfigNodeNodeConfigDenyPolicy(action, issueCount, issueLevel, logic);
        }
    }
}
