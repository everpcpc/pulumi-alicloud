// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServerGroupHealthCheckConfig struct {
	// The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http2xx`, `http3xx`, `http4xx`, and `http5xx`. Default value: `http2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckCodes []string `pulumi:"healthCheckCodes"`
	// The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of 0 indicates that a backend server port is used for health checks.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
	HealthCheckEnabled *bool `pulumi:"healthCheckEnabled"`
	// The domain name that is used for health checks.
	HealthCheckHost *string `pulumi:"healthCheckHost"`
	// HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckHttpVersion *string `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// Health check protocol. Valid values: `HTTP` and `TCP`.
	HealthCheckProtocol *string `pulumi:"healthCheckProtocol"`
	// The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: 1 to 300. Default value: 5. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: 2 to 10. Default value: 3.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// ServerGroupHealthCheckConfigInput is an input type that accepts ServerGroupHealthCheckConfigArgs and ServerGroupHealthCheckConfigOutput values.
// You can construct a concrete instance of `ServerGroupHealthCheckConfigInput` via:
//
//          ServerGroupHealthCheckConfigArgs{...}
type ServerGroupHealthCheckConfigInput interface {
	pulumi.Input

	ToServerGroupHealthCheckConfigOutput() ServerGroupHealthCheckConfigOutput
	ToServerGroupHealthCheckConfigOutputWithContext(context.Context) ServerGroupHealthCheckConfigOutput
}

type ServerGroupHealthCheckConfigArgs struct {
	// The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http2xx`, `http3xx`, `http4xx`, and `http5xx`. Default value: `http2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckCodes pulumi.StringArrayInput `pulumi:"healthCheckCodes"`
	// The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of 0 indicates that a backend server port is used for health checks.
	HealthCheckConnectPort pulumi.IntPtrInput `pulumi:"healthCheckConnectPort"`
	// Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
	HealthCheckEnabled pulumi.BoolPtrInput `pulumi:"healthCheckEnabled"`
	// The domain name that is used for health checks.
	HealthCheckHost pulumi.StringPtrInput `pulumi:"healthCheckHost"`
	// HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckHttpVersion pulumi.StringPtrInput `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
	HealthCheckInterval pulumi.IntPtrInput `pulumi:"healthCheckInterval"`
	// Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckMethod pulumi.StringPtrInput `pulumi:"healthCheckMethod"`
	// The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckPath pulumi.StringPtrInput `pulumi:"healthCheckPath"`
	// Health check protocol. Valid values: `HTTP` and `TCP`.
	HealthCheckProtocol pulumi.StringPtrInput `pulumi:"healthCheckProtocol"`
	// The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: 1 to 300. Default value: 5. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
	HealthCheckTimeout pulumi.IntPtrInput `pulumi:"healthCheckTimeout"`
	// The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: 2 to 10. Default value: 3.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
}

func (ServerGroupHealthCheckConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupHealthCheckConfig)(nil)).Elem()
}

func (i ServerGroupHealthCheckConfigArgs) ToServerGroupHealthCheckConfigOutput() ServerGroupHealthCheckConfigOutput {
	return i.ToServerGroupHealthCheckConfigOutputWithContext(context.Background())
}

func (i ServerGroupHealthCheckConfigArgs) ToServerGroupHealthCheckConfigOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckConfigOutput)
}

func (i ServerGroupHealthCheckConfigArgs) ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput {
	return i.ToServerGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (i ServerGroupHealthCheckConfigArgs) ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckConfigOutput).ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx)
}

// ServerGroupHealthCheckConfigPtrInput is an input type that accepts ServerGroupHealthCheckConfigArgs, ServerGroupHealthCheckConfigPtr and ServerGroupHealthCheckConfigPtrOutput values.
// You can construct a concrete instance of `ServerGroupHealthCheckConfigPtrInput` via:
//
//          ServerGroupHealthCheckConfigArgs{...}
//
//  or:
//
//          nil
type ServerGroupHealthCheckConfigPtrInput interface {
	pulumi.Input

	ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput
	ToServerGroupHealthCheckConfigPtrOutputWithContext(context.Context) ServerGroupHealthCheckConfigPtrOutput
}

type serverGroupHealthCheckConfigPtrType ServerGroupHealthCheckConfigArgs

func ServerGroupHealthCheckConfigPtr(v *ServerGroupHealthCheckConfigArgs) ServerGroupHealthCheckConfigPtrInput {
	return (*serverGroupHealthCheckConfigPtrType)(v)
}

func (*serverGroupHealthCheckConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupHealthCheckConfig)(nil)).Elem()
}

func (i *serverGroupHealthCheckConfigPtrType) ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput {
	return i.ToServerGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (i *serverGroupHealthCheckConfigPtrType) ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckConfigPtrOutput)
}

type ServerGroupHealthCheckConfigOutput struct{ *pulumi.OutputState }

func (ServerGroupHealthCheckConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupHealthCheckConfig)(nil)).Elem()
}

func (o ServerGroupHealthCheckConfigOutput) ToServerGroupHealthCheckConfigOutput() ServerGroupHealthCheckConfigOutput {
	return o
}

func (o ServerGroupHealthCheckConfigOutput) ToServerGroupHealthCheckConfigOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigOutput {
	return o
}

func (o ServerGroupHealthCheckConfigOutput) ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput {
	return o.ToServerGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (o ServerGroupHealthCheckConfigOutput) ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *ServerGroupHealthCheckConfig {
		return &v
	}).(ServerGroupHealthCheckConfigPtrOutput)
}

// The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http2xx`, `http3xx`, `http4xx`, and `http5xx`. Default value: `http2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) []string { return v.HealthCheckCodes }).(pulumi.StringArrayOutput)
}

// The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of 0 indicates that a backend server port is used for health checks.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckConnectPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.HealthCheckConnectPort }).(pulumi.IntPtrOutput)
}

// Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *bool { return v.HealthCheckEnabled }).(pulumi.BoolPtrOutput)
}

// The domain name that is used for health checks.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *string { return v.HealthCheckHost }).(pulumi.StringPtrOutput)
}

// HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckHttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *string { return v.HealthCheckHttpVersion }).(pulumi.StringPtrOutput)
}

// The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.HealthCheckInterval }).(pulumi.IntPtrOutput)
}

// Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *string { return v.HealthCheckMethod }).(pulumi.StringPtrOutput)
}

// The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *string { return v.HealthCheckPath }).(pulumi.StringPtrOutput)
}

// Health check protocol. Valid values: `HTTP` and `TCP`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *string { return v.HealthCheckProtocol }).(pulumi.StringPtrOutput)
}

// The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: 1 to 300. Default value: 5. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.HealthCheckTimeout }).(pulumi.IntPtrOutput)
}

// The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: 2 to 10. Default value: 3.
func (o ServerGroupHealthCheckConfigOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
func (o ServerGroupHealthCheckConfigOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

type ServerGroupHealthCheckConfigPtrOutput struct{ *pulumi.OutputState }

func (ServerGroupHealthCheckConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupHealthCheckConfig)(nil)).Elem()
}

func (o ServerGroupHealthCheckConfigPtrOutput) ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput {
	return o
}

func (o ServerGroupHealthCheckConfigPtrOutput) ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigPtrOutput {
	return o
}

func (o ServerGroupHealthCheckConfigPtrOutput) Elem() ServerGroupHealthCheckConfigOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) ServerGroupHealthCheckConfig { return *v }).(ServerGroupHealthCheckConfigOutput)
}

// The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http2xx`, `http3xx`, `http4xx`, and `http5xx`. Default value: `http2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) []string {
		if v == nil {
			return nil
		}
		return v.HealthCheckCodes
	}).(pulumi.StringArrayOutput)
}

// The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of 0 indicates that a backend server port is used for health checks.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckConnectPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckConnectPort
	}).(pulumi.IntPtrOutput)
}

// Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *bool {
		if v == nil {
			return nil
		}
		return v.HealthCheckEnabled
	}).(pulumi.BoolPtrOutput)
}

// The domain name that is used for health checks.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckHost
	}).(pulumi.StringPtrOutput)
}

// HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckHttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckHttpVersion
	}).(pulumi.StringPtrOutput)
}

// The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckInterval
	}).(pulumi.IntPtrOutput)
}

// Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckMethod
	}).(pulumi.StringPtrOutput)
}

// The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckPath
	}).(pulumi.StringPtrOutput)
}

// Health check protocol. Valid values: `HTTP` and `TCP`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckProtocol
	}).(pulumi.StringPtrOutput)
}

// The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: 1 to 300. Default value: 5. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckTimeout
	}).(pulumi.IntPtrOutput)
}

// The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: 2 to 10. Default value: 3.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
func (o ServerGroupHealthCheckConfigPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

type ServerGroupServer struct {
	// The description of the server.
	Description *string `pulumi:"description"`
	// The port that is used by the server. Valid values: `1` to `65535`.
	Port *int `pulumi:"port"`
	// The ID of the ECS instance, ENI instance or ECI instance.
	ServerId *string `pulumi:"serverId"`
	// The IP address of the ENI instance when it is in the inclusive ENI mode.
	ServerIp *string `pulumi:"serverIp"`
	// The type of the server. The type of the server. Valid values: `Ecs`, `Eni` and `Eci`.
	ServerType *string `pulumi:"serverType"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// The weight of the server.  Valid values: `0` to `100`. Default value: `100`. If the value is set to `0`, no requests are forwarded to the server.
	Weight *int `pulumi:"weight"`
}

// ServerGroupServerInput is an input type that accepts ServerGroupServerArgs and ServerGroupServerOutput values.
// You can construct a concrete instance of `ServerGroupServerInput` via:
//
//          ServerGroupServerArgs{...}
type ServerGroupServerInput interface {
	pulumi.Input

	ToServerGroupServerOutput() ServerGroupServerOutput
	ToServerGroupServerOutputWithContext(context.Context) ServerGroupServerOutput
}

type ServerGroupServerArgs struct {
	// The description of the server.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The port that is used by the server. Valid values: `1` to `65535`.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The ID of the ECS instance, ENI instance or ECI instance.
	ServerId pulumi.StringPtrInput `pulumi:"serverId"`
	// The IP address of the ENI instance when it is in the inclusive ENI mode.
	ServerIp pulumi.StringPtrInput `pulumi:"serverIp"`
	// The type of the server. The type of the server. Valid values: `Ecs`, `Eni` and `Eci`.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// The status of the resource.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The weight of the server.  Valid values: `0` to `100`. Default value: `100`. If the value is set to `0`, no requests are forwarded to the server.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServerGroupServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServer)(nil)).Elem()
}

func (i ServerGroupServerArgs) ToServerGroupServerOutput() ServerGroupServerOutput {
	return i.ToServerGroupServerOutputWithContext(context.Background())
}

func (i ServerGroupServerArgs) ToServerGroupServerOutputWithContext(ctx context.Context) ServerGroupServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServerOutput)
}

// ServerGroupServerArrayInput is an input type that accepts ServerGroupServerArray and ServerGroupServerArrayOutput values.
// You can construct a concrete instance of `ServerGroupServerArrayInput` via:
//
//          ServerGroupServerArray{ ServerGroupServerArgs{...} }
type ServerGroupServerArrayInput interface {
	pulumi.Input

	ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput
	ToServerGroupServerArrayOutputWithContext(context.Context) ServerGroupServerArrayOutput
}

type ServerGroupServerArray []ServerGroupServerInput

func (ServerGroupServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServer)(nil)).Elem()
}

func (i ServerGroupServerArray) ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput {
	return i.ToServerGroupServerArrayOutputWithContext(context.Background())
}

func (i ServerGroupServerArray) ToServerGroupServerArrayOutputWithContext(ctx context.Context) ServerGroupServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServerArrayOutput)
}

type ServerGroupServerOutput struct{ *pulumi.OutputState }

func (ServerGroupServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServer)(nil)).Elem()
}

func (o ServerGroupServerOutput) ToServerGroupServerOutput() ServerGroupServerOutput {
	return o
}

func (o ServerGroupServerOutput) ToServerGroupServerOutputWithContext(ctx context.Context) ServerGroupServerOutput {
	return o
}

// The description of the server.
func (o ServerGroupServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The port that is used by the server. Valid values: `1` to `65535`.
func (o ServerGroupServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The ID of the ECS instance, ENI instance or ECI instance.
func (o ServerGroupServerOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.ServerId }).(pulumi.StringPtrOutput)
}

// The IP address of the ENI instance when it is in the inclusive ENI mode.
func (o ServerGroupServerOutput) ServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.ServerIp }).(pulumi.StringPtrOutput)
}

// The type of the server. The type of the server. Valid values: `Ecs`, `Eni` and `Eci`.
func (o ServerGroupServerOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// The status of the resource.
func (o ServerGroupServerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The weight of the server.  Valid values: `0` to `100`. Default value: `100`. If the value is set to `0`, no requests are forwarded to the server.
func (o ServerGroupServerOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServerGroupServerArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServer)(nil)).Elem()
}

func (o ServerGroupServerArrayOutput) ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput {
	return o
}

func (o ServerGroupServerArrayOutput) ToServerGroupServerArrayOutputWithContext(ctx context.Context) ServerGroupServerArrayOutput {
	return o
}

func (o ServerGroupServerArrayOutput) Index(i pulumi.IntInput) ServerGroupServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupServer {
		return vs[0].([]ServerGroupServer)[vs[1].(int)]
	}).(ServerGroupServerOutput)
}

type ServerGroupStickySessionConfig struct {
	// the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession` parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
	Cookie *string `pulumi:"cookie"`
	// The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. Default value: `1000`.
	CookieTimeout *int `pulumi:"cookieTimeout"`
	// Indicates whether sticky session is enabled. Values: `true` and `false`. Default value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
	StickySessionEnabled *bool `pulumi:"stickySessionEnabled"`
	// The method that is used to handle a cookie. Values: `Server` and `Insert`.
	StickySessionType *string `pulumi:"stickySessionType"`
}

// ServerGroupStickySessionConfigInput is an input type that accepts ServerGroupStickySessionConfigArgs and ServerGroupStickySessionConfigOutput values.
// You can construct a concrete instance of `ServerGroupStickySessionConfigInput` via:
//
//          ServerGroupStickySessionConfigArgs{...}
type ServerGroupStickySessionConfigInput interface {
	pulumi.Input

	ToServerGroupStickySessionConfigOutput() ServerGroupStickySessionConfigOutput
	ToServerGroupStickySessionConfigOutputWithContext(context.Context) ServerGroupStickySessionConfigOutput
}

type ServerGroupStickySessionConfigArgs struct {
	// the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession` parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
	Cookie pulumi.StringPtrInput `pulumi:"cookie"`
	// The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. Default value: `1000`.
	CookieTimeout pulumi.IntPtrInput `pulumi:"cookieTimeout"`
	// Indicates whether sticky session is enabled. Values: `true` and `false`. Default value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
	StickySessionEnabled pulumi.BoolPtrInput `pulumi:"stickySessionEnabled"`
	// The method that is used to handle a cookie. Values: `Server` and `Insert`.
	StickySessionType pulumi.StringPtrInput `pulumi:"stickySessionType"`
}

func (ServerGroupStickySessionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupStickySessionConfig)(nil)).Elem()
}

func (i ServerGroupStickySessionConfigArgs) ToServerGroupStickySessionConfigOutput() ServerGroupStickySessionConfigOutput {
	return i.ToServerGroupStickySessionConfigOutputWithContext(context.Background())
}

func (i ServerGroupStickySessionConfigArgs) ToServerGroupStickySessionConfigOutputWithContext(ctx context.Context) ServerGroupStickySessionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupStickySessionConfigOutput)
}

func (i ServerGroupStickySessionConfigArgs) ToServerGroupStickySessionConfigPtrOutput() ServerGroupStickySessionConfigPtrOutput {
	return i.ToServerGroupStickySessionConfigPtrOutputWithContext(context.Background())
}

func (i ServerGroupStickySessionConfigArgs) ToServerGroupStickySessionConfigPtrOutputWithContext(ctx context.Context) ServerGroupStickySessionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupStickySessionConfigOutput).ToServerGroupStickySessionConfigPtrOutputWithContext(ctx)
}

// ServerGroupStickySessionConfigPtrInput is an input type that accepts ServerGroupStickySessionConfigArgs, ServerGroupStickySessionConfigPtr and ServerGroupStickySessionConfigPtrOutput values.
// You can construct a concrete instance of `ServerGroupStickySessionConfigPtrInput` via:
//
//          ServerGroupStickySessionConfigArgs{...}
//
//  or:
//
//          nil
type ServerGroupStickySessionConfigPtrInput interface {
	pulumi.Input

	ToServerGroupStickySessionConfigPtrOutput() ServerGroupStickySessionConfigPtrOutput
	ToServerGroupStickySessionConfigPtrOutputWithContext(context.Context) ServerGroupStickySessionConfigPtrOutput
}

type serverGroupStickySessionConfigPtrType ServerGroupStickySessionConfigArgs

func ServerGroupStickySessionConfigPtr(v *ServerGroupStickySessionConfigArgs) ServerGroupStickySessionConfigPtrInput {
	return (*serverGroupStickySessionConfigPtrType)(v)
}

func (*serverGroupStickySessionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupStickySessionConfig)(nil)).Elem()
}

func (i *serverGroupStickySessionConfigPtrType) ToServerGroupStickySessionConfigPtrOutput() ServerGroupStickySessionConfigPtrOutput {
	return i.ToServerGroupStickySessionConfigPtrOutputWithContext(context.Background())
}

func (i *serverGroupStickySessionConfigPtrType) ToServerGroupStickySessionConfigPtrOutputWithContext(ctx context.Context) ServerGroupStickySessionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupStickySessionConfigPtrOutput)
}

type ServerGroupStickySessionConfigOutput struct{ *pulumi.OutputState }

func (ServerGroupStickySessionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupStickySessionConfig)(nil)).Elem()
}

func (o ServerGroupStickySessionConfigOutput) ToServerGroupStickySessionConfigOutput() ServerGroupStickySessionConfigOutput {
	return o
}

func (o ServerGroupStickySessionConfigOutput) ToServerGroupStickySessionConfigOutputWithContext(ctx context.Context) ServerGroupStickySessionConfigOutput {
	return o
}

func (o ServerGroupStickySessionConfigOutput) ToServerGroupStickySessionConfigPtrOutput() ServerGroupStickySessionConfigPtrOutput {
	return o.ToServerGroupStickySessionConfigPtrOutputWithContext(context.Background())
}

func (o ServerGroupStickySessionConfigOutput) ToServerGroupStickySessionConfigPtrOutputWithContext(ctx context.Context) ServerGroupStickySessionConfigPtrOutput {
	return o.ApplyT(func(v ServerGroupStickySessionConfig) *ServerGroupStickySessionConfig {
		return &v
	}).(ServerGroupStickySessionConfigPtrOutput)
}

// the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession` parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
func (o ServerGroupStickySessionConfigOutput) Cookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupStickySessionConfig) *string { return v.Cookie }).(pulumi.StringPtrOutput)
}

// The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. Default value: `1000`.
func (o ServerGroupStickySessionConfigOutput) CookieTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupStickySessionConfig) *int { return v.CookieTimeout }).(pulumi.IntPtrOutput)
}

// Indicates whether sticky session is enabled. Values: `true` and `false`. Default value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
func (o ServerGroupStickySessionConfigOutput) StickySessionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerGroupStickySessionConfig) *bool { return v.StickySessionEnabled }).(pulumi.BoolPtrOutput)
}

// The method that is used to handle a cookie. Values: `Server` and `Insert`.
func (o ServerGroupStickySessionConfigOutput) StickySessionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupStickySessionConfig) *string { return v.StickySessionType }).(pulumi.StringPtrOutput)
}

type ServerGroupStickySessionConfigPtrOutput struct{ *pulumi.OutputState }

func (ServerGroupStickySessionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupStickySessionConfig)(nil)).Elem()
}

func (o ServerGroupStickySessionConfigPtrOutput) ToServerGroupStickySessionConfigPtrOutput() ServerGroupStickySessionConfigPtrOutput {
	return o
}

func (o ServerGroupStickySessionConfigPtrOutput) ToServerGroupStickySessionConfigPtrOutputWithContext(ctx context.Context) ServerGroupStickySessionConfigPtrOutput {
	return o
}

func (o ServerGroupStickySessionConfigPtrOutput) Elem() ServerGroupStickySessionConfigOutput {
	return o.ApplyT(func(v *ServerGroupStickySessionConfig) ServerGroupStickySessionConfig { return *v }).(ServerGroupStickySessionConfigOutput)
}

// the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession` parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
func (o ServerGroupStickySessionConfigPtrOutput) Cookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupStickySessionConfig) *string {
		if v == nil {
			return nil
		}
		return v.Cookie
	}).(pulumi.StringPtrOutput)
}

// The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. Default value: `1000`.
func (o ServerGroupStickySessionConfigPtrOutput) CookieTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupStickySessionConfig) *int {
		if v == nil {
			return nil
		}
		return v.CookieTimeout
	}).(pulumi.IntPtrOutput)
}

// Indicates whether sticky session is enabled. Values: `true` and `false`. Default value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
func (o ServerGroupStickySessionConfigPtrOutput) StickySessionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupStickySessionConfig) *bool {
		if v == nil {
			return nil
		}
		return v.StickySessionEnabled
	}).(pulumi.BoolPtrOutput)
}

// The method that is used to handle a cookie. Values: `Server` and `Insert`.
func (o ServerGroupStickySessionConfigPtrOutput) StickySessionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupStickySessionConfig) *string {
		if v == nil {
			return nil
		}
		return v.StickySessionType
	}).(pulumi.StringPtrOutput)
}

type GetSecurityPoliciesPolicy struct {
	// The supported cipher suites, which are determined by the TLS protocol version.
	Ciphers []string `pulumi:"ciphers"`
	// The ID of the Security Policy.
	Id string `pulumi:"id"`
	// The ID of the resource group.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The first ID of the resource.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
	// The name of the resource. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
	SecurityPolicyName string `pulumi:"securityPolicyName"`
	// The status of the resource.
	Status string `pulumi:"status"`
	// The TLS protocol versions that are supported. Valid values: TLSv1.0, TLSv1.1, TLSv1.2 and TLSv1.3.
	TlsVersions []string `pulumi:"tlsVersions"`
}

// GetSecurityPoliciesPolicyInput is an input type that accepts GetSecurityPoliciesPolicyArgs and GetSecurityPoliciesPolicyOutput values.
// You can construct a concrete instance of `GetSecurityPoliciesPolicyInput` via:
//
//          GetSecurityPoliciesPolicyArgs{...}
type GetSecurityPoliciesPolicyInput interface {
	pulumi.Input

	ToGetSecurityPoliciesPolicyOutput() GetSecurityPoliciesPolicyOutput
	ToGetSecurityPoliciesPolicyOutputWithContext(context.Context) GetSecurityPoliciesPolicyOutput
}

type GetSecurityPoliciesPolicyArgs struct {
	// The supported cipher suites, which are determined by the TLS protocol version.
	Ciphers pulumi.StringArrayInput `pulumi:"ciphers"`
	// The ID of the Security Policy.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The first ID of the resource.
	SecurityPolicyId pulumi.StringInput `pulumi:"securityPolicyId"`
	// The name of the resource. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
	SecurityPolicyName pulumi.StringInput `pulumi:"securityPolicyName"`
	// The status of the resource.
	Status pulumi.StringInput `pulumi:"status"`
	// The TLS protocol versions that are supported. Valid values: TLSv1.0, TLSv1.1, TLSv1.2 and TLSv1.3.
	TlsVersions pulumi.StringArrayInput `pulumi:"tlsVersions"`
}

func (GetSecurityPoliciesPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPoliciesPolicy)(nil)).Elem()
}

func (i GetSecurityPoliciesPolicyArgs) ToGetSecurityPoliciesPolicyOutput() GetSecurityPoliciesPolicyOutput {
	return i.ToGetSecurityPoliciesPolicyOutputWithContext(context.Background())
}

func (i GetSecurityPoliciesPolicyArgs) ToGetSecurityPoliciesPolicyOutputWithContext(ctx context.Context) GetSecurityPoliciesPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityPoliciesPolicyOutput)
}

// GetSecurityPoliciesPolicyArrayInput is an input type that accepts GetSecurityPoliciesPolicyArray and GetSecurityPoliciesPolicyArrayOutput values.
// You can construct a concrete instance of `GetSecurityPoliciesPolicyArrayInput` via:
//
//          GetSecurityPoliciesPolicyArray{ GetSecurityPoliciesPolicyArgs{...} }
type GetSecurityPoliciesPolicyArrayInput interface {
	pulumi.Input

	ToGetSecurityPoliciesPolicyArrayOutput() GetSecurityPoliciesPolicyArrayOutput
	ToGetSecurityPoliciesPolicyArrayOutputWithContext(context.Context) GetSecurityPoliciesPolicyArrayOutput
}

type GetSecurityPoliciesPolicyArray []GetSecurityPoliciesPolicyInput

func (GetSecurityPoliciesPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityPoliciesPolicy)(nil)).Elem()
}

func (i GetSecurityPoliciesPolicyArray) ToGetSecurityPoliciesPolicyArrayOutput() GetSecurityPoliciesPolicyArrayOutput {
	return i.ToGetSecurityPoliciesPolicyArrayOutputWithContext(context.Background())
}

func (i GetSecurityPoliciesPolicyArray) ToGetSecurityPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetSecurityPoliciesPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityPoliciesPolicyArrayOutput)
}

type GetSecurityPoliciesPolicyOutput struct{ *pulumi.OutputState }

func (GetSecurityPoliciesPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPoliciesPolicy)(nil)).Elem()
}

func (o GetSecurityPoliciesPolicyOutput) ToGetSecurityPoliciesPolicyOutput() GetSecurityPoliciesPolicyOutput {
	return o
}

func (o GetSecurityPoliciesPolicyOutput) ToGetSecurityPoliciesPolicyOutputWithContext(ctx context.Context) GetSecurityPoliciesPolicyOutput {
	return o
}

// The supported cipher suites, which are determined by the TLS protocol version.
func (o GetSecurityPoliciesPolicyOutput) Ciphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) []string { return v.Ciphers }).(pulumi.StringArrayOutput)
}

// The ID of the Security Policy.
func (o GetSecurityPoliciesPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o GetSecurityPoliciesPolicyOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o GetSecurityPoliciesPolicyOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

// The name of the resource. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
func (o GetSecurityPoliciesPolicyOutput) SecurityPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.SecurityPolicyName }).(pulumi.StringOutput)
}

// The status of the resource.
func (o GetSecurityPoliciesPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.Status }).(pulumi.StringOutput)
}

// The TLS protocol versions that are supported. Valid values: TLSv1.0, TLSv1.1, TLSv1.2 and TLSv1.3.
func (o GetSecurityPoliciesPolicyOutput) TlsVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) []string { return v.TlsVersions }).(pulumi.StringArrayOutput)
}

type GetSecurityPoliciesPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityPoliciesPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityPoliciesPolicy)(nil)).Elem()
}

func (o GetSecurityPoliciesPolicyArrayOutput) ToGetSecurityPoliciesPolicyArrayOutput() GetSecurityPoliciesPolicyArrayOutput {
	return o
}

func (o GetSecurityPoliciesPolicyArrayOutput) ToGetSecurityPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetSecurityPoliciesPolicyArrayOutput {
	return o
}

func (o GetSecurityPoliciesPolicyArrayOutput) Index(i pulumi.IntInput) GetSecurityPoliciesPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityPoliciesPolicy {
		return vs[0].([]GetSecurityPoliciesPolicy)[vs[1].(int)]
	}).(GetSecurityPoliciesPolicyOutput)
}

type GetServerGroupsGroup struct {
	// The configuration of health checks.
	HealthCheckConfigs []GetServerGroupsGroupHealthCheckConfig `pulumi:"healthCheckConfigs"`
	// The ID of the Server Group.
	Id string `pulumi:"id"`
	// The server protocol. Valid values: `HTTP` and `HTTPS`. Default value: `HTTP`.
	Protocol string `pulumi:"protocol"`
	// The scheduling algorithm. Valid values: `Wrr`, `Wlc` and `Sch`.
	Scheduler string `pulumi:"scheduler"`
	// The first ID of the res ource.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The name of the resource.
	ServerGroupName string `pulumi:"serverGroupName"`
	// The backend server.
	Servers []GetServerGroupsGroupServer `pulumi:"servers"`
	// The status of the resource. Valid values: `Provisioning`, `Available` and `Configuring`.
	Status string `pulumi:"status"`
	// The configuration of the sticky session.
	StickySessionConfigs []GetServerGroupsGroupStickySessionConfig `pulumi:"stickySessionConfigs"`
	// The ID of the VPC that you want to access.
	VpcId string `pulumi:"vpcId"`
}

// GetServerGroupsGroupInput is an input type that accepts GetServerGroupsGroupArgs and GetServerGroupsGroupOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupInput` via:
//
//          GetServerGroupsGroupArgs{...}
type GetServerGroupsGroupInput interface {
	pulumi.Input

	ToGetServerGroupsGroupOutput() GetServerGroupsGroupOutput
	ToGetServerGroupsGroupOutputWithContext(context.Context) GetServerGroupsGroupOutput
}

type GetServerGroupsGroupArgs struct {
	// The configuration of health checks.
	HealthCheckConfigs GetServerGroupsGroupHealthCheckConfigArrayInput `pulumi:"healthCheckConfigs"`
	// The ID of the Server Group.
	Id pulumi.StringInput `pulumi:"id"`
	// The server protocol. Valid values: `HTTP` and `HTTPS`. Default value: `HTTP`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The scheduling algorithm. Valid values: `Wrr`, `Wlc` and `Sch`.
	Scheduler pulumi.StringInput `pulumi:"scheduler"`
	// The first ID of the res ource.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// The name of the resource.
	ServerGroupName pulumi.StringInput `pulumi:"serverGroupName"`
	// The backend server.
	Servers GetServerGroupsGroupServerArrayInput `pulumi:"servers"`
	// The status of the resource. Valid values: `Provisioning`, `Available` and `Configuring`.
	Status pulumi.StringInput `pulumi:"status"`
	// The configuration of the sticky session.
	StickySessionConfigs GetServerGroupsGroupStickySessionConfigArrayInput `pulumi:"stickySessionConfigs"`
	// The ID of the VPC that you want to access.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetServerGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroup)(nil)).Elem()
}

func (i GetServerGroupsGroupArgs) ToGetServerGroupsGroupOutput() GetServerGroupsGroupOutput {
	return i.ToGetServerGroupsGroupOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupArgs) ToGetServerGroupsGroupOutputWithContext(ctx context.Context) GetServerGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupOutput)
}

// GetServerGroupsGroupArrayInput is an input type that accepts GetServerGroupsGroupArray and GetServerGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupArrayInput` via:
//
//          GetServerGroupsGroupArray{ GetServerGroupsGroupArgs{...} }
type GetServerGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetServerGroupsGroupArrayOutput() GetServerGroupsGroupArrayOutput
	ToGetServerGroupsGroupArrayOutputWithContext(context.Context) GetServerGroupsGroupArrayOutput
}

type GetServerGroupsGroupArray []GetServerGroupsGroupInput

func (GetServerGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroup)(nil)).Elem()
}

func (i GetServerGroupsGroupArray) ToGetServerGroupsGroupArrayOutput() GetServerGroupsGroupArrayOutput {
	return i.ToGetServerGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupArray) ToGetServerGroupsGroupArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupArrayOutput)
}

type GetServerGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroup)(nil)).Elem()
}

func (o GetServerGroupsGroupOutput) ToGetServerGroupsGroupOutput() GetServerGroupsGroupOutput {
	return o
}

func (o GetServerGroupsGroupOutput) ToGetServerGroupsGroupOutputWithContext(ctx context.Context) GetServerGroupsGroupOutput {
	return o
}

// The configuration of health checks.
func (o GetServerGroupsGroupOutput) HealthCheckConfigs() GetServerGroupsGroupHealthCheckConfigArrayOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) []GetServerGroupsGroupHealthCheckConfig { return v.HealthCheckConfigs }).(GetServerGroupsGroupHealthCheckConfigArrayOutput)
}

// The ID of the Server Group.
func (o GetServerGroupsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.Id }).(pulumi.StringOutput)
}

// The server protocol. Valid values: `HTTP` and `HTTPS`. Default value: `HTTP`.
func (o GetServerGroupsGroupOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.Protocol }).(pulumi.StringOutput)
}

// The scheduling algorithm. Valid values: `Wrr`, `Wlc` and `Sch`.
func (o GetServerGroupsGroupOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.Scheduler }).(pulumi.StringOutput)
}

// The first ID of the res ource.
func (o GetServerGroupsGroupOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The name of the resource.
func (o GetServerGroupsGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.ServerGroupName }).(pulumi.StringOutput)
}

// The backend server.
func (o GetServerGroupsGroupOutput) Servers() GetServerGroupsGroupServerArrayOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) []GetServerGroupsGroupServer { return v.Servers }).(GetServerGroupsGroupServerArrayOutput)
}

// The status of the resource. Valid values: `Provisioning`, `Available` and `Configuring`.
func (o GetServerGroupsGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.Status }).(pulumi.StringOutput)
}

// The configuration of the sticky session.
func (o GetServerGroupsGroupOutput) StickySessionConfigs() GetServerGroupsGroupStickySessionConfigArrayOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) []GetServerGroupsGroupStickySessionConfig { return v.StickySessionConfigs }).(GetServerGroupsGroupStickySessionConfigArrayOutput)
}

// The ID of the VPC that you want to access.
func (o GetServerGroupsGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetServerGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroup)(nil)).Elem()
}

func (o GetServerGroupsGroupArrayOutput) ToGetServerGroupsGroupArrayOutput() GetServerGroupsGroupArrayOutput {
	return o
}

func (o GetServerGroupsGroupArrayOutput) ToGetServerGroupsGroupArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupArrayOutput {
	return o
}

func (o GetServerGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetServerGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupsGroup {
		return vs[0].([]GetServerGroupsGroup)[vs[1].(int)]
	}).(GetServerGroupsGroupOutput)
}

type GetServerGroupsGroupHealthCheckConfig struct {
	// The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http2xx`, `http3xx`, `http4xx`, and `http5xx`. Default value: `http2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckCodes []string `pulumi:"healthCheckCodes"`
	// The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of `0` indicates that a backend server port is used for health checks.
	HealthCheckConnectPort int `pulumi:"healthCheckConnectPort"`
	// Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
	HealthCheckEnabled bool `pulumi:"healthCheckEnabled"`
	// The domain name that is used for health checks.
	HealthCheckHost string `pulumi:"healthCheckHost"`
	// HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckHttpVersion string `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
	HealthCheckInterval int `pulumi:"healthCheckInterval"`
	// Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckMethod string `pulumi:"healthCheckMethod"`
	// The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckPath string `pulumi:"healthCheckPath"`
	// Health check protocol. Valid values: `HTTP` and `TCP`.
	HealthCheckProtocol string `pulumi:"healthCheckProtocol"`
	// The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: `1` to `300`. Default value: `5`. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
	HealthCheckTimeout int `pulumi:"healthCheckTimeout"`
	// The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: `2` to `10`. Default value: `3`.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

// GetServerGroupsGroupHealthCheckConfigInput is an input type that accepts GetServerGroupsGroupHealthCheckConfigArgs and GetServerGroupsGroupHealthCheckConfigOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupHealthCheckConfigInput` via:
//
//          GetServerGroupsGroupHealthCheckConfigArgs{...}
type GetServerGroupsGroupHealthCheckConfigInput interface {
	pulumi.Input

	ToGetServerGroupsGroupHealthCheckConfigOutput() GetServerGroupsGroupHealthCheckConfigOutput
	ToGetServerGroupsGroupHealthCheckConfigOutputWithContext(context.Context) GetServerGroupsGroupHealthCheckConfigOutput
}

type GetServerGroupsGroupHealthCheckConfigArgs struct {
	// The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http2xx`, `http3xx`, `http4xx`, and `http5xx`. Default value: `http2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckCodes pulumi.StringArrayInput `pulumi:"healthCheckCodes"`
	// The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of `0` indicates that a backend server port is used for health checks.
	HealthCheckConnectPort pulumi.IntInput `pulumi:"healthCheckConnectPort"`
	// Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
	HealthCheckEnabled pulumi.BoolInput `pulumi:"healthCheckEnabled"`
	// The domain name that is used for health checks.
	HealthCheckHost pulumi.StringInput `pulumi:"healthCheckHost"`
	// HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckHttpVersion pulumi.StringInput `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
	HealthCheckInterval pulumi.IntInput `pulumi:"healthCheckInterval"`
	// Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckMethod pulumi.StringInput `pulumi:"healthCheckMethod"`
	// The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
	HealthCheckPath pulumi.StringInput `pulumi:"healthCheckPath"`
	// Health check protocol. Valid values: `HTTP` and `TCP`.
	HealthCheckProtocol pulumi.StringInput `pulumi:"healthCheckProtocol"`
	// The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: `1` to `300`. Default value: `5`. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
	HealthCheckTimeout pulumi.IntInput `pulumi:"healthCheckTimeout"`
	// The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: `2` to `10`. Default value: `3`.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (GetServerGroupsGroupHealthCheckConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroupHealthCheckConfig)(nil)).Elem()
}

func (i GetServerGroupsGroupHealthCheckConfigArgs) ToGetServerGroupsGroupHealthCheckConfigOutput() GetServerGroupsGroupHealthCheckConfigOutput {
	return i.ToGetServerGroupsGroupHealthCheckConfigOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupHealthCheckConfigArgs) ToGetServerGroupsGroupHealthCheckConfigOutputWithContext(ctx context.Context) GetServerGroupsGroupHealthCheckConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupHealthCheckConfigOutput)
}

// GetServerGroupsGroupHealthCheckConfigArrayInput is an input type that accepts GetServerGroupsGroupHealthCheckConfigArray and GetServerGroupsGroupHealthCheckConfigArrayOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupHealthCheckConfigArrayInput` via:
//
//          GetServerGroupsGroupHealthCheckConfigArray{ GetServerGroupsGroupHealthCheckConfigArgs{...} }
type GetServerGroupsGroupHealthCheckConfigArrayInput interface {
	pulumi.Input

	ToGetServerGroupsGroupHealthCheckConfigArrayOutput() GetServerGroupsGroupHealthCheckConfigArrayOutput
	ToGetServerGroupsGroupHealthCheckConfigArrayOutputWithContext(context.Context) GetServerGroupsGroupHealthCheckConfigArrayOutput
}

type GetServerGroupsGroupHealthCheckConfigArray []GetServerGroupsGroupHealthCheckConfigInput

func (GetServerGroupsGroupHealthCheckConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroupHealthCheckConfig)(nil)).Elem()
}

func (i GetServerGroupsGroupHealthCheckConfigArray) ToGetServerGroupsGroupHealthCheckConfigArrayOutput() GetServerGroupsGroupHealthCheckConfigArrayOutput {
	return i.ToGetServerGroupsGroupHealthCheckConfigArrayOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupHealthCheckConfigArray) ToGetServerGroupsGroupHealthCheckConfigArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupHealthCheckConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupHealthCheckConfigArrayOutput)
}

type GetServerGroupsGroupHealthCheckConfigOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupHealthCheckConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroupHealthCheckConfig)(nil)).Elem()
}

func (o GetServerGroupsGroupHealthCheckConfigOutput) ToGetServerGroupsGroupHealthCheckConfigOutput() GetServerGroupsGroupHealthCheckConfigOutput {
	return o
}

func (o GetServerGroupsGroupHealthCheckConfigOutput) ToGetServerGroupsGroupHealthCheckConfigOutputWithContext(ctx context.Context) GetServerGroupsGroupHealthCheckConfigOutput {
	return o
}

// The status code for a successful health check. Multiple status codes can be specified as a list. Valid values: `http2xx`, `http3xx`, `http4xx`, and `http5xx`. Default value: `http2xx`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) []string { return v.HealthCheckCodes }).(pulumi.StringArrayOutput)
}

// The port of the backend server that is used for health checks. Valid values: `0` to `65535`. Default value: `0`. A value of `0` indicates that a backend server port is used for health checks.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckConnectPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) int { return v.HealthCheckConnectPort }).(pulumi.IntOutput)
}

// Indicates whether health checks are enabled. Valid values: `true`, `false`. Default value: `true`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) bool { return v.HealthCheckEnabled }).(pulumi.BoolOutput)
}

// The domain name that is used for health checks.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) string { return v.HealthCheckHost }).(pulumi.StringOutput)
}

// HTTP protocol version. Valid values: `HTTP1.0` and `HTTP1.1`. Default value: `HTTP1.1`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckHttpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) string { return v.HealthCheckHttpVersion }).(pulumi.StringOutput)
}

// The time interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `2`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) int { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// Health check method. Valid values: `GET` and `HEAD`. Default: `GET`. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) string { return v.HealthCheckMethod }).(pulumi.StringOutput)
}

// The forwarding rule path of health checks. **NOTE:** This parameter exists if the `HealthCheckProtocol` parameter is set to `HTTP`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) string { return v.HealthCheckPath }).(pulumi.StringOutput)
}

// Health check protocol. Valid values: `HTTP` and `TCP`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) string { return v.HealthCheckProtocol }).(pulumi.StringOutput)
}

// The timeout period of a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Valid values: `1` to `300`. Default value: `5`. **NOTE:** If the value of the `HealthCHeckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the value of the `HealthCHeckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is regarded as the timeout period.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthCheckTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) int { return v.HealthCheckTimeout }).(pulumi.IntOutput)
}

// The number of health checks that an unhealthy backend server must pass consecutively before it is declared healthy. In this case, the health check state is changed from fail to success. Valid values: `2` to `10`. Default value: `3`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The number of consecutive health checks that a healthy backend server must consecutively fail before it is declared unhealthy. In this case, the health check state is changed from success to fail. Valid values: `2` to `10`. Default value: `3`.
func (o GetServerGroupsGroupHealthCheckConfigOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheckConfig) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type GetServerGroupsGroupHealthCheckConfigArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupHealthCheckConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroupHealthCheckConfig)(nil)).Elem()
}

func (o GetServerGroupsGroupHealthCheckConfigArrayOutput) ToGetServerGroupsGroupHealthCheckConfigArrayOutput() GetServerGroupsGroupHealthCheckConfigArrayOutput {
	return o
}

func (o GetServerGroupsGroupHealthCheckConfigArrayOutput) ToGetServerGroupsGroupHealthCheckConfigArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupHealthCheckConfigArrayOutput {
	return o
}

func (o GetServerGroupsGroupHealthCheckConfigArrayOutput) Index(i pulumi.IntInput) GetServerGroupsGroupHealthCheckConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupsGroupHealthCheckConfig {
		return vs[0].([]GetServerGroupsGroupHealthCheckConfig)[vs[1].(int)]
	}).(GetServerGroupsGroupHealthCheckConfigOutput)
}

type GetServerGroupsGroupServer struct {
	// The description of the server.
	Description string `pulumi:"description"`
	// The port that is used by the server. Valid values: `1` to `65535`.
	Port int `pulumi:"port"`
	// The ID of the ECS instance, ENI instance or ECI instance.
	ServerId string `pulumi:"serverId"`
	// The IP address of the ENI instance when it is in the inclusive ENI mode.
	ServerIp string `pulumi:"serverIp"`
	// The type of the server. The type of the server. Valid values: `Ecs`, `Eni` and `Eci`.
	ServerType string `pulumi:"serverType"`
	// The status of the resource. Valid values: `Provisioning`, `Available` and `Configuring`.
	Status string `pulumi:"status"`
	// The weight of the server.  Valid values: `0` to `100`. Default value: `100`. If the value is set to `0`, no requests are forwarded to the server.
	Weight int `pulumi:"weight"`
}

// GetServerGroupsGroupServerInput is an input type that accepts GetServerGroupsGroupServerArgs and GetServerGroupsGroupServerOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupServerInput` via:
//
//          GetServerGroupsGroupServerArgs{...}
type GetServerGroupsGroupServerInput interface {
	pulumi.Input

	ToGetServerGroupsGroupServerOutput() GetServerGroupsGroupServerOutput
	ToGetServerGroupsGroupServerOutputWithContext(context.Context) GetServerGroupsGroupServerOutput
}

type GetServerGroupsGroupServerArgs struct {
	// The description of the server.
	Description pulumi.StringInput `pulumi:"description"`
	// The port that is used by the server. Valid values: `1` to `65535`.
	Port pulumi.IntInput `pulumi:"port"`
	// The ID of the ECS instance, ENI instance or ECI instance.
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// The IP address of the ENI instance when it is in the inclusive ENI mode.
	ServerIp pulumi.StringInput `pulumi:"serverIp"`
	// The type of the server. The type of the server. Valid values: `Ecs`, `Eni` and `Eci`.
	ServerType pulumi.StringInput `pulumi:"serverType"`
	// The status of the resource. Valid values: `Provisioning`, `Available` and `Configuring`.
	Status pulumi.StringInput `pulumi:"status"`
	// The weight of the server.  Valid values: `0` to `100`. Default value: `100`. If the value is set to `0`, no requests are forwarded to the server.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetServerGroupsGroupServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroupServer)(nil)).Elem()
}

func (i GetServerGroupsGroupServerArgs) ToGetServerGroupsGroupServerOutput() GetServerGroupsGroupServerOutput {
	return i.ToGetServerGroupsGroupServerOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupServerArgs) ToGetServerGroupsGroupServerOutputWithContext(ctx context.Context) GetServerGroupsGroupServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupServerOutput)
}

// GetServerGroupsGroupServerArrayInput is an input type that accepts GetServerGroupsGroupServerArray and GetServerGroupsGroupServerArrayOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupServerArrayInput` via:
//
//          GetServerGroupsGroupServerArray{ GetServerGroupsGroupServerArgs{...} }
type GetServerGroupsGroupServerArrayInput interface {
	pulumi.Input

	ToGetServerGroupsGroupServerArrayOutput() GetServerGroupsGroupServerArrayOutput
	ToGetServerGroupsGroupServerArrayOutputWithContext(context.Context) GetServerGroupsGroupServerArrayOutput
}

type GetServerGroupsGroupServerArray []GetServerGroupsGroupServerInput

func (GetServerGroupsGroupServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroupServer)(nil)).Elem()
}

func (i GetServerGroupsGroupServerArray) ToGetServerGroupsGroupServerArrayOutput() GetServerGroupsGroupServerArrayOutput {
	return i.ToGetServerGroupsGroupServerArrayOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupServerArray) ToGetServerGroupsGroupServerArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupServerArrayOutput)
}

type GetServerGroupsGroupServerOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroupServer)(nil)).Elem()
}

func (o GetServerGroupsGroupServerOutput) ToGetServerGroupsGroupServerOutput() GetServerGroupsGroupServerOutput {
	return o
}

func (o GetServerGroupsGroupServerOutput) ToGetServerGroupsGroupServerOutputWithContext(ctx context.Context) GetServerGroupsGroupServerOutput {
	return o
}

// The description of the server.
func (o GetServerGroupsGroupServerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupServer) string { return v.Description }).(pulumi.StringOutput)
}

// The port that is used by the server. Valid values: `1` to `65535`.
func (o GetServerGroupsGroupServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupServer) int { return v.Port }).(pulumi.IntOutput)
}

// The ID of the ECS instance, ENI instance or ECI instance.
func (o GetServerGroupsGroupServerOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupServer) string { return v.ServerId }).(pulumi.StringOutput)
}

// The IP address of the ENI instance when it is in the inclusive ENI mode.
func (o GetServerGroupsGroupServerOutput) ServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupServer) string { return v.ServerIp }).(pulumi.StringOutput)
}

// The type of the server. The type of the server. Valid values: `Ecs`, `Eni` and `Eci`.
func (o GetServerGroupsGroupServerOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupServer) string { return v.ServerType }).(pulumi.StringOutput)
}

// The status of the resource. Valid values: `Provisioning`, `Available` and `Configuring`.
func (o GetServerGroupsGroupServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupServer) string { return v.Status }).(pulumi.StringOutput)
}

// The weight of the server.  Valid values: `0` to `100`. Default value: `100`. If the value is set to `0`, no requests are forwarded to the server.
func (o GetServerGroupsGroupServerOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupServer) int { return v.Weight }).(pulumi.IntOutput)
}

type GetServerGroupsGroupServerArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroupServer)(nil)).Elem()
}

func (o GetServerGroupsGroupServerArrayOutput) ToGetServerGroupsGroupServerArrayOutput() GetServerGroupsGroupServerArrayOutput {
	return o
}

func (o GetServerGroupsGroupServerArrayOutput) ToGetServerGroupsGroupServerArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupServerArrayOutput {
	return o
}

func (o GetServerGroupsGroupServerArrayOutput) Index(i pulumi.IntInput) GetServerGroupsGroupServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupsGroupServer {
		return vs[0].([]GetServerGroupsGroupServer)[vs[1].(int)]
	}).(GetServerGroupsGroupServerOutput)
}

type GetServerGroupsGroupStickySessionConfig struct {
	// the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession` parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
	Cookie string `pulumi:"cookie"`
	// The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. Default value: `1000`.
	CookieTimeout int `pulumi:"cookieTimeout"`
	// Indicates whether sticky session is enabled. Values: `true` and `false`. Default value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
	StickySessionEnabled bool `pulumi:"stickySessionEnabled"`
	// The method that is used to handle a cookie. Values: `Server` and `Insert`.
	StickySessionType string `pulumi:"stickySessionType"`
}

// GetServerGroupsGroupStickySessionConfigInput is an input type that accepts GetServerGroupsGroupStickySessionConfigArgs and GetServerGroupsGroupStickySessionConfigOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupStickySessionConfigInput` via:
//
//          GetServerGroupsGroupStickySessionConfigArgs{...}
type GetServerGroupsGroupStickySessionConfigInput interface {
	pulumi.Input

	ToGetServerGroupsGroupStickySessionConfigOutput() GetServerGroupsGroupStickySessionConfigOutput
	ToGetServerGroupsGroupStickySessionConfigOutputWithContext(context.Context) GetServerGroupsGroupStickySessionConfigOutput
}

type GetServerGroupsGroupStickySessionConfigArgs struct {
	// the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession` parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
	Cookie pulumi.StringInput `pulumi:"cookie"`
	// The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. Default value: `1000`.
	CookieTimeout pulumi.IntInput `pulumi:"cookieTimeout"`
	// Indicates whether sticky session is enabled. Values: `true` and `false`. Default value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
	StickySessionEnabled pulumi.BoolInput `pulumi:"stickySessionEnabled"`
	// The method that is used to handle a cookie. Values: `Server` and `Insert`.
	StickySessionType pulumi.StringInput `pulumi:"stickySessionType"`
}

func (GetServerGroupsGroupStickySessionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroupStickySessionConfig)(nil)).Elem()
}

func (i GetServerGroupsGroupStickySessionConfigArgs) ToGetServerGroupsGroupStickySessionConfigOutput() GetServerGroupsGroupStickySessionConfigOutput {
	return i.ToGetServerGroupsGroupStickySessionConfigOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupStickySessionConfigArgs) ToGetServerGroupsGroupStickySessionConfigOutputWithContext(ctx context.Context) GetServerGroupsGroupStickySessionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupStickySessionConfigOutput)
}

// GetServerGroupsGroupStickySessionConfigArrayInput is an input type that accepts GetServerGroupsGroupStickySessionConfigArray and GetServerGroupsGroupStickySessionConfigArrayOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupStickySessionConfigArrayInput` via:
//
//          GetServerGroupsGroupStickySessionConfigArray{ GetServerGroupsGroupStickySessionConfigArgs{...} }
type GetServerGroupsGroupStickySessionConfigArrayInput interface {
	pulumi.Input

	ToGetServerGroupsGroupStickySessionConfigArrayOutput() GetServerGroupsGroupStickySessionConfigArrayOutput
	ToGetServerGroupsGroupStickySessionConfigArrayOutputWithContext(context.Context) GetServerGroupsGroupStickySessionConfigArrayOutput
}

type GetServerGroupsGroupStickySessionConfigArray []GetServerGroupsGroupStickySessionConfigInput

func (GetServerGroupsGroupStickySessionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroupStickySessionConfig)(nil)).Elem()
}

func (i GetServerGroupsGroupStickySessionConfigArray) ToGetServerGroupsGroupStickySessionConfigArrayOutput() GetServerGroupsGroupStickySessionConfigArrayOutput {
	return i.ToGetServerGroupsGroupStickySessionConfigArrayOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupStickySessionConfigArray) ToGetServerGroupsGroupStickySessionConfigArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupStickySessionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupStickySessionConfigArrayOutput)
}

type GetServerGroupsGroupStickySessionConfigOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupStickySessionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroupStickySessionConfig)(nil)).Elem()
}

func (o GetServerGroupsGroupStickySessionConfigOutput) ToGetServerGroupsGroupStickySessionConfigOutput() GetServerGroupsGroupStickySessionConfigOutput {
	return o
}

func (o GetServerGroupsGroupStickySessionConfigOutput) ToGetServerGroupsGroupStickySessionConfigOutputWithContext(ctx context.Context) GetServerGroupsGroupStickySessionConfigOutput {
	return o
}

// the cookie that is configured on the server. **NOTE:** This parameter exists if the `StickySession` parameter is set to `On` and the `StickySessionType` parameter is set to `server`.
func (o GetServerGroupsGroupStickySessionConfigOutput) Cookie() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupStickySessionConfig) string { return v.Cookie }).(pulumi.StringOutput)
}

// The timeout period of a cookie. The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. Default value: `1000`.
func (o GetServerGroupsGroupStickySessionConfigOutput) CookieTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupStickySessionConfig) int { return v.CookieTimeout }).(pulumi.IntOutput)
}

// Indicates whether sticky session is enabled. Values: `true` and `false`. Default value: `false`.  **NOTE:** This parameter exists if the `StickySession` parameter is set to `On`.
func (o GetServerGroupsGroupStickySessionConfigOutput) StickySessionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerGroupsGroupStickySessionConfig) bool { return v.StickySessionEnabled }).(pulumi.BoolOutput)
}

// The method that is used to handle a cookie. Values: `Server` and `Insert`.
func (o GetServerGroupsGroupStickySessionConfigOutput) StickySessionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupStickySessionConfig) string { return v.StickySessionType }).(pulumi.StringOutput)
}

type GetServerGroupsGroupStickySessionConfigArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupStickySessionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroupStickySessionConfig)(nil)).Elem()
}

func (o GetServerGroupsGroupStickySessionConfigArrayOutput) ToGetServerGroupsGroupStickySessionConfigArrayOutput() GetServerGroupsGroupStickySessionConfigArrayOutput {
	return o
}

func (o GetServerGroupsGroupStickySessionConfigArrayOutput) ToGetServerGroupsGroupStickySessionConfigArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupStickySessionConfigArrayOutput {
	return o
}

func (o GetServerGroupsGroupStickySessionConfigArrayOutput) Index(i pulumi.IntInput) GetServerGroupsGroupStickySessionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupsGroupStickySessionConfig {
		return vs[0].([]GetServerGroupsGroupStickySessionConfig)[vs[1].(int)]
	}).(GetServerGroupsGroupStickySessionConfigOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerGroupHealthCheckConfigOutput{})
	pulumi.RegisterOutputType(ServerGroupHealthCheckConfigPtrOutput{})
	pulumi.RegisterOutputType(ServerGroupServerOutput{})
	pulumi.RegisterOutputType(ServerGroupServerArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupStickySessionConfigOutput{})
	pulumi.RegisterOutputType(ServerGroupStickySessionConfigPtrOutput{})
	pulumi.RegisterOutputType(GetSecurityPoliciesPolicyOutput{})
	pulumi.RegisterOutputType(GetSecurityPoliciesPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupHealthCheckConfigOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupHealthCheckConfigArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupServerOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupServerArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupStickySessionConfigOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupStickySessionConfigArrayOutput{})
}
