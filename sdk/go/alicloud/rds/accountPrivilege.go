// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an RDS account privilege resource and used to grant several database some access privilege. A database can be granted by multiple account.
type AccountPrivilege struct {
	s *pulumi.ResourceState
}

// NewAccountPrivilege registers a new resource with the given unique name, arguments, and options.
func NewAccountPrivilege(ctx *pulumi.Context,
	name string, args *AccountPrivilegeArgs, opts ...pulumi.ResourceOpt) (*AccountPrivilege, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.DbNames == nil {
		return nil, errors.New("missing required argument 'DbNames'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountName"] = nil
		inputs["dbNames"] = nil
		inputs["instanceId"] = nil
		inputs["privilege"] = nil
	} else {
		inputs["accountName"] = args.AccountName
		inputs["dbNames"] = args.DbNames
		inputs["instanceId"] = args.InstanceId
		inputs["privilege"] = args.Privilege
	}
	s, err := ctx.RegisterResource("alicloud:rds/accountPrivilege:AccountPrivilege", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountPrivilege{s: s}, nil
}

// GetAccountPrivilege gets an existing AccountPrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPrivilege(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccountPrivilegeState, opts ...pulumi.ResourceOpt) (*AccountPrivilege, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountName"] = state.AccountName
		inputs["dbNames"] = state.DbNames
		inputs["instanceId"] = state.InstanceId
		inputs["privilege"] = state.Privilege
	}
	s, err := ctx.ReadResource("alicloud:rds/accountPrivilege:AccountPrivilege", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountPrivilege{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccountPrivilege) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccountPrivilege) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A specified account name.
func (r *AccountPrivilege) AccountName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accountName"])
}

// List of specified database name.
func (r *AccountPrivilege) DbNames() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dbNames"])
}

// The Id of instance in which account belongs.
func (r *AccountPrivilege) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

// The privilege of one account access database. Valid values: ["ReadOnly", "ReadWrite"]. Default to "ReadOnly".
func (r *AccountPrivilege) Privilege() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privilege"])
}

// Input properties used for looking up and filtering AccountPrivilege resources.
type AccountPrivilegeState struct {
	// A specified account name.
	AccountName interface{}
	// List of specified database name.
	DbNames interface{}
	// The Id of instance in which account belongs.
	InstanceId interface{}
	// The privilege of one account access database. Valid values: ["ReadOnly", "ReadWrite"]. Default to "ReadOnly".
	Privilege interface{}
}

// The set of arguments for constructing a AccountPrivilege resource.
type AccountPrivilegeArgs struct {
	// A specified account name.
	AccountName interface{}
	// List of specified database name.
	DbNames interface{}
	// The Id of instance in which account belongs.
	InstanceId interface{}
	// The privilege of one account access database. Valid values: ["ReadOnly", "ReadWrite"]. Default to "ReadOnly".
	Privilege interface{}
}
