// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mns

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Topic struct {
	s *pulumi.ResourceState
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["loggingEnabled"] = nil
		inputs["maximumMessageSize"] = nil
		inputs["name"] = nil
	} else {
		inputs["loggingEnabled"] = args.LoggingEnabled
		inputs["maximumMessageSize"] = args.MaximumMessageSize
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("alicloud:mns/topic:Topic", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicState, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["loggingEnabled"] = state.LoggingEnabled
		inputs["maximumMessageSize"] = state.MaximumMessageSize
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("alicloud:mns/topic:Topic", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Topic) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Topic) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Is logging enabled? true or false. Default value to false.
func (r *Topic) LoggingEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["loggingEnabled"])
}

// This indicates the maximum length, in bytes, of any message body sent to the topic. Valid value range: 1024-65536, i.e., 1K to 64K. Default value to 65536.
func (r *Topic) MaximumMessageSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maximumMessageSize"])
}

// Two topics on a single account in the same region cannot have the same name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
func (r *Topic) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Topic resources.
type TopicState struct {
	// Is logging enabled? true or false. Default value to false.
	LoggingEnabled interface{}
	// This indicates the maximum length, in bytes, of any message body sent to the topic. Valid value range: 1024-65536, i.e., 1K to 64K. Default value to 65536.
	MaximumMessageSize interface{}
	// Two topics on a single account in the same region cannot have the same name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
	Name interface{}
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// Is logging enabled? true or false. Default value to false.
	LoggingEnabled interface{}
	// This indicates the maximum length, in bytes, of any message body sent to the topic. Valid value range: 1024-65536, i.e., 1K to 64K. Default value to 65536.
	MaximumMessageSize interface{}
	// Two topics on a single account in the same region cannot have the same name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
	Name interface{}
}
