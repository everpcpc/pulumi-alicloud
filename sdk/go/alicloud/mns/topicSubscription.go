// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mns

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TopicSubscription struct {
	s *pulumi.ResourceState
}

// NewTopicSubscription registers a new resource with the given unique name, arguments, and options.
func NewTopicSubscription(ctx *pulumi.Context,
	name string, args *TopicSubscriptionArgs, opts ...pulumi.ResourceOpt) (*TopicSubscription, error) {
	if args == nil || args.Endpoint == nil {
		return nil, errors.New("missing required argument 'Endpoint'")
	}
	if args == nil || args.TopicName == nil {
		return nil, errors.New("missing required argument 'TopicName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["endpoint"] = nil
		inputs["filterTag"] = nil
		inputs["name"] = nil
		inputs["notifyContentFormat"] = nil
		inputs["notifyStrategy"] = nil
		inputs["topicName"] = nil
	} else {
		inputs["endpoint"] = args.Endpoint
		inputs["filterTag"] = args.FilterTag
		inputs["name"] = args.Name
		inputs["notifyContentFormat"] = args.NotifyContentFormat
		inputs["notifyStrategy"] = args.NotifyStrategy
		inputs["topicName"] = args.TopicName
	}
	s, err := ctx.RegisterResource("alicloud:mns/topicSubscription:TopicSubscription", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TopicSubscription{s: s}, nil
}

// GetTopicSubscription gets an existing TopicSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicSubscription(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicSubscriptionState, opts ...pulumi.ResourceOpt) (*TopicSubscription, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["endpoint"] = state.Endpoint
		inputs["filterTag"] = state.FilterTag
		inputs["name"] = state.Name
		inputs["notifyContentFormat"] = state.NotifyContentFormat
		inputs["notifyStrategy"] = state.NotifyStrategy
		inputs["topicName"] = state.TopicName
	}
	s, err := ctx.ReadResource("alicloud:mns/topicSubscription:TopicSubscription", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TopicSubscription{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *TopicSubscription) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *TopicSubscription) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The endpoint has three format. Available values format:
// - HTTP Format: http://xxx.com/xxx
// - Queue Format: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
// - Email Format: mail:directmail:{MailAddress}
func (r *TopicSubscription) Endpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpoint"])
}

// The length should be shorter than 16.
func (r *TopicSubscription) FilterTag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["filterTag"])
}

// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
func (r *TopicSubscription) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. the attribute has two value SIMPLIFIED or XML.Default value to SIMPLIFIED .
func (r *TopicSubscription) NotifyContentFormat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notifyContentFormat"])
}

// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. the attribute has two value EXPONENTIAL_DECAY_RETR or BACKOFF_RETRY. Default value to BACKOFF_RETRY .
func (r *TopicSubscription) NotifyStrategy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notifyStrategy"])
}

func (r *TopicSubscription) TopicName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["topicName"])
}

// Input properties used for looking up and filtering TopicSubscription resources.
type TopicSubscriptionState struct {
	// The endpoint has three format. Available values format:
	// - HTTP Format: http://xxx.com/xxx
	// - Queue Format: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
	// - Email Format: mail:directmail:{MailAddress}
	Endpoint interface{}
	// The length should be shorter than 16.
	FilterTag interface{}
	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
	Name interface{}
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. the attribute has two value SIMPLIFIED or XML.Default value to SIMPLIFIED .
	NotifyContentFormat interface{}
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. the attribute has two value EXPONENTIAL_DECAY_RETR or BACKOFF_RETRY. Default value to BACKOFF_RETRY .
	NotifyStrategy interface{}
	TopicName interface{}
}

// The set of arguments for constructing a TopicSubscription resource.
type TopicSubscriptionArgs struct {
	// The endpoint has three format. Available values format:
	// - HTTP Format: http://xxx.com/xxx
	// - Queue Format: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
	// - Email Format: mail:directmail:{MailAddress}
	Endpoint interface{}
	// The length should be shorter than 16.
	FilterTag interface{}
	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
	Name interface{}
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. the attribute has two value SIMPLIFIED or XML.Default value to SIMPLIFIED .
	NotifyContentFormat interface{}
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. the attribute has two value EXPONENTIAL_DECAY_RETR or BACKOFF_RETRY. Default value to BACKOFF_RETRY .
	NotifyStrategy interface{}
	TopicName interface{}
}
