// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a EMR Cluster resource. With this you can create, read, and release  EMR Cluster. 
// 
// > **NOTE:** Available in 1.57.0+.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/emr_cluster.html.markdown.
type Cluster struct {
	s *pulumi.ResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	if args == nil || args.ClusterType == nil {
		return nil, errors.New("missing required argument 'ClusterType'")
	}
	if args == nil || args.EmrVer == nil {
		return nil, errors.New("missing required argument 'EmrVer'")
	}
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["chargeType"] = nil
		inputs["clusterType"] = nil
		inputs["depositType"] = nil
		inputs["easEnable"] = nil
		inputs["emrVer"] = nil
		inputs["highAvailabilityEnable"] = nil
		inputs["hostGroups"] = nil
		inputs["isOpenPublicIp"] = nil
		inputs["keyPairName"] = nil
		inputs["masterPwd"] = nil
		inputs["name"] = nil
		inputs["optionSoftwareLists"] = nil
		inputs["relatedClusterId"] = nil
		inputs["securityGroupId"] = nil
		inputs["sshEnable"] = nil
		inputs["tags"] = nil
		inputs["useLocalMetadb"] = nil
		inputs["userDefinedEmrEcsRole"] = nil
		inputs["vswitchId"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["chargeType"] = args.ChargeType
		inputs["clusterType"] = args.ClusterType
		inputs["depositType"] = args.DepositType
		inputs["easEnable"] = args.EasEnable
		inputs["emrVer"] = args.EmrVer
		inputs["highAvailabilityEnable"] = args.HighAvailabilityEnable
		inputs["hostGroups"] = args.HostGroups
		inputs["isOpenPublicIp"] = args.IsOpenPublicIp
		inputs["keyPairName"] = args.KeyPairName
		inputs["masterPwd"] = args.MasterPwd
		inputs["name"] = args.Name
		inputs["optionSoftwareLists"] = args.OptionSoftwareLists
		inputs["relatedClusterId"] = args.RelatedClusterId
		inputs["securityGroupId"] = args.SecurityGroupId
		inputs["sshEnable"] = args.SshEnable
		inputs["tags"] = args.Tags
		inputs["useLocalMetadb"] = args.UseLocalMetadb
		inputs["userDefinedEmrEcsRole"] = args.UserDefinedEmrEcsRole
		inputs["vswitchId"] = args.VswitchId
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("alicloud:emr/cluster:Cluster", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["chargeType"] = state.ChargeType
		inputs["clusterType"] = state.ClusterType
		inputs["depositType"] = state.DepositType
		inputs["easEnable"] = state.EasEnable
		inputs["emrVer"] = state.EmrVer
		inputs["highAvailabilityEnable"] = state.HighAvailabilityEnable
		inputs["hostGroups"] = state.HostGroups
		inputs["isOpenPublicIp"] = state.IsOpenPublicIp
		inputs["keyPairName"] = state.KeyPairName
		inputs["masterPwd"] = state.MasterPwd
		inputs["name"] = state.Name
		inputs["optionSoftwareLists"] = state.OptionSoftwareLists
		inputs["relatedClusterId"] = state.RelatedClusterId
		inputs["securityGroupId"] = state.SecurityGroupId
		inputs["sshEnable"] = state.SshEnable
		inputs["tags"] = state.Tags
		inputs["useLocalMetadb"] = state.UseLocalMetadb
		inputs["userDefinedEmrEcsRole"] = state.UserDefinedEmrEcsRole
		inputs["vswitchId"] = state.VswitchId
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("alicloud:emr/cluster:Cluster", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Cluster) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Cluster) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Charge Type for this group of hosts: PostPaid or PrePaid. If this is not specified, charge type will follow global chargeType value.
func (r *Cluster) ChargeType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["chargeType"])
}

// EMR Cluster Type, e.g. HADOOP, KAFKA, DRUID, GATEWAY etc. You can find all valid EMR cluster type in emr web console. Supported 'GATEWAY' available in 1.61.0+.
func (r *Cluster) ClusterType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterType"])
}

func (r *Cluster) DepositType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["depositType"])
}

func (r *Cluster) EasEnable() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["easEnable"])
}

// EMR Version, e.g. EMR-3.22.0. You can find the all valid EMR Version in emr web console.
func (r *Cluster) EmrVer() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["emrVer"])
}

func (r *Cluster) HighAvailabilityEnable() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["highAvailabilityEnable"])
}

// Groups of Host, You can specify MASTER as a group, CORE as a group (just like the above example).
func (r *Cluster) HostGroups() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["hostGroups"])
}

func (r *Cluster) IsOpenPublicIp() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isOpenPublicIp"])
}

func (r *Cluster) KeyPairName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyPairName"])
}

func (r *Cluster) MasterPwd() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["masterPwd"])
}

// The name of emr cluster. The name length must be less than 64. Supported characters: chinese character, english character, number, "-", "_".
func (r *Cluster) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *Cluster) OptionSoftwareLists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["optionSoftwareLists"])
}

func (r *Cluster) RelatedClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["relatedClusterId"])
}

func (r *Cluster) SecurityGroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["securityGroupId"])
}

func (r *Cluster) SshEnable() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["sshEnable"])
}

// A mapping of tags to assign to the resource.
func (r *Cluster) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

func (r *Cluster) UseLocalMetadb() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["useLocalMetadb"])
}

func (r *Cluster) UserDefinedEmrEcsRole() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userDefinedEmrEcsRole"])
}

func (r *Cluster) VswitchId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vswitchId"])
}

// Zone ID, e.g. cn-huhehaote-a
// * `securityGroupId` (Optional, ForceNew) Security Group ID for Cluster, you can also specify this key for each host group.
// * `vswitchId` (Optional, ForceNew) Global vswitch id, you can also specify it in host group.
// * `optionSoftwareList` (Optional, ForceNew) Optional software list.
// * `highAvailabilityEnable` (Optional, ForceNew) High Available for HDFS and YARN. If this is set true, MASTER group must have two nodes.
// * `useLocalMetadb` (Optional, ForceNew) Use local metadb. Default is false.
// * `sshEnable` (Optional, ForceNew) If this is set true, we can ssh into cluster. Default value is false.
// * `masterPwd` (Optional, ForceNew) Master ssh password.
// * `easEnable` (Optional, ForceNew) High security cluster (true) or not. Default value is false.
// * `userDefinedEmrEcsRole` (Optional, ForceNew) Alicloud EMR uses roles to perform actions on your behalf when provisioning cluster resources, running applications, dynamically scaling resources. EMR uses the following roles when interacting with other Alicloud services. Default value is AliyunEmrEcsDefaultRole.
// * `keyPairName` (Optional, ForceNew) Ssh key pair.
// * `depositType` (Optional, ForceNew) Cluster deposit type, HALF_MANAGED or FULL_MANAGED.
// * `relatedClusterId` (Optional, ForceNew) This specify the related cluster id, if this cluster is a Gateway.
func (r *Cluster) ZoneId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	// Charge Type for this group of hosts: PostPaid or PrePaid. If this is not specified, charge type will follow global chargeType value.
	ChargeType interface{}
	// EMR Cluster Type, e.g. HADOOP, KAFKA, DRUID, GATEWAY etc. You can find all valid EMR cluster type in emr web console. Supported 'GATEWAY' available in 1.61.0+.
	ClusterType interface{}
	DepositType interface{}
	EasEnable interface{}
	// EMR Version, e.g. EMR-3.22.0. You can find the all valid EMR Version in emr web console.
	EmrVer interface{}
	HighAvailabilityEnable interface{}
	// Groups of Host, You can specify MASTER as a group, CORE as a group (just like the above example).
	HostGroups interface{}
	IsOpenPublicIp interface{}
	KeyPairName interface{}
	MasterPwd interface{}
	// The name of emr cluster. The name length must be less than 64. Supported characters: chinese character, english character, number, "-", "_".
	Name interface{}
	OptionSoftwareLists interface{}
	RelatedClusterId interface{}
	SecurityGroupId interface{}
	SshEnable interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	UseLocalMetadb interface{}
	UserDefinedEmrEcsRole interface{}
	VswitchId interface{}
	// Zone ID, e.g. cn-huhehaote-a
	// * `securityGroupId` (Optional, ForceNew) Security Group ID for Cluster, you can also specify this key for each host group.
	// * `vswitchId` (Optional, ForceNew) Global vswitch id, you can also specify it in host group.
	// * `optionSoftwareList` (Optional, ForceNew) Optional software list.
	// * `highAvailabilityEnable` (Optional, ForceNew) High Available for HDFS and YARN. If this is set true, MASTER group must have two nodes.
	// * `useLocalMetadb` (Optional, ForceNew) Use local metadb. Default is false.
	// * `sshEnable` (Optional, ForceNew) If this is set true, we can ssh into cluster. Default value is false.
	// * `masterPwd` (Optional, ForceNew) Master ssh password.
	// * `easEnable` (Optional, ForceNew) High security cluster (true) or not. Default value is false.
	// * `userDefinedEmrEcsRole` (Optional, ForceNew) Alicloud EMR uses roles to perform actions on your behalf when provisioning cluster resources, running applications, dynamically scaling resources. EMR uses the following roles when interacting with other Alicloud services. Default value is AliyunEmrEcsDefaultRole.
	// * `keyPairName` (Optional, ForceNew) Ssh key pair.
	// * `depositType` (Optional, ForceNew) Cluster deposit type, HALF_MANAGED or FULL_MANAGED.
	// * `relatedClusterId` (Optional, ForceNew) This specify the related cluster id, if this cluster is a Gateway.
	ZoneId interface{}
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Charge Type for this group of hosts: PostPaid or PrePaid. If this is not specified, charge type will follow global chargeType value.
	ChargeType interface{}
	// EMR Cluster Type, e.g. HADOOP, KAFKA, DRUID, GATEWAY etc. You can find all valid EMR cluster type in emr web console. Supported 'GATEWAY' available in 1.61.0+.
	ClusterType interface{}
	DepositType interface{}
	EasEnable interface{}
	// EMR Version, e.g. EMR-3.22.0. You can find the all valid EMR Version in emr web console.
	EmrVer interface{}
	HighAvailabilityEnable interface{}
	// Groups of Host, You can specify MASTER as a group, CORE as a group (just like the above example).
	HostGroups interface{}
	IsOpenPublicIp interface{}
	KeyPairName interface{}
	MasterPwd interface{}
	// The name of emr cluster. The name length must be less than 64. Supported characters: chinese character, english character, number, "-", "_".
	Name interface{}
	OptionSoftwareLists interface{}
	RelatedClusterId interface{}
	SecurityGroupId interface{}
	SshEnable interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	UseLocalMetadb interface{}
	UserDefinedEmrEcsRole interface{}
	VswitchId interface{}
	// Zone ID, e.g. cn-huhehaote-a
	// * `securityGroupId` (Optional, ForceNew) Security Group ID for Cluster, you can also specify this key for each host group.
	// * `vswitchId` (Optional, ForceNew) Global vswitch id, you can also specify it in host group.
	// * `optionSoftwareList` (Optional, ForceNew) Optional software list.
	// * `highAvailabilityEnable` (Optional, ForceNew) High Available for HDFS and YARN. If this is set true, MASTER group must have two nodes.
	// * `useLocalMetadb` (Optional, ForceNew) Use local metadb. Default is false.
	// * `sshEnable` (Optional, ForceNew) If this is set true, we can ssh into cluster. Default value is false.
	// * `masterPwd` (Optional, ForceNew) Master ssh password.
	// * `easEnable` (Optional, ForceNew) High security cluster (true) or not. Default value is false.
	// * `userDefinedEmrEcsRole` (Optional, ForceNew) Alicloud EMR uses roles to perform actions on your behalf when provisioning cluster resources, running applications, dynamically scaling resources. EMR uses the following roles when interacting with other Alicloud services. Default value is AliyunEmrEcsDefaultRole.
	// * `keyPairName` (Optional, ForceNew) Ssh key pair.
	// * `depositType` (Optional, ForceNew) Cluster deposit type, HALF_MANAGED or FULL_MANAGED.
	// * `relatedClusterId` (Optional, ForceNew) This specify the related cluster id, if this cluster is a Gateway.
	ZoneId interface{}
}
