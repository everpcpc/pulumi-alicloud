// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package privatelink

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Private Link Vpc Endpoint Service resource.
//
// For information about Private Link Vpc Endpoint Service and how to use it, see [What is Vpc Endpoint Service](https://help.aliyun.com/document_detail/183540.html).
//
// > **NOTE:** Available in v1.109.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/privatelink"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := privatelink.NewVpcEndpointService(ctx, "example", &privatelink.VpcEndpointServiceArgs{
// 			AutoAcceptConnection: pulumi.Bool(false),
// 			ConnectBandwidth:     pulumi.Int(103),
// 			ServiceDescription:   pulumi.String("tftest"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Private Link Vpc Endpoint Service can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:privatelink/vpcEndpointService:VpcEndpointService example <service_id>
// ```
type VpcEndpointService struct {
	pulumi.CustomResourceState

	// Whether to automatically accept terminal node connections.
	AutoAcceptConnection pulumi.BoolPtrOutput `pulumi:"autoAcceptConnection"`
	// The connection bandwidth.
	ConnectBandwidth pulumi.IntPtrOutput `pulumi:"connectBandwidth"`
	// Whether to pre-check this request only. Default to: `false`
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
	Payer pulumi.StringPtrOutput `pulumi:"payer"`
	// The business status of Vpc Endpoint Service.
	ServiceBusinessStatus pulumi.StringOutput `pulumi:"serviceBusinessStatus"`
	// The description of the terminal node service.
	ServiceDescription pulumi.StringPtrOutput `pulumi:"serviceDescription"`
	// Service Domain.
	ServiceDomain pulumi.StringOutput `pulumi:"serviceDomain"`
	// The status of Vpc Endpoint Service.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewVpcEndpointService registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpointService(ctx *pulumi.Context,
	name string, args *VpcEndpointServiceArgs, opts ...pulumi.ResourceOption) (*VpcEndpointService, error) {
	if args == nil {
		args = &VpcEndpointServiceArgs{}
	}

	var resource VpcEndpointService
	err := ctx.RegisterResource("alicloud:privatelink/vpcEndpointService:VpcEndpointService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpointService gets an existing VpcEndpointService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpointService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointServiceState, opts ...pulumi.ResourceOption) (*VpcEndpointService, error) {
	var resource VpcEndpointService
	err := ctx.ReadResource("alicloud:privatelink/vpcEndpointService:VpcEndpointService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpointService resources.
type vpcEndpointServiceState struct {
	// Whether to automatically accept terminal node connections.
	AutoAcceptConnection *bool `pulumi:"autoAcceptConnection"`
	// The connection bandwidth.
	ConnectBandwidth *int `pulumi:"connectBandwidth"`
	// Whether to pre-check this request only. Default to: `false`
	DryRun *bool `pulumi:"dryRun"`
	// The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
	Payer *string `pulumi:"payer"`
	// The business status of Vpc Endpoint Service.
	ServiceBusinessStatus *string `pulumi:"serviceBusinessStatus"`
	// The description of the terminal node service.
	ServiceDescription *string `pulumi:"serviceDescription"`
	// Service Domain.
	ServiceDomain *string `pulumi:"serviceDomain"`
	// The status of Vpc Endpoint Service.
	Status *string `pulumi:"status"`
}

type VpcEndpointServiceState struct {
	// Whether to automatically accept terminal node connections.
	AutoAcceptConnection pulumi.BoolPtrInput
	// The connection bandwidth.
	ConnectBandwidth pulumi.IntPtrInput
	// Whether to pre-check this request only. Default to: `false`
	DryRun pulumi.BoolPtrInput
	// The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
	Payer pulumi.StringPtrInput
	// The business status of Vpc Endpoint Service.
	ServiceBusinessStatus pulumi.StringPtrInput
	// The description of the terminal node service.
	ServiceDescription pulumi.StringPtrInput
	// Service Domain.
	ServiceDomain pulumi.StringPtrInput
	// The status of Vpc Endpoint Service.
	Status pulumi.StringPtrInput
}

func (VpcEndpointServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointServiceState)(nil)).Elem()
}

type vpcEndpointServiceArgs struct {
	// Whether to automatically accept terminal node connections.
	AutoAcceptConnection *bool `pulumi:"autoAcceptConnection"`
	// The connection bandwidth.
	ConnectBandwidth *int `pulumi:"connectBandwidth"`
	// Whether to pre-check this request only. Default to: `false`
	DryRun *bool `pulumi:"dryRun"`
	// The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
	Payer *string `pulumi:"payer"`
	// The description of the terminal node service.
	ServiceDescription *string `pulumi:"serviceDescription"`
}

// The set of arguments for constructing a VpcEndpointService resource.
type VpcEndpointServiceArgs struct {
	// Whether to automatically accept terminal node connections.
	AutoAcceptConnection pulumi.BoolPtrInput
	// The connection bandwidth.
	ConnectBandwidth pulumi.IntPtrInput
	// Whether to pre-check this request only. Default to: `false`
	DryRun pulumi.BoolPtrInput
	// The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
	Payer pulumi.StringPtrInput
	// The description of the terminal node service.
	ServiceDescription pulumi.StringPtrInput
}

func (VpcEndpointServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointServiceArgs)(nil)).Elem()
}

type VpcEndpointServiceInput interface {
	pulumi.Input

	ToVpcEndpointServiceOutput() VpcEndpointServiceOutput
	ToVpcEndpointServiceOutputWithContext(ctx context.Context) VpcEndpointServiceOutput
}

func (*VpcEndpointService) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointService)(nil))
}

func (i *VpcEndpointService) ToVpcEndpointServiceOutput() VpcEndpointServiceOutput {
	return i.ToVpcEndpointServiceOutputWithContext(context.Background())
}

func (i *VpcEndpointService) ToVpcEndpointServiceOutputWithContext(ctx context.Context) VpcEndpointServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointServiceOutput)
}

type VpcEndpointServiceOutput struct {
	*pulumi.OutputState
}

func (VpcEndpointServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointService)(nil))
}

func (o VpcEndpointServiceOutput) ToVpcEndpointServiceOutput() VpcEndpointServiceOutput {
	return o
}

func (o VpcEndpointServiceOutput) ToVpcEndpointServiceOutputWithContext(ctx context.Context) VpcEndpointServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VpcEndpointServiceOutput{})
}
