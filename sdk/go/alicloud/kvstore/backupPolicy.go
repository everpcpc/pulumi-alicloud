// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package kvstore

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a backup policy for ApsaraDB Redis / Memcache instance resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/kvstore_backup_policy.html.markdown.
type BackupPolicy struct {
	pulumi.CustomResourceState

	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods pulumi.StringArrayOutput `pulumi:"backupPeriods"`
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime pulumi.StringPtrOutput `pulumi:"backupTime"`
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewBackupPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackupPolicy(ctx *pulumi.Context,
	name string, args *BackupPolicyArgs, opts ...pulumi.ResourceOption) (*BackupPolicy, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil {
		args = &BackupPolicyArgs{}
	}
	var resource BackupPolicy
	err := ctx.RegisterResource("alicloud:kvstore/backupPolicy:BackupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPolicy gets an existing BackupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPolicyState, opts ...pulumi.ResourceOption) (*BackupPolicy, error) {
	var resource BackupPolicy
	err := ctx.ReadResource("alicloud:kvstore/backupPolicy:BackupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPolicy resources.
type backupPolicyState struct {
	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods []string `pulumi:"backupPeriods"`
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime *string `pulumi:"backupTime"`
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId *string `pulumi:"instanceId"`
}

type BackupPolicyState struct {
	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods pulumi.StringArrayInput
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime pulumi.StringPtrInput
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId pulumi.StringPtrInput
}

func (BackupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyState)(nil)).Elem()
}

type backupPolicyArgs struct {
	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods []string `pulumi:"backupPeriods"`
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime *string `pulumi:"backupTime"`
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a BackupPolicy resource.
type BackupPolicyArgs struct {
	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods pulumi.StringArrayInput
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime pulumi.StringPtrInput
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId pulumi.StringInput
}

func (BackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyArgs)(nil)).Elem()
}
