// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kvstore

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a backup policy for ApsaraDB Redis / Memcache instance resource. 
type BackupPolicy struct {
	s *pulumi.ResourceState
}

// NewBackupPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackupPolicy(ctx *pulumi.Context,
	name string, args *BackupPolicyArgs, opts ...pulumi.ResourceOpt) (*BackupPolicy, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backupPeriods"] = nil
		inputs["backupTime"] = nil
		inputs["instanceId"] = nil
	} else {
		inputs["backupPeriods"] = args.BackupPeriods
		inputs["backupTime"] = args.BackupTime
		inputs["instanceId"] = args.InstanceId
	}
	s, err := ctx.RegisterResource("alicloud:kvstore/backupPolicy:BackupPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BackupPolicy{s: s}, nil
}

// GetBackupPolicy gets an existing BackupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BackupPolicyState, opts ...pulumi.ResourceOpt) (*BackupPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backupPeriods"] = state.BackupPeriods
		inputs["backupTime"] = state.BackupTime
		inputs["instanceId"] = state.InstanceId
	}
	s, err := ctx.ReadResource("alicloud:kvstore/backupPolicy:BackupPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BackupPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BackupPolicy) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BackupPolicy) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *BackupPolicy) BackupPeriods() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["backupPeriods"])
}

func (r *BackupPolicy) BackupTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["backupTime"])
}

// The id of ApsaraDB for Redis or Memcache intance.
// * `preferred_backup_time`- (Required) Backup time, in the format of HH:mmZ- HH:mm Z
func (r *BackupPolicy) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

// Input properties used for looking up and filtering BackupPolicy resources.
type BackupPolicyState struct {
	BackupPeriods interface{}
	BackupTime interface{}
	// The id of ApsaraDB for Redis or Memcache intance.
	// * `preferred_backup_time`- (Required) Backup time, in the format of HH:mmZ- HH:mm Z
	InstanceId interface{}
}

// The set of arguments for constructing a BackupPolicy resource.
type BackupPolicyArgs struct {
	BackupPeriods interface{}
	BackupTime interface{}
	// The id of ApsaraDB for Redis or Memcache intance.
	// * `preferred_backup_time`- (Required) Backup time, in the format of HH:mmZ- HH:mm Z
	InstanceId interface{}
}
