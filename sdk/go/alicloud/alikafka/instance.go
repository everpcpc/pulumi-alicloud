// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alikafka

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ALIKAFKA instance resource.
// 
// > **NOTE:** Available in 1.59.0+
// 
// > **NOTE:** ALIKAFKA instance resource only support create post pay instance. Creation or modification may took about 10-40 minutes.
// 
// > **NOTE:** Only the following regions support create alikafka pre paid instance.
// [`cn-hangzhou`,`cn-beijing`,`cn-shenzhen`,`cn-shanghai`,`cn-qingdao`,`cn-hongkong`,`cn-huhehaote`,`cn-zhangjiakou`,`ap-southeast-1`,`ap-south-1`,`ap-southeast-5`]
// 
// > **NOTE:** Only the following regions support create alikafka post paid instance.
// [`cn-hangzhou`,`cn-beijing`,`cn-shenzhen`,`cn-shanghai`,`cn-qingdao`,`cn-hongkong`,`cn-huhehaote`,`cn-zhangjiakou`,`ap-southeast-1`]
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/alikafka_instance.html.markdown.
type Instance struct {
	s *pulumi.ResourceState
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOpt) (*Instance, error) {
	if args == nil || args.DeployType == nil {
		return nil, errors.New("missing required argument 'DeployType'")
	}
	if args == nil || args.DiskSize == nil {
		return nil, errors.New("missing required argument 'DiskSize'")
	}
	if args == nil || args.DiskType == nil {
		return nil, errors.New("missing required argument 'DiskType'")
	}
	if args == nil || args.IoMax == nil {
		return nil, errors.New("missing required argument 'IoMax'")
	}
	if args == nil || args.TopicQuota == nil {
		return nil, errors.New("missing required argument 'TopicQuota'")
	}
	if args == nil || args.VswitchId == nil {
		return nil, errors.New("missing required argument 'VswitchId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["deployType"] = nil
		inputs["diskSize"] = nil
		inputs["diskType"] = nil
		inputs["eipMax"] = nil
		inputs["ioMax"] = nil
		inputs["name"] = nil
		inputs["paidType"] = nil
		inputs["specType"] = nil
		inputs["tags"] = nil
		inputs["topicQuota"] = nil
		inputs["vswitchId"] = nil
	} else {
		inputs["deployType"] = args.DeployType
		inputs["diskSize"] = args.DiskSize
		inputs["diskType"] = args.DiskType
		inputs["eipMax"] = args.EipMax
		inputs["ioMax"] = args.IoMax
		inputs["name"] = args.Name
		inputs["paidType"] = args.PaidType
		inputs["specType"] = args.SpecType
		inputs["tags"] = args.Tags
		inputs["topicQuota"] = args.TopicQuota
		inputs["vswitchId"] = args.VswitchId
	}
	inputs["vpcId"] = nil
	inputs["zoneId"] = nil
	s, err := ctx.RegisterResource("alicloud:alikafka/instance:Instance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceState, opts ...pulumi.ResourceOpt) (*Instance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["deployType"] = state.DeployType
		inputs["diskSize"] = state.DiskSize
		inputs["diskType"] = state.DiskType
		inputs["eipMax"] = state.EipMax
		inputs["ioMax"] = state.IoMax
		inputs["name"] = state.Name
		inputs["paidType"] = state.PaidType
		inputs["specType"] = state.SpecType
		inputs["tags"] = state.Tags
		inputs["topicQuota"] = state.TopicQuota
		inputs["vpcId"] = state.VpcId
		inputs["vswitchId"] = state.VswitchId
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("alicloud:alikafka/instance:Instance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Instance) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Instance) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The deploy type of the instance. Currently only support two deploy type, 4: eip/vpc instance, 5: vpc instance.
func (r *Instance) DeployType() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["deployType"])
}

// The disk size of the instance. When modify this value, it only support adjust to a greater value.
func (r *Instance) DiskSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["diskSize"])
}

// The disk type of the instance. 0: efficient cloud disk , 1: SSD.
func (r *Instance) DiskType() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["diskType"])
}

// The max bandwidth of the instance. When modify this value, it only support adjust to a greater value.
func (r *Instance) EipMax() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["eipMax"])
}

// The max value of io of the instance. When modify this value, it only support adjust to a greater value.
func (r *Instance) IoMax() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["ioMax"])
}

// Name of your Kafka instance. The length should between 3 and 64 characters. If not set, will use instance id as instance name.
func (r *Instance) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The paid type of the instance. Support two type, "PrePaid": pre paid type instance, "PostPaid": post paid type instance. Default is PostPaid. When modify this value, it only support adjust from post pay to pre pay. 
func (r *Instance) PaidType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["paidType"])
}

// The spec type of the instance. Support two type, "normal": normal version instance, "professional": professional version instance. Default is normal. When modify this value, it only support adjust from normal to professional. Note only pre paid type instance support professional specific type.
func (r *Instance) SpecType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["specType"])
}

// A mapping of tags to assign to the resource.
func (r *Instance) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// The max num of topic can be create of the instance. When modify this value, it only adjust to a greater value.
func (r *Instance) TopicQuota() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["topicQuota"])
}

// The ID of attaching VPC to instance.
func (r *Instance) VpcId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcId"])
}

// The ID of attaching vswitch to instance.
func (r *Instance) VswitchId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vswitchId"])
}

// The Zone to launch the kafka instance.
func (r *Instance) ZoneId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering Instance resources.
type InstanceState struct {
	// The deploy type of the instance. Currently only support two deploy type, 4: eip/vpc instance, 5: vpc instance.
	DeployType interface{}
	// The disk size of the instance. When modify this value, it only support adjust to a greater value.
	DiskSize interface{}
	// The disk type of the instance. 0: efficient cloud disk , 1: SSD.
	DiskType interface{}
	// The max bandwidth of the instance. When modify this value, it only support adjust to a greater value.
	EipMax interface{}
	// The max value of io of the instance. When modify this value, it only support adjust to a greater value.
	IoMax interface{}
	// Name of your Kafka instance. The length should between 3 and 64 characters. If not set, will use instance id as instance name.
	Name interface{}
	// The paid type of the instance. Support two type, "PrePaid": pre paid type instance, "PostPaid": post paid type instance. Default is PostPaid. When modify this value, it only support adjust from post pay to pre pay. 
	PaidType interface{}
	// The spec type of the instance. Support two type, "normal": normal version instance, "professional": professional version instance. Default is normal. When modify this value, it only support adjust from normal to professional. Note only pre paid type instance support professional specific type.
	SpecType interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The max num of topic can be create of the instance. When modify this value, it only adjust to a greater value.
	TopicQuota interface{}
	// The ID of attaching VPC to instance.
	VpcId interface{}
	// The ID of attaching vswitch to instance.
	VswitchId interface{}
	// The Zone to launch the kafka instance.
	ZoneId interface{}
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The deploy type of the instance. Currently only support two deploy type, 4: eip/vpc instance, 5: vpc instance.
	DeployType interface{}
	// The disk size of the instance. When modify this value, it only support adjust to a greater value.
	DiskSize interface{}
	// The disk type of the instance. 0: efficient cloud disk , 1: SSD.
	DiskType interface{}
	// The max bandwidth of the instance. When modify this value, it only support adjust to a greater value.
	EipMax interface{}
	// The max value of io of the instance. When modify this value, it only support adjust to a greater value.
	IoMax interface{}
	// Name of your Kafka instance. The length should between 3 and 64 characters. If not set, will use instance id as instance name.
	Name interface{}
	// The paid type of the instance. Support two type, "PrePaid": pre paid type instance, "PostPaid": post paid type instance. Default is PostPaid. When modify this value, it only support adjust from post pay to pre pay. 
	PaidType interface{}
	// The spec type of the instance. Support two type, "normal": normal version instance, "professional": professional version instance. Default is normal. When modify this value, it only support adjust from normal to professional. Note only pre paid type instance support professional specific type.
	SpecType interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The max num of topic can be create of the instance. When modify this value, it only adjust to a greater value.
	TopicQuota interface{}
	// The ID of attaching vswitch to instance.
	VswitchId interface{}
}
