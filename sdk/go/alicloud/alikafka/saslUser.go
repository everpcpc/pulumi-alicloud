// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alikafka

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ALIKAFKA sasl user resource.
// 
// > **NOTE:** Available in 1.66.0+
// 
// > **NOTE:**  Only the following regions support create alikafka sasl user.
// [`cn-hangzhou`,`cn-beijing`,`cn-shenzhen`,`cn-shanghai`,`cn-qingdao`,`cn-hongkong`,`cn-huhehaote`,`cn-zhangjiakou`,`ap-southeast-1`,`ap-south-1`,`ap-southeast-5`]
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/alikafka_sasl_user.html.markdown.
type SaslUser struct {
	s *pulumi.ResourceState
}

// NewSaslUser registers a new resource with the given unique name, arguments, and options.
func NewSaslUser(ctx *pulumi.Context,
	name string, args *SaslUserArgs, opts ...pulumi.ResourceOpt) (*SaslUser, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["instanceId"] = nil
		inputs["kmsEncryptedPassword"] = nil
		inputs["kmsEncryptionContext"] = nil
		inputs["password"] = nil
		inputs["username"] = nil
	} else {
		inputs["instanceId"] = args.InstanceId
		inputs["kmsEncryptedPassword"] = args.KmsEncryptedPassword
		inputs["kmsEncryptionContext"] = args.KmsEncryptionContext
		inputs["password"] = args.Password
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("alicloud:alikafka/saslUser:SaslUser", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SaslUser{s: s}, nil
}

// GetSaslUser gets an existing SaslUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaslUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SaslUserState, opts ...pulumi.ResourceOpt) (*SaslUser, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["instanceId"] = state.InstanceId
		inputs["kmsEncryptedPassword"] = state.KmsEncryptedPassword
		inputs["kmsEncryptionContext"] = state.KmsEncryptionContext
		inputs["password"] = state.Password
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("alicloud:alikafka/saslUser:SaslUser", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SaslUser{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SaslUser) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SaslUser) ID() pulumi.IDOutput {
	return r.s.ID()
}

// ID of the ALIKAFKA Instance that owns the groups.
func (r *SaslUser) InstanceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceId"])
}

// An KMS encrypts password used to a db account. If the `password` is filled in, this field will be ignored.
func (r *SaslUser) KmsEncryptedPassword() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kmsEncryptedPassword"])
}

// An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a user with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
func (r *SaslUser) KmsEncryptionContext() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["kmsEncryptionContext"])
}

// Operation password. It may consist of letters, digits, or underlines, with a length of 1 to 64 characters. You have to specify one of `password` and `kmsEncryptedPassword` fields.
func (r *SaslUser) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// Username for the sasl user. The length should between 1 to 64 characters. The characters can only contain 'a'-'z', 'A'-'Z', '0'-'9', '_' and '-'.
func (r *SaslUser) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering SaslUser resources.
type SaslUserState struct {
	// ID of the ALIKAFKA Instance that owns the groups.
	InstanceId interface{}
	// An KMS encrypts password used to a db account. If the `password` is filled in, this field will be ignored.
	KmsEncryptedPassword interface{}
	// An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a user with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
	KmsEncryptionContext interface{}
	// Operation password. It may consist of letters, digits, or underlines, with a length of 1 to 64 characters. You have to specify one of `password` and `kmsEncryptedPassword` fields.
	Password interface{}
	// Username for the sasl user. The length should between 1 to 64 characters. The characters can only contain 'a'-'z', 'A'-'Z', '0'-'9', '_' and '-'.
	Username interface{}
}

// The set of arguments for constructing a SaslUser resource.
type SaslUserArgs struct {
	// ID of the ALIKAFKA Instance that owns the groups.
	InstanceId interface{}
	// An KMS encrypts password used to a db account. If the `password` is filled in, this field will be ignored.
	KmsEncryptedPassword interface{}
	// An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a user with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
	KmsEncryptionContext interface{}
	// Operation password. It may consist of letters, digits, or underlines, with a length of 1 to 64 characters. You have to specify one of `password` and `kmsEncryptedPassword` fields.
	Password interface{}
	// Username for the sasl user. The length should between 1 to 64 characters. The characters can only contain 'a'-'z', 'A'-'Z', '0'-'9', '_' and '-'.
	Username interface{}
}
