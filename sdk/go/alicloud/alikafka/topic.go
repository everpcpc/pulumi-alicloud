// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alikafka

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ALIKAFKA topic resource.
// 
// > **NOTE:** Available in 1.56.0+
// 
// > **NOTE:**  Only the following regions support create alikafka topic.
// [`cn-hangzhou`,`cn-beijing`,`cn-shenzhen`,`cn-shanghai`,`cn-qingdao`,`cn-hongkong`,`cn-huhehaote`,`cn-zhangjiakou`,`ap-southeast-1`,`ap-south-1`,`ap-southeast-5`]
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/alikafka_topic.html.markdown.
type Topic struct {
	s *pulumi.ResourceState
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOpt) (*Topic, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.Remark == nil {
		return nil, errors.New("missing required argument 'Remark'")
	}
	if args == nil || args.Topic == nil {
		return nil, errors.New("missing required argument 'Topic'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["compactTopic"] = nil
		inputs["instanceId"] = nil
		inputs["localTopic"] = nil
		inputs["partitionNum"] = nil
		inputs["remark"] = nil
		inputs["tags"] = nil
		inputs["topic"] = nil
	} else {
		inputs["compactTopic"] = args.CompactTopic
		inputs["instanceId"] = args.InstanceId
		inputs["localTopic"] = args.LocalTopic
		inputs["partitionNum"] = args.PartitionNum
		inputs["remark"] = args.Remark
		inputs["tags"] = args.Tags
		inputs["topic"] = args.Topic
	}
	s, err := ctx.RegisterResource("alicloud:alikafka/topic:Topic", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicState, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["compactTopic"] = state.CompactTopic
		inputs["instanceId"] = state.InstanceId
		inputs["localTopic"] = state.LocalTopic
		inputs["partitionNum"] = state.PartitionNum
		inputs["remark"] = state.Remark
		inputs["tags"] = state.Tags
		inputs["topic"] = state.Topic
	}
	s, err := ctx.ReadResource("alicloud:alikafka/topic:Topic", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Topic) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Topic) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Whether the topic is compactTopic or not. Compact topic must be a localTopic.
func (r *Topic) CompactTopic() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["compactTopic"])
}

// InstanceId of your Kafka resource, the topic will create in this instance.
func (r *Topic) InstanceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceId"])
}

// Whether the topic is localTopic or not.
func (r *Topic) LocalTopic() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["localTopic"])
}

// The number of partitions of the topic. The number should between 1 and 48.
func (r *Topic) PartitionNum() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["partitionNum"])
}

// This attribute is a concise description of topic. The length cannot exceed 64.
func (r *Topic) Remark() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["remark"])
}

// A mapping of tags to assign to the resource.
func (r *Topic) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Name of the topic. Two topics on a single instance cannot have the same name. The length cannot exceed 64 characters.
func (r *Topic) Topic() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["topic"])
}

// Input properties used for looking up and filtering Topic resources.
type TopicState struct {
	// Whether the topic is compactTopic or not. Compact topic must be a localTopic.
	CompactTopic interface{}
	// InstanceId of your Kafka resource, the topic will create in this instance.
	InstanceId interface{}
	// Whether the topic is localTopic or not.
	LocalTopic interface{}
	// The number of partitions of the topic. The number should between 1 and 48.
	PartitionNum interface{}
	// This attribute is a concise description of topic. The length cannot exceed 64.
	Remark interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Name of the topic. Two topics on a single instance cannot have the same name. The length cannot exceed 64 characters.
	Topic interface{}
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// Whether the topic is compactTopic or not. Compact topic must be a localTopic.
	CompactTopic interface{}
	// InstanceId of your Kafka resource, the topic will create in this instance.
	InstanceId interface{}
	// Whether the topic is localTopic or not.
	LocalTopic interface{}
	// The number of partitions of the topic. The number should between 1 and 48.
	PartitionNum interface{}
	// This attribute is a concise description of topic. The length cannot exceed 64.
	Remark interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Name of the topic. Two topics on a single instance cannot have the same name. The length cannot exceed 64 characters.
	Topic interface{}
}
