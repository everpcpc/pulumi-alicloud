// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alikafka

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ALIKAFKA consumer group resource.
// 
// > **NOTE:** Available in 1.56.0+
// 
// > **NOTE:**  Only the following regions support create alikafka consumer group.
// [`cn-hangzhou`,`cn-beijing`,`cn-shenzhen`,`cn-shanghai`,`cn-qingdao`,`cn-hongkong`,`cn-huhehaote`,`cn-zhangjiakou`,`ap-southeast-1`,`ap-south-1`,`ap-southeast-5`]
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/alikafka_consumer_group.html.markdown.
type ConsumerGroup struct {
	s *pulumi.ResourceState
}

// NewConsumerGroup registers a new resource with the given unique name, arguments, and options.
func NewConsumerGroup(ctx *pulumi.Context,
	name string, args *ConsumerGroupArgs, opts ...pulumi.ResourceOpt) (*ConsumerGroup, error) {
	if args == nil || args.ConsumerId == nil {
		return nil, errors.New("missing required argument 'ConsumerId'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["consumerId"] = nil
		inputs["instanceId"] = nil
		inputs["tags"] = nil
	} else {
		inputs["consumerId"] = args.ConsumerId
		inputs["instanceId"] = args.InstanceId
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("alicloud:alikafka/consumerGroup:ConsumerGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConsumerGroup{s: s}, nil
}

// GetConsumerGroup gets an existing ConsumerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConsumerGroupState, opts ...pulumi.ResourceOpt) (*ConsumerGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["consumerId"] = state.ConsumerId
		inputs["instanceId"] = state.InstanceId
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("alicloud:alikafka/consumerGroup:ConsumerGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConsumerGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ConsumerGroup) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ConsumerGroup) ID() pulumi.IDOutput {
	return r.s.ID()
}

// ID of the consumer group. The length cannot exceed 64 characters.
func (r *ConsumerGroup) ConsumerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["consumerId"])
}

// ID of the ALIKAFKA Instance that owns the groups.
func (r *ConsumerGroup) InstanceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceId"])
}

// A mapping of tags to assign to the resource.
func (r *ConsumerGroup) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering ConsumerGroup resources.
type ConsumerGroupState struct {
	// ID of the consumer group. The length cannot exceed 64 characters.
	ConsumerId interface{}
	// ID of the ALIKAFKA Instance that owns the groups.
	InstanceId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a ConsumerGroup resource.
type ConsumerGroupArgs struct {
	// ID of the consumer group. The length cannot exceed 64 characters.
	ConsumerId interface{}
	// ID of the ALIKAFKA Instance that owns the groups.
	InstanceId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
