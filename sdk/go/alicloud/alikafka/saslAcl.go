// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alikafka

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ALIKAFKA sasl acl resource.
// 
// > **NOTE:** Available in 1.66.0+
// 
// > **NOTE:**  Only the following regions support create alikafka sasl user.
// [`cn-hangzhou`,`cn-beijing`,`cn-shenzhen`,`cn-shanghai`,`cn-qingdao`,`cn-hongkong`,`cn-huhehaote`,`cn-zhangjiakou`,`ap-southeast-1`,`ap-south-1`,`ap-southeast-5`]
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/alikafka_sasl_acl.html.markdown.
type SaslAcl struct {
	s *pulumi.ResourceState
}

// NewSaslAcl registers a new resource with the given unique name, arguments, and options.
func NewSaslAcl(ctx *pulumi.Context,
	name string, args *SaslAclArgs, opts ...pulumi.ResourceOpt) (*SaslAcl, error) {
	if args == nil || args.AclOperationType == nil {
		return nil, errors.New("missing required argument 'AclOperationType'")
	}
	if args == nil || args.AclResourceName == nil {
		return nil, errors.New("missing required argument 'AclResourceName'")
	}
	if args == nil || args.AclResourcePatternType == nil {
		return nil, errors.New("missing required argument 'AclResourcePatternType'")
	}
	if args == nil || args.AclResourceType == nil {
		return nil, errors.New("missing required argument 'AclResourceType'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["aclOperationType"] = nil
		inputs["aclResourceName"] = nil
		inputs["aclResourcePatternType"] = nil
		inputs["aclResourceType"] = nil
		inputs["instanceId"] = nil
		inputs["username"] = nil
	} else {
		inputs["aclOperationType"] = args.AclOperationType
		inputs["aclResourceName"] = args.AclResourceName
		inputs["aclResourcePatternType"] = args.AclResourcePatternType
		inputs["aclResourceType"] = args.AclResourceType
		inputs["instanceId"] = args.InstanceId
		inputs["username"] = args.Username
	}
	inputs["host"] = nil
	s, err := ctx.RegisterResource("alicloud:alikafka/saslAcl:SaslAcl", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SaslAcl{s: s}, nil
}

// GetSaslAcl gets an existing SaslAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaslAcl(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SaslAclState, opts ...pulumi.ResourceOpt) (*SaslAcl, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["aclOperationType"] = state.AclOperationType
		inputs["aclResourceName"] = state.AclResourceName
		inputs["aclResourcePatternType"] = state.AclResourcePatternType
		inputs["aclResourceType"] = state.AclResourceType
		inputs["host"] = state.Host
		inputs["instanceId"] = state.InstanceId
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("alicloud:alikafka/saslAcl:SaslAcl", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SaslAcl{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SaslAcl) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SaslAcl) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Operation type for this acl. The operation type can only be "Write" and "Read".
func (r *SaslAcl) AclOperationType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["aclOperationType"])
}

// Resource name for this acl. The resource name should be a topic or consumer group name.
func (r *SaslAcl) AclResourceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["aclResourceName"])
}

// Resource pattern type for this acl. The resource pattern support two types "LITERAL" and "PREFIXED". "LITERAL": A literal name defines the full name of a resource. The special wildcard character "*" can be used to represent a resource with any name. "PREFIXED": A prefixed name defines a prefix for a resource.
func (r *SaslAcl) AclResourcePatternType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["aclResourcePatternType"])
}

// Resource type for this acl. The resource type can only be "Topic" and "Group".
func (r *SaslAcl) AclResourceType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["aclResourceType"])
}

// The host of the acl.
func (r *SaslAcl) Host() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["host"])
}

// ID of the ALIKAFKA Instance that owns the groups.
func (r *SaslAcl) InstanceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceId"])
}

// Username for the sasl user. The length should between 1 to 64 characters. The user should be an existed sasl user.
func (r *SaslAcl) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering SaslAcl resources.
type SaslAclState struct {
	// Operation type for this acl. The operation type can only be "Write" and "Read".
	AclOperationType interface{}
	// Resource name for this acl. The resource name should be a topic or consumer group name.
	AclResourceName interface{}
	// Resource pattern type for this acl. The resource pattern support two types "LITERAL" and "PREFIXED". "LITERAL": A literal name defines the full name of a resource. The special wildcard character "*" can be used to represent a resource with any name. "PREFIXED": A prefixed name defines a prefix for a resource.
	AclResourcePatternType interface{}
	// Resource type for this acl. The resource type can only be "Topic" and "Group".
	AclResourceType interface{}
	// The host of the acl.
	Host interface{}
	// ID of the ALIKAFKA Instance that owns the groups.
	InstanceId interface{}
	// Username for the sasl user. The length should between 1 to 64 characters. The user should be an existed sasl user.
	Username interface{}
}

// The set of arguments for constructing a SaslAcl resource.
type SaslAclArgs struct {
	// Operation type for this acl. The operation type can only be "Write" and "Read".
	AclOperationType interface{}
	// Resource name for this acl. The resource name should be a topic or consumer group name.
	AclResourceName interface{}
	// Resource pattern type for this acl. The resource pattern support two types "LITERAL" and "PREFIXED". "LITERAL": A literal name defines the full name of a resource. The special wildcard character "*" can be used to represent a resource with any name. "PREFIXED": A prefixed name defines a prefix for a resource.
	AclResourcePatternType interface{}
	// Resource type for this acl. The resource type can only be "Topic" and "Group".
	AclResourceType interface{}
	// ID of the ALIKAFKA Instance that owns the groups.
	InstanceId interface{}
	// Username for the sasl user. The length should between 1 to 64 characters. The user should be an existed sasl user.
	Username interface{}
}
