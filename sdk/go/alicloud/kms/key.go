// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A kms key can help user to protect data security in the transmission process.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/kms_key.html.markdown.
type Key struct {
	s *pulumi.ResourceState
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOpt) (*Key, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["deletionWindowInDays"] = nil
		inputs["description"] = nil
		inputs["isEnabled"] = nil
		inputs["keyUsage"] = nil
	} else {
		inputs["deletionWindowInDays"] = args.DeletionWindowInDays
		inputs["description"] = args.Description
		inputs["isEnabled"] = args.IsEnabled
		inputs["keyUsage"] = args.KeyUsage
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("alicloud:kms/key:Key", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Key{s: s}, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KeyState, opts ...pulumi.ResourceOpt) (*Key, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["deletionWindowInDays"] = state.DeletionWindowInDays
		inputs["description"] = state.Description
		inputs["isEnabled"] = state.IsEnabled
		inputs["keyUsage"] = state.KeyUsage
	}
	s, err := ctx.ReadResource("alicloud:kms/key:Key", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Key{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Key) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Key) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The Alicloud Resource Name (ARN) of the key.
func (r *Key) Arn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["arn"])
}

// Duration in days after which the key is deleted
// after destruction of the resource, must be between 7 and 30 days. Defaults to 30 days.
func (r *Key) DeletionWindowInDays() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["deletionWindowInDays"])
}

func (r *Key) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Specifies whether the key is enabled. Defaults to true.
func (r *Key) IsEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isEnabled"])
}

// Specifies the usage of CMK. Currently, default to 'ENCRYPT/DECRYPT', indicating that CMK is used for encryption and decryption.
func (r *Key) KeyUsage() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyUsage"])
}

// Input properties used for looking up and filtering Key resources.
type KeyState struct {
	// The Alicloud Resource Name (ARN) of the key.
	Arn interface{}
	// Duration in days after which the key is deleted
	// after destruction of the resource, must be between 7 and 30 days. Defaults to 30 days.
	DeletionWindowInDays interface{}
	Description interface{}
	// Specifies whether the key is enabled. Defaults to true.
	IsEnabled interface{}
	// Specifies the usage of CMK. Currently, default to 'ENCRYPT/DECRYPT', indicating that CMK is used for encryption and decryption.
	KeyUsage interface{}
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// Duration in days after which the key is deleted
	// after destruction of the resource, must be between 7 and 30 days. Defaults to 30 days.
	DeletionWindowInDays interface{}
	Description interface{}
	// Specifies whether the key is enabled. Defaults to true.
	IsEnabled interface{}
	// Specifies the usage of CMK. Currently, default to 'ENCRYPT/DECRYPT', indicating that CMK is used for encryption and decryption.
	KeyUsage interface{}
}
