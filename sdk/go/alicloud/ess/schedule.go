// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ess

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/ess_schedule.html.markdown.
type Schedule struct {
	s *pulumi.ResourceState
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOpt) (*Schedule, error) {
	if args == nil || args.LaunchTime == nil {
		return nil, errors.New("missing required argument 'LaunchTime'")
	}
	if args == nil || args.ScheduledAction == nil {
		return nil, errors.New("missing required argument 'ScheduledAction'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["launchExpirationTime"] = nil
		inputs["launchTime"] = nil
		inputs["recurrenceEndTime"] = nil
		inputs["recurrenceType"] = nil
		inputs["recurrenceValue"] = nil
		inputs["scheduledAction"] = nil
		inputs["scheduledTaskName"] = nil
		inputs["taskEnabled"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["launchExpirationTime"] = args.LaunchExpirationTime
		inputs["launchTime"] = args.LaunchTime
		inputs["recurrenceEndTime"] = args.RecurrenceEndTime
		inputs["recurrenceType"] = args.RecurrenceType
		inputs["recurrenceValue"] = args.RecurrenceValue
		inputs["scheduledAction"] = args.ScheduledAction
		inputs["scheduledTaskName"] = args.ScheduledTaskName
		inputs["taskEnabled"] = args.TaskEnabled
	}
	s, err := ctx.RegisterResource("alicloud:ess/schedule:Schedule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Schedule{s: s}, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ScheduleState, opts ...pulumi.ResourceOpt) (*Schedule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["launchExpirationTime"] = state.LaunchExpirationTime
		inputs["launchTime"] = state.LaunchTime
		inputs["recurrenceEndTime"] = state.RecurrenceEndTime
		inputs["recurrenceType"] = state.RecurrenceType
		inputs["recurrenceValue"] = state.RecurrenceValue
		inputs["scheduledAction"] = state.ScheduledAction
		inputs["scheduledTaskName"] = state.ScheduledTaskName
		inputs["taskEnabled"] = state.TaskEnabled
	}
	s, err := ctx.ReadResource("alicloud:ess/schedule:Schedule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Schedule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Schedule) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Schedule) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Schedule) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *Schedule) LaunchExpirationTime() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["launchExpirationTime"])
}

func (r *Schedule) LaunchTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["launchTime"])
}

func (r *Schedule) RecurrenceEndTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recurrenceEndTime"])
}

func (r *Schedule) RecurrenceType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recurrenceType"])
}

func (r *Schedule) RecurrenceValue() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recurrenceValue"])
}

func (r *Schedule) ScheduledAction() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scheduledAction"])
}

func (r *Schedule) ScheduledTaskName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scheduledTaskName"])
}

func (r *Schedule) TaskEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["taskEnabled"])
}

// Input properties used for looking up and filtering Schedule resources.
type ScheduleState struct {
	Description interface{}
	LaunchExpirationTime interface{}
	LaunchTime interface{}
	RecurrenceEndTime interface{}
	RecurrenceType interface{}
	RecurrenceValue interface{}
	ScheduledAction interface{}
	ScheduledTaskName interface{}
	TaskEnabled interface{}
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	Description interface{}
	LaunchExpirationTime interface{}
	LaunchTime interface{}
	RecurrenceEndTime interface{}
	RecurrenceType interface{}
	RecurrenceValue interface{}
	ScheduledAction interface{}
	ScheduledTaskName interface{}
	TaskEnabled interface{}
}
