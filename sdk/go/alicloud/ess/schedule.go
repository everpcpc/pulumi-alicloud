// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ess

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a ESS schedule resource.
type Schedule struct {
	s *pulumi.ResourceState
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOpt) (*Schedule, error) {
	if args == nil || args.LaunchTime == nil {
		return nil, errors.New("missing required argument 'LaunchTime'")
	}
	if args == nil || args.ScheduledAction == nil {
		return nil, errors.New("missing required argument 'ScheduledAction'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["launchExpirationTime"] = nil
		inputs["launchTime"] = nil
		inputs["recurrenceEndTime"] = nil
		inputs["recurrenceType"] = nil
		inputs["recurrenceValue"] = nil
		inputs["scheduledAction"] = nil
		inputs["scheduledTaskName"] = nil
		inputs["taskEnabled"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["launchExpirationTime"] = args.LaunchExpirationTime
		inputs["launchTime"] = args.LaunchTime
		inputs["recurrenceEndTime"] = args.RecurrenceEndTime
		inputs["recurrenceType"] = args.RecurrenceType
		inputs["recurrenceValue"] = args.RecurrenceValue
		inputs["scheduledAction"] = args.ScheduledAction
		inputs["scheduledTaskName"] = args.ScheduledTaskName
		inputs["taskEnabled"] = args.TaskEnabled
	}
	s, err := ctx.RegisterResource("alicloud:ess/schedule:Schedule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Schedule{s: s}, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ScheduleState, opts ...pulumi.ResourceOpt) (*Schedule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["launchExpirationTime"] = state.LaunchExpirationTime
		inputs["launchTime"] = state.LaunchTime
		inputs["recurrenceEndTime"] = state.RecurrenceEndTime
		inputs["recurrenceType"] = state.RecurrenceType
		inputs["recurrenceValue"] = state.RecurrenceValue
		inputs["scheduledAction"] = state.ScheduledAction
		inputs["scheduledTaskName"] = state.ScheduledTaskName
		inputs["taskEnabled"] = state.TaskEnabled
	}
	s, err := ctx.ReadResource("alicloud:ess/schedule:Schedule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Schedule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Schedule) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Schedule) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Description of the scheduled task, which is 2-200 characters (English or Chinese) long.
func (r *Schedule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Time period within which the failed scheduled task is retried. The default value is 600s. Value range: [0, 21600]
func (r *Schedule) LaunchExpirationTime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["launchExpirationTime"])
}

// Operations performed when the scheduled task is triggered. Fill in the unique identifier of the scaling rule.
func (r *Schedule) LaunchTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["launchTime"])
}

// End time of the scheduled task to be repeated. The date format follows the ISO8601 standard and uses UTC time. It is in the format of YYYY-MM-DDThh:mmZ. A time point 90 days after creation or modification cannot be entered. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified.                                  
func (r *Schedule) RecurrenceEndTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recurrenceEndTime"])
}

// Type of the scheduled task to be repeated. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified. Optional values:
// - Daily: Recurrence interval by day for a scheduled task.
// - Weekly: Recurrence interval by week for a scheduled task.
// - Monthly: Recurrence interval by month for a scheduled task.
func (r *Schedule) RecurrenceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recurrenceType"])
}

// Value of the scheduled task to be repeated. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified.
// - Daily: Only one value in the range [1,31] can be filled.
// - Weekly: Multiple values can be filled. The values of Sunday to Saturday are 0 to 6 in sequence. Multiple values shall be separated by a comma “,”.
// - Monthly: In the format of A-B. The value range of A and B is 1 to 31, and the B value must be greater than the A value.
func (r *Schedule) RecurrenceValue() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recurrenceValue"])
}

// Operations performed when the scheduled task is triggered. Fill in the unique identifier of the scaling rule.
func (r *Schedule) ScheduledAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scheduledAction"])
}

// Display name of the scheduled task, which must be 2-40 characters (English or Chinese) long.
func (r *Schedule) ScheduledTaskName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scheduledTaskName"])
}

// Whether to enable the scheduled task. The default value is true.
func (r *Schedule) TaskEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["taskEnabled"])
}

// Input properties used for looking up and filtering Schedule resources.
type ScheduleState struct {
	// Description of the scheduled task, which is 2-200 characters (English or Chinese) long.
	Description interface{}
	// Time period within which the failed scheduled task is retried. The default value is 600s. Value range: [0, 21600]
	LaunchExpirationTime interface{}
	// Operations performed when the scheduled task is triggered. Fill in the unique identifier of the scaling rule.
	LaunchTime interface{}
	// End time of the scheduled task to be repeated. The date format follows the ISO8601 standard and uses UTC time. It is in the format of YYYY-MM-DDThh:mmZ. A time point 90 days after creation or modification cannot be entered. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified.                                  
	RecurrenceEndTime interface{}
	// Type of the scheduled task to be repeated. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified. Optional values:
	// - Daily: Recurrence interval by day for a scheduled task.
	// - Weekly: Recurrence interval by week for a scheduled task.
	// - Monthly: Recurrence interval by month for a scheduled task.
	RecurrenceType interface{}
	// Value of the scheduled task to be repeated. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified.
	// - Daily: Only one value in the range [1,31] can be filled.
	// - Weekly: Multiple values can be filled. The values of Sunday to Saturday are 0 to 6 in sequence. Multiple values shall be separated by a comma “,”.
	// - Monthly: In the format of A-B. The value range of A and B is 1 to 31, and the B value must be greater than the A value.
	RecurrenceValue interface{}
	// Operations performed when the scheduled task is triggered. Fill in the unique identifier of the scaling rule.
	ScheduledAction interface{}
	// Display name of the scheduled task, which must be 2-40 characters (English or Chinese) long.
	ScheduledTaskName interface{}
	// Whether to enable the scheduled task. The default value is true.
	TaskEnabled interface{}
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// Description of the scheduled task, which is 2-200 characters (English or Chinese) long.
	Description interface{}
	// Time period within which the failed scheduled task is retried. The default value is 600s. Value range: [0, 21600]
	LaunchExpirationTime interface{}
	// Operations performed when the scheduled task is triggered. Fill in the unique identifier of the scaling rule.
	LaunchTime interface{}
	// End time of the scheduled task to be repeated. The date format follows the ISO8601 standard and uses UTC time. It is in the format of YYYY-MM-DDThh:mmZ. A time point 90 days after creation or modification cannot be entered. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified.                                  
	RecurrenceEndTime interface{}
	// Type of the scheduled task to be repeated. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified. Optional values:
	// - Daily: Recurrence interval by day for a scheduled task.
	// - Weekly: Recurrence interval by week for a scheduled task.
	// - Monthly: Recurrence interval by month for a scheduled task.
	RecurrenceType interface{}
	// Value of the scheduled task to be repeated. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified.
	// - Daily: Only one value in the range [1,31] can be filled.
	// - Weekly: Multiple values can be filled. The values of Sunday to Saturday are 0 to 6 in sequence. Multiple values shall be separated by a comma “,”.
	// - Monthly: In the format of A-B. The value range of A and B is 1 to 31, and the B value must be greater than the A value.
	RecurrenceValue interface{}
	// Operations performed when the scheduled task is triggered. Fill in the unique identifier of the scaling rule.
	ScheduledAction interface{}
	// Display name of the scheduled task, which must be 2-40 characters (English or Chinese) long.
	ScheduledTaskName interface{}
	// Whether to enable the scheduled task. The default value is true.
	TaskEnabled interface{}
}
