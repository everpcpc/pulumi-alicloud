// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ess

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/ess_scheduled_task.html.markdown.
type ScheduledTask struct {
	s *pulumi.ResourceState
}

// NewScheduledTask registers a new resource with the given unique name, arguments, and options.
func NewScheduledTask(ctx *pulumi.Context,
	name string, args *ScheduledTaskArgs, opts ...pulumi.ResourceOpt) (*ScheduledTask, error) {
	if args == nil || args.LaunchTime == nil {
		return nil, errors.New("missing required argument 'LaunchTime'")
	}
	if args == nil || args.ScheduledAction == nil {
		return nil, errors.New("missing required argument 'ScheduledAction'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["launchExpirationTime"] = nil
		inputs["launchTime"] = nil
		inputs["recurrenceEndTime"] = nil
		inputs["recurrenceType"] = nil
		inputs["recurrenceValue"] = nil
		inputs["scheduledAction"] = nil
		inputs["scheduledTaskName"] = nil
		inputs["taskEnabled"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["launchExpirationTime"] = args.LaunchExpirationTime
		inputs["launchTime"] = args.LaunchTime
		inputs["recurrenceEndTime"] = args.RecurrenceEndTime
		inputs["recurrenceType"] = args.RecurrenceType
		inputs["recurrenceValue"] = args.RecurrenceValue
		inputs["scheduledAction"] = args.ScheduledAction
		inputs["scheduledTaskName"] = args.ScheduledTaskName
		inputs["taskEnabled"] = args.TaskEnabled
	}
	s, err := ctx.RegisterResource("alicloud:ess/scheduledTask:ScheduledTask", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ScheduledTask{s: s}, nil
}

// GetScheduledTask gets an existing ScheduledTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledTask(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ScheduledTaskState, opts ...pulumi.ResourceOpt) (*ScheduledTask, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["launchExpirationTime"] = state.LaunchExpirationTime
		inputs["launchTime"] = state.LaunchTime
		inputs["recurrenceEndTime"] = state.RecurrenceEndTime
		inputs["recurrenceType"] = state.RecurrenceType
		inputs["recurrenceValue"] = state.RecurrenceValue
		inputs["scheduledAction"] = state.ScheduledAction
		inputs["scheduledTaskName"] = state.ScheduledTaskName
		inputs["taskEnabled"] = state.TaskEnabled
	}
	s, err := ctx.ReadResource("alicloud:ess/scheduledTask:ScheduledTask", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ScheduledTask{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ScheduledTask) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ScheduledTask) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Description of the scheduled task, which is 2-200 characters (English or Chinese) long.
func (r *ScheduledTask) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The time period during which a failed scheduled task is retried. Unit: seconds. Valid values: 0 to 21600. Default value: 600
func (r *ScheduledTask) LaunchExpirationTime() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["launchExpirationTime"])
}

// The time at which the scheduled task is triggered. Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. 
// The time must be in UTC. You cannot enter a time point later than 90 days from the date of scheduled task creation.
// If the `recurrenceType` parameter is specified, the task is executed repeatedly at the time specified by LaunchTime.
// Otherwise, the task is only executed once at the date and time specified by LaunchTime.
func (r *ScheduledTask) LaunchTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["launchTime"])
}

// Specifies the end time after which the scheduled task is no longer repeated. 
// Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format.
// The time must be in UTC. You cannot enter a time point later than 365 days from the date of scheduled task creation.
func (r *ScheduledTask) RecurrenceEndTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recurrenceEndTime"])
}

// Specifies the recurrence type of the scheduled task. 
// If set, both `recurrenceValue` and `recurrenceEndTime` must be set. Valid values:
// - Daily: The scheduled task is executed once every specified number of days.
// - Weekly: The scheduled task is executed on each specified day of a week.
// - Monthly: The scheduled task is executed on each specified day of a month.
// - Cron: (Available in 1.60.0+) The scheduled task is executed based on the specified cron expression.
func (r *ScheduledTask) RecurrenceType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recurrenceType"])
}

// Specifies how often a scheduled task recurs. The valid value depends on `recurrenceType`
// - Daily: You can enter one value. Valid values: 1 to 31.
// - Weekly: You can enter multiple values and separate them with commas (,). For example, the values 0 to 6 correspond to the days of the week in sequence from Sunday to Saturday.
// - Monthly: You can enter two values in A-B format. Valid values of A and B: 1 to 31. The value of B must be greater than or equal to the value of A.
// - Cron: You can enter a cron expression which is written in UTC and consists of five fields: minute, hour, day of month (date), month, and day of week. The expression can contain wildcard characters including commas (,), question marks (?), hyphens (-), asterisks (*), number signs (#), forward slashes (/), and the L and W letters.
func (r *ScheduledTask) RecurrenceValue() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recurrenceValue"])
}

// The operation to be performed when a scheduled task is triggered. Enter the unique identifier of a scaling rule.
func (r *ScheduledTask) ScheduledAction() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scheduledAction"])
}

// Display name of the scheduled task, which must be 2-40 characters (English or Chinese) long.
func (r *ScheduledTask) ScheduledTaskName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scheduledTaskName"])
}

// Specifies whether to start the scheduled task. Default to true.
func (r *ScheduledTask) TaskEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["taskEnabled"])
}

// Input properties used for looking up and filtering ScheduledTask resources.
type ScheduledTaskState struct {
	// Description of the scheduled task, which is 2-200 characters (English or Chinese) long.
	Description interface{}
	// The time period during which a failed scheduled task is retried. Unit: seconds. Valid values: 0 to 21600. Default value: 600
	LaunchExpirationTime interface{}
	// The time at which the scheduled task is triggered. Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. 
	// The time must be in UTC. You cannot enter a time point later than 90 days from the date of scheduled task creation.
	// If the `recurrenceType` parameter is specified, the task is executed repeatedly at the time specified by LaunchTime.
	// Otherwise, the task is only executed once at the date and time specified by LaunchTime.
	LaunchTime interface{}
	// Specifies the end time after which the scheduled task is no longer repeated. 
	// Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format.
	// The time must be in UTC. You cannot enter a time point later than 365 days from the date of scheduled task creation.
	RecurrenceEndTime interface{}
	// Specifies the recurrence type of the scheduled task. 
	// If set, both `recurrenceValue` and `recurrenceEndTime` must be set. Valid values:
	// - Daily: The scheduled task is executed once every specified number of days.
	// - Weekly: The scheduled task is executed on each specified day of a week.
	// - Monthly: The scheduled task is executed on each specified day of a month.
	// - Cron: (Available in 1.60.0+) The scheduled task is executed based on the specified cron expression.
	RecurrenceType interface{}
	// Specifies how often a scheduled task recurs. The valid value depends on `recurrenceType`
	// - Daily: You can enter one value. Valid values: 1 to 31.
	// - Weekly: You can enter multiple values and separate them with commas (,). For example, the values 0 to 6 correspond to the days of the week in sequence from Sunday to Saturday.
	// - Monthly: You can enter two values in A-B format. Valid values of A and B: 1 to 31. The value of B must be greater than or equal to the value of A.
	// - Cron: You can enter a cron expression which is written in UTC and consists of five fields: minute, hour, day of month (date), month, and day of week. The expression can contain wildcard characters including commas (,), question marks (?), hyphens (-), asterisks (*), number signs (#), forward slashes (/), and the L and W letters.
	RecurrenceValue interface{}
	// The operation to be performed when a scheduled task is triggered. Enter the unique identifier of a scaling rule.
	ScheduledAction interface{}
	// Display name of the scheduled task, which must be 2-40 characters (English or Chinese) long.
	ScheduledTaskName interface{}
	// Specifies whether to start the scheduled task. Default to true.
	TaskEnabled interface{}
}

// The set of arguments for constructing a ScheduledTask resource.
type ScheduledTaskArgs struct {
	// Description of the scheduled task, which is 2-200 characters (English or Chinese) long.
	Description interface{}
	// The time period during which a failed scheduled task is retried. Unit: seconds. Valid values: 0 to 21600. Default value: 600
	LaunchExpirationTime interface{}
	// The time at which the scheduled task is triggered. Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. 
	// The time must be in UTC. You cannot enter a time point later than 90 days from the date of scheduled task creation.
	// If the `recurrenceType` parameter is specified, the task is executed repeatedly at the time specified by LaunchTime.
	// Otherwise, the task is only executed once at the date and time specified by LaunchTime.
	LaunchTime interface{}
	// Specifies the end time after which the scheduled task is no longer repeated. 
	// Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format.
	// The time must be in UTC. You cannot enter a time point later than 365 days from the date of scheduled task creation.
	RecurrenceEndTime interface{}
	// Specifies the recurrence type of the scheduled task. 
	// If set, both `recurrenceValue` and `recurrenceEndTime` must be set. Valid values:
	// - Daily: The scheduled task is executed once every specified number of days.
	// - Weekly: The scheduled task is executed on each specified day of a week.
	// - Monthly: The scheduled task is executed on each specified day of a month.
	// - Cron: (Available in 1.60.0+) The scheduled task is executed based on the specified cron expression.
	RecurrenceType interface{}
	// Specifies how often a scheduled task recurs. The valid value depends on `recurrenceType`
	// - Daily: You can enter one value. Valid values: 1 to 31.
	// - Weekly: You can enter multiple values and separate them with commas (,). For example, the values 0 to 6 correspond to the days of the week in sequence from Sunday to Saturday.
	// - Monthly: You can enter two values in A-B format. Valid values of A and B: 1 to 31. The value of B must be greater than or equal to the value of A.
	// - Cron: You can enter a cron expression which is written in UTC and consists of five fields: minute, hour, day of month (date), month, and day of week. The expression can contain wildcard characters including commas (,), question marks (?), hyphens (-), asterisks (*), number signs (#), forward slashes (/), and the L and W letters.
	RecurrenceValue interface{}
	// The operation to be performed when a scheduled task is triggered. Enter the unique identifier of a scaling rule.
	ScheduledAction interface{}
	// Display name of the scheduled task, which must be 2-40 characters (English or Chinese) long.
	ScheduledTaskName interface{}
	// Specifies whether to start the scheduled task. Default to true.
	TaskEnabled interface{}
}
