// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ess

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a ESS alarm task resource.
type Alarm struct {
	s *pulumi.ResourceState
}

// NewAlarm registers a new resource with the given unique name, arguments, and options.
func NewAlarm(ctx *pulumi.Context,
	name string, args *AlarmArgs, opts ...pulumi.ResourceOpt) (*Alarm, error) {
	if args == nil || args.AlarmActions == nil {
		return nil, errors.New("missing required argument 'AlarmActions'")
	}
	if args == nil || args.MetricName == nil {
		return nil, errors.New("missing required argument 'MetricName'")
	}
	if args == nil || args.ScalingGroupId == nil {
		return nil, errors.New("missing required argument 'ScalingGroupId'")
	}
	if args == nil || args.Threshold == nil {
		return nil, errors.New("missing required argument 'Threshold'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alarmActions"] = nil
		inputs["cloudMonitorGroupId"] = nil
		inputs["comparisonOperator"] = nil
		inputs["description"] = nil
		inputs["dimensions"] = nil
		inputs["evaluationCount"] = nil
		inputs["metricName"] = nil
		inputs["metricType"] = nil
		inputs["name"] = nil
		inputs["period"] = nil
		inputs["scalingGroupId"] = nil
		inputs["statistics"] = nil
		inputs["threshold"] = nil
	} else {
		inputs["alarmActions"] = args.AlarmActions
		inputs["cloudMonitorGroupId"] = args.CloudMonitorGroupId
		inputs["comparisonOperator"] = args.ComparisonOperator
		inputs["description"] = args.Description
		inputs["dimensions"] = args.Dimensions
		inputs["evaluationCount"] = args.EvaluationCount
		inputs["metricName"] = args.MetricName
		inputs["metricType"] = args.MetricType
		inputs["name"] = args.Name
		inputs["period"] = args.Period
		inputs["scalingGroupId"] = args.ScalingGroupId
		inputs["statistics"] = args.Statistics
		inputs["threshold"] = args.Threshold
	}
	inputs["state"] = nil
	s, err := ctx.RegisterResource("alicloud:ess/alarm:Alarm", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Alarm{s: s}, nil
}

// GetAlarm gets an existing Alarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarm(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AlarmState, opts ...pulumi.ResourceOpt) (*Alarm, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["alarmActions"] = state.AlarmActions
		inputs["cloudMonitorGroupId"] = state.CloudMonitorGroupId
		inputs["comparisonOperator"] = state.ComparisonOperator
		inputs["description"] = state.Description
		inputs["dimensions"] = state.Dimensions
		inputs["evaluationCount"] = state.EvaluationCount
		inputs["metricName"] = state.MetricName
		inputs["metricType"] = state.MetricType
		inputs["name"] = state.Name
		inputs["period"] = state.Period
		inputs["scalingGroupId"] = state.ScalingGroupId
		inputs["state"] = state.State
		inputs["statistics"] = state.Statistics
		inputs["threshold"] = state.Threshold
	}
	s, err := ctx.ReadResource("alicloud:ess/alarm:Alarm", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Alarm{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Alarm) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Alarm) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The list of actions to execute when this alarm transition into an ALARM state. Each action is specified as ess scaling rule ari.
func (r *Alarm) AlarmActions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["alarmActions"])
}

// Defines the application group id defined by CMS which is assigned when you upload custom metric to CMS, only available for custom metirc.
func (r *Alarm) CloudMonitorGroupId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["cloudMonitorGroupId"])
}

// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Supported value: >=, <=, >, <. Defaults to >=.
func (r *Alarm) ComparisonOperator() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comparisonOperator"])
}

// The description for the alarm.
func (r *Alarm) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The dimension map for the alarm's associated metric (documented below). For all metrics, you can not set the dimension key as "scaling_group" or "userId", which is set by default, the second dimension for metric, such as "device" for "PackagesNetIn", need to be set by users.
func (r *Alarm) Dimensions() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["dimensions"])
}

// The number of times that needs to satisfies comparison condition before transition into ALARM state. Defaults to 3.
func (r *Alarm) EvaluationCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["evaluationCount"])
}

// The name for the alarm's associated metric.
func (r *Alarm) MetricName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["metricName"])
}

// The type for the alarm's associated metric. Supported value: system, custom. "system" means the metric data is collected by Aliyun Cloud Monitor Service(CMS), "custom" means the metric data is upload to CMS by users. Defaults to system. 
func (r *Alarm) MetricType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["metricType"])
}

// The name for ess alarm.
func (r *Alarm) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The period in seconds over which the specified statistic is applied. Supported value: 60, 120, 300, 900. Defaults to 300.
func (r *Alarm) Period() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["period"])
}

// The scaling group associated with this alarm.
func (r *Alarm) ScalingGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scalingGroupId"])
}

// The state of specified alarm.  
func (r *Alarm) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// The statistic to apply to the alarm's associated metric. Supported value: Average, Minimum, Maximum. Defaults to Average.
func (r *Alarm) Statistics() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["statistics"])
}

// The value against which the specified statistics is compared.
func (r *Alarm) Threshold() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["threshold"])
}

// Input properties used for looking up and filtering Alarm resources.
type AlarmState struct {
	// The list of actions to execute when this alarm transition into an ALARM state. Each action is specified as ess scaling rule ari.
	AlarmActions interface{}
	// Defines the application group id defined by CMS which is assigned when you upload custom metric to CMS, only available for custom metirc.
	CloudMonitorGroupId interface{}
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Supported value: >=, <=, >, <. Defaults to >=.
	ComparisonOperator interface{}
	// The description for the alarm.
	Description interface{}
	// The dimension map for the alarm's associated metric (documented below). For all metrics, you can not set the dimension key as "scaling_group" or "userId", which is set by default, the second dimension for metric, such as "device" for "PackagesNetIn", need to be set by users.
	Dimensions interface{}
	// The number of times that needs to satisfies comparison condition before transition into ALARM state. Defaults to 3.
	EvaluationCount interface{}
	// The name for the alarm's associated metric.
	MetricName interface{}
	// The type for the alarm's associated metric. Supported value: system, custom. "system" means the metric data is collected by Aliyun Cloud Monitor Service(CMS), "custom" means the metric data is upload to CMS by users. Defaults to system. 
	MetricType interface{}
	// The name for ess alarm.
	Name interface{}
	// The period in seconds over which the specified statistic is applied. Supported value: 60, 120, 300, 900. Defaults to 300.
	Period interface{}
	// The scaling group associated with this alarm.
	ScalingGroupId interface{}
	// The state of specified alarm.  
	State interface{}
	// The statistic to apply to the alarm's associated metric. Supported value: Average, Minimum, Maximum. Defaults to Average.
	Statistics interface{}
	// The value against which the specified statistics is compared.
	Threshold interface{}
}

// The set of arguments for constructing a Alarm resource.
type AlarmArgs struct {
	// The list of actions to execute when this alarm transition into an ALARM state. Each action is specified as ess scaling rule ari.
	AlarmActions interface{}
	// Defines the application group id defined by CMS which is assigned when you upload custom metric to CMS, only available for custom metirc.
	CloudMonitorGroupId interface{}
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Supported value: >=, <=, >, <. Defaults to >=.
	ComparisonOperator interface{}
	// The description for the alarm.
	Description interface{}
	// The dimension map for the alarm's associated metric (documented below). For all metrics, you can not set the dimension key as "scaling_group" or "userId", which is set by default, the second dimension for metric, such as "device" for "PackagesNetIn", need to be set by users.
	Dimensions interface{}
	// The number of times that needs to satisfies comparison condition before transition into ALARM state. Defaults to 3.
	EvaluationCount interface{}
	// The name for the alarm's associated metric.
	MetricName interface{}
	// The type for the alarm's associated metric. Supported value: system, custom. "system" means the metric data is collected by Aliyun Cloud Monitor Service(CMS), "custom" means the metric data is upload to CMS by users. Defaults to system. 
	MetricType interface{}
	// The name for ess alarm.
	Name interface{}
	// The period in seconds over which the specified statistic is applied. Supported value: 60, 120, 300, 900. Defaults to 300.
	Period interface{}
	// The scaling group associated with this alarm.
	ScalingGroupId interface{}
	// The statistic to apply to the alarm's associated metric. Supported value: Average, Minimum, Maximum. Defaults to Average.
	Statistics interface{}
	// The value against which the specified statistics is compared.
	Threshold interface{}
}
