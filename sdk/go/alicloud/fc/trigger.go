// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Alicloud Function Compute Trigger resource. Based on trigger, execute your code in response to events in Alibaba Cloud.
//
//	For information about Service and how to use it, see [What is Function Compute](https://www.alibabacloud.com/help/doc-detail/52895.htm).
//
// > **NOTE:** The resource requires a provider field 'account_id'. See account_id.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			region := "cn-hangzhou"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			account := "12345"
//			if param := cfg.Get("account"); param != "" {
//				account = param
//			}
//			fooRole, err := ram.NewRole(ctx, "fooRole", &ram.RoleArgs{
//				Document:    pulumi.String("  {\n    \"Statement\": [\n      {\n        \"Action\": \"sts:AssumeRole\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n          \"Service\": [\n            \"log.aliyuncs.com\"\n          ]\n        }\n      }\n    ],\n    \"Version\": \"1\"\n  }\n  \n"),
//				Description: pulumi.String("this is a test"),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fooRolePolicyAttachment, err := ram.NewRolePolicyAttachment(ctx, "fooRolePolicyAttachment", &ram.RolePolicyAttachmentArgs{
//				RoleName:   fooRole.Name,
//				PolicyName: pulumi.String("AliyunLogFullAccess"),
//				PolicyType: pulumi.String("System"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "fooTrigger", &fc.TriggerArgs{
//				Service:   pulumi.String("my-fc-service"),
//				Function:  pulumi.String("hello-world"),
//				Role:      fooRole.Arn,
//				SourceArn: pulumi.String(fmt.Sprintf("acs:log:%v:%v:project/%v", region, account, alicloud_log_project.Foo.Name)),
//				Type:      pulumi.String("log"),
//				Config:    pulumi.String("    {\n        \"sourceConfig\": {\n            \"project\": \"project-for-fc\",\n            \"logstore\": \"project-for-fc\"\n        },\n        \"jobConfig\": {\n            \"maxRetryTime\": 3,\n            \"triggerInterval\": 60\n        },\n        \"functionParameter\": {\n            \"a\": \"b\",\n            \"c\": \"d\"\n        },\n        \"logConfig\": {\n            \"project\": \"project-for-fc-log\",\n            \"logstore\": \"project-for-fc-log\"\n        },\n        \"enable\": true\n    }\n  \n"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fooRolePolicyAttachment,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// MNS topic trigger:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/mns"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "fctriggermnstopic"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			currentRegion, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			current, err := alicloud.GetAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooProject, err := log.NewProject(ctx, "fooProject", &log.ProjectArgs{
//				Description: pulumi.String("tf unit test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = log.NewStore(ctx, "bar", &log.StoreArgs{
//				Project:         fooProject.Name,
//				RetentionPeriod: pulumi.Int(3000),
//				ShardCount:      pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = log.NewStore(ctx, "fooStore", &log.StoreArgs{
//				Project:         fooProject.Name,
//				RetentionPeriod: pulumi.Int(3000),
//				ShardCount:      pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			fooTopic, err := mns.NewTopic(ctx, "fooTopic", nil)
//			if err != nil {
//				return err
//			}
//			fooService, err := fc.NewService(ctx, "fooService", &fc.ServiceArgs{
//				InternetAccess: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			fooBucket, err := oss.NewBucket(ctx, "fooBucket", &oss.BucketArgs{
//				Bucket: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			fooBucketObject, err := oss.NewBucketObject(ctx, "fooBucketObject", &oss.BucketObjectArgs{
//				Bucket: fooBucket.ID(),
//				Key:    pulumi.String("fc/hello.zip"),
//				Source: pulumi.String("./hello.zip"),
//			})
//			if err != nil {
//				return err
//			}
//			fooFunction, err := fc.NewFunction(ctx, "fooFunction", &fc.FunctionArgs{
//				Handler:    pulumi.String("hello.handler"),
//				MemorySize: pulumi.Int(512),
//				OssBucket:  fooBucket.ID(),
//				OssKey:     fooBucketObject.Key,
//				Runtime:    pulumi.String("python2.7"),
//				Service:    fooService.Name,
//			})
//			if err != nil {
//				return err
//			}
//			fooRole, err := ram.NewRole(ctx, "fooRole", &ram.RoleArgs{
//				Description: pulumi.String("this is a test"),
//				Document:    pulumi.String("  {\n    \"Statement\": [\n      {\n        \"Action\": \"sts:AssumeRole\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n          \"Service\": [\n            \"mns.aliyuncs.com\"\n          ]\n        }\n      }\n    ],\n    \"Version\": \"1\"\n  }\n  \n"),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ram.NewRolePolicyAttachment(ctx, "fooRolePolicyAttachment", &ram.RolePolicyAttachmentArgs{
//				PolicyName: pulumi.String("AliyunMNSNotificationRolePolicy"),
//				PolicyType: pulumi.String("System"),
//				RoleName:   fooRole.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "fooTrigger", &fc.TriggerArgs{
//				ConfigMns: pulumi.String("  {\n    \"filterTag\":\"testTag\",\n    \"notifyContentFormat\":\"STREAM\",\n    \"notifyStrategy\":\"BACKOFF_RETRY\"\n  }\n  \n"),
//				Function:  fooFunction.Name,
//				Role:      fooRole.Arn,
//				Service:   fooService.Name,
//				SourceArn: fooTopic.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("acs:mns:%v:%v:/topics/%v", currentRegion.Regions[0].Id, current.Id, name), nil
//				}).(pulumi.StringOutput),
//				Type: pulumi.String("mns_topic"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				pulumi.Resource("alicloud_ram_role_policy_attachment.foo"),
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// CDN events trigger:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cdn"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "fctriggercdneventsconfig"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			current, err := alicloud.GetAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			domain, err := cdn.NewDomainNew(ctx, "domain", &cdn.DomainNewArgs{
//				CdnType:    pulumi.String("web"),
//				DomainName: pulumi.String(fmt.Sprintf("%v.tf.com", name)),
//				Scope:      pulumi.String("overseas"),
//				Sources: cdn.DomainNewSourceArray{
//					&cdn.DomainNewSourceArgs{
//						Content:  pulumi.String("1.1.1.1"),
//						Port:     pulumi.Int(80),
//						Priority: pulumi.Int(20),
//						Type:     pulumi.String("ipaddr"),
//						Weight:   pulumi.Int(10),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooService, err := fc.NewService(ctx, "fooService", &fc.ServiceArgs{
//				InternetAccess: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			fooBucket, err := oss.NewBucket(ctx, "fooBucket", &oss.BucketArgs{
//				Bucket: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			fooBucketObject, err := oss.NewBucketObject(ctx, "fooBucketObject", &oss.BucketObjectArgs{
//				Bucket: fooBucket.ID(),
//				Key:    pulumi.String("fc/hello.zip"),
//				Source: pulumi.String("./hello.zip"),
//			})
//			if err != nil {
//				return err
//			}
//			fooFunction, err := fc.NewFunction(ctx, "fooFunction", &fc.FunctionArgs{
//				Handler:    pulumi.String("hello.handler"),
//				MemorySize: pulumi.Int(512),
//				OssBucket:  fooBucket.ID(),
//				OssKey:     fooBucketObject.Key,
//				Runtime:    pulumi.String("python2.7"),
//				Service:    fooService.Name,
//			})
//			if err != nil {
//				return err
//			}
//			fooRole, err := ram.NewRole(ctx, "fooRole", &ram.RoleArgs{
//				Description: pulumi.String("this is a test"),
//				Document:    pulumi.String("    {\n        \"Version\": \"1\",\n        \"Statement\": [\n            {\n                \"Action\": \"cdn:Describe*\",\n                \"Resource\": \"*\",\n                \"Effect\": \"Allow\",\n		        \"Principal\": {\n                \"Service\":\n                    [\"log.aliyuncs.com\"]\n                }\n            }\n        ]\n    }\n    \n"),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fooPolicy, err := ram.NewPolicy(ctx, "fooPolicy", &ram.PolicyArgs{
//				Description: pulumi.String("this is a test"),
//				Document:    pulumi.String("    {\n        \"Version\": \"1\",\n        \"Statement\": [\n        {\n            \"Action\": [\n            \"fc:InvokeFunction\"\n            ],\n        \"Resource\": [\n            \"acs:fc:*:*:services/tf_cdnEvents/functions/*\",\n            \"acs:fc:*:*:services/tf_cdnEvents.*/functions/*\"\n        ],\n        \"Effect\": \"Allow\"\n        }\n        ]\n    }\n    \n"),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ram.NewRolePolicyAttachment(ctx, "fooRolePolicyAttachment", &ram.RolePolicyAttachmentArgs{
//				PolicyName: fooPolicy.Name,
//				PolicyType: pulumi.String("Custom"),
//				RoleName:   fooRole.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "default", &fc.TriggerArgs{
//				Config: domain.DomainName.ApplyT(func(domainName string) (string, error) {
//					return fmt.Sprintf(`      {"eventName":"LogFileCreated",
//	     "eventVersion":"1.0.0",
//	     "notes":"cdn events trigger",
//	     "filter":{
//	        "domain": ["%v"]
//	        }
//	    }
//
// `, domainName), nil
//
//				}).(pulumi.StringOutput),
//				Function:  fooFunction.Name,
//				Role:      fooRole.Arn,
//				Service:   fooService.Name,
//				SourceArn: pulumi.String(fmt.Sprintf("acs:cdn:*:%v", current.Id)),
//				Type:      pulumi.String("cdn_events"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				pulumi.Resource("alicloud_ram_role_policy_attachment.foo"),
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// EventBridge trigger:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eventbridge"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "fctriggereventbridgeconfig"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := alicloud.GetAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = eventbridge.NewServiceLinkedRole(ctx, "serviceLinkedRole", &eventbridge.ServiceLinkedRoleArgs{
//				ProductName: pulumi.String("AliyunServiceRoleForEventBridgeSendToFC"),
//			})
//			if err != nil {
//				return err
//			}
//			fooService, err := fc.NewService(ctx, "fooService", &fc.ServiceArgs{
//				InternetAccess: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			fooBucket, err := oss.NewBucket(ctx, "fooBucket", &oss.BucketArgs{
//				Bucket: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			fooBucketObject, err := oss.NewBucketObject(ctx, "fooBucketObject", &oss.BucketObjectArgs{
//				Bucket: fooBucket.ID(),
//				Key:    pulumi.String("fc/hello.zip"),
//				Source: pulumi.String("./hello.zip"),
//			})
//			if err != nil {
//				return err
//			}
//			fooFunction, err := fc.NewFunction(ctx, "fooFunction", &fc.FunctionArgs{
//				Handler:    pulumi.String("hello.handler"),
//				MemorySize: pulumi.Int(512),
//				OssBucket:  fooBucket.ID(),
//				OssKey:     fooBucketObject.Key,
//				Runtime:    pulumi.String("python2.7"),
//				Service:    fooService.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "default", &fc.TriggerArgs{
//				Config:   pulumi.String("    {\n        \"triggerEnable\": false,\n        \"asyncInvocationType\": false,\n        \"eventRuleFilterPattern\": \"{\\\"source\\\":[\\\"acs.oss\\\"],\\\"type\\\":[\\\"oss:BucketCreated:PutBucket\\\"]}\",\n        \"eventSourceConfig\": {\n            \"eventSourceType\": \"Default\"\n        }\n    }\n\n"),
//				Function: fooFunction.Name,
//				Service:  fooService.Name,
//				Type:     pulumi.String("eventbridge"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "mns", &fc.TriggerArgs{
//				Config:   pulumi.String("    {\n        \"triggerEnable\": false,\n        \"asyncInvocationType\": false,\n        \"eventRuleFilterPattern\": \"{}\",\n        \"eventSourceConfig\": {\n            \"eventSourceType\": \"MNS\",\n            \"eventSourceParameters\": {\n                \"sourceMNSParameters\": {\n                    \"RegionId\": \"cn-hangzhou\",\n                    \"QueueName\": \"mns-queue\",\n                    \"IsBase64Decode\": true\n                }\n            }\n        }\n    }\n\n"),
//				Function: fooFunction.Name,
//				Service:  fooService.Name,
//				Type:     pulumi.String("eventbridge"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "rocketmq", &fc.TriggerArgs{
//				Config:   pulumi.String("    {\n        \"triggerEnable\": false,\n        \"asyncInvocationType\": false,\n        \"eventRuleFilterPattern\": \"{}\",\n        \"eventSourceConfig\": {\n            \"eventSourceType\": \"RocketMQ\",\n            \"eventSourceParameters\": {\n                \"sourceRocketMQParameters\": {\n                    \"RegionId\": \"cn-hangzhou\",\n                    \"InstanceId\": \"MQ_INST_164901546557****_BAAN****\",\n                    \"GroupID\": \"GID_group1\",\n                    \"Topic\": \"mytopic\",\n                    \"Timestamp\": 1636597951984,\n                    \"Tag\": \"test-tag\",\n                    \"Offset\": \"CONSUME_FROM_LAST_OFFSET\"\n                }\n            }\n        }\n    }\n\n"),
//				Function: fooFunction.Name,
//				Service:  fooService.Name,
//				Type:     pulumi.String("eventbridge"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "rabbitmq", &fc.TriggerArgs{
//				Config:   pulumi.String("    {\n        \"triggerEnable\": false,\n        \"asyncInvocationType\": false,\n        \"eventRuleFilterPattern\": \"{}\",\n        \"eventSourceConfig\": {\n            \"eventSourceType\": \"RabbitMQ\",\n            \"eventSourceParameters\": {\n                \"sourceRabbitMQParameters\": {\n                    \"RegionId\": \"cn-hangzhou\",\n                    \"InstanceId\": \"amqp-cn-****** \",\n                    \"VirtualHostName\": \"test-virtual\",\n                    \"QueueName\": \"test-queue\"\n                }\n            }\n        }\n    }\n\n"),
//				Function: fooFunction.Name,
//				Service:  fooService.Name,
//				Type:     pulumi.String("eventbridge"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Module Support
//
// You can use to the existing fc module
// to create several triggers quickly.
//
// ## Import
//
// Function Compute trigger can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:fc/trigger:Trigger foo my-fc-service:hello-world:hello-trigger
//
// ```
type Trigger struct {
	pulumi.CustomResourceState

	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config pulumi.StringPtrOutput `pulumi:"config"`
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns pulumi.StringPtrOutput `pulumi:"configMns"`
	// The Function Compute function name.
	Function pulumi.StringOutput `pulumi:"function"`
	// The date this resource was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name pulumi.StringOutput `pulumi:"name"`
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix pulumi.StringPtrOutput `pulumi:"namePrefix"`
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// The Function Compute service name.
	Service pulumi.StringOutput `pulumi:"service"`
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn pulumi.StringPtrOutput `pulumi:"sourceArn"`
	// The Function Compute trigger ID.
	TriggerId pulumi.StringOutput `pulumi:"triggerId"`
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Function == nil {
		return nil, errors.New("invalid value for required argument 'Function'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Trigger
	err := ctx.RegisterResource("alicloud:fc/trigger:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("alicloud:fc/trigger:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config *string `pulumi:"config"`
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns *string `pulumi:"configMns"`
	// The Function Compute function name.
	Function *string `pulumi:"function"`
	// The date this resource was last modified.
	LastModified *string `pulumi:"lastModified"`
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name *string `pulumi:"name"`
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix *string `pulumi:"namePrefix"`
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role *string `pulumi:"role"`
	// The Function Compute service name.
	Service *string `pulumi:"service"`
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn *string `pulumi:"sourceArn"`
	// The Function Compute trigger ID.
	TriggerId *string `pulumi:"triggerId"`
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type *string `pulumi:"type"`
}

type TriggerState struct {
	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config pulumi.StringPtrInput
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns pulumi.StringPtrInput
	// The Function Compute function name.
	Function pulumi.StringPtrInput
	// The date this resource was last modified.
	LastModified pulumi.StringPtrInput
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name pulumi.StringPtrInput
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix pulumi.StringPtrInput
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role pulumi.StringPtrInput
	// The Function Compute service name.
	Service pulumi.StringPtrInput
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn pulumi.StringPtrInput
	// The Function Compute trigger ID.
	TriggerId pulumi.StringPtrInput
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type pulumi.StringPtrInput
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config *string `pulumi:"config"`
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns *string `pulumi:"configMns"`
	// The Function Compute function name.
	Function string `pulumi:"function"`
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name *string `pulumi:"name"`
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix *string `pulumi:"namePrefix"`
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role *string `pulumi:"role"`
	// The Function Compute service name.
	Service string `pulumi:"service"`
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn *string `pulumi:"sourceArn"`
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config pulumi.StringPtrInput
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns pulumi.StringPtrInput
	// The Function Compute function name.
	Function pulumi.StringInput
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name pulumi.StringPtrInput
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix pulumi.StringPtrInput
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role pulumi.StringPtrInput
	// The Function Compute service name.
	Service pulumi.StringInput
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn pulumi.StringPtrInput
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type pulumi.StringInput
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerInput interface {
	pulumi.Input

	ToTriggerOutput() TriggerOutput
	ToTriggerOutputWithContext(ctx context.Context) TriggerOutput
}

func (*Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (i *Trigger) ToTriggerOutput() TriggerOutput {
	return i.ToTriggerOutputWithContext(context.Background())
}

func (i *Trigger) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerOutput)
}

// TriggerArrayInput is an input type that accepts TriggerArray and TriggerArrayOutput values.
// You can construct a concrete instance of `TriggerArrayInput` via:
//
//	TriggerArray{ TriggerArgs{...} }
type TriggerArrayInput interface {
	pulumi.Input

	ToTriggerArrayOutput() TriggerArrayOutput
	ToTriggerArrayOutputWithContext(context.Context) TriggerArrayOutput
}

type TriggerArray []TriggerInput

func (TriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trigger)(nil)).Elem()
}

func (i TriggerArray) ToTriggerArrayOutput() TriggerArrayOutput {
	return i.ToTriggerArrayOutputWithContext(context.Background())
}

func (i TriggerArray) ToTriggerArrayOutputWithContext(ctx context.Context) TriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerArrayOutput)
}

// TriggerMapInput is an input type that accepts TriggerMap and TriggerMapOutput values.
// You can construct a concrete instance of `TriggerMapInput` via:
//
//	TriggerMap{ "key": TriggerArgs{...} }
type TriggerMapInput interface {
	pulumi.Input

	ToTriggerMapOutput() TriggerMapOutput
	ToTriggerMapOutputWithContext(context.Context) TriggerMapOutput
}

type TriggerMap map[string]TriggerInput

func (TriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trigger)(nil)).Elem()
}

func (i TriggerMap) ToTriggerMapOutput() TriggerMapOutput {
	return i.ToTriggerMapOutputWithContext(context.Background())
}

func (i TriggerMap) ToTriggerMapOutputWithContext(ctx context.Context) TriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerMapOutput)
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
func (o TriggerOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Config }).(pulumi.StringPtrOutput)
}

// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
func (o TriggerOutput) ConfigMns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.ConfigMns }).(pulumi.StringPtrOutput)
}

// The Function Compute function name.
func (o TriggerOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// The date this resource was last modified.
func (o TriggerOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
func (o TriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Setting a prefix to get a only trigger name. It is conflict with "name".
func (o TriggerOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
func (o TriggerOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// The Function Compute service name.
func (o TriggerOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
func (o TriggerOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.SourceArn }).(pulumi.StringPtrOutput)
}

// The Function Compute trigger ID.
func (o TriggerOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.TriggerId }).(pulumi.StringOutput)
}

// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
//
// > **NOTE:** Config does not support modification when type is mns_topic.
// **NOTE:** type = cdn_events, available in 1.47.0+.
// **NOTE:** type = eventbridge, available in 1.173.0+.
func (o TriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type TriggerArrayOutput struct{ *pulumi.OutputState }

func (TriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trigger)(nil)).Elem()
}

func (o TriggerArrayOutput) ToTriggerArrayOutput() TriggerArrayOutput {
	return o
}

func (o TriggerArrayOutput) ToTriggerArrayOutputWithContext(ctx context.Context) TriggerArrayOutput {
	return o
}

func (o TriggerArrayOutput) Index(i pulumi.IntInput) TriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Trigger {
		return vs[0].([]*Trigger)[vs[1].(int)]
	}).(TriggerOutput)
}

type TriggerMapOutput struct{ *pulumi.OutputState }

func (TriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trigger)(nil)).Elem()
}

func (o TriggerMapOutput) ToTriggerMapOutput() TriggerMapOutput {
	return o
}

func (o TriggerMapOutput) ToTriggerMapOutputWithContext(ctx context.Context) TriggerMapOutput {
	return o
}

func (o TriggerMapOutput) MapIndex(k pulumi.StringInput) TriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Trigger {
		return vs[0].(map[string]*Trigger)[vs[1].(string)]
	}).(TriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerInput)(nil)).Elem(), &Trigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerArrayInput)(nil)).Elem(), TriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerMapInput)(nil)).Elem(), TriggerMap{})
	pulumi.RegisterOutputType(TriggerOutput{})
	pulumi.RegisterOutputType(TriggerArrayOutput{})
	pulumi.RegisterOutputType(TriggerMapOutput{})
}
