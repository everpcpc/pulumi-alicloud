// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudauth

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudauth Face Config resource.
//
// For information about Cloudauth Face Config and how to use it, see [What is Face Config](https://help.aliyun.com/document_detail/99173.html).
//
// > **NOTE:** Available in v1.137.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cloudauth"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudauth.NewFaceConfig(ctx, "example", &cloudauth.FaceConfigArgs{
// 			BizName: pulumi.String("example_value"),
// 			BizType: pulumi.String("example_value"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cloudauth Face Config can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:cloudauth/faceConfig:FaceConfig example <lang>
// ```
type FaceConfig struct {
	pulumi.CustomResourceState

	// Scene name.
	BizName pulumi.StringOutput `pulumi:"bizName"`
	// Scene type. **NOTE:** The bizType cannot exceed 32 characters and can only use English letters, numbers and dashes (-).
	BizType pulumi.StringOutput `pulumi:"bizType"`
	// Last Modified Date.
	GmtModified pulumi.StringOutput `pulumi:"gmtModified"`
}

// NewFaceConfig registers a new resource with the given unique name, arguments, and options.
func NewFaceConfig(ctx *pulumi.Context,
	name string, args *FaceConfigArgs, opts ...pulumi.ResourceOption) (*FaceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BizName == nil {
		return nil, errors.New("invalid value for required argument 'BizName'")
	}
	if args.BizType == nil {
		return nil, errors.New("invalid value for required argument 'BizType'")
	}
	var resource FaceConfig
	err := ctx.RegisterResource("alicloud:cloudauth/faceConfig:FaceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFaceConfig gets an existing FaceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFaceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FaceConfigState, opts ...pulumi.ResourceOption) (*FaceConfig, error) {
	var resource FaceConfig
	err := ctx.ReadResource("alicloud:cloudauth/faceConfig:FaceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FaceConfig resources.
type faceConfigState struct {
	// Scene name.
	BizName *string `pulumi:"bizName"`
	// Scene type. **NOTE:** The bizType cannot exceed 32 characters and can only use English letters, numbers and dashes (-).
	BizType *string `pulumi:"bizType"`
	// Last Modified Date.
	GmtModified *string `pulumi:"gmtModified"`
}

type FaceConfigState struct {
	// Scene name.
	BizName pulumi.StringPtrInput
	// Scene type. **NOTE:** The bizType cannot exceed 32 characters and can only use English letters, numbers and dashes (-).
	BizType pulumi.StringPtrInput
	// Last Modified Date.
	GmtModified pulumi.StringPtrInput
}

func (FaceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*faceConfigState)(nil)).Elem()
}

type faceConfigArgs struct {
	// Scene name.
	BizName string `pulumi:"bizName"`
	// Scene type. **NOTE:** The bizType cannot exceed 32 characters and can only use English letters, numbers and dashes (-).
	BizType string `pulumi:"bizType"`
}

// The set of arguments for constructing a FaceConfig resource.
type FaceConfigArgs struct {
	// Scene name.
	BizName pulumi.StringInput
	// Scene type. **NOTE:** The bizType cannot exceed 32 characters and can only use English letters, numbers and dashes (-).
	BizType pulumi.StringInput
}

func (FaceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*faceConfigArgs)(nil)).Elem()
}

type FaceConfigInput interface {
	pulumi.Input

	ToFaceConfigOutput() FaceConfigOutput
	ToFaceConfigOutputWithContext(ctx context.Context) FaceConfigOutput
}

func (*FaceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceConfig)(nil))
}

func (i *FaceConfig) ToFaceConfigOutput() FaceConfigOutput {
	return i.ToFaceConfigOutputWithContext(context.Background())
}

func (i *FaceConfig) ToFaceConfigOutputWithContext(ctx context.Context) FaceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaceConfigOutput)
}

func (i *FaceConfig) ToFaceConfigPtrOutput() FaceConfigPtrOutput {
	return i.ToFaceConfigPtrOutputWithContext(context.Background())
}

func (i *FaceConfig) ToFaceConfigPtrOutputWithContext(ctx context.Context) FaceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaceConfigPtrOutput)
}

type FaceConfigPtrInput interface {
	pulumi.Input

	ToFaceConfigPtrOutput() FaceConfigPtrOutput
	ToFaceConfigPtrOutputWithContext(ctx context.Context) FaceConfigPtrOutput
}

type faceConfigPtrType FaceConfigArgs

func (*faceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FaceConfig)(nil))
}

func (i *faceConfigPtrType) ToFaceConfigPtrOutput() FaceConfigPtrOutput {
	return i.ToFaceConfigPtrOutputWithContext(context.Background())
}

func (i *faceConfigPtrType) ToFaceConfigPtrOutputWithContext(ctx context.Context) FaceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaceConfigPtrOutput)
}

// FaceConfigArrayInput is an input type that accepts FaceConfigArray and FaceConfigArrayOutput values.
// You can construct a concrete instance of `FaceConfigArrayInput` via:
//
//          FaceConfigArray{ FaceConfigArgs{...} }
type FaceConfigArrayInput interface {
	pulumi.Input

	ToFaceConfigArrayOutput() FaceConfigArrayOutput
	ToFaceConfigArrayOutputWithContext(context.Context) FaceConfigArrayOutput
}

type FaceConfigArray []FaceConfigInput

func (FaceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FaceConfig)(nil)).Elem()
}

func (i FaceConfigArray) ToFaceConfigArrayOutput() FaceConfigArrayOutput {
	return i.ToFaceConfigArrayOutputWithContext(context.Background())
}

func (i FaceConfigArray) ToFaceConfigArrayOutputWithContext(ctx context.Context) FaceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaceConfigArrayOutput)
}

// FaceConfigMapInput is an input type that accepts FaceConfigMap and FaceConfigMapOutput values.
// You can construct a concrete instance of `FaceConfigMapInput` via:
//
//          FaceConfigMap{ "key": FaceConfigArgs{...} }
type FaceConfigMapInput interface {
	pulumi.Input

	ToFaceConfigMapOutput() FaceConfigMapOutput
	ToFaceConfigMapOutputWithContext(context.Context) FaceConfigMapOutput
}

type FaceConfigMap map[string]FaceConfigInput

func (FaceConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FaceConfig)(nil)).Elem()
}

func (i FaceConfigMap) ToFaceConfigMapOutput() FaceConfigMapOutput {
	return i.ToFaceConfigMapOutputWithContext(context.Background())
}

func (i FaceConfigMap) ToFaceConfigMapOutputWithContext(ctx context.Context) FaceConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaceConfigMapOutput)
}

type FaceConfigOutput struct{ *pulumi.OutputState }

func (FaceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceConfig)(nil))
}

func (o FaceConfigOutput) ToFaceConfigOutput() FaceConfigOutput {
	return o
}

func (o FaceConfigOutput) ToFaceConfigOutputWithContext(ctx context.Context) FaceConfigOutput {
	return o
}

func (o FaceConfigOutput) ToFaceConfigPtrOutput() FaceConfigPtrOutput {
	return o.ToFaceConfigPtrOutputWithContext(context.Background())
}

func (o FaceConfigOutput) ToFaceConfigPtrOutputWithContext(ctx context.Context) FaceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FaceConfig) *FaceConfig {
		return &v
	}).(FaceConfigPtrOutput)
}

type FaceConfigPtrOutput struct{ *pulumi.OutputState }

func (FaceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FaceConfig)(nil))
}

func (o FaceConfigPtrOutput) ToFaceConfigPtrOutput() FaceConfigPtrOutput {
	return o
}

func (o FaceConfigPtrOutput) ToFaceConfigPtrOutputWithContext(ctx context.Context) FaceConfigPtrOutput {
	return o
}

func (o FaceConfigPtrOutput) Elem() FaceConfigOutput {
	return o.ApplyT(func(v *FaceConfig) FaceConfig {
		if v != nil {
			return *v
		}
		var ret FaceConfig
		return ret
	}).(FaceConfigOutput)
}

type FaceConfigArrayOutput struct{ *pulumi.OutputState }

func (FaceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FaceConfig)(nil))
}

func (o FaceConfigArrayOutput) ToFaceConfigArrayOutput() FaceConfigArrayOutput {
	return o
}

func (o FaceConfigArrayOutput) ToFaceConfigArrayOutputWithContext(ctx context.Context) FaceConfigArrayOutput {
	return o
}

func (o FaceConfigArrayOutput) Index(i pulumi.IntInput) FaceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FaceConfig {
		return vs[0].([]FaceConfig)[vs[1].(int)]
	}).(FaceConfigOutput)
}

type FaceConfigMapOutput struct{ *pulumi.OutputState }

func (FaceConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FaceConfig)(nil))
}

func (o FaceConfigMapOutput) ToFaceConfigMapOutput() FaceConfigMapOutput {
	return o
}

func (o FaceConfigMapOutput) ToFaceConfigMapOutputWithContext(ctx context.Context) FaceConfigMapOutput {
	return o
}

func (o FaceConfigMapOutput) MapIndex(k pulumi.StringInput) FaceConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FaceConfig {
		return vs[0].(map[string]FaceConfig)[vs[1].(string)]
	}).(FaceConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FaceConfigInput)(nil)).Elem(), &FaceConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*FaceConfigPtrInput)(nil)).Elem(), &FaceConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*FaceConfigArrayInput)(nil)).Elem(), FaceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FaceConfigMapInput)(nil)).Elem(), FaceConfigMap{})
	pulumi.RegisterOutputType(FaceConfigOutput{})
	pulumi.RegisterOutputType(FaceConfigPtrOutput{})
	pulumi.RegisterOutputType(FaceConfigArrayOutput{})
	pulumi.RegisterOutputType(FaceConfigMapOutput{})
}
