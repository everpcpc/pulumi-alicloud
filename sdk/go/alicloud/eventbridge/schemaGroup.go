// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventbridge

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SchemaGroup struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	Format      pulumi.StringOutput    `pulumi:"format"`
	GroupId     pulumi.StringOutput    `pulumi:"groupId"`
}

// NewSchemaGroup registers a new resource with the given unique name, arguments, and options.
func NewSchemaGroup(ctx *pulumi.Context,
	name string, args *SchemaGroupArgs, opts ...pulumi.ResourceOption) (*SchemaGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	var resource SchemaGroup
	err := ctx.RegisterResource("alicloud:eventbridge/schemaGroup:SchemaGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaGroup gets an existing SchemaGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaGroupState, opts ...pulumi.ResourceOption) (*SchemaGroup, error) {
	var resource SchemaGroup
	err := ctx.ReadResource("alicloud:eventbridge/schemaGroup:SchemaGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaGroup resources.
type schemaGroupState struct {
	Description *string `pulumi:"description"`
	Format      *string `pulumi:"format"`
	GroupId     *string `pulumi:"groupId"`
}

type SchemaGroupState struct {
	Description pulumi.StringPtrInput
	Format      pulumi.StringPtrInput
	GroupId     pulumi.StringPtrInput
}

func (SchemaGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaGroupState)(nil)).Elem()
}

type schemaGroupArgs struct {
	Description *string `pulumi:"description"`
	Format      *string `pulumi:"format"`
	GroupId     string  `pulumi:"groupId"`
}

// The set of arguments for constructing a SchemaGroup resource.
type SchemaGroupArgs struct {
	Description pulumi.StringPtrInput
	Format      pulumi.StringPtrInput
	GroupId     pulumi.StringInput
}

func (SchemaGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaGroupArgs)(nil)).Elem()
}

type SchemaGroupInput interface {
	pulumi.Input

	ToSchemaGroupOutput() SchemaGroupOutput
	ToSchemaGroupOutputWithContext(ctx context.Context) SchemaGroupOutput
}

func (*SchemaGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaGroup)(nil))
}

func (i *SchemaGroup) ToSchemaGroupOutput() SchemaGroupOutput {
	return i.ToSchemaGroupOutputWithContext(context.Background())
}

func (i *SchemaGroup) ToSchemaGroupOutputWithContext(ctx context.Context) SchemaGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaGroupOutput)
}

func (i *SchemaGroup) ToSchemaGroupPtrOutput() SchemaGroupPtrOutput {
	return i.ToSchemaGroupPtrOutputWithContext(context.Background())
}

func (i *SchemaGroup) ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaGroupPtrOutput)
}

type SchemaGroupPtrInput interface {
	pulumi.Input

	ToSchemaGroupPtrOutput() SchemaGroupPtrOutput
	ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput
}

type schemaGroupPtrType SchemaGroupArgs

func (*schemaGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaGroup)(nil))
}

func (i *schemaGroupPtrType) ToSchemaGroupPtrOutput() SchemaGroupPtrOutput {
	return i.ToSchemaGroupPtrOutputWithContext(context.Background())
}

func (i *schemaGroupPtrType) ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaGroupPtrOutput)
}

// SchemaGroupArrayInput is an input type that accepts SchemaGroupArray and SchemaGroupArrayOutput values.
// You can construct a concrete instance of `SchemaGroupArrayInput` via:
//
//          SchemaGroupArray{ SchemaGroupArgs{...} }
type SchemaGroupArrayInput interface {
	pulumi.Input

	ToSchemaGroupArrayOutput() SchemaGroupArrayOutput
	ToSchemaGroupArrayOutputWithContext(context.Context) SchemaGroupArrayOutput
}

type SchemaGroupArray []SchemaGroupInput

func (SchemaGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SchemaGroup)(nil))
}

func (i SchemaGroupArray) ToSchemaGroupArrayOutput() SchemaGroupArrayOutput {
	return i.ToSchemaGroupArrayOutputWithContext(context.Background())
}

func (i SchemaGroupArray) ToSchemaGroupArrayOutputWithContext(ctx context.Context) SchemaGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaGroupArrayOutput)
}

// SchemaGroupMapInput is an input type that accepts SchemaGroupMap and SchemaGroupMapOutput values.
// You can construct a concrete instance of `SchemaGroupMapInput` via:
//
//          SchemaGroupMap{ "key": SchemaGroupArgs{...} }
type SchemaGroupMapInput interface {
	pulumi.Input

	ToSchemaGroupMapOutput() SchemaGroupMapOutput
	ToSchemaGroupMapOutputWithContext(context.Context) SchemaGroupMapOutput
}

type SchemaGroupMap map[string]SchemaGroupInput

func (SchemaGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SchemaGroup)(nil))
}

func (i SchemaGroupMap) ToSchemaGroupMapOutput() SchemaGroupMapOutput {
	return i.ToSchemaGroupMapOutputWithContext(context.Background())
}

func (i SchemaGroupMap) ToSchemaGroupMapOutputWithContext(ctx context.Context) SchemaGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaGroupMapOutput)
}

type SchemaGroupOutput struct {
	*pulumi.OutputState
}

func (SchemaGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaGroup)(nil))
}

func (o SchemaGroupOutput) ToSchemaGroupOutput() SchemaGroupOutput {
	return o
}

func (o SchemaGroupOutput) ToSchemaGroupOutputWithContext(ctx context.Context) SchemaGroupOutput {
	return o
}

func (o SchemaGroupOutput) ToSchemaGroupPtrOutput() SchemaGroupPtrOutput {
	return o.ToSchemaGroupPtrOutputWithContext(context.Background())
}

func (o SchemaGroupOutput) ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput {
	return o.ApplyT(func(v SchemaGroup) *SchemaGroup {
		return &v
	}).(SchemaGroupPtrOutput)
}

type SchemaGroupPtrOutput struct {
	*pulumi.OutputState
}

func (SchemaGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaGroup)(nil))
}

func (o SchemaGroupPtrOutput) ToSchemaGroupPtrOutput() SchemaGroupPtrOutput {
	return o
}

func (o SchemaGroupPtrOutput) ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput {
	return o
}

type SchemaGroupArrayOutput struct{ *pulumi.OutputState }

func (SchemaGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaGroup)(nil))
}

func (o SchemaGroupArrayOutput) ToSchemaGroupArrayOutput() SchemaGroupArrayOutput {
	return o
}

func (o SchemaGroupArrayOutput) ToSchemaGroupArrayOutputWithContext(ctx context.Context) SchemaGroupArrayOutput {
	return o
}

func (o SchemaGroupArrayOutput) Index(i pulumi.IntInput) SchemaGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaGroup {
		return vs[0].([]SchemaGroup)[vs[1].(int)]
	}).(SchemaGroupOutput)
}

type SchemaGroupMapOutput struct{ *pulumi.OutputState }

func (SchemaGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SchemaGroup)(nil))
}

func (o SchemaGroupMapOutput) ToSchemaGroupMapOutput() SchemaGroupMapOutput {
	return o
}

func (o SchemaGroupMapOutput) ToSchemaGroupMapOutputWithContext(ctx context.Context) SchemaGroupMapOutput {
	return o
}

func (o SchemaGroupMapOutput) MapIndex(k pulumi.StringInput) SchemaGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SchemaGroup {
		return vs[0].(map[string]SchemaGroup)[vs[1].(string)]
	}).(SchemaGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(SchemaGroupOutput{})
	pulumi.RegisterOutputType(SchemaGroupPtrOutput{})
	pulumi.RegisterOutputType(SchemaGroupArrayOutput{})
	pulumi.RegisterOutputType(SchemaGroupMapOutput{})
}
