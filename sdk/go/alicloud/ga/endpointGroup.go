// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ga

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Global Accelerator (GA) Endpoint Group resource.
//
// For information about Global Accelerator (GA) Endpoint Group and how to use it, see [What is Endpoint Group](https://www.alibabacloud.com/help/en/doc-detail/153259.htm).
//
// > **NOTE:** Available in v1.113.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/ga"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ga.NewAccelerator(ctx, "exampleAccelerator", &ga.AcceleratorArgs{
// 			Duration:      pulumi.Int(1),
// 			AutoUseCoupon: pulumi.Bool(true),
// 			Spec:          pulumi.String("1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleListener, err := ga.NewListener(ctx, "exampleListener", &ga.ListenerArgs{
// 			AcceleratorId: pulumi.String("alicloud_ga_accelerator.example.id"),
// 			PortRanges: ga.ListenerPortRangeArray{
// 				&ga.ListenerPortRangeArgs{
// 					FromPort: pulumi.Int(60),
// 					ToPort:   pulumi.Int(70),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleEip, err := ecs.NewEip(ctx, "exampleEip", &ecs.EipArgs{
// 			Bandwidth:          pulumi.Int(10),
// 			InternetChargeType: pulumi.String("PayByBandwidth"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ga.NewEndpointGroup(ctx, "exampleEndpointGroup", &ga.EndpointGroupArgs{
// 			AcceleratorId: pulumi.Any(alicloud_ga_accelerators.Example.Id),
// 			EndpointConfigurations: ga.EndpointGroupEndpointConfigurationArray{
// 				&ga.EndpointGroupEndpointConfigurationArgs{
// 					Endpoint: exampleEip.IpAddress,
// 					Type:     pulumi.String("PublicIp"),
// 					Weight:   pulumi.Int(20),
// 				},
// 			},
// 			EndpointGroupRegion: pulumi.String("cn-hangzhou"),
// 			ListenerId:          exampleListener.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Ga Endpoint Group can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:ga/endpointGroup:EndpointGroup example <id>
// ```
type EndpointGroup struct {
	pulumi.CustomResourceState

	// The ID of the Global Accelerator instance to which the endpoint group will be added.
	AcceleratorId pulumi.StringOutput `pulumi:"acceleratorId"`
	// The description of the endpoint group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The endpointConfigurations of the endpoint group.
	EndpointConfigurations EndpointGroupEndpointConfigurationArrayOutput `pulumi:"endpointConfigurations"`
	// The ID of the region where the endpoint group is deployed.
	EndpointGroupRegion pulumi.StringOutput `pulumi:"endpointGroupRegion"`
	// The endpoint group type. Valid values: `default`, `virtual`. Default value is `default`.
	EndpointGroupType pulumi.StringPtrOutput `pulumi:"endpointGroupType"`
	// The endpoint request protocol.
	EndpointRequestProtocol pulumi.StringPtrOutput `pulumi:"endpointRequestProtocol"`
	// The interval between two consecutive health checks. Unit: seconds.
	HealthCheckIntervalSeconds pulumi.IntPtrOutput `pulumi:"healthCheckIntervalSeconds"`
	// The path specified as the destination of the targets for health checks.
	HealthCheckPath pulumi.StringPtrOutput `pulumi:"healthCheckPath"`
	// The port that is used for health checks.
	HealthCheckPort pulumi.IntPtrOutput `pulumi:"healthCheckPort"`
	// The protocol that is used to connect to the targets for health checks. Valid values: `http`, `https`, `tcp`.
	HealthCheckProtocol pulumi.StringPtrOutput `pulumi:"healthCheckProtocol"`
	// The ID of the listener that is associated with the endpoint group.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// The name of the endpoint group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Mapping between listening port and forwarding port of boarding point.
	PortOverrides EndpointGroupPortOverridesPtrOutput `pulumi:"portOverrides"`
	// The status of the endpoint group.
	Status pulumi.StringOutput `pulumi:"status"`
	// The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy. Default value is `3`.
	ThresholdCount pulumi.IntPtrOutput `pulumi:"thresholdCount"`
	// The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
	TrafficPercentage pulumi.IntPtrOutput `pulumi:"trafficPercentage"`
}

// NewEndpointGroup registers a new resource with the given unique name, arguments, and options.
func NewEndpointGroup(ctx *pulumi.Context,
	name string, args *EndpointGroupArgs, opts ...pulumi.ResourceOption) (*EndpointGroup, error) {
	if args == nil || args.AcceleratorId == nil {
		return nil, errors.New("missing required argument 'AcceleratorId'")
	}
	if args == nil || args.EndpointConfigurations == nil {
		return nil, errors.New("missing required argument 'EndpointConfigurations'")
	}
	if args == nil || args.EndpointGroupRegion == nil {
		return nil, errors.New("missing required argument 'EndpointGroupRegion'")
	}
	if args == nil || args.ListenerId == nil {
		return nil, errors.New("missing required argument 'ListenerId'")
	}
	if args == nil {
		args = &EndpointGroupArgs{}
	}
	var resource EndpointGroup
	err := ctx.RegisterResource("alicloud:ga/endpointGroup:EndpointGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointGroup gets an existing EndpointGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointGroupState, opts ...pulumi.ResourceOption) (*EndpointGroup, error) {
	var resource EndpointGroup
	err := ctx.ReadResource("alicloud:ga/endpointGroup:EndpointGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointGroup resources.
type endpointGroupState struct {
	// The ID of the Global Accelerator instance to which the endpoint group will be added.
	AcceleratorId *string `pulumi:"acceleratorId"`
	// The description of the endpoint group.
	Description *string `pulumi:"description"`
	// The endpointConfigurations of the endpoint group.
	EndpointConfigurations []EndpointGroupEndpointConfiguration `pulumi:"endpointConfigurations"`
	// The ID of the region where the endpoint group is deployed.
	EndpointGroupRegion *string `pulumi:"endpointGroupRegion"`
	// The endpoint group type. Valid values: `default`, `virtual`. Default value is `default`.
	EndpointGroupType *string `pulumi:"endpointGroupType"`
	// The endpoint request protocol.
	EndpointRequestProtocol *string `pulumi:"endpointRequestProtocol"`
	// The interval between two consecutive health checks. Unit: seconds.
	HealthCheckIntervalSeconds *int `pulumi:"healthCheckIntervalSeconds"`
	// The path specified as the destination of the targets for health checks.
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The port that is used for health checks.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// The protocol that is used to connect to the targets for health checks. Valid values: `http`, `https`, `tcp`.
	HealthCheckProtocol *string `pulumi:"healthCheckProtocol"`
	// The ID of the listener that is associated with the endpoint group.
	ListenerId *string `pulumi:"listenerId"`
	// The name of the endpoint group.
	Name *string `pulumi:"name"`
	// Mapping between listening port and forwarding port of boarding point.
	PortOverrides *EndpointGroupPortOverrides `pulumi:"portOverrides"`
	// The status of the endpoint group.
	Status *string `pulumi:"status"`
	// The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy. Default value is `3`.
	ThresholdCount *int `pulumi:"thresholdCount"`
	// The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
	TrafficPercentage *int `pulumi:"trafficPercentage"`
}

type EndpointGroupState struct {
	// The ID of the Global Accelerator instance to which the endpoint group will be added.
	AcceleratorId pulumi.StringPtrInput
	// The description of the endpoint group.
	Description pulumi.StringPtrInput
	// The endpointConfigurations of the endpoint group.
	EndpointConfigurations EndpointGroupEndpointConfigurationArrayInput
	// The ID of the region where the endpoint group is deployed.
	EndpointGroupRegion pulumi.StringPtrInput
	// The endpoint group type. Valid values: `default`, `virtual`. Default value is `default`.
	EndpointGroupType pulumi.StringPtrInput
	// The endpoint request protocol.
	EndpointRequestProtocol pulumi.StringPtrInput
	// The interval between two consecutive health checks. Unit: seconds.
	HealthCheckIntervalSeconds pulumi.IntPtrInput
	// The path specified as the destination of the targets for health checks.
	HealthCheckPath pulumi.StringPtrInput
	// The port that is used for health checks.
	HealthCheckPort pulumi.IntPtrInput
	// The protocol that is used to connect to the targets for health checks. Valid values: `http`, `https`, `tcp`.
	HealthCheckProtocol pulumi.StringPtrInput
	// The ID of the listener that is associated with the endpoint group.
	ListenerId pulumi.StringPtrInput
	// The name of the endpoint group.
	Name pulumi.StringPtrInput
	// Mapping between listening port and forwarding port of boarding point.
	PortOverrides EndpointGroupPortOverridesPtrInput
	// The status of the endpoint group.
	Status pulumi.StringPtrInput
	// The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy. Default value is `3`.
	ThresholdCount pulumi.IntPtrInput
	// The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
	TrafficPercentage pulumi.IntPtrInput
}

func (EndpointGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointGroupState)(nil)).Elem()
}

type endpointGroupArgs struct {
	// The ID of the Global Accelerator instance to which the endpoint group will be added.
	AcceleratorId string `pulumi:"acceleratorId"`
	// The description of the endpoint group.
	Description *string `pulumi:"description"`
	// The endpointConfigurations of the endpoint group.
	EndpointConfigurations []EndpointGroupEndpointConfiguration `pulumi:"endpointConfigurations"`
	// The ID of the region where the endpoint group is deployed.
	EndpointGroupRegion string `pulumi:"endpointGroupRegion"`
	// The endpoint group type. Valid values: `default`, `virtual`. Default value is `default`.
	EndpointGroupType *string `pulumi:"endpointGroupType"`
	// The endpoint request protocol.
	EndpointRequestProtocol *string `pulumi:"endpointRequestProtocol"`
	// The interval between two consecutive health checks. Unit: seconds.
	HealthCheckIntervalSeconds *int `pulumi:"healthCheckIntervalSeconds"`
	// The path specified as the destination of the targets for health checks.
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The port that is used for health checks.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// The protocol that is used to connect to the targets for health checks. Valid values: `http`, `https`, `tcp`.
	HealthCheckProtocol *string `pulumi:"healthCheckProtocol"`
	// The ID of the listener that is associated with the endpoint group.
	ListenerId string `pulumi:"listenerId"`
	// The name of the endpoint group.
	Name *string `pulumi:"name"`
	// Mapping between listening port and forwarding port of boarding point.
	PortOverrides *EndpointGroupPortOverrides `pulumi:"portOverrides"`
	// The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy. Default value is `3`.
	ThresholdCount *int `pulumi:"thresholdCount"`
	// The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
	TrafficPercentage *int `pulumi:"trafficPercentage"`
}

// The set of arguments for constructing a EndpointGroup resource.
type EndpointGroupArgs struct {
	// The ID of the Global Accelerator instance to which the endpoint group will be added.
	AcceleratorId pulumi.StringInput
	// The description of the endpoint group.
	Description pulumi.StringPtrInput
	// The endpointConfigurations of the endpoint group.
	EndpointConfigurations EndpointGroupEndpointConfigurationArrayInput
	// The ID of the region where the endpoint group is deployed.
	EndpointGroupRegion pulumi.StringInput
	// The endpoint group type. Valid values: `default`, `virtual`. Default value is `default`.
	EndpointGroupType pulumi.StringPtrInput
	// The endpoint request protocol.
	EndpointRequestProtocol pulumi.StringPtrInput
	// The interval between two consecutive health checks. Unit: seconds.
	HealthCheckIntervalSeconds pulumi.IntPtrInput
	// The path specified as the destination of the targets for health checks.
	HealthCheckPath pulumi.StringPtrInput
	// The port that is used for health checks.
	HealthCheckPort pulumi.IntPtrInput
	// The protocol that is used to connect to the targets for health checks. Valid values: `http`, `https`, `tcp`.
	HealthCheckProtocol pulumi.StringPtrInput
	// The ID of the listener that is associated with the endpoint group.
	ListenerId pulumi.StringInput
	// The name of the endpoint group.
	Name pulumi.StringPtrInput
	// Mapping between listening port and forwarding port of boarding point.
	PortOverrides EndpointGroupPortOverridesPtrInput
	// The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy. Default value is `3`.
	ThresholdCount pulumi.IntPtrInput
	// The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
	TrafficPercentage pulumi.IntPtrInput
}

func (EndpointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointGroupArgs)(nil)).Elem()
}

type EndpointGroupInput interface {
	pulumi.Input

	ToEndpointGroupOutput() EndpointGroupOutput
	ToEndpointGroupOutputWithContext(ctx context.Context) EndpointGroupOutput
}

func (EndpointGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointGroup)(nil)).Elem()
}

func (i EndpointGroup) ToEndpointGroupOutput() EndpointGroupOutput {
	return i.ToEndpointGroupOutputWithContext(context.Background())
}

func (i EndpointGroup) ToEndpointGroupOutputWithContext(ctx context.Context) EndpointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointGroupOutput)
}

type EndpointGroupOutput struct {
	*pulumi.OutputState
}

func (EndpointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointGroupOutput)(nil)).Elem()
}

func (o EndpointGroupOutput) ToEndpointGroupOutput() EndpointGroupOutput {
	return o
}

func (o EndpointGroupOutput) ToEndpointGroupOutputWithContext(ctx context.Context) EndpointGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EndpointGroupOutput{})
}
