// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package polardb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a PolarDB database resource. A DB database deployed in a DB cluster. A DB cluster can own multiple databases.
// 
// > **NOTE:** Available in v1.66.0+.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/polardb_database.html.markdown.
type Database struct {
	s *pulumi.ResourceState
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOpt) (*Database, error) {
	if args == nil || args.DbClusterId == nil {
		return nil, errors.New("missing required argument 'DbClusterId'")
	}
	if args == nil || args.DbName == nil {
		return nil, errors.New("missing required argument 'DbName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["characterSetName"] = nil
		inputs["dbClusterId"] = nil
		inputs["dbDescription"] = nil
		inputs["dbName"] = nil
	} else {
		inputs["characterSetName"] = args.CharacterSetName
		inputs["dbClusterId"] = args.DbClusterId
		inputs["dbDescription"] = args.DbDescription
		inputs["dbName"] = args.DbName
	}
	s, err := ctx.RegisterResource("alicloud:polardb/database:Database", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Database{s: s}, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatabaseState, opts ...pulumi.ResourceOpt) (*Database, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["characterSetName"] = state.CharacterSetName
		inputs["dbClusterId"] = state.DbClusterId
		inputs["dbDescription"] = state.DbDescription
		inputs["dbName"] = state.DbName
	}
	s, err := ctx.ReadResource("alicloud:polardb/database:Database", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Database{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Database) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Database) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Character set. The value range is limited to the following: [ utf8, gbk, latin1, utf8mb4, Chinese_PRC_CI_AS, Chinese_PRC_CS_AS, SQL_Latin1_General_CP1_CI_AS, SQL_Latin1_General_CP1_CS_AS, Chinese_PRC_BIN ], default is "utf8" \(`utf8mb4` only supports versions 5.5 and 5.6\).
func (r *Database) CharacterSetName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["characterSetName"])
}

// The Id of cluster that can run database.
func (r *Database) DbClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dbClusterId"])
}

// Database description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
func (r *Database) DbDescription() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dbDescription"])
}

// Name of the database requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letterand have no more than 64 characters.
func (r *Database) DbName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dbName"])
}

// Input properties used for looking up and filtering Database resources.
type DatabaseState struct {
	// Character set. The value range is limited to the following: [ utf8, gbk, latin1, utf8mb4, Chinese_PRC_CI_AS, Chinese_PRC_CS_AS, SQL_Latin1_General_CP1_CI_AS, SQL_Latin1_General_CP1_CS_AS, Chinese_PRC_BIN ], default is "utf8" \(`utf8mb4` only supports versions 5.5 and 5.6\).
	CharacterSetName interface{}
	// The Id of cluster that can run database.
	DbClusterId interface{}
	// Database description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	DbDescription interface{}
	// Name of the database requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letterand have no more than 64 characters.
	DbName interface{}
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// Character set. The value range is limited to the following: [ utf8, gbk, latin1, utf8mb4, Chinese_PRC_CI_AS, Chinese_PRC_CS_AS, SQL_Latin1_General_CP1_CI_AS, SQL_Latin1_General_CP1_CS_AS, Chinese_PRC_BIN ], default is "utf8" \(`utf8mb4` only supports versions 5.5 and 5.6\).
	CharacterSetName interface{}
	// The Id of cluster that can run database.
	DbClusterId interface{}
	// Database description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	DbDescription interface{}
	// Name of the database requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letterand have no more than 64 characters.
	DbName interface{}
}
