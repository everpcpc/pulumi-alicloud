// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/vswitch.html.markdown.
type Switch struct {
	s *pulumi.ResourceState
}

// NewSwitch registers a new resource with the given unique name, arguments, and options.
func NewSwitch(ctx *pulumi.Context,
	name string, args *SwitchArgs, opts ...pulumi.ResourceOpt) (*Switch, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZone"] = nil
		inputs["cidrBlock"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["cidrBlock"] = args.CidrBlock
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
		inputs["vpcId"] = args.VpcId
	}
	s, err := ctx.RegisterResource("alicloud:vpc/switch:Switch", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Switch{s: s}, nil
}

// GetSwitch gets an existing Switch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitch(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SwitchState, opts ...pulumi.ResourceOpt) (*Switch, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["cidrBlock"] = state.CidrBlock
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("alicloud:vpc/switch:Switch", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Switch{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Switch) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Switch) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The AZ for the switch.
func (r *Switch) AvailabilityZone() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["availabilityZone"])
}

// The CIDR block for the switch.
func (r *Switch) CidrBlock() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cidrBlock"])
}

// The switch description. Defaults to null.
func (r *Switch) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The name of the switch. Defaults to null.
func (r *Switch) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A mapping of tags to assign to the resource.
func (r *Switch) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// The VPC ID.
func (r *Switch) VpcId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering Switch resources.
type SwitchState struct {
	// The AZ for the switch.
	AvailabilityZone interface{}
	// The CIDR block for the switch.
	CidrBlock interface{}
	// The switch description. Defaults to null.
	Description interface{}
	// The name of the switch. Defaults to null.
	Name interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The VPC ID.
	VpcId interface{}
}

// The set of arguments for constructing a Switch resource.
type SwitchArgs struct {
	// The AZ for the switch.
	AvailabilityZone interface{}
	// The CIDR block for the switch.
	CidrBlock interface{}
	// The switch description. Defaults to null.
	Description interface{}
	// The name of the switch. Defaults to null.
	Name interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The VPC ID.
	VpcId interface{}
}
