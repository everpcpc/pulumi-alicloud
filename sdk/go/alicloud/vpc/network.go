// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a VPC resource.
// 
// ~> **NOTE:** Terraform will auto build a router and a route table while it uses `alicloud_vpc` to build a vpc resource.
type Network struct {
	s *pulumi.ResourceState
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOpt) (*Network, error) {
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cidrBlock"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
	} else {
		inputs["cidrBlock"] = args.CidrBlock
		inputs["description"] = args.Description
		inputs["name"] = args.Name
	}
	inputs["routeTableId"] = nil
	inputs["routerId"] = nil
	inputs["routerTableId"] = nil
	s, err := ctx.RegisterResource("alicloud:vpc/network:Network", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Network{s: s}, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkState, opts ...pulumi.ResourceOpt) (*Network, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cidrBlock"] = state.CidrBlock
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["routeTableId"] = state.RouteTableId
		inputs["routerId"] = state.RouterId
		inputs["routerTableId"] = state.RouterTableId
	}
	s, err := ctx.ReadResource("alicloud:vpc/network:Network", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Network{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Network) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Network) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The CIDR block for the VPC.
func (r *Network) CidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidrBlock"])
}

// The VPC description. Defaults to null.
func (r *Network) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The name of the VPC. Defaults to null.
func (r *Network) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The route table ID of the router created by default on VPC creation.
func (r *Network) RouteTableId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["routeTableId"])
}

// The ID of the router created by default on VPC creation.
func (r *Network) RouterId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["routerId"])
}

func (r *Network) RouterTableId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["routerTableId"])
}

// Input properties used for looking up and filtering Network resources.
type NetworkState struct {
	// The CIDR block for the VPC.
	CidrBlock interface{}
	// The VPC description. Defaults to null.
	Description interface{}
	// The name of the VPC. Defaults to null.
	Name interface{}
	// The route table ID of the router created by default on VPC creation.
	RouteTableId interface{}
	// The ID of the router created by default on VPC creation.
	RouterId interface{}
	RouterTableId interface{}
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// The CIDR block for the VPC.
	CidrBlock interface{}
	// The VPC description. Defaults to null.
	Description interface{}
	// The name of the VPC. Defaults to null.
	Name interface{}
}
