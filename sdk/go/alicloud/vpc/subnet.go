// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Subnet struct {
	s *pulumi.ResourceState
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZone"] = nil
		inputs["cidrBlock"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["cidrBlock"] = args.CidrBlock
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["vpcId"] = args.VpcId
	}
	s, err := ctx.RegisterResource("alicloud:vpc/subnet:Subnet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetState, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["cidrBlock"] = state.CidrBlock
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("alicloud:vpc/subnet:Subnet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subnet) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subnet) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *Subnet) AvailabilityZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["availabilityZone"])
}

func (r *Subnet) CidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidrBlock"])
}

func (r *Subnet) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *Subnet) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Subnet) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering Subnet resources.
type SubnetState struct {
	AvailabilityZone interface{}
	CidrBlock interface{}
	Description interface{}
	Name interface{}
	VpcId interface{}
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	AvailabilityZone interface{}
	CidrBlock interface{}
	Description interface{}
	Name interface{}
	VpcId interface{}
}
