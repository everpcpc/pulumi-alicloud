// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package vpc

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Subnet struct {
	pulumi.CustomResourceState

	AvailabilityZone pulumi.StringOutput    `pulumi:"availabilityZone"`
	CidrBlock        pulumi.StringOutput    `pulumi:"cidrBlock"`
	Description      pulumi.StringPtrOutput `pulumi:"description"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	Tags             pulumi.MapOutput       `pulumi:"tags"`
	VpcId            pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	if args == nil {
		args = &SubnetArgs{}
	}
	var resource Subnet
	err := ctx.RegisterResource("alicloud:vpc/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("alicloud:vpc/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	AvailabilityZone *string                `pulumi:"availabilityZone"`
	CidrBlock        *string                `pulumi:"cidrBlock"`
	Description      *string                `pulumi:"description"`
	Name             *string                `pulumi:"name"`
	Tags             map[string]interface{} `pulumi:"tags"`
	VpcId            *string                `pulumi:"vpcId"`
}

type SubnetState struct {
	AvailabilityZone pulumi.StringPtrInput
	CidrBlock        pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Tags             pulumi.MapInput
	VpcId            pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	AvailabilityZone string                 `pulumi:"availabilityZone"`
	CidrBlock        string                 `pulumi:"cidrBlock"`
	Description      *string                `pulumi:"description"`
	Name             *string                `pulumi:"name"`
	Tags             map[string]interface{} `pulumi:"tags"`
	VpcId            string                 `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	AvailabilityZone pulumi.StringInput
	CidrBlock        pulumi.StringInput
	Description      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Tags             pulumi.MapInput
	VpcId            pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}
