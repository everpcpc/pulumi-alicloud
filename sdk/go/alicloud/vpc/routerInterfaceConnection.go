// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a VPC router interface connection resource to connect two router interfaces which are in two different VPCs.
// After that, all of the two router interfaces will be active.
// 
// > **NOTE:** At present, Router interface does not support changing opposite router interface, the connection delete action is only deactivating it to inactive, not modifying the connection to empty.
// 
// > **NOTE:** If you want to changing opposite router interface, you can delete router interface and re-build them.
// 
// > **NOTE:** A integrated router interface connection tunnel requires both InitiatingSide and AcceptingSide configuring opposite router interface.
// 
// > **NOTE:** Please remember to add a `dependsOn` clause in the router interface connection from the InitiatingSide to the AcceptingSide, because the connection from the AcceptingSide to the InitiatingSide must be done first.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/router_interface_connection.html.markdown.
type RouterInterfaceConnection struct {
	s *pulumi.ResourceState
}

// NewRouterInterfaceConnection registers a new resource with the given unique name, arguments, and options.
func NewRouterInterfaceConnection(ctx *pulumi.Context,
	name string, args *RouterInterfaceConnectionArgs, opts ...pulumi.ResourceOpt) (*RouterInterfaceConnection, error) {
	if args == nil || args.InterfaceId == nil {
		return nil, errors.New("missing required argument 'InterfaceId'")
	}
	if args == nil || args.OppositeInterfaceId == nil {
		return nil, errors.New("missing required argument 'OppositeInterfaceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["interfaceId"] = nil
		inputs["oppositeInterfaceId"] = nil
		inputs["oppositeInterfaceOwnerId"] = nil
		inputs["oppositeRouterId"] = nil
		inputs["oppositeRouterType"] = nil
	} else {
		inputs["interfaceId"] = args.InterfaceId
		inputs["oppositeInterfaceId"] = args.OppositeInterfaceId
		inputs["oppositeInterfaceOwnerId"] = args.OppositeInterfaceOwnerId
		inputs["oppositeRouterId"] = args.OppositeRouterId
		inputs["oppositeRouterType"] = args.OppositeRouterType
	}
	s, err := ctx.RegisterResource("alicloud:vpc/routerInterfaceConnection:RouterInterfaceConnection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouterInterfaceConnection{s: s}, nil
}

// GetRouterInterfaceConnection gets an existing RouterInterfaceConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterInterfaceConnection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouterInterfaceConnectionState, opts ...pulumi.ResourceOpt) (*RouterInterfaceConnection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["interfaceId"] = state.InterfaceId
		inputs["oppositeInterfaceId"] = state.OppositeInterfaceId
		inputs["oppositeInterfaceOwnerId"] = state.OppositeInterfaceOwnerId
		inputs["oppositeRouterId"] = state.OppositeRouterId
		inputs["oppositeRouterType"] = state.OppositeRouterType
	}
	s, err := ctx.ReadResource("alicloud:vpc/routerInterfaceConnection:RouterInterfaceConnection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouterInterfaceConnection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RouterInterfaceConnection) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RouterInterfaceConnection) ID() pulumi.IDOutput {
	return r.s.ID()
}

// One side router interface ID.
func (r *RouterInterfaceConnection) InterfaceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["interfaceId"])
}

// Another side router interface ID. It must belong the specified "oppositeInterfaceOwnerId" account.
func (r *RouterInterfaceConnection) OppositeInterfaceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oppositeInterfaceId"])
}

func (r *RouterInterfaceConnection) OppositeInterfaceOwnerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oppositeInterfaceOwnerId"])
}

// Another side router ID. It must belong the specified "oppositeInterfaceOwnerId" account. It is valid when field "oppositeInterfaceOwnerId" is specified.
func (r *RouterInterfaceConnection) OppositeRouterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oppositeRouterId"])
}

// Another side router Type. Optional value: VRouter, VBR. It is valid when field "oppositeInterfaceOwnerId" is specified.
func (r *RouterInterfaceConnection) OppositeRouterType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oppositeRouterType"])
}

// Input properties used for looking up and filtering RouterInterfaceConnection resources.
type RouterInterfaceConnectionState struct {
	// One side router interface ID.
	InterfaceId interface{}
	// Another side router interface ID. It must belong the specified "oppositeInterfaceOwnerId" account.
	OppositeInterfaceId interface{}
	OppositeInterfaceOwnerId interface{}
	// Another side router ID. It must belong the specified "oppositeInterfaceOwnerId" account. It is valid when field "oppositeInterfaceOwnerId" is specified.
	OppositeRouterId interface{}
	// Another side router Type. Optional value: VRouter, VBR. It is valid when field "oppositeInterfaceOwnerId" is specified.
	OppositeRouterType interface{}
}

// The set of arguments for constructing a RouterInterfaceConnection resource.
type RouterInterfaceConnectionArgs struct {
	// One side router interface ID.
	InterfaceId interface{}
	// Another side router interface ID. It must belong the specified "oppositeInterfaceOwnerId" account.
	OppositeInterfaceId interface{}
	OppositeInterfaceOwnerId interface{}
	// Another side router ID. It must belong the specified "oppositeInterfaceOwnerId" account. It is valid when field "oppositeInterfaceOwnerId" is specified.
	OppositeRouterId interface{}
	// Another side router Type. Optional value: VRouter, VBR. It is valid when field "oppositeInterfaceOwnerId" is specified.
	OppositeRouterType interface{}
}
