// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/route_table.html.markdown.
type RouteTable struct {
	s *pulumi.ResourceState
}

// NewRouteTable registers a new resource with the given unique name, arguments, and options.
func NewRouteTable(ctx *pulumi.Context,
	name string, args *RouteTableArgs, opts ...pulumi.ResourceOpt) (*RouteTable, error) {
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
		inputs["vpcId"] = args.VpcId
	}
	s, err := ctx.RegisterResource("alicloud:vpc/routeTable:RouteTable", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouteTable{s: s}, nil
}

// GetRouteTable gets an existing RouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTable(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouteTableState, opts ...pulumi.ResourceOpt) (*RouteTable, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("alicloud:vpc/routeTable:RouteTable", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouteTable{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RouteTable) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RouteTable) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The description of the route table instance.
func (r *RouteTable) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The name of the route table.
func (r *RouteTable) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A mapping of tags to assign to the resource.
func (r *RouteTable) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// The vpcId of the route table, the field can't be changed.
func (r *RouteTable) VpcId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering RouteTable resources.
type RouteTableState struct {
	// The description of the route table instance.
	Description interface{}
	// The name of the route table.
	Name interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The vpcId of the route table, the field can't be changed.
	VpcId interface{}
}

// The set of arguments for constructing a RouteTable resource.
type RouteTableArgs struct {
	// The description of the route table instance.
	Description interface{}
	// The name of the route table.
	Name interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The vpcId of the route table, the field can't be changed.
	VpcId interface{}
}
