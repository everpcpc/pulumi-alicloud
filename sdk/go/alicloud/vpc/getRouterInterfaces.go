// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This data source provides information about [router interfaces](https://www.alibabacloud.com/help/doc-detail/52412.htm)
// that connect VPCs together.
func LookupRouterInterfaces(ctx *pulumi.Context, args *GetRouterInterfacesArgs) (*GetRouterInterfacesResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["nameRegex"] = args.NameRegex
		inputs["oppositeInterfaceId"] = args.OppositeInterfaceId
		inputs["oppositeInterfaceOwnerId"] = args.OppositeInterfaceOwnerId
		inputs["outputFile"] = args.OutputFile
		inputs["role"] = args.Role
		inputs["routerId"] = args.RouterId
		inputs["routerType"] = args.RouterType
		inputs["specification"] = args.Specification
		inputs["status"] = args.Status
	}
	outputs, err := ctx.Invoke("alicloud:vpc/getRouterInterfaces:getRouterInterfaces", inputs)
	if err != nil {
		return nil, err
	}
	return &GetRouterInterfacesResult{
		Interfaces: outputs["interfaces"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getRouterInterfaces.
type GetRouterInterfacesArgs struct {
	// A regex string used to filter by router interface name.
	NameRegex interface{}
	// ID of the peer router interface.
	OppositeInterfaceId interface{}
	// Account ID of the owner of the peer router interface.
	OppositeInterfaceOwnerId interface{}
	// File name where to save data source results (after running `terraform plan`).
	OutputFile interface{}
	// Role of the router interface. Valid values are `InitiatingSide` (connection initiator) and 
	// `AcceptingSide` (connection receiver). The value of this parameter must be `InitiatingSide` if the `router_type` is set to `VBR`.
	Role interface{}
	// ID of the VRouter located in the local region.
	RouterId interface{}
	// Router type in the local region. Valid values are `VRouter` and `VBR` (physical connection).
	RouterType interface{}
	// Specification of the link, such as `Small.1` (10Mb), `Middle.1` (100Mb), `Large.2` (2Gb), ...etc.
	Specification interface{}
	// Expected status. Valid values are `Active`, `Inactive` and `Idle`.
	Status interface{}
}

// A collection of values returned by getRouterInterfaces.
type GetRouterInterfacesResult struct {
	// A list of router interfaces. Each element contains the following attributes:
	Interfaces interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
