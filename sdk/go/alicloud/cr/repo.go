// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource will help you to manager Container Registry repositories.
// 
// > **NOTE:** Available in v1.35.0+.
// 
// > **NOTE:** You need to set your registry password in Container Registry console before use this resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cr_repo.html.markdown.
type Repo struct {
	s *pulumi.ResourceState
}

// NewRepo registers a new resource with the given unique name, arguments, and options.
func NewRepo(ctx *pulumi.Context,
	name string, args *RepoArgs, opts ...pulumi.ResourceOpt) (*Repo, error) {
	if args == nil || args.Namespace == nil {
		return nil, errors.New("missing required argument 'Namespace'")
	}
	if args == nil || args.RepoType == nil {
		return nil, errors.New("missing required argument 'RepoType'")
	}
	if args == nil || args.Summary == nil {
		return nil, errors.New("missing required argument 'Summary'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["detail"] = nil
		inputs["name"] = nil
		inputs["namespace"] = nil
		inputs["repoType"] = nil
		inputs["summary"] = nil
	} else {
		inputs["detail"] = args.Detail
		inputs["name"] = args.Name
		inputs["namespace"] = args.Namespace
		inputs["repoType"] = args.RepoType
		inputs["summary"] = args.Summary
	}
	inputs["domainList"] = nil
	s, err := ctx.RegisterResource("alicloud:cr/repo:Repo", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Repo{s: s}, nil
}

// GetRepo gets an existing Repo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepo(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RepoState, opts ...pulumi.ResourceOpt) (*Repo, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["detail"] = state.Detail
		inputs["domainList"] = state.DomainList
		inputs["name"] = state.Name
		inputs["namespace"] = state.Namespace
		inputs["repoType"] = state.RepoType
		inputs["summary"] = state.Summary
	}
	s, err := ctx.ReadResource("alicloud:cr/repo:Repo", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Repo{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Repo) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Repo) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The repository specific information. MarkDown format is supported, and the length limit is 2000.
func (r *Repo) Detail() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["detail"])
}

// The repository domain list.
func (r *Repo) DomainList() pulumi.Output {
	return r.s.State["domainList"]
}

// Name of container registry repository.
func (r *Repo) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Name of container registry namespace where repository is located.
func (r *Repo) Namespace() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["namespace"])
}

// `PUBLIC` or `PRIVATE`, repo's visibility.
func (r *Repo) RepoType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["repoType"])
}

// The repository general information. It can contain 1 to 80 characters.
func (r *Repo) Summary() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["summary"])
}

// Input properties used for looking up and filtering Repo resources.
type RepoState struct {
	// The repository specific information. MarkDown format is supported, and the length limit is 2000.
	Detail interface{}
	// The repository domain list.
	DomainList interface{}
	// Name of container registry repository.
	Name interface{}
	// Name of container registry namespace where repository is located.
	Namespace interface{}
	// `PUBLIC` or `PRIVATE`, repo's visibility.
	RepoType interface{}
	// The repository general information. It can contain 1 to 80 characters.
	Summary interface{}
}

// The set of arguments for constructing a Repo resource.
type RepoArgs struct {
	// The repository specific information. MarkDown format is supported, and the length limit is 2000.
	Detail interface{}
	// Name of container registry repository.
	Name interface{}
	// Name of container registry namespace where repository is located.
	Namespace interface{}
	// `PUBLIC` or `PRIVATE`, repo's visibility.
	RepoType interface{}
	// The repository general information. It can contain 1 to 80 characters.
	Summary interface{}
}
