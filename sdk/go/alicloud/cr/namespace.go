// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource will help you to manager Container Registry namespaces.
// 
// > **NOTE:** Available in v1.34.0+.
// 
// > **NOTE:** You need to set your registry password in Container Registry console before use this resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cr_namespace.html.markdown.
type Namespace struct {
	s *pulumi.ResourceState
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOpt) (*Namespace, error) {
	if args == nil || args.AutoCreate == nil {
		return nil, errors.New("missing required argument 'AutoCreate'")
	}
	if args == nil || args.DefaultVisibility == nil {
		return nil, errors.New("missing required argument 'DefaultVisibility'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoCreate"] = nil
		inputs["defaultVisibility"] = nil
		inputs["name"] = nil
	} else {
		inputs["autoCreate"] = args.AutoCreate
		inputs["defaultVisibility"] = args.DefaultVisibility
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("alicloud:cr/namespace:Namespace", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Namespace{s: s}, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NamespaceState, opts ...pulumi.ResourceOpt) (*Namespace, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoCreate"] = state.AutoCreate
		inputs["defaultVisibility"] = state.DefaultVisibility
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("alicloud:cr/namespace:Namespace", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Namespace{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Namespace) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Namespace) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Boolean, when it set to true, repositories are automatically created when pushing new images. If it set to false, you create repository for images before pushing.
func (r *Namespace) AutoCreate() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoCreate"])
}

// `PUBLIC` or `PRIVATE`, default repository visibility in this namespace.
func (r *Namespace) DefaultVisibility() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultVisibility"])
}

// Name of Container Registry namespace.
func (r *Namespace) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Namespace resources.
type NamespaceState struct {
	// Boolean, when it set to true, repositories are automatically created when pushing new images. If it set to false, you create repository for images before pushing.
	AutoCreate interface{}
	// `PUBLIC` or `PRIVATE`, default repository visibility in this namespace.
	DefaultVisibility interface{}
	// Name of Container Registry namespace.
	Name interface{}
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// Boolean, when it set to true, repositories are automatically created when pushing new images. If it set to false, you create repository for images before pushing.
	AutoCreate interface{}
	// `PUBLIC` or `PRIVATE`, default repository visibility in this namespace.
	DefaultVisibility interface{}
	// Name of Container Registry namespace.
	Name interface{}
}
