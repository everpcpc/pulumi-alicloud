// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Cloud Monitor Service Monitor Group resource.
//
// For information about Cloud Monitor Service Monitor Group and how to use it, see [What is Monitor Group](https://www.alibabacloud.com/help/en/doc-detail/115030.htm).
//
// > **NOTE:** Available in v1.113.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/cms"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cms.NewMonitorGroup(ctx, "example", &cms.MonitorGroupArgs{
// 			MonitorGroupName: pulumi.String("tf-testaccmonitorgroup"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cloud Monitor Service Monitor Group can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:cms/monitorGroup:MonitorGroup example <id>
// ```
type MonitorGroup struct {
	pulumi.CustomResourceState

	// The alert group to which alert notifications will be sent.
	ContactGroups pulumi.StringArrayOutput `pulumi:"contactGroups"`
	// The name of the application group.
	MonitorGroupName pulumi.StringOutput `pulumi:"monitorGroupName"`
	Tags             pulumi.MapOutput    `pulumi:"tags"`
}

// NewMonitorGroup registers a new resource with the given unique name, arguments, and options.
func NewMonitorGroup(ctx *pulumi.Context,
	name string, args *MonitorGroupArgs, opts ...pulumi.ResourceOption) (*MonitorGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorGroupName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorGroupName'")
	}
	var resource MonitorGroup
	err := ctx.RegisterResource("alicloud:cms/monitorGroup:MonitorGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitorGroup gets an existing MonitorGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitorGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorGroupState, opts ...pulumi.ResourceOption) (*MonitorGroup, error) {
	var resource MonitorGroup
	err := ctx.ReadResource("alicloud:cms/monitorGroup:MonitorGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitorGroup resources.
type monitorGroupState struct {
	// The alert group to which alert notifications will be sent.
	ContactGroups []string `pulumi:"contactGroups"`
	// The name of the application group.
	MonitorGroupName *string                `pulumi:"monitorGroupName"`
	Tags             map[string]interface{} `pulumi:"tags"`
}

type MonitorGroupState struct {
	// The alert group to which alert notifications will be sent.
	ContactGroups pulumi.StringArrayInput
	// The name of the application group.
	MonitorGroupName pulumi.StringPtrInput
	Tags             pulumi.MapInput
}

func (MonitorGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorGroupState)(nil)).Elem()
}

type monitorGroupArgs struct {
	// The alert group to which alert notifications will be sent.
	ContactGroups []string `pulumi:"contactGroups"`
	// The name of the application group.
	MonitorGroupName string                 `pulumi:"monitorGroupName"`
	Tags             map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a MonitorGroup resource.
type MonitorGroupArgs struct {
	// The alert group to which alert notifications will be sent.
	ContactGroups pulumi.StringArrayInput
	// The name of the application group.
	MonitorGroupName pulumi.StringInput
	Tags             pulumi.MapInput
}

func (MonitorGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorGroupArgs)(nil)).Elem()
}

type MonitorGroupInput interface {
	pulumi.Input

	ToMonitorGroupOutput() MonitorGroupOutput
	ToMonitorGroupOutputWithContext(ctx context.Context) MonitorGroupOutput
}

func (*MonitorGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorGroup)(nil))
}

func (i *MonitorGroup) ToMonitorGroupOutput() MonitorGroupOutput {
	return i.ToMonitorGroupOutputWithContext(context.Background())
}

func (i *MonitorGroup) ToMonitorGroupOutputWithContext(ctx context.Context) MonitorGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorGroupOutput)
}

type MonitorGroupOutput struct {
	*pulumi.OutputState
}

func (MonitorGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorGroup)(nil))
}

func (o MonitorGroupOutput) ToMonitorGroupOutput() MonitorGroupOutput {
	return o
}

func (o MonitorGroupOutput) ToMonitorGroupOutputWithContext(ctx context.Context) MonitorGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MonitorGroupOutput{})
}
