// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eci

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ImageCacheImageRegistryCredential struct {
	// The password of the Image Registry.
	Password *string `pulumi:"password"`
	// The address of Image Registry without `http://` or `https://`.
	Server *string `pulumi:"server"`
	// The user name of Image Registry.
	UserName *string `pulumi:"userName"`
}

// ImageCacheImageRegistryCredentialInput is an input type that accepts ImageCacheImageRegistryCredentialArgs and ImageCacheImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ImageCacheImageRegistryCredentialInput` via:
//
//          ImageCacheImageRegistryCredentialArgs{...}
type ImageCacheImageRegistryCredentialInput interface {
	pulumi.Input

	ToImageCacheImageRegistryCredentialOutput() ImageCacheImageRegistryCredentialOutput
	ToImageCacheImageRegistryCredentialOutputWithContext(context.Context) ImageCacheImageRegistryCredentialOutput
}

type ImageCacheImageRegistryCredentialArgs struct {
	// The password of the Image Registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The address of Image Registry without `http://` or `https://`.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// The user name of Image Registry.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ImageCacheImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageCacheImageRegistryCredential)(nil)).Elem()
}

func (i ImageCacheImageRegistryCredentialArgs) ToImageCacheImageRegistryCredentialOutput() ImageCacheImageRegistryCredentialOutput {
	return i.ToImageCacheImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ImageCacheImageRegistryCredentialArgs) ToImageCacheImageRegistryCredentialOutputWithContext(ctx context.Context) ImageCacheImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCacheImageRegistryCredentialOutput)
}

// ImageCacheImageRegistryCredentialArrayInput is an input type that accepts ImageCacheImageRegistryCredentialArray and ImageCacheImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `ImageCacheImageRegistryCredentialArrayInput` via:
//
//          ImageCacheImageRegistryCredentialArray{ ImageCacheImageRegistryCredentialArgs{...} }
type ImageCacheImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToImageCacheImageRegistryCredentialArrayOutput() ImageCacheImageRegistryCredentialArrayOutput
	ToImageCacheImageRegistryCredentialArrayOutputWithContext(context.Context) ImageCacheImageRegistryCredentialArrayOutput
}

type ImageCacheImageRegistryCredentialArray []ImageCacheImageRegistryCredentialInput

func (ImageCacheImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageCacheImageRegistryCredential)(nil)).Elem()
}

func (i ImageCacheImageRegistryCredentialArray) ToImageCacheImageRegistryCredentialArrayOutput() ImageCacheImageRegistryCredentialArrayOutput {
	return i.ToImageCacheImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i ImageCacheImageRegistryCredentialArray) ToImageCacheImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageCacheImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCacheImageRegistryCredentialArrayOutput)
}

type ImageCacheImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ImageCacheImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageCacheImageRegistryCredential)(nil)).Elem()
}

func (o ImageCacheImageRegistryCredentialOutput) ToImageCacheImageRegistryCredentialOutput() ImageCacheImageRegistryCredentialOutput {
	return o
}

func (o ImageCacheImageRegistryCredentialOutput) ToImageCacheImageRegistryCredentialOutputWithContext(ctx context.Context) ImageCacheImageRegistryCredentialOutput {
	return o
}

// The password of the Image Registry.
func (o ImageCacheImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageCacheImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The address of Image Registry without `http://` or `https://`.
func (o ImageCacheImageRegistryCredentialOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageCacheImageRegistryCredential) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// The user name of Image Registry.
func (o ImageCacheImageRegistryCredentialOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageCacheImageRegistryCredential) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ImageCacheImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (ImageCacheImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageCacheImageRegistryCredential)(nil)).Elem()
}

func (o ImageCacheImageRegistryCredentialArrayOutput) ToImageCacheImageRegistryCredentialArrayOutput() ImageCacheImageRegistryCredentialArrayOutput {
	return o
}

func (o ImageCacheImageRegistryCredentialArrayOutput) ToImageCacheImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageCacheImageRegistryCredentialArrayOutput {
	return o
}

func (o ImageCacheImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) ImageCacheImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageCacheImageRegistryCredential {
		return vs[0].([]ImageCacheImageRegistryCredential)[vs[1].(int)]
	}).(ImageCacheImageRegistryCredentialOutput)
}

type OpenApiImageCacheImageRegistryCredential struct {
	Password *string `pulumi:"password"`
	Server   *string `pulumi:"server"`
	UserName *string `pulumi:"userName"`
}

// OpenApiImageCacheImageRegistryCredentialInput is an input type that accepts OpenApiImageCacheImageRegistryCredentialArgs and OpenApiImageCacheImageRegistryCredentialOutput values.
// You can construct a concrete instance of `OpenApiImageCacheImageRegistryCredentialInput` via:
//
//          OpenApiImageCacheImageRegistryCredentialArgs{...}
type OpenApiImageCacheImageRegistryCredentialInput interface {
	pulumi.Input

	ToOpenApiImageCacheImageRegistryCredentialOutput() OpenApiImageCacheImageRegistryCredentialOutput
	ToOpenApiImageCacheImageRegistryCredentialOutputWithContext(context.Context) OpenApiImageCacheImageRegistryCredentialOutput
}

type OpenApiImageCacheImageRegistryCredentialArgs struct {
	Password pulumi.StringPtrInput `pulumi:"password"`
	Server   pulumi.StringPtrInput `pulumi:"server"`
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (OpenApiImageCacheImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenApiImageCacheImageRegistryCredential)(nil)).Elem()
}

func (i OpenApiImageCacheImageRegistryCredentialArgs) ToOpenApiImageCacheImageRegistryCredentialOutput() OpenApiImageCacheImageRegistryCredentialOutput {
	return i.ToOpenApiImageCacheImageRegistryCredentialOutputWithContext(context.Background())
}

func (i OpenApiImageCacheImageRegistryCredentialArgs) ToOpenApiImageCacheImageRegistryCredentialOutputWithContext(ctx context.Context) OpenApiImageCacheImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenApiImageCacheImageRegistryCredentialOutput)
}

// OpenApiImageCacheImageRegistryCredentialArrayInput is an input type that accepts OpenApiImageCacheImageRegistryCredentialArray and OpenApiImageCacheImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `OpenApiImageCacheImageRegistryCredentialArrayInput` via:
//
//          OpenApiImageCacheImageRegistryCredentialArray{ OpenApiImageCacheImageRegistryCredentialArgs{...} }
type OpenApiImageCacheImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToOpenApiImageCacheImageRegistryCredentialArrayOutput() OpenApiImageCacheImageRegistryCredentialArrayOutput
	ToOpenApiImageCacheImageRegistryCredentialArrayOutputWithContext(context.Context) OpenApiImageCacheImageRegistryCredentialArrayOutput
}

type OpenApiImageCacheImageRegistryCredentialArray []OpenApiImageCacheImageRegistryCredentialInput

func (OpenApiImageCacheImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OpenApiImageCacheImageRegistryCredential)(nil)).Elem()
}

func (i OpenApiImageCacheImageRegistryCredentialArray) ToOpenApiImageCacheImageRegistryCredentialArrayOutput() OpenApiImageCacheImageRegistryCredentialArrayOutput {
	return i.ToOpenApiImageCacheImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i OpenApiImageCacheImageRegistryCredentialArray) ToOpenApiImageCacheImageRegistryCredentialArrayOutputWithContext(ctx context.Context) OpenApiImageCacheImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenApiImageCacheImageRegistryCredentialArrayOutput)
}

type OpenApiImageCacheImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (OpenApiImageCacheImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenApiImageCacheImageRegistryCredential)(nil)).Elem()
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) ToOpenApiImageCacheImageRegistryCredentialOutput() OpenApiImageCacheImageRegistryCredentialOutput {
	return o
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) ToOpenApiImageCacheImageRegistryCredentialOutputWithContext(ctx context.Context) OpenApiImageCacheImageRegistryCredentialOutput {
	return o
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenApiImageCacheImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenApiImageCacheImageRegistryCredential) *string { return v.Server }).(pulumi.StringPtrOutput)
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenApiImageCacheImageRegistryCredential) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type OpenApiImageCacheImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (OpenApiImageCacheImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OpenApiImageCacheImageRegistryCredential)(nil)).Elem()
}

func (o OpenApiImageCacheImageRegistryCredentialArrayOutput) ToOpenApiImageCacheImageRegistryCredentialArrayOutput() OpenApiImageCacheImageRegistryCredentialArrayOutput {
	return o
}

func (o OpenApiImageCacheImageRegistryCredentialArrayOutput) ToOpenApiImageCacheImageRegistryCredentialArrayOutputWithContext(ctx context.Context) OpenApiImageCacheImageRegistryCredentialArrayOutput {
	return o
}

func (o OpenApiImageCacheImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) OpenApiImageCacheImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OpenApiImageCacheImageRegistryCredential {
		return vs[0].([]OpenApiImageCacheImageRegistryCredential)[vs[1].(int)]
	}).(OpenApiImageCacheImageRegistryCredentialOutput)
}

type GetImageCachesCach struct {
	// The id of container group.
	ContainerGroupId string `pulumi:"containerGroupId"`
	// Image cache pulls image event information.
	Events []GetImageCachesCachEvent `pulumi:"events"`
	// The time of expired.
	ExpireDateTime string `pulumi:"expireDateTime"`
	// The ID of the ECI Image Cache.
	Id string `pulumi:"id"`
	// The id of the ECI Image Cache.
	ImageCacheId string `pulumi:"imageCacheId"`
	// The name of ECI Image Cache.
	ImageCacheName string `pulumi:"imageCacheName"`
	// The list of cached images.
	Images []string `pulumi:"images"`
	// The progress of ECI Image Cache.
	Progress string `pulumi:"progress"`
	// The id of snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// The status of ECI Image Cache.
	Status string `pulumi:"status"`
}

// GetImageCachesCachInput is an input type that accepts GetImageCachesCachArgs and GetImageCachesCachOutput values.
// You can construct a concrete instance of `GetImageCachesCachInput` via:
//
//          GetImageCachesCachArgs{...}
type GetImageCachesCachInput interface {
	pulumi.Input

	ToGetImageCachesCachOutput() GetImageCachesCachOutput
	ToGetImageCachesCachOutputWithContext(context.Context) GetImageCachesCachOutput
}

type GetImageCachesCachArgs struct {
	// The id of container group.
	ContainerGroupId pulumi.StringInput `pulumi:"containerGroupId"`
	// Image cache pulls image event information.
	Events GetImageCachesCachEventArrayInput `pulumi:"events"`
	// The time of expired.
	ExpireDateTime pulumi.StringInput `pulumi:"expireDateTime"`
	// The ID of the ECI Image Cache.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the ECI Image Cache.
	ImageCacheId pulumi.StringInput `pulumi:"imageCacheId"`
	// The name of ECI Image Cache.
	ImageCacheName pulumi.StringInput `pulumi:"imageCacheName"`
	// The list of cached images.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// The progress of ECI Image Cache.
	Progress pulumi.StringInput `pulumi:"progress"`
	// The id of snapshot.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// The status of ECI Image Cache.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetImageCachesCachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageCachesCach)(nil)).Elem()
}

func (i GetImageCachesCachArgs) ToGetImageCachesCachOutput() GetImageCachesCachOutput {
	return i.ToGetImageCachesCachOutputWithContext(context.Background())
}

func (i GetImageCachesCachArgs) ToGetImageCachesCachOutputWithContext(ctx context.Context) GetImageCachesCachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageCachesCachOutput)
}

// GetImageCachesCachArrayInput is an input type that accepts GetImageCachesCachArray and GetImageCachesCachArrayOutput values.
// You can construct a concrete instance of `GetImageCachesCachArrayInput` via:
//
//          GetImageCachesCachArray{ GetImageCachesCachArgs{...} }
type GetImageCachesCachArrayInput interface {
	pulumi.Input

	ToGetImageCachesCachArrayOutput() GetImageCachesCachArrayOutput
	ToGetImageCachesCachArrayOutputWithContext(context.Context) GetImageCachesCachArrayOutput
}

type GetImageCachesCachArray []GetImageCachesCachInput

func (GetImageCachesCachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageCachesCach)(nil)).Elem()
}

func (i GetImageCachesCachArray) ToGetImageCachesCachArrayOutput() GetImageCachesCachArrayOutput {
	return i.ToGetImageCachesCachArrayOutputWithContext(context.Background())
}

func (i GetImageCachesCachArray) ToGetImageCachesCachArrayOutputWithContext(ctx context.Context) GetImageCachesCachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageCachesCachArrayOutput)
}

type GetImageCachesCachOutput struct{ *pulumi.OutputState }

func (GetImageCachesCachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageCachesCach)(nil)).Elem()
}

func (o GetImageCachesCachOutput) ToGetImageCachesCachOutput() GetImageCachesCachOutput {
	return o
}

func (o GetImageCachesCachOutput) ToGetImageCachesCachOutputWithContext(ctx context.Context) GetImageCachesCachOutput {
	return o
}

// The id of container group.
func (o GetImageCachesCachOutput) ContainerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.ContainerGroupId }).(pulumi.StringOutput)
}

// Image cache pulls image event information.
func (o GetImageCachesCachOutput) Events() GetImageCachesCachEventArrayOutput {
	return o.ApplyT(func(v GetImageCachesCach) []GetImageCachesCachEvent { return v.Events }).(GetImageCachesCachEventArrayOutput)
}

// The time of expired.
func (o GetImageCachesCachOutput) ExpireDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.ExpireDateTime }).(pulumi.StringOutput)
}

// The ID of the ECI Image Cache.
func (o GetImageCachesCachOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the ECI Image Cache.
func (o GetImageCachesCachOutput) ImageCacheId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.ImageCacheId }).(pulumi.StringOutput)
}

// The name of ECI Image Cache.
func (o GetImageCachesCachOutput) ImageCacheName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.ImageCacheName }).(pulumi.StringOutput)
}

// The list of cached images.
func (o GetImageCachesCachOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImageCachesCach) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// The progress of ECI Image Cache.
func (o GetImageCachesCachOutput) Progress() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.Progress }).(pulumi.StringOutput)
}

// The id of snapshot.
func (o GetImageCachesCachOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// The status of ECI Image Cache.
func (o GetImageCachesCachOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.Status }).(pulumi.StringOutput)
}

type GetImageCachesCachArrayOutput struct{ *pulumi.OutputState }

func (GetImageCachesCachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageCachesCach)(nil)).Elem()
}

func (o GetImageCachesCachArrayOutput) ToGetImageCachesCachArrayOutput() GetImageCachesCachArrayOutput {
	return o
}

func (o GetImageCachesCachArrayOutput) ToGetImageCachesCachArrayOutputWithContext(ctx context.Context) GetImageCachesCachArrayOutput {
	return o
}

func (o GetImageCachesCachArrayOutput) Index(i pulumi.IntInput) GetImageCachesCachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageCachesCach {
		return vs[0].([]GetImageCachesCach)[vs[1].(int)]
	}).(GetImageCachesCachOutput)
}

type GetImageCachesCachEvent struct {
	// Number of events.
	Count int `pulumi:"count"`
	// Start time.
	FirstTimestamp string `pulumi:"firstTimestamp"`
	// End time.
	LastTimestamp string `pulumi:"lastTimestamp"`
	Message       string `pulumi:"message"`
	// The name of event.
	Name string `pulumi:"name"`
	// The type of event.
	Type string `pulumi:"type"`
}

// GetImageCachesCachEventInput is an input type that accepts GetImageCachesCachEventArgs and GetImageCachesCachEventOutput values.
// You can construct a concrete instance of `GetImageCachesCachEventInput` via:
//
//          GetImageCachesCachEventArgs{...}
type GetImageCachesCachEventInput interface {
	pulumi.Input

	ToGetImageCachesCachEventOutput() GetImageCachesCachEventOutput
	ToGetImageCachesCachEventOutputWithContext(context.Context) GetImageCachesCachEventOutput
}

type GetImageCachesCachEventArgs struct {
	// Number of events.
	Count pulumi.IntInput `pulumi:"count"`
	// Start time.
	FirstTimestamp pulumi.StringInput `pulumi:"firstTimestamp"`
	// End time.
	LastTimestamp pulumi.StringInput `pulumi:"lastTimestamp"`
	Message       pulumi.StringInput `pulumi:"message"`
	// The name of event.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of event.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetImageCachesCachEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageCachesCachEvent)(nil)).Elem()
}

func (i GetImageCachesCachEventArgs) ToGetImageCachesCachEventOutput() GetImageCachesCachEventOutput {
	return i.ToGetImageCachesCachEventOutputWithContext(context.Background())
}

func (i GetImageCachesCachEventArgs) ToGetImageCachesCachEventOutputWithContext(ctx context.Context) GetImageCachesCachEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageCachesCachEventOutput)
}

// GetImageCachesCachEventArrayInput is an input type that accepts GetImageCachesCachEventArray and GetImageCachesCachEventArrayOutput values.
// You can construct a concrete instance of `GetImageCachesCachEventArrayInput` via:
//
//          GetImageCachesCachEventArray{ GetImageCachesCachEventArgs{...} }
type GetImageCachesCachEventArrayInput interface {
	pulumi.Input

	ToGetImageCachesCachEventArrayOutput() GetImageCachesCachEventArrayOutput
	ToGetImageCachesCachEventArrayOutputWithContext(context.Context) GetImageCachesCachEventArrayOutput
}

type GetImageCachesCachEventArray []GetImageCachesCachEventInput

func (GetImageCachesCachEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageCachesCachEvent)(nil)).Elem()
}

func (i GetImageCachesCachEventArray) ToGetImageCachesCachEventArrayOutput() GetImageCachesCachEventArrayOutput {
	return i.ToGetImageCachesCachEventArrayOutputWithContext(context.Background())
}

func (i GetImageCachesCachEventArray) ToGetImageCachesCachEventArrayOutputWithContext(ctx context.Context) GetImageCachesCachEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageCachesCachEventArrayOutput)
}

type GetImageCachesCachEventOutput struct{ *pulumi.OutputState }

func (GetImageCachesCachEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageCachesCachEvent)(nil)).Elem()
}

func (o GetImageCachesCachEventOutput) ToGetImageCachesCachEventOutput() GetImageCachesCachEventOutput {
	return o
}

func (o GetImageCachesCachEventOutput) ToGetImageCachesCachEventOutputWithContext(ctx context.Context) GetImageCachesCachEventOutput {
	return o
}

// Number of events.
func (o GetImageCachesCachEventOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) int { return v.Count }).(pulumi.IntOutput)
}

// Start time.
func (o GetImageCachesCachEventOutput) FirstTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.FirstTimestamp }).(pulumi.StringOutput)
}

// End time.
func (o GetImageCachesCachEventOutput) LastTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.LastTimestamp }).(pulumi.StringOutput)
}

func (o GetImageCachesCachEventOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.Message }).(pulumi.StringOutput)
}

// The name of event.
func (o GetImageCachesCachEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.Name }).(pulumi.StringOutput)
}

// The type of event.
func (o GetImageCachesCachEventOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.Type }).(pulumi.StringOutput)
}

type GetImageCachesCachEventArrayOutput struct{ *pulumi.OutputState }

func (GetImageCachesCachEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageCachesCachEvent)(nil)).Elem()
}

func (o GetImageCachesCachEventArrayOutput) ToGetImageCachesCachEventArrayOutput() GetImageCachesCachEventArrayOutput {
	return o
}

func (o GetImageCachesCachEventArrayOutput) ToGetImageCachesCachEventArrayOutputWithContext(ctx context.Context) GetImageCachesCachEventArrayOutput {
	return o
}

func (o GetImageCachesCachEventArrayOutput) Index(i pulumi.IntInput) GetImageCachesCachEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageCachesCachEvent {
		return vs[0].([]GetImageCachesCachEvent)[vs[1].(int)]
	}).(GetImageCachesCachEventOutput)
}

func init() {
	pulumi.RegisterOutputType(ImageCacheImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ImageCacheImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(OpenApiImageCacheImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(OpenApiImageCacheImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(GetImageCachesCachOutput{})
	pulumi.RegisterOutputType(GetImageCachesCachArrayOutput{})
	pulumi.RegisterOutputType(GetImageCachesCachEventOutput{})
	pulumi.RegisterOutputType(GetImageCachesCachEventArrayOutput{})
}
