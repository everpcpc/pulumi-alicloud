// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CEN route entry resource. Cloud Enterprise Network (CEN) supports publishing and withdrawing route entries of attached networks. You can publish a route entry of an attached VPC or VBR to a CEN instance, then other attached networks can learn the route if there is no route conflict. You can withdraw a published route entry when CEN does not need it any more.
// 
// For information about CEN route entries publishment and how to use it, see [Manage network routes](https://www.alibabacloud.com/help/doc-detail/86980.htm).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cen_route_entry.html.markdown.
type RouteEntry struct {
	s *pulumi.ResourceState
}

// NewRouteEntry registers a new resource with the given unique name, arguments, and options.
func NewRouteEntry(ctx *pulumi.Context,
	name string, args *RouteEntryArgs, opts ...pulumi.ResourceOpt) (*RouteEntry, error) {
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.RouteTableId == nil {
		return nil, errors.New("missing required argument 'RouteTableId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cidrBlock"] = nil
		inputs["instanceId"] = nil
		inputs["routeTableId"] = nil
	} else {
		inputs["cidrBlock"] = args.CidrBlock
		inputs["instanceId"] = args.InstanceId
		inputs["routeTableId"] = args.RouteTableId
	}
	s, err := ctx.RegisterResource("alicloud:cen/routeEntry:RouteEntry", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouteEntry{s: s}, nil
}

// GetRouteEntry gets an existing RouteEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteEntry(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouteEntryState, opts ...pulumi.ResourceOpt) (*RouteEntry, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cidrBlock"] = state.CidrBlock
		inputs["instanceId"] = state.InstanceId
		inputs["routeTableId"] = state.RouteTableId
	}
	s, err := ctx.ReadResource("alicloud:cen/routeEntry:RouteEntry", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouteEntry{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RouteEntry) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RouteEntry) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The destination CIDR block of the route entry to publish.
func (r *RouteEntry) CidrBlock() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cidrBlock"])
}

// The ID of the CEN.
func (r *RouteEntry) InstanceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceId"])
}

// The route table of the attached VBR or VPC.
func (r *RouteEntry) RouteTableId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["routeTableId"])
}

// Input properties used for looking up and filtering RouteEntry resources.
type RouteEntryState struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock interface{}
	// The ID of the CEN.
	InstanceId interface{}
	// The route table of the attached VBR or VPC.
	RouteTableId interface{}
}

// The set of arguments for constructing a RouteEntry resource.
type RouteEntryArgs struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock interface{}
	// The ID of the CEN.
	InstanceId interface{}
	// The route table of the attached VBR or VPC.
	RouteTableId interface{}
}
