// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package cen

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CEN route entry resource. Cloud Enterprise Network (CEN) supports publishing and withdrawing route entries of attached networks. You can publish a route entry of an attached VPC or VBR to a CEN instance, then other attached networks can learn the route if there is no route conflict. You can withdraw a published route entry when CEN does not need it any more.
//
// For information about CEN route entries publishment and how to use it, see [Manage network routes](https://www.alibabacloud.com/help/doc-detail/86980.htm).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cen_route_entry.html.markdown.
type RouteEntry struct {
	pulumi.CustomResourceState

	// The destination CIDR block of the route entry to publish.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// The ID of the CEN.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The route table of the attached VBR or VPC.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
}

// NewRouteEntry registers a new resource with the given unique name, arguments, and options.
func NewRouteEntry(ctx *pulumi.Context,
	name string, args *RouteEntryArgs, opts ...pulumi.ResourceOption) (*RouteEntry, error) {
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.RouteTableId == nil {
		return nil, errors.New("missing required argument 'RouteTableId'")
	}
	if args == nil {
		args = &RouteEntryArgs{}
	}
	var resource RouteEntry
	err := ctx.RegisterResource("alicloud:cen/routeEntry:RouteEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteEntry gets an existing RouteEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteEntryState, opts ...pulumi.ResourceOption) (*RouteEntry, error) {
	var resource RouteEntry
	err := ctx.ReadResource("alicloud:cen/routeEntry:RouteEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteEntry resources.
type routeEntryState struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The ID of the CEN.
	InstanceId *string `pulumi:"instanceId"`
	// The route table of the attached VBR or VPC.
	RouteTableId *string `pulumi:"routeTableId"`
}

type RouteEntryState struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock pulumi.StringPtrInput
	// The ID of the CEN.
	InstanceId pulumi.StringPtrInput
	// The route table of the attached VBR or VPC.
	RouteTableId pulumi.StringPtrInput
}

func (RouteEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeEntryState)(nil)).Elem()
}

type routeEntryArgs struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock string `pulumi:"cidrBlock"`
	// The ID of the CEN.
	InstanceId string `pulumi:"instanceId"`
	// The route table of the attached VBR or VPC.
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a RouteEntry resource.
type RouteEntryArgs struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock pulumi.StringInput
	// The ID of the CEN.
	InstanceId pulumi.StringInput
	// The route table of the attached VBR or VPC.
	RouteTableId pulumi.StringInput
}

func (RouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeEntryArgs)(nil)).Elem()
}

