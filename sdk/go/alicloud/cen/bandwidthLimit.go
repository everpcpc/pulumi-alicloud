// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package cen

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CEN cross-regional interconnection bandwidth resource. To connect networks in different regions, you must set cross-region interconnection bandwidth after buying a bandwidth package. The total bandwidth set for all the interconnected regions of a bandwidth package cannot exceed the bandwidth of the bandwidth package. By default, 1 Kbps bandwidth is provided for connectivity test. To run normal business, you must buy a bandwidth package and set a proper interconnection bandwidth.
//
// For example, a CEN instance is bound to a bandwidth package of 20 Mbps and  the interconnection areas are Mainland China and North America. You can set the cross-region interconnection bandwidth between US West 1 and China East 1, China East 2, China South 1, and so on. However, the total bandwidth set for all the interconnected regions cannot exceed 20  Mbps.
//
// For information about CEN and how to use it, see [Cross-region interconnection bandwidth](https://www.alibabacloud.com/help/doc-detail/65983.htm)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cen_bandwidth_limit.html.markdown.
type BandwidthLimit struct {
	pulumi.CustomResourceState

	// The bandwidth configured for the interconnected regions communication.
	BandwidthLimit pulumi.IntOutput `pulumi:"bandwidthLimit"`
	// The ID of the CEN.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// List of the two regions to interconnect. Must be two different regions.
	RegionIds pulumi.StringArrayOutput `pulumi:"regionIds"`
}

// NewBandwidthLimit registers a new resource with the given unique name, arguments, and options.
func NewBandwidthLimit(ctx *pulumi.Context,
	name string, args *BandwidthLimitArgs, opts ...pulumi.ResourceOption) (*BandwidthLimit, error) {
	if args == nil || args.BandwidthLimit == nil {
		return nil, errors.New("missing required argument 'BandwidthLimit'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.RegionIds == nil {
		return nil, errors.New("missing required argument 'RegionIds'")
	}
	if args == nil {
		args = &BandwidthLimitArgs{}
	}
	var resource BandwidthLimit
	err := ctx.RegisterResource("alicloud:cen/bandwidthLimit:BandwidthLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBandwidthLimit gets an existing BandwidthLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBandwidthLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BandwidthLimitState, opts ...pulumi.ResourceOption) (*BandwidthLimit, error) {
	var resource BandwidthLimit
	err := ctx.ReadResource("alicloud:cen/bandwidthLimit:BandwidthLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BandwidthLimit resources.
type bandwidthLimitState struct {
	// The bandwidth configured for the interconnected regions communication.
	BandwidthLimit *int `pulumi:"bandwidthLimit"`
	// The ID of the CEN.
	InstanceId *string `pulumi:"instanceId"`
	// List of the two regions to interconnect. Must be two different regions.
	RegionIds []string `pulumi:"regionIds"`
}

type BandwidthLimitState struct {
	// The bandwidth configured for the interconnected regions communication.
	BandwidthLimit pulumi.IntPtrInput
	// The ID of the CEN.
	InstanceId pulumi.StringPtrInput
	// List of the two regions to interconnect. Must be two different regions.
	RegionIds pulumi.StringArrayInput
}

func (BandwidthLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthLimitState)(nil)).Elem()
}

type bandwidthLimitArgs struct {
	// The bandwidth configured for the interconnected regions communication.
	BandwidthLimit int `pulumi:"bandwidthLimit"`
	// The ID of the CEN.
	InstanceId string `pulumi:"instanceId"`
	// List of the two regions to interconnect. Must be two different regions.
	RegionIds []string `pulumi:"regionIds"`
}

// The set of arguments for constructing a BandwidthLimit resource.
type BandwidthLimitArgs struct {
	// The bandwidth configured for the interconnected regions communication.
	BandwidthLimit pulumi.IntInput
	// The ID of the CEN.
	InstanceId pulumi.StringInput
	// List of the two regions to interconnect. Must be two different regions.
	RegionIds pulumi.StringArrayInput
}

func (BandwidthLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthLimitArgs)(nil)).Elem()
}
