// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CEN cross-regional interconnection bandwidth resource. To connect networks in different regions, you must set cross-region interconnection bandwidth after buying a bandwidth package. The total bandwidth set for all the interconnected regions of a bandwidth package cannot exceed the bandwidth of the bandwidth package. By default, 1 Kbps bandwidth is provided for connectivity test. To run normal business, you must buy a bandwidth package and set a proper interconnection bandwidth.
// 
// For example, a CEN instance is bound to a bandwidth package of 20 Mbps and  the interconnection areas are Mainland China and North America. You can set the cross-region interconnection bandwidth between US West 1 and China East 1, China East 2, China South 1, and so on. However, the total bandwidth set for all the interconnected regions cannot exceed 20  Mbps.
// 
// For information about CEN and how to use it, see [Cross-region interconnection bandwidth](https://www.alibabacloud.com/help/doc-detail/65983.htm)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cen_bandwidth_limit.html.markdown.
type BandwidthLimit struct {
	s *pulumi.ResourceState
}

// NewBandwidthLimit registers a new resource with the given unique name, arguments, and options.
func NewBandwidthLimit(ctx *pulumi.Context,
	name string, args *BandwidthLimitArgs, opts ...pulumi.ResourceOpt) (*BandwidthLimit, error) {
	if args == nil || args.BandwidthLimit == nil {
		return nil, errors.New("missing required argument 'BandwidthLimit'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.RegionIds == nil {
		return nil, errors.New("missing required argument 'RegionIds'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bandwidthLimit"] = nil
		inputs["instanceId"] = nil
		inputs["regionIds"] = nil
	} else {
		inputs["bandwidthLimit"] = args.BandwidthLimit
		inputs["instanceId"] = args.InstanceId
		inputs["regionIds"] = args.RegionIds
	}
	s, err := ctx.RegisterResource("alicloud:cen/bandwidthLimit:BandwidthLimit", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BandwidthLimit{s: s}, nil
}

// GetBandwidthLimit gets an existing BandwidthLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBandwidthLimit(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BandwidthLimitState, opts ...pulumi.ResourceOpt) (*BandwidthLimit, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bandwidthLimit"] = state.BandwidthLimit
		inputs["instanceId"] = state.InstanceId
		inputs["regionIds"] = state.RegionIds
	}
	s, err := ctx.ReadResource("alicloud:cen/bandwidthLimit:BandwidthLimit", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BandwidthLimit{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BandwidthLimit) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BandwidthLimit) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The bandwidth configured for the interconnected regions communication.
func (r *BandwidthLimit) BandwidthLimit() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["bandwidthLimit"])
}

// The ID of the CEN.
func (r *BandwidthLimit) InstanceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceId"])
}

// List of the two regions to interconnect. Must be two different regions.
func (r *BandwidthLimit) RegionIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["regionIds"])
}

// Input properties used for looking up and filtering BandwidthLimit resources.
type BandwidthLimitState struct {
	// The bandwidth configured for the interconnected regions communication.
	BandwidthLimit interface{}
	// The ID of the CEN.
	InstanceId interface{}
	// List of the two regions to interconnect. Must be two different regions.
	RegionIds interface{}
}

// The set of arguments for constructing a BandwidthLimit resource.
type BandwidthLimitArgs struct {
	// The bandwidth configured for the interconnected regions communication.
	BandwidthLimit interface{}
	// The ID of the CEN.
	InstanceId interface{}
	// List of the two regions to interconnect. Must be two different regions.
	RegionIds interface{}
}
