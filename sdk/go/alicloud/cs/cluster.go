// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ~> **NOTE:** This resource name has been replaced by [`alicloud_cs_swarm`](https://www.terraform.io/docs/providers/alicloud/r/cs_swarm.html) from [version 1.8.2](https://releases.hashicorp.com/terraform-provider-alicloud/1.8.2/).
// Please update it.
type Cluster struct {
	s *pulumi.ResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.InstanceType == nil {
		return nil, errors.New("missing required argument 'InstanceType'")
	}
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.VswitchId == nil {
		return nil, errors.New("missing required argument 'VswitchId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cidrBlock"] = nil
		inputs["diskCategory"] = nil
		inputs["diskSize"] = nil
		inputs["imageId"] = nil
		inputs["instanceType"] = nil
		inputs["isOutdated"] = nil
		inputs["name"] = nil
		inputs["namePrefix"] = nil
		inputs["needSlb"] = nil
		inputs["nodeNumber"] = nil
		inputs["password"] = nil
		inputs["releaseEip"] = nil
		inputs["size"] = nil
		inputs["vswitchId"] = nil
	} else {
		inputs["cidrBlock"] = args.CidrBlock
		inputs["diskCategory"] = args.DiskCategory
		inputs["diskSize"] = args.DiskSize
		inputs["imageId"] = args.ImageId
		inputs["instanceType"] = args.InstanceType
		inputs["isOutdated"] = args.IsOutdated
		inputs["name"] = args.Name
		inputs["namePrefix"] = args.NamePrefix
		inputs["needSlb"] = args.NeedSlb
		inputs["nodeNumber"] = args.NodeNumber
		inputs["password"] = args.Password
		inputs["releaseEip"] = args.ReleaseEip
		inputs["size"] = args.Size
		inputs["vswitchId"] = args.VswitchId
	}
	inputs["agentVersion"] = nil
	inputs["nodes"] = nil
	inputs["securityGroupId"] = nil
	inputs["slbId"] = nil
	inputs["vpcId"] = nil
	s, err := ctx.RegisterResource("alicloud:cs/cluster:Cluster", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["agentVersion"] = state.AgentVersion
		inputs["cidrBlock"] = state.CidrBlock
		inputs["diskCategory"] = state.DiskCategory
		inputs["diskSize"] = state.DiskSize
		inputs["imageId"] = state.ImageId
		inputs["instanceType"] = state.InstanceType
		inputs["isOutdated"] = state.IsOutdated
		inputs["name"] = state.Name
		inputs["namePrefix"] = state.NamePrefix
		inputs["needSlb"] = state.NeedSlb
		inputs["nodeNumber"] = state.NodeNumber
		inputs["nodes"] = state.Nodes
		inputs["password"] = state.Password
		inputs["releaseEip"] = state.ReleaseEip
		inputs["securityGroupId"] = state.SecurityGroupId
		inputs["size"] = state.Size
		inputs["slbId"] = state.SlbId
		inputs["vpcId"] = state.VpcId
		inputs["vswitchId"] = state.VswitchId
	}
	s, err := ctx.ReadResource("alicloud:cs/cluster:Cluster", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Cluster) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Cluster) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *Cluster) AgentVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["agentVersion"])
}

func (r *Cluster) CidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidrBlock"])
}

func (r *Cluster) DiskCategory() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["diskCategory"])
}

func (r *Cluster) DiskSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["diskSize"])
}

func (r *Cluster) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

func (r *Cluster) InstanceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceType"])
}

func (r *Cluster) IsOutdated() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isOutdated"])
}

func (r *Cluster) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Cluster) NamePrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["namePrefix"])
}

func (r *Cluster) NeedSlb() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["needSlb"])
}

func (r *Cluster) NodeNumber() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["nodeNumber"])
}

func (r *Cluster) Nodes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["nodes"])
}

func (r *Cluster) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

func (r *Cluster) ReleaseEip() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["releaseEip"])
}

func (r *Cluster) SecurityGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["securityGroupId"])
}

func (r *Cluster) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

func (r *Cluster) SlbId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["slbId"])
}

func (r *Cluster) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

func (r *Cluster) VswitchId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vswitchId"])
}

// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	AgentVersion interface{}
	CidrBlock interface{}
	DiskCategory interface{}
	DiskSize interface{}
	ImageId interface{}
	InstanceType interface{}
	IsOutdated interface{}
	Name interface{}
	NamePrefix interface{}
	NeedSlb interface{}
	NodeNumber interface{}
	Nodes interface{}
	Password interface{}
	ReleaseEip interface{}
	SecurityGroupId interface{}
	Size interface{}
	SlbId interface{}
	VpcId interface{}
	VswitchId interface{}
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	CidrBlock interface{}
	DiskCategory interface{}
	DiskSize interface{}
	ImageId interface{}
	InstanceType interface{}
	IsOutdated interface{}
	Name interface{}
	NamePrefix interface{}
	NeedSlb interface{}
	NodeNumber interface{}
	Password interface{}
	ReleaseEip interface{}
	Size interface{}
	VswitchId interface{}
}
