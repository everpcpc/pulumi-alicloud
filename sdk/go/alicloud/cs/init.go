// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cs

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "alicloud:cs/application:Application":
		r, err = NewApplication(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/cluster:Cluster":
		r, err = NewCluster(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/edgeKubernetes:EdgeKubernetes":
		r, err = NewEdgeKubernetes(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/kubernetes:Kubernetes":
		r, err = NewKubernetes(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/kubernetesAutoscaler:KubernetesAutoscaler":
		r, err = NewKubernetesAutoscaler(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/managedKubernetes:ManagedKubernetes":
		r, err = NewManagedKubernetes(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/nodePool:NodePool":
		r, err = NewNodePool(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/registryEnterpriseNamespace:RegistryEnterpriseNamespace":
		r, err = NewRegistryEnterpriseNamespace(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/registryEnterpriseRepo:RegistryEnterpriseRepo":
		r, err = NewRegistryEnterpriseRepo(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/registryEnterpriseSyncRule:RegistryEnterpriseSyncRule":
		r, err = NewRegistryEnterpriseSyncRule(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/serverlessKubernetes:ServerlessKubernetes":
		r, err = NewServerlessKubernetes(ctx, name, nil, pulumi.URN_(urn))
	case "alicloud:cs/swarm:Swarm":
		r, err = NewSwarm(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := alicloud.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/application",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/cluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/edgeKubernetes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/kubernetes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/kubernetesAutoscaler",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/managedKubernetes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/nodePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/registryEnterpriseNamespace",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/registryEnterpriseRepo",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/registryEnterpriseSyncRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/serverlessKubernetes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"alicloud",
		"cs/swarm",
		&module{version},
	)
}
