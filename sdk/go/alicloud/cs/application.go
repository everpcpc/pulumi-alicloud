// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Application struct {
	pulumi.CustomResourceState

	BlueGreen        pulumi.BoolPtrOutput          `pulumi:"blueGreen"`
	BlueGreenConfirm pulumi.BoolPtrOutput          `pulumi:"blueGreenConfirm"`
	ClusterName      pulumi.StringOutput           `pulumi:"clusterName"`
	DefaultDomain    pulumi.StringOutput           `pulumi:"defaultDomain"`
	Description      pulumi.StringPtrOutput        `pulumi:"description"`
	Environment      pulumi.MapOutput              `pulumi:"environment"`
	LatestImage      pulumi.BoolPtrOutput          `pulumi:"latestImage"`
	Name             pulumi.StringOutput           `pulumi:"name"`
	Services         ApplicationServiceArrayOutput `pulumi:"services"`
	Template         pulumi.StringOutput           `pulumi:"template"`
	Version          pulumi.StringPtrOutput        `pulumi:"version"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	var resource Application
	err := ctx.RegisterResource("alicloud:cs/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("alicloud:cs/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	BlueGreen        *bool                  `pulumi:"blueGreen"`
	BlueGreenConfirm *bool                  `pulumi:"blueGreenConfirm"`
	ClusterName      *string                `pulumi:"clusterName"`
	DefaultDomain    *string                `pulumi:"defaultDomain"`
	Description      *string                `pulumi:"description"`
	Environment      map[string]interface{} `pulumi:"environment"`
	LatestImage      *bool                  `pulumi:"latestImage"`
	Name             *string                `pulumi:"name"`
	Services         []ApplicationService   `pulumi:"services"`
	Template         *string                `pulumi:"template"`
	Version          *string                `pulumi:"version"`
}

type ApplicationState struct {
	BlueGreen        pulumi.BoolPtrInput
	BlueGreenConfirm pulumi.BoolPtrInput
	ClusterName      pulumi.StringPtrInput
	DefaultDomain    pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Environment      pulumi.MapInput
	LatestImage      pulumi.BoolPtrInput
	Name             pulumi.StringPtrInput
	Services         ApplicationServiceArrayInput
	Template         pulumi.StringPtrInput
	Version          pulumi.StringPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	BlueGreen        *bool                  `pulumi:"blueGreen"`
	BlueGreenConfirm *bool                  `pulumi:"blueGreenConfirm"`
	ClusterName      string                 `pulumi:"clusterName"`
	Description      *string                `pulumi:"description"`
	Environment      map[string]interface{} `pulumi:"environment"`
	LatestImage      *bool                  `pulumi:"latestImage"`
	Name             *string                `pulumi:"name"`
	Template         string                 `pulumi:"template"`
	Version          *string                `pulumi:"version"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	BlueGreen        pulumi.BoolPtrInput
	BlueGreenConfirm pulumi.BoolPtrInput
	ClusterName      pulumi.StringInput
	Description      pulumi.StringPtrInput
	Environment      pulumi.MapInput
	LatestImage      pulumi.BoolPtrInput
	Name             pulumi.StringPtrInput
	Template         pulumi.StringInput
	Version          pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct {
	*pulumi.OutputState
}

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApplicationOutput{})
}
