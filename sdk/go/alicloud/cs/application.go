// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > **DEPRECATED:** This resource manages applications in swarm cluster only, which is being deprecated and will be replaced by Kubernetes cluster.
// 
// This resource use an orchestration template to define and deploy a multi-container application. An application is created by using an orchestration template.
// Each application can contain one or more services.
// 
// > **NOTE:** Application orchestration template must be a valid Docker Compose YAML template.
// 
// > **NOTE:** At present, this resource only support swarm cluster.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cs_application.html.markdown.
type Application struct {
	s *pulumi.ResourceState
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOpt) (*Application, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.Template == nil {
		return nil, errors.New("missing required argument 'Template'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["blueGreen"] = nil
		inputs["blueGreenConfirm"] = nil
		inputs["clusterName"] = nil
		inputs["description"] = nil
		inputs["environment"] = nil
		inputs["latestImage"] = nil
		inputs["name"] = nil
		inputs["template"] = nil
		inputs["version"] = nil
	} else {
		inputs["blueGreen"] = args.BlueGreen
		inputs["blueGreenConfirm"] = args.BlueGreenConfirm
		inputs["clusterName"] = args.ClusterName
		inputs["description"] = args.Description
		inputs["environment"] = args.Environment
		inputs["latestImage"] = args.LatestImage
		inputs["name"] = args.Name
		inputs["template"] = args.Template
		inputs["version"] = args.Version
	}
	inputs["defaultDomain"] = nil
	inputs["services"] = nil
	s, err := ctx.RegisterResource("alicloud:cs/application:Application", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Application{s: s}, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ApplicationState, opts ...pulumi.ResourceOpt) (*Application, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["blueGreen"] = state.BlueGreen
		inputs["blueGreenConfirm"] = state.BlueGreenConfirm
		inputs["clusterName"] = state.ClusterName
		inputs["defaultDomain"] = state.DefaultDomain
		inputs["description"] = state.Description
		inputs["environment"] = state.Environment
		inputs["latestImage"] = state.LatestImage
		inputs["name"] = state.Name
		inputs["services"] = state.Services
		inputs["template"] = state.Template
		inputs["version"] = state.Version
	}
	s, err := ctx.ReadResource("alicloud:cs/application:Application", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Application{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Application) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Application) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Wherther to use "Blue Green" method when release a new version. Default to false.
func (r *Application) BlueGreen() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["blueGreen"])
}

// Whether to confirm a "Blue Green" application. Default to false. It will be ignored when `blueGreen` is false.
func (r *Application) BlueGreenConfirm() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["blueGreenConfirm"])
}

// The swarm cluster's name.
func (r *Application) ClusterName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterName"])
}

// The application default domain and it can be used to configure routing service.
func (r *Application) DefaultDomain() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultDomain"])
}

// The description of application.
func (r *Application) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// A key/value map used to replace the variable parameter in the Compose template.
func (r *Application) Environment() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["environment"])
}

// Whether to use latest docker image while each updating application. Default to false.
func (r *Application) LatestImage() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["latestImage"])
}

// The application name. It should be 1-64 characters long, and can contain numbers, English letters and hyphens, but cannot start with hyphens.
func (r *Application) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// List of services in the application. It contains several attributes to `Block Nodes`.
func (r *Application) Services() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["services"])
}

// The application deployment template and it must be [Docker Compose format](https://docs.docker.com/compose/).
func (r *Application) Template() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["template"])
}

// The application deploying version. Each updating, it must be different with current. Default to "1.0"
func (r *Application) Version() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["version"])
}

// Input properties used for looking up and filtering Application resources.
type ApplicationState struct {
	// Wherther to use "Blue Green" method when release a new version. Default to false.
	BlueGreen interface{}
	// Whether to confirm a "Blue Green" application. Default to false. It will be ignored when `blueGreen` is false.
	BlueGreenConfirm interface{}
	// The swarm cluster's name.
	ClusterName interface{}
	// The application default domain and it can be used to configure routing service.
	DefaultDomain interface{}
	// The description of application.
	Description interface{}
	// A key/value map used to replace the variable parameter in the Compose template.
	Environment interface{}
	// Whether to use latest docker image while each updating application. Default to false.
	LatestImage interface{}
	// The application name. It should be 1-64 characters long, and can contain numbers, English letters and hyphens, but cannot start with hyphens.
	Name interface{}
	// List of services in the application. It contains several attributes to `Block Nodes`.
	Services interface{}
	// The application deployment template and it must be [Docker Compose format](https://docs.docker.com/compose/).
	Template interface{}
	// The application deploying version. Each updating, it must be different with current. Default to "1.0"
	Version interface{}
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Wherther to use "Blue Green" method when release a new version. Default to false.
	BlueGreen interface{}
	// Whether to confirm a "Blue Green" application. Default to false. It will be ignored when `blueGreen` is false.
	BlueGreenConfirm interface{}
	// The swarm cluster's name.
	ClusterName interface{}
	// The description of application.
	Description interface{}
	// A key/value map used to replace the variable parameter in the Compose template.
	Environment interface{}
	// Whether to use latest docker image while each updating application. Default to false.
	LatestImage interface{}
	// The application name. It should be 1-64 characters long, and can contain numbers, English letters and hyphens, but cannot start with hyphens.
	Name interface{}
	// The application deployment template and it must be [Docker Compose format](https://docs.docker.com/compose/).
	Template interface{}
	// The application deploying version. Each updating, it must be different with current. Default to "1.0"
	Version interface{}
}
