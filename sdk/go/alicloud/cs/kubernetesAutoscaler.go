// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource will help you to manager cluster-autoscaler in Kubernetes Cluster. 
// 
// > **NOTE:** The scaling group must use CentOS7 or AliyunLinux2 as base image.
// 
// > **NOTE:** The cluster-autoscaler can only use the same size of instanceTypes in one scaling group. 
// 
// > **NOTE:** Add Policy to RAM role of the node to deploy cluster-autoscaler if you need.
// 
// > **NOTE:** Available in 1.65.0+.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cs_kubernetes_autoscaler.html.markdown.
type KubernetesAutoscaler struct {
	s *pulumi.ResourceState
}

// NewKubernetesAutoscaler registers a new resource with the given unique name, arguments, and options.
func NewKubernetesAutoscaler(ctx *pulumi.Context,
	name string, args *KubernetesAutoscalerArgs, opts ...pulumi.ResourceOpt) (*KubernetesAutoscaler, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.CoolDownDuration == nil {
		return nil, errors.New("missing required argument 'CoolDownDuration'")
	}
	if args == nil || args.DeferScaleInDuration == nil {
		return nil, errors.New("missing required argument 'DeferScaleInDuration'")
	}
	if args == nil || args.Utilization == nil {
		return nil, errors.New("missing required argument 'Utilization'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clusterId"] = nil
		inputs["coolDownDuration"] = nil
		inputs["deferScaleInDuration"] = nil
		inputs["nodepools"] = nil
		inputs["utilization"] = nil
	} else {
		inputs["clusterId"] = args.ClusterId
		inputs["coolDownDuration"] = args.CoolDownDuration
		inputs["deferScaleInDuration"] = args.DeferScaleInDuration
		inputs["nodepools"] = args.Nodepools
		inputs["utilization"] = args.Utilization
	}
	s, err := ctx.RegisterResource("alicloud:cs/kubernetesAutoscaler:KubernetesAutoscaler", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KubernetesAutoscaler{s: s}, nil
}

// GetKubernetesAutoscaler gets an existing KubernetesAutoscaler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesAutoscaler(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KubernetesAutoscalerState, opts ...pulumi.ResourceOpt) (*KubernetesAutoscaler, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clusterId"] = state.ClusterId
		inputs["coolDownDuration"] = state.CoolDownDuration
		inputs["deferScaleInDuration"] = state.DeferScaleInDuration
		inputs["nodepools"] = state.Nodepools
		inputs["utilization"] = state.Utilization
	}
	s, err := ctx.ReadResource("alicloud:cs/kubernetesAutoscaler:KubernetesAutoscaler", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KubernetesAutoscaler{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *KubernetesAutoscaler) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KubernetesAutoscaler) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The id of kubernetes cluster.
func (r *KubernetesAutoscaler) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// The coolDownDuration option of cluster-autoscaler.  
func (r *KubernetesAutoscaler) CoolDownDuration() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["coolDownDuration"])
}

// The deferScaleInDuration option of cluster-autoscaler.
func (r *KubernetesAutoscaler) DeferScaleInDuration() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["deferScaleInDuration"])
}

// 
// * `nodepools.id` - (Required) The scaling group id of the groups configured for cluster-autoscaler.
// * `nodepools.taints` - (Required) The taints for the nodes in scaling group.
// * `nodepools.labels` - (Required) The labels for the nodes in scaling group.
func (r *KubernetesAutoscaler) Nodepools() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["nodepools"])
}

// The utilization option of cluster-autoscaler.
func (r *KubernetesAutoscaler) Utilization() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["utilization"])
}

// Input properties used for looking up and filtering KubernetesAutoscaler resources.
type KubernetesAutoscalerState struct {
	// The id of kubernetes cluster.
	ClusterId interface{}
	// The coolDownDuration option of cluster-autoscaler.  
	CoolDownDuration interface{}
	// The deferScaleInDuration option of cluster-autoscaler.
	DeferScaleInDuration interface{}
	// 
	// * `nodepools.id` - (Required) The scaling group id of the groups configured for cluster-autoscaler.
	// * `nodepools.taints` - (Required) The taints for the nodes in scaling group.
	// * `nodepools.labels` - (Required) The labels for the nodes in scaling group.
	Nodepools interface{}
	// The utilization option of cluster-autoscaler.
	Utilization interface{}
}

// The set of arguments for constructing a KubernetesAutoscaler resource.
type KubernetesAutoscalerArgs struct {
	// The id of kubernetes cluster.
	ClusterId interface{}
	// The coolDownDuration option of cluster-autoscaler.  
	CoolDownDuration interface{}
	// The deferScaleInDuration option of cluster-autoscaler.
	DeferScaleInDuration interface{}
	// 
	// * `nodepools.id` - (Required) The scaling group id of the groups configured for cluster-autoscaler.
	// * `nodepools.taints` - (Required) The taints for the nodes in scaling group.
	// * `nodepools.labels` - (Required) The labels for the nodes in scaling group.
	Nodepools interface{}
	// The utilization option of cluster-autoscaler.
	Utilization interface{}
}
