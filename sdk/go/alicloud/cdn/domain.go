// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cdn_domain.html.markdown.
type Domain struct {
	s *pulumi.ResourceState
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOpt) (*Domain, error) {
	if args == nil || args.CdnType == nil {
		return nil, errors.New("missing required argument 'CdnType'")
	}
	if args == nil || args.DomainName == nil {
		return nil, errors.New("missing required argument 'DomainName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authConfig"] = nil
		inputs["blockIps"] = nil
		inputs["cacheConfigs"] = nil
		inputs["cdnType"] = nil
		inputs["certificateConfig"] = nil
		inputs["domainName"] = nil
		inputs["httpHeaderConfigs"] = nil
		inputs["optimizeEnable"] = nil
		inputs["page404Config"] = nil
		inputs["pageCompressEnable"] = nil
		inputs["parameterFilterConfig"] = nil
		inputs["rangeEnable"] = nil
		inputs["referConfig"] = nil
		inputs["scope"] = nil
		inputs["sourcePort"] = nil
		inputs["sourceType"] = nil
		inputs["sources"] = nil
		inputs["videoSeekEnable"] = nil
	} else {
		inputs["authConfig"] = args.AuthConfig
		inputs["blockIps"] = args.BlockIps
		inputs["cacheConfigs"] = args.CacheConfigs
		inputs["cdnType"] = args.CdnType
		inputs["certificateConfig"] = args.CertificateConfig
		inputs["domainName"] = args.DomainName
		inputs["httpHeaderConfigs"] = args.HttpHeaderConfigs
		inputs["optimizeEnable"] = args.OptimizeEnable
		inputs["page404Config"] = args.Page404Config
		inputs["pageCompressEnable"] = args.PageCompressEnable
		inputs["parameterFilterConfig"] = args.ParameterFilterConfig
		inputs["rangeEnable"] = args.RangeEnable
		inputs["referConfig"] = args.ReferConfig
		inputs["scope"] = args.Scope
		inputs["sourcePort"] = args.SourcePort
		inputs["sourceType"] = args.SourceType
		inputs["sources"] = args.Sources
		inputs["videoSeekEnable"] = args.VideoSeekEnable
	}
	s, err := ctx.RegisterResource("alicloud:cdn/domain:Domain", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Domain{s: s}, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DomainState, opts ...pulumi.ResourceOpt) (*Domain, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authConfig"] = state.AuthConfig
		inputs["blockIps"] = state.BlockIps
		inputs["cacheConfigs"] = state.CacheConfigs
		inputs["cdnType"] = state.CdnType
		inputs["certificateConfig"] = state.CertificateConfig
		inputs["domainName"] = state.DomainName
		inputs["httpHeaderConfigs"] = state.HttpHeaderConfigs
		inputs["optimizeEnable"] = state.OptimizeEnable
		inputs["page404Config"] = state.Page404Config
		inputs["pageCompressEnable"] = state.PageCompressEnable
		inputs["parameterFilterConfig"] = state.ParameterFilterConfig
		inputs["rangeEnable"] = state.RangeEnable
		inputs["referConfig"] = state.ReferConfig
		inputs["scope"] = state.Scope
		inputs["sourcePort"] = state.SourcePort
		inputs["sourceType"] = state.SourceType
		inputs["sources"] = state.Sources
		inputs["videoSeekEnable"] = state.VideoSeekEnable
	}
	s, err := ctx.ReadResource("alicloud:cdn/domain:Domain", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Domain{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Domain) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Domain) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The auth config of the accelerated domain.
func (r *Domain) AuthConfig() pulumi.Output {
	return r.s.State["authConfig"]
}

func (r *Domain) BlockIps() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["blockIps"])
}

// The cache configs of the accelerated domain.
func (r *Domain) CacheConfigs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["cacheConfigs"])
}

// Cdn type of the accelerated domain. Valid values are `web`, `download`, `video`, `liveStream`.
func (r *Domain) CdnType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cdnType"])
}

func (r *Domain) CertificateConfig() pulumi.Output {
	return r.s.State["certificateConfig"]
}

// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
func (r *Domain) DomainName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["domainName"])
}

// The http header configs of the accelerated domain.
func (r *Domain) HttpHeaderConfigs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["httpHeaderConfigs"])
}

// Page Optimize config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`. It can effectively remove the page redundant content, reduce the file size and improve the speed of distribution when this parameter value is `on`.
func (r *Domain) OptimizeEnable() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["optimizeEnable"])
}

// The error page config of the accelerated domain.
func (r *Domain) Page404Config() pulumi.Output {
	return r.s.State["page404Config"]
}

// Page Compress config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
func (r *Domain) PageCompressEnable() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pageCompressEnable"])
}

// The parameter filter config of the accelerated domain.
func (r *Domain) ParameterFilterConfig() pulumi.Output {
	return r.s.State["parameterFilterConfig"]
}

// Range Source config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
func (r *Domain) RangeEnable() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["rangeEnable"])
}

// The refer config of the accelerated domain.
func (r *Domain) ReferConfig() pulumi.Output {
	return r.s.State["referConfig"]
}

// Scope of the accelerated domain. Valid values are `domestic`, `overseas`, `global`. Default value is `domestic`. This parameter's setting is valid Only for the international users and domestic L3 and above users .
func (r *Domain) Scope() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scope"])
}

// Source port of the accelerated domain. Valid values are `80` and `443`. Default value is `80`. You must use `80` when the `sourceType` is `oss`.
func (r *Domain) SourcePort() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["sourcePort"])
}

// Source type of the accelerated domain. Valid values are `ipaddr`, `domain`, `oss`. You must set this parameter when `cdnType` value is not `liveStream`.
func (r *Domain) SourceType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceType"])
}

// Sources of the accelerated domain. It's a list of domain names or IP address and consists of at most 20 items. You must set this parameter when `cdnType` value is not `liveStream`.
func (r *Domain) Sources() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["sources"])
}

// Video Seek config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
func (r *Domain) VideoSeekEnable() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["videoSeekEnable"])
}

// Input properties used for looking up and filtering Domain resources.
type DomainState struct {
	// The auth config of the accelerated domain.
	AuthConfig interface{}
	BlockIps interface{}
	// The cache configs of the accelerated domain.
	CacheConfigs interface{}
	// Cdn type of the accelerated domain. Valid values are `web`, `download`, `video`, `liveStream`.
	CdnType interface{}
	CertificateConfig interface{}
	// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
	DomainName interface{}
	// The http header configs of the accelerated domain.
	HttpHeaderConfigs interface{}
	// Page Optimize config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`. It can effectively remove the page redundant content, reduce the file size and improve the speed of distribution when this parameter value is `on`.
	OptimizeEnable interface{}
	// The error page config of the accelerated domain.
	Page404Config interface{}
	// Page Compress config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
	PageCompressEnable interface{}
	// The parameter filter config of the accelerated domain.
	ParameterFilterConfig interface{}
	// Range Source config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
	RangeEnable interface{}
	// The refer config of the accelerated domain.
	ReferConfig interface{}
	// Scope of the accelerated domain. Valid values are `domestic`, `overseas`, `global`. Default value is `domestic`. This parameter's setting is valid Only for the international users and domestic L3 and above users .
	Scope interface{}
	// Source port of the accelerated domain. Valid values are `80` and `443`. Default value is `80`. You must use `80` when the `sourceType` is `oss`.
	SourcePort interface{}
	// Source type of the accelerated domain. Valid values are `ipaddr`, `domain`, `oss`. You must set this parameter when `cdnType` value is not `liveStream`.
	SourceType interface{}
	// Sources of the accelerated domain. It's a list of domain names or IP address and consists of at most 20 items. You must set this parameter when `cdnType` value is not `liveStream`.
	Sources interface{}
	// Video Seek config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
	VideoSeekEnable interface{}
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// The auth config of the accelerated domain.
	AuthConfig interface{}
	BlockIps interface{}
	// The cache configs of the accelerated domain.
	CacheConfigs interface{}
	// Cdn type of the accelerated domain. Valid values are `web`, `download`, `video`, `liveStream`.
	CdnType interface{}
	CertificateConfig interface{}
	// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
	DomainName interface{}
	// The http header configs of the accelerated domain.
	HttpHeaderConfigs interface{}
	// Page Optimize config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`. It can effectively remove the page redundant content, reduce the file size and improve the speed of distribution when this parameter value is `on`.
	OptimizeEnable interface{}
	// The error page config of the accelerated domain.
	Page404Config interface{}
	// Page Compress config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
	PageCompressEnable interface{}
	// The parameter filter config of the accelerated domain.
	ParameterFilterConfig interface{}
	// Range Source config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
	RangeEnable interface{}
	// The refer config of the accelerated domain.
	ReferConfig interface{}
	// Scope of the accelerated domain. Valid values are `domestic`, `overseas`, `global`. Default value is `domestic`. This parameter's setting is valid Only for the international users and domestic L3 and above users .
	Scope interface{}
	// Source port of the accelerated domain. Valid values are `80` and `443`. Default value is `80`. You must use `80` when the `sourceType` is `oss`.
	SourcePort interface{}
	// Source type of the accelerated domain. Valid values are `ipaddr`, `domain`, `oss`. You must set this parameter when `cdnType` value is not `liveStream`.
	SourceType interface{}
	// Sources of the accelerated domain. It's a list of domain names or IP address and consists of at most 20 items. You must set this parameter when `cdnType` value is not `liveStream`.
	Sources interface{}
	// Video Seek config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
	VideoSeekEnable interface{}
}
