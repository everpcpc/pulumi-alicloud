// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a RAM Policy resource. 
// 
// ~> **NOTE:** When you want to destroy this resource forcefully(means remove all the relationships associated with it automatically and then destroy it) without set `force`  with `true` at beginning, you need add `force = true` to configuration file and run `terraform plan`, then you can delete resource forcefully.
type Policy struct {
	s *pulumi.ResourceState
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOpt) (*Policy, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["document"] = nil
		inputs["force"] = nil
		inputs["name"] = nil
		inputs["statements"] = nil
		inputs["version"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["document"] = args.Document
		inputs["force"] = args.Force
		inputs["name"] = args.Name
		inputs["statements"] = args.Statements
		inputs["version"] = args.Version
	}
	inputs["attachmentCount"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("alicloud:ram/policy:Policy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PolicyState, opts ...pulumi.ResourceOpt) (*Policy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["attachmentCount"] = state.AttachmentCount
		inputs["description"] = state.Description
		inputs["document"] = state.Document
		inputs["force"] = state.Force
		inputs["name"] = state.Name
		inputs["statements"] = state.Statements
		inputs["type"] = state.Type
		inputs["version"] = state.Version
	}
	s, err := ctx.ReadResource("alicloud:ram/policy:Policy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Policy) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Policy) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The policy attachment count.
func (r *Policy) AttachmentCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["attachmentCount"])
}

// Description of the RAM policy. This name can have a string of 1 to 1024 characters.
func (r *Policy) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Document of the RAM policy. It is required when the `statement` is not specified.
func (r *Policy) Document() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["document"])
}

// This parameter is used for resource destroy. Default value is `false`.
func (r *Policy) Force() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["force"])
}

// Name of the RAM policy. This name can have a string of 1 to 128 characters, must contain only alphanumeric characters or hyphen "-", and must not begin with a hyphen.
func (r *Policy) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Statements of the RAM policy document. It is required when the `document` is not specified.
func (r *Policy) Statements() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["statements"])
}

// The policy type.
func (r *Policy) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Version of the RAM policy document. Valid value is `1`. Default value is `1`.
func (r *Policy) Version() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["version"])
}

// Input properties used for looking up and filtering Policy resources.
type PolicyState struct {
	// The policy attachment count.
	AttachmentCount interface{}
	// Description of the RAM policy. This name can have a string of 1 to 1024 characters.
	Description interface{}
	// Document of the RAM policy. It is required when the `statement` is not specified.
	Document interface{}
	// This parameter is used for resource destroy. Default value is `false`.
	Force interface{}
	// Name of the RAM policy. This name can have a string of 1 to 128 characters, must contain only alphanumeric characters or hyphen "-", and must not begin with a hyphen.
	Name interface{}
	// Statements of the RAM policy document. It is required when the `document` is not specified.
	Statements interface{}
	// The policy type.
	Type interface{}
	// Version of the RAM policy document. Valid value is `1`. Default value is `1`.
	Version interface{}
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Description of the RAM policy. This name can have a string of 1 to 1024 characters.
	Description interface{}
	// Document of the RAM policy. It is required when the `statement` is not specified.
	Document interface{}
	// This parameter is used for resource destroy. Default value is `false`.
	Force interface{}
	// Name of the RAM policy. This name can have a string of 1 to 128 characters, must contain only alphanumeric characters or hyphen "-", and must not begin with a hyphen.
	Name interface{}
	// Statements of the RAM policy document. It is required when the `document` is not specified.
	Statements interface{}
	// Version of the RAM policy document. Valid value is `1`. Default value is `1`.
	Version interface{}
}
