// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/ram_account_password_policy.html.markdown.
type AccountPasswordPolicy struct {
	s *pulumi.ResourceState
}

// NewAccountPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccountPasswordPolicy(ctx *pulumi.Context,
	name string, args *AccountPasswordPolicyArgs, opts ...pulumi.ResourceOpt) (*AccountPasswordPolicy, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["hardExpiry"] = nil
		inputs["maxLoginAttempts"] = nil
		inputs["maxPasswordAge"] = nil
		inputs["minimumPasswordLength"] = nil
		inputs["passwordReusePrevention"] = nil
		inputs["requireLowercaseCharacters"] = nil
		inputs["requireNumbers"] = nil
		inputs["requireSymbols"] = nil
		inputs["requireUppercaseCharacters"] = nil
	} else {
		inputs["hardExpiry"] = args.HardExpiry
		inputs["maxLoginAttempts"] = args.MaxLoginAttempts
		inputs["maxPasswordAge"] = args.MaxPasswordAge
		inputs["minimumPasswordLength"] = args.MinimumPasswordLength
		inputs["passwordReusePrevention"] = args.PasswordReusePrevention
		inputs["requireLowercaseCharacters"] = args.RequireLowercaseCharacters
		inputs["requireNumbers"] = args.RequireNumbers
		inputs["requireSymbols"] = args.RequireSymbols
		inputs["requireUppercaseCharacters"] = args.RequireUppercaseCharacters
	}
	s, err := ctx.RegisterResource("alicloud:ram/accountPasswordPolicy:AccountPasswordPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountPasswordPolicy{s: s}, nil
}

// GetAccountPasswordPolicy gets an existing AccountPasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccountPasswordPolicyState, opts ...pulumi.ResourceOpt) (*AccountPasswordPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["hardExpiry"] = state.HardExpiry
		inputs["maxLoginAttempts"] = state.MaxLoginAttempts
		inputs["maxPasswordAge"] = state.MaxPasswordAge
		inputs["minimumPasswordLength"] = state.MinimumPasswordLength
		inputs["passwordReusePrevention"] = state.PasswordReusePrevention
		inputs["requireLowercaseCharacters"] = state.RequireLowercaseCharacters
		inputs["requireNumbers"] = state.RequireNumbers
		inputs["requireSymbols"] = state.RequireSymbols
		inputs["requireUppercaseCharacters"] = state.RequireUppercaseCharacters
	}
	s, err := ctx.ReadResource("alicloud:ram/accountPasswordPolicy:AccountPasswordPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountPasswordPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccountPasswordPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccountPasswordPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies if a password can expire in a hard way. Default to false.
func (r *AccountPasswordPolicy) HardExpiry() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["hardExpiry"])
}

// Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
func (r *AccountPasswordPolicy) MaxLoginAttempts() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxLoginAttempts"])
}

// The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
func (r *AccountPasswordPolicy) MaxPasswordAge() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxPasswordAge"])
}

// Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
func (r *AccountPasswordPolicy) MinimumPasswordLength() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minimumPasswordLength"])
}

// User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
func (r *AccountPasswordPolicy) PasswordReusePrevention() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["passwordReusePrevention"])
}

// Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
func (r *AccountPasswordPolicy) RequireLowercaseCharacters() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["requireLowercaseCharacters"])
}

// Specifies if the occurrence of a number in the password is mandatory. Default to true.
func (r *AccountPasswordPolicy) RequireNumbers() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["requireNumbers"])
}

// (Optional Specifies if the occurrence of a special character in the password is mandatory. Default to true.
func (r *AccountPasswordPolicy) RequireSymbols() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["requireSymbols"])
}

// Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
func (r *AccountPasswordPolicy) RequireUppercaseCharacters() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["requireUppercaseCharacters"])
}

// Input properties used for looking up and filtering AccountPasswordPolicy resources.
type AccountPasswordPolicyState struct {
	// Specifies if a password can expire in a hard way. Default to false.
	HardExpiry interface{}
	// Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
	MaxLoginAttempts interface{}
	// The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
	MaxPasswordAge interface{}
	// Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
	MinimumPasswordLength interface{}
	// User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
	PasswordReusePrevention interface{}
	// Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
	RequireLowercaseCharacters interface{}
	// Specifies if the occurrence of a number in the password is mandatory. Default to true.
	RequireNumbers interface{}
	// (Optional Specifies if the occurrence of a special character in the password is mandatory. Default to true.
	RequireSymbols interface{}
	// Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
	RequireUppercaseCharacters interface{}
}

// The set of arguments for constructing a AccountPasswordPolicy resource.
type AccountPasswordPolicyArgs struct {
	// Specifies if a password can expire in a hard way. Default to false.
	HardExpiry interface{}
	// Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
	MaxLoginAttempts interface{}
	// The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
	MaxPasswordAge interface{}
	// Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
	MinimumPasswordLength interface{}
	// User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
	PasswordReusePrevention interface{}
	// Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
	RequireLowercaseCharacters interface{}
	// Specifies if the occurrence of a number in the password is mandatory. Default to true.
	RequireNumbers interface{}
	// (Optional Specifies if the occurrence of a special character in the password is mandatory. Default to true.
	RequireSymbols interface{}
	// Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
	RequireUppercaseCharacters interface{}
}
