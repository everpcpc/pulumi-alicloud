// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a RAM User access key resource.
// 
// ~> **NOTE:**  You should set the `secret_file` if you want to get the access key.  
type AccessKey struct {
	s *pulumi.ResourceState
}

// NewAccessKey registers a new resource with the given unique name, arguments, and options.
func NewAccessKey(ctx *pulumi.Context,
	name string, args *AccessKeyArgs, opts ...pulumi.ResourceOpt) (*AccessKey, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["secretFile"] = nil
		inputs["status"] = nil
		inputs["userName"] = nil
	} else {
		inputs["secretFile"] = args.SecretFile
		inputs["status"] = args.Status
		inputs["userName"] = args.UserName
	}
	s, err := ctx.RegisterResource("alicloud:ram/accessKey:AccessKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessKey{s: s}, nil
}

// GetAccessKey gets an existing AccessKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccessKeyState, opts ...pulumi.ResourceOpt) (*AccessKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["secretFile"] = state.SecretFile
		inputs["status"] = state.Status
		inputs["userName"] = state.UserName
	}
	s, err := ctx.ReadResource("alicloud:ram/accessKey:AccessKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccessKey) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccessKey) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The name of file that can save access key id and access key secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.
func (r *AccessKey) SecretFile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secretFile"])
}

// Status of access key. It must be `Active` or `Inactive`. Default value is `Active`.
func (r *AccessKey) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Name of the RAM user. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin with a hyphen.
func (r *AccessKey) UserName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userName"])
}

// Input properties used for looking up and filtering AccessKey resources.
type AccessKeyState struct {
	// The name of file that can save access key id and access key secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.
	SecretFile interface{}
	// Status of access key. It must be `Active` or `Inactive`. Default value is `Active`.
	Status interface{}
	// Name of the RAM user. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin with a hyphen.
	UserName interface{}
}

// The set of arguments for constructing a AccessKey resource.
type AccessKeyArgs struct {
	// The name of file that can save access key id and access key secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.
	SecretFile interface{}
	// Status of access key. It must be `Active` or `Inactive`. Default value is `Active`.
	Status interface{}
	// Name of the RAM user. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin with a hyphen.
	UserName interface{}
}
