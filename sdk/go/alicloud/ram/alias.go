// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/ram_alias.html.markdown.
type Alias struct {
	s *pulumi.ResourceState
}

// NewAlias registers a new resource with the given unique name, arguments, and options.
func NewAlias(ctx *pulumi.Context,
	name string, args *AliasArgs, opts ...pulumi.ResourceOpt) (*Alias, error) {
	if args == nil || args.AccountAlias == nil {
		return nil, errors.New("missing required argument 'AccountAlias'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountAlias"] = nil
	} else {
		inputs["accountAlias"] = args.AccountAlias
	}
	s, err := ctx.RegisterResource("alicloud:ram/alias:Alias", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Alias{s: s}, nil
}

// GetAlias gets an existing Alias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlias(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AliasState, opts ...pulumi.ResourceOpt) (*Alias, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountAlias"] = state.AccountAlias
	}
	s, err := ctx.ReadResource("alicloud:ram/alias:Alias", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Alias{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Alias) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Alias) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Alias) AccountAlias() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accountAlias"])
}

// Input properties used for looking up and filtering Alias resources.
type AliasState struct {
	AccountAlias interface{}
}

// The set of arguments for constructing a Alias resource.
type AliasArgs struct {
	AccountAlias interface{}
}
