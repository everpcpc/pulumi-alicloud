// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package actiontrail

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a new resource to manage [Action Trail](https://www.alibabacloud.com/help/doc-detail/28804.htm).
// 
// > **NOTE:** Available in 1.35.0+
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/actiontrail.html.markdown.
type Trail struct {
	s *pulumi.ResourceState
}

// NewTrail registers a new resource with the given unique name, arguments, and options.
func NewTrail(ctx *pulumi.Context,
	name string, args *TrailArgs, opts ...pulumi.ResourceOpt) (*Trail, error) {
	if args == nil || args.OssBucketName == nil {
		return nil, errors.New("missing required argument 'OssBucketName'")
	}
	if args == nil || args.RoleName == nil {
		return nil, errors.New("missing required argument 'RoleName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["eventRw"] = nil
		inputs["name"] = nil
		inputs["ossBucketName"] = nil
		inputs["ossKeyPrefix"] = nil
		inputs["roleName"] = nil
		inputs["slsProjectArn"] = nil
		inputs["slsWriteRoleArn"] = nil
	} else {
		inputs["eventRw"] = args.EventRw
		inputs["name"] = args.Name
		inputs["ossBucketName"] = args.OssBucketName
		inputs["ossKeyPrefix"] = args.OssKeyPrefix
		inputs["roleName"] = args.RoleName
		inputs["slsProjectArn"] = args.SlsProjectArn
		inputs["slsWriteRoleArn"] = args.SlsWriteRoleArn
	}
	s, err := ctx.RegisterResource("alicloud:actiontrail/trail:Trail", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Trail{s: s}, nil
}

// GetTrail gets an existing Trail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrail(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TrailState, opts ...pulumi.ResourceOpt) (*Trail, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["eventRw"] = state.EventRw
		inputs["name"] = state.Name
		inputs["ossBucketName"] = state.OssBucketName
		inputs["ossKeyPrefix"] = state.OssKeyPrefix
		inputs["roleName"] = state.RoleName
		inputs["slsProjectArn"] = state.SlsProjectArn
		inputs["slsWriteRoleArn"] = state.SlsWriteRoleArn
	}
	s, err := ctx.ReadResource("alicloud:actiontrail/trail:Trail", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Trail{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Trail) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Trail) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Indicates whether the event is a read or a write event. Valid values: Read, Write, and All. Default value: Write.
func (r *Trail) EventRw() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["eventRw"])
}

// The name of the trail to be created, which must be unique for an account.
func (r *Trail) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The OSS bucket to which the trail delivers logs. Ensure that this is an existing OSS bucket.
func (r *Trail) OssBucketName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ossBucketName"])
}

// The prefix of the specified OSS bucket name. This parameter can be left empty.
func (r *Trail) OssKeyPrefix() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ossKeyPrefix"])
}

// The RAM role in ActionTrail permitted by the user.
func (r *Trail) RoleName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["roleName"])
}

// The unique ARN of the Log Service project.
func (r *Trail) SlsProjectArn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["slsProjectArn"])
}

// The unique ARN of the Log Service role.
func (r *Trail) SlsWriteRoleArn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["slsWriteRoleArn"])
}

// Input properties used for looking up and filtering Trail resources.
type TrailState struct {
	// Indicates whether the event is a read or a write event. Valid values: Read, Write, and All. Default value: Write.
	EventRw interface{}
	// The name of the trail to be created, which must be unique for an account.
	Name interface{}
	// The OSS bucket to which the trail delivers logs. Ensure that this is an existing OSS bucket.
	OssBucketName interface{}
	// The prefix of the specified OSS bucket name. This parameter can be left empty.
	OssKeyPrefix interface{}
	// The RAM role in ActionTrail permitted by the user.
	RoleName interface{}
	// The unique ARN of the Log Service project.
	SlsProjectArn interface{}
	// The unique ARN of the Log Service role.
	SlsWriteRoleArn interface{}
}

// The set of arguments for constructing a Trail resource.
type TrailArgs struct {
	// Indicates whether the event is a read or a write event. Valid values: Read, Write, and All. Default value: Write.
	EventRw interface{}
	// The name of the trail to be created, which must be unique for an account.
	Name interface{}
	// The OSS bucket to which the trail delivers logs. Ensure that this is an existing OSS bucket.
	OssBucketName interface{}
	// The prefix of the specified OSS bucket name. This parameter can be left empty.
	OssKeyPrefix interface{}
	// The RAM role in ActionTrail permitted by the user.
	RoleName interface{}
	// The unique ARN of the Log Service project.
	SlsProjectArn interface{}
	// The unique ARN of the Log Service role.
	SlsWriteRoleArn interface{}
}
