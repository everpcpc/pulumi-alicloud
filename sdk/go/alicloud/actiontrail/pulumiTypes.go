// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package actiontrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GetInstancesInstance struct {
	// The create time of the instance.
	CreateTime string `pulumi:"createTime"`
	// The deploy type of the instance. 0: sharing instance, 1: vpc instance, 2: vpc instance(support ip mapping), 3: eip instance, 4: eip/vpc instance, 5: vpc instance.
	DeployType int `pulumi:"deployType"`
	// The disk size of the instance.
	DiskSize int `pulumi:"diskSize"`
	// The disk type of the instance. 0: efficient cloud disk , 1: SSD.
	DiskType int `pulumi:"diskType"`
	// The peak bandwidth of the instance.
	EipMax int `pulumi:"eipMax"`
	// ID of the instance.
	Id string `pulumi:"id"`
	// The peak value of io of the instance.
	IoMax int `pulumi:"ioMax"`
	// Name of the instance.
	Name string `pulumi:"name"`
	// The paid type of the instance.
	PaidType string `pulumi:"paidType"`
	// The current status of the instance. -1: unknown status, 0: wait deploy, 1: initializing, 2: preparing, 3 starting, 5: in service, 7: wait upgrade, 8: upgrading, 10: released, 15: freeze, 101: deploy error, 102: upgrade error.
	ServiceStatus int `pulumi:"serviceStatus"`
	// The spec type of the instance.
	SpecType string `pulumi:"specType"`
	// The max num of topic can be create of the instance.
	TopicQuota int `pulumi:"topicQuota"`
	// The ID of attaching VPC to instance.
	VpcId string `pulumi:"vpcId"`
	// The ID of attaching vswitch to instance.
	VswitchId string `pulumi:"vswitchId"`
	// The ID of attaching zone to instance.
	ZoneId string `pulumi:"zoneId"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
// 		 GetInstancesInstanceArgs{...}
//
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// The create time of the instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The deploy type of the instance. 0: sharing instance, 1: vpc instance, 2: vpc instance(support ip mapping), 3: eip instance, 4: eip/vpc instance, 5: vpc instance.
	DeployType pulumi.IntInput `pulumi:"deployType"`
	// The disk size of the instance.
	DiskSize pulumi.IntInput `pulumi:"diskSize"`
	// The disk type of the instance. 0: efficient cloud disk , 1: SSD.
	DiskType pulumi.IntInput `pulumi:"diskType"`
	// The peak bandwidth of the instance.
	EipMax pulumi.IntInput `pulumi:"eipMax"`
	// ID of the instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The peak value of io of the instance.
	IoMax pulumi.IntInput `pulumi:"ioMax"`
	// Name of the instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The paid type of the instance.
	PaidType pulumi.StringInput `pulumi:"paidType"`
	// The current status of the instance. -1: unknown status, 0: wait deploy, 1: initializing, 2: preparing, 3 starting, 5: in service, 7: wait upgrade, 8: upgrading, 10: released, 15: freeze, 101: deploy error, 102: upgrade error.
	ServiceStatus pulumi.IntInput `pulumi:"serviceStatus"`
	// The spec type of the instance.
	SpecType pulumi.StringInput `pulumi:"specType"`
	// The max num of topic can be create of the instance.
	TopicQuota pulumi.IntInput `pulumi:"topicQuota"`
	// The ID of attaching VPC to instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The ID of attaching vswitch to instance.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// The ID of attaching zone to instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
// 		 GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
//
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// The create time of the instance.
func (o GetInstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The deploy type of the instance. 0: sharing instance, 1: vpc instance, 2: vpc instance(support ip mapping), 3: eip instance, 4: eip/vpc instance, 5: vpc instance.
func (o GetInstancesInstanceOutput) DeployType() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.DeployType }).(pulumi.IntOutput)
}

// The disk size of the instance.
func (o GetInstancesInstanceOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.DiskSize }).(pulumi.IntOutput)
}

// The disk type of the instance. 0: efficient cloud disk , 1: SSD.
func (o GetInstancesInstanceOutput) DiskType() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.DiskType }).(pulumi.IntOutput)
}

// The peak bandwidth of the instance.
func (o GetInstancesInstanceOutput) EipMax() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.EipMax }).(pulumi.IntOutput)
}

// ID of the instance.
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The peak value of io of the instance.
func (o GetInstancesInstanceOutput) IoMax() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.IoMax }).(pulumi.IntOutput)
}

// Name of the instance.
func (o GetInstancesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Name }).(pulumi.StringOutput)
}

// The paid type of the instance.
func (o GetInstancesInstanceOutput) PaidType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.PaidType }).(pulumi.StringOutput)
}

// The current status of the instance. -1: unknown status, 0: wait deploy, 1: initializing, 2: preparing, 3 starting, 5: in service, 7: wait upgrade, 8: upgrading, 10: released, 15: freeze, 101: deploy error, 102: upgrade error.
func (o GetInstancesInstanceOutput) ServiceStatus() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.ServiceStatus }).(pulumi.IntOutput)
}

// The spec type of the instance.
func (o GetInstancesInstanceOutput) SpecType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.SpecType }).(pulumi.StringOutput)
}

// The max num of topic can be create of the instance.
func (o GetInstancesInstanceOutput) TopicQuota() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.TopicQuota }).(pulumi.IntOutput)
}

// The ID of attaching VPC to instance.
func (o GetInstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The ID of attaching vswitch to instance.
func (o GetInstancesInstanceOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.VswitchId }).(pulumi.StringOutput)
}

// The ID of attaching zone to instance.
func (o GetInstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetSaslAclsAcl struct {
	// The operation type of the sasl acl.
	AclOperationType string `pulumi:"aclOperationType"`
	// Get results for the specified resource name.
	AclResourceName string `pulumi:"aclResourceName"`
	// The resource pattern type of the sasl acl.
	AclResourcePatternType string `pulumi:"aclResourcePatternType"`
	// Get results for the specified resource type.
	AclResourceType string `pulumi:"aclResourceType"`
	// The host of the sasl acl.
	Host string `pulumi:"host"`
	// Get results for the specified username.
	Username string `pulumi:"username"`
}

// GetSaslAclsAclInput is an input type that accepts GetSaslAclsAclArgs and GetSaslAclsAclOutput values.
// You can construct a concrete instance of `GetSaslAclsAclInput` via:
//
// 		 GetSaslAclsAclArgs{...}
//
type GetSaslAclsAclInput interface {
	pulumi.Input

	ToGetSaslAclsAclOutput() GetSaslAclsAclOutput
	ToGetSaslAclsAclOutputWithContext(context.Context) GetSaslAclsAclOutput
}

type GetSaslAclsAclArgs struct {
	// The operation type of the sasl acl.
	AclOperationType pulumi.StringInput `pulumi:"aclOperationType"`
	// Get results for the specified resource name.
	AclResourceName pulumi.StringInput `pulumi:"aclResourceName"`
	// The resource pattern type of the sasl acl.
	AclResourcePatternType pulumi.StringInput `pulumi:"aclResourcePatternType"`
	// Get results for the specified resource type.
	AclResourceType pulumi.StringInput `pulumi:"aclResourceType"`
	// The host of the sasl acl.
	Host pulumi.StringInput `pulumi:"host"`
	// Get results for the specified username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetSaslAclsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSaslAclsAcl)(nil)).Elem()
}

func (i GetSaslAclsAclArgs) ToGetSaslAclsAclOutput() GetSaslAclsAclOutput {
	return i.ToGetSaslAclsAclOutputWithContext(context.Background())
}

func (i GetSaslAclsAclArgs) ToGetSaslAclsAclOutputWithContext(ctx context.Context) GetSaslAclsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSaslAclsAclOutput)
}

// GetSaslAclsAclArrayInput is an input type that accepts GetSaslAclsAclArray and GetSaslAclsAclArrayOutput values.
// You can construct a concrete instance of `GetSaslAclsAclArrayInput` via:
//
// 		 GetSaslAclsAclArray{ GetSaslAclsAclArgs{...} }
//
type GetSaslAclsAclArrayInput interface {
	pulumi.Input

	ToGetSaslAclsAclArrayOutput() GetSaslAclsAclArrayOutput
	ToGetSaslAclsAclArrayOutputWithContext(context.Context) GetSaslAclsAclArrayOutput
}

type GetSaslAclsAclArray []GetSaslAclsAclInput

func (GetSaslAclsAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSaslAclsAcl)(nil)).Elem()
}

func (i GetSaslAclsAclArray) ToGetSaslAclsAclArrayOutput() GetSaslAclsAclArrayOutput {
	return i.ToGetSaslAclsAclArrayOutputWithContext(context.Background())
}

func (i GetSaslAclsAclArray) ToGetSaslAclsAclArrayOutputWithContext(ctx context.Context) GetSaslAclsAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSaslAclsAclArrayOutput)
}

type GetSaslAclsAclOutput struct{ *pulumi.OutputState }

func (GetSaslAclsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSaslAclsAcl)(nil)).Elem()
}

func (o GetSaslAclsAclOutput) ToGetSaslAclsAclOutput() GetSaslAclsAclOutput {
	return o
}

func (o GetSaslAclsAclOutput) ToGetSaslAclsAclOutputWithContext(ctx context.Context) GetSaslAclsAclOutput {
	return o
}

// The operation type of the sasl acl.
func (o GetSaslAclsAclOutput) AclOperationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslAclsAcl) string { return v.AclOperationType }).(pulumi.StringOutput)
}

// Get results for the specified resource name.
func (o GetSaslAclsAclOutput) AclResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslAclsAcl) string { return v.AclResourceName }).(pulumi.StringOutput)
}

// The resource pattern type of the sasl acl.
func (o GetSaslAclsAclOutput) AclResourcePatternType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslAclsAcl) string { return v.AclResourcePatternType }).(pulumi.StringOutput)
}

// Get results for the specified resource type.
func (o GetSaslAclsAclOutput) AclResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslAclsAcl) string { return v.AclResourceType }).(pulumi.StringOutput)
}

// The host of the sasl acl.
func (o GetSaslAclsAclOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslAclsAcl) string { return v.Host }).(pulumi.StringOutput)
}

// Get results for the specified username.
func (o GetSaslAclsAclOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslAclsAcl) string { return v.Username }).(pulumi.StringOutput)
}

type GetSaslAclsAclArrayOutput struct{ *pulumi.OutputState }

func (GetSaslAclsAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSaslAclsAcl)(nil)).Elem()
}

func (o GetSaslAclsAclArrayOutput) ToGetSaslAclsAclArrayOutput() GetSaslAclsAclArrayOutput {
	return o
}

func (o GetSaslAclsAclArrayOutput) ToGetSaslAclsAclArrayOutputWithContext(ctx context.Context) GetSaslAclsAclArrayOutput {
	return o
}

func (o GetSaslAclsAclArrayOutput) Index(i pulumi.IntInput) GetSaslAclsAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSaslAclsAcl {
		return vs[0].([]GetSaslAclsAcl)[vs[1].(int)]
	}).(GetSaslAclsAclOutput)
}

type GetSaslUsersUser struct {
	// The password of the user.
	Password string `pulumi:"password"`
	// The username of the user.
	Username string `pulumi:"username"`
}

// GetSaslUsersUserInput is an input type that accepts GetSaslUsersUserArgs and GetSaslUsersUserOutput values.
// You can construct a concrete instance of `GetSaslUsersUserInput` via:
//
// 		 GetSaslUsersUserArgs{...}
//
type GetSaslUsersUserInput interface {
	pulumi.Input

	ToGetSaslUsersUserOutput() GetSaslUsersUserOutput
	ToGetSaslUsersUserOutputWithContext(context.Context) GetSaslUsersUserOutput
}

type GetSaslUsersUserArgs struct {
	// The password of the user.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetSaslUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSaslUsersUser)(nil)).Elem()
}

func (i GetSaslUsersUserArgs) ToGetSaslUsersUserOutput() GetSaslUsersUserOutput {
	return i.ToGetSaslUsersUserOutputWithContext(context.Background())
}

func (i GetSaslUsersUserArgs) ToGetSaslUsersUserOutputWithContext(ctx context.Context) GetSaslUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSaslUsersUserOutput)
}

// GetSaslUsersUserArrayInput is an input type that accepts GetSaslUsersUserArray and GetSaslUsersUserArrayOutput values.
// You can construct a concrete instance of `GetSaslUsersUserArrayInput` via:
//
// 		 GetSaslUsersUserArray{ GetSaslUsersUserArgs{...} }
//
type GetSaslUsersUserArrayInput interface {
	pulumi.Input

	ToGetSaslUsersUserArrayOutput() GetSaslUsersUserArrayOutput
	ToGetSaslUsersUserArrayOutputWithContext(context.Context) GetSaslUsersUserArrayOutput
}

type GetSaslUsersUserArray []GetSaslUsersUserInput

func (GetSaslUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSaslUsersUser)(nil)).Elem()
}

func (i GetSaslUsersUserArray) ToGetSaslUsersUserArrayOutput() GetSaslUsersUserArrayOutput {
	return i.ToGetSaslUsersUserArrayOutputWithContext(context.Background())
}

func (i GetSaslUsersUserArray) ToGetSaslUsersUserArrayOutputWithContext(ctx context.Context) GetSaslUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSaslUsersUserArrayOutput)
}

type GetSaslUsersUserOutput struct{ *pulumi.OutputState }

func (GetSaslUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSaslUsersUser)(nil)).Elem()
}

func (o GetSaslUsersUserOutput) ToGetSaslUsersUserOutput() GetSaslUsersUserOutput {
	return o
}

func (o GetSaslUsersUserOutput) ToGetSaslUsersUserOutputWithContext(ctx context.Context) GetSaslUsersUserOutput {
	return o
}

// The password of the user.
func (o GetSaslUsersUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslUsersUser) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the user.
func (o GetSaslUsersUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslUsersUser) string { return v.Username }).(pulumi.StringOutput)
}

type GetSaslUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetSaslUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSaslUsersUser)(nil)).Elem()
}

func (o GetSaslUsersUserArrayOutput) ToGetSaslUsersUserArrayOutput() GetSaslUsersUserArrayOutput {
	return o
}

func (o GetSaslUsersUserArrayOutput) ToGetSaslUsersUserArrayOutputWithContext(ctx context.Context) GetSaslUsersUserArrayOutput {
	return o
}

func (o GetSaslUsersUserArrayOutput) Index(i pulumi.IntInput) GetSaslUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSaslUsersUser {
		return vs[0].([]GetSaslUsersUser)[vs[1].(int)]
	}).(GetSaslUsersUserOutput)
}

type GetTopicsTopic struct {
	// whether the current topic is kafka compact topic or not.
	CompactTopic bool `pulumi:"compactTopic"`
	// Time of creation.
	CreateTime string `pulumi:"createTime"`
	// whether the current topic is kafka local topic or not.
	LocalTopic bool `pulumi:"localTopic"`
	// Partition number of the topic.
	PartitionNum int `pulumi:"partitionNum"`
	// Remark of the topic.
	Remark string `pulumi:"remark"`
	// The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
	Status int `pulumi:"status"`
	// The name of the topic.
	Topic string `pulumi:"topic"`
}

// GetTopicsTopicInput is an input type that accepts GetTopicsTopicArgs and GetTopicsTopicOutput values.
// You can construct a concrete instance of `GetTopicsTopicInput` via:
//
// 		 GetTopicsTopicArgs{...}
//
type GetTopicsTopicInput interface {
	pulumi.Input

	ToGetTopicsTopicOutput() GetTopicsTopicOutput
	ToGetTopicsTopicOutputWithContext(context.Context) GetTopicsTopicOutput
}

type GetTopicsTopicArgs struct {
	// whether the current topic is kafka compact topic or not.
	CompactTopic pulumi.BoolInput `pulumi:"compactTopic"`
	// Time of creation.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// whether the current topic is kafka local topic or not.
	LocalTopic pulumi.BoolInput `pulumi:"localTopic"`
	// Partition number of the topic.
	PartitionNum pulumi.IntInput `pulumi:"partitionNum"`
	// Remark of the topic.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
	Status pulumi.IntInput `pulumi:"status"`
	// The name of the topic.
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (GetTopicsTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopic)(nil)).Elem()
}

func (i GetTopicsTopicArgs) ToGetTopicsTopicOutput() GetTopicsTopicOutput {
	return i.ToGetTopicsTopicOutputWithContext(context.Background())
}

func (i GetTopicsTopicArgs) ToGetTopicsTopicOutputWithContext(ctx context.Context) GetTopicsTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicOutput)
}

// GetTopicsTopicArrayInput is an input type that accepts GetTopicsTopicArray and GetTopicsTopicArrayOutput values.
// You can construct a concrete instance of `GetTopicsTopicArrayInput` via:
//
// 		 GetTopicsTopicArray{ GetTopicsTopicArgs{...} }
//
type GetTopicsTopicArrayInput interface {
	pulumi.Input

	ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput
	ToGetTopicsTopicArrayOutputWithContext(context.Context) GetTopicsTopicArrayOutput
}

type GetTopicsTopicArray []GetTopicsTopicInput

func (GetTopicsTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsTopic)(nil)).Elem()
}

func (i GetTopicsTopicArray) ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput {
	return i.ToGetTopicsTopicArrayOutputWithContext(context.Background())
}

func (i GetTopicsTopicArray) ToGetTopicsTopicArrayOutputWithContext(ctx context.Context) GetTopicsTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicArrayOutput)
}

type GetTopicsTopicOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopic)(nil)).Elem()
}

func (o GetTopicsTopicOutput) ToGetTopicsTopicOutput() GetTopicsTopicOutput {
	return o
}

func (o GetTopicsTopicOutput) ToGetTopicsTopicOutputWithContext(ctx context.Context) GetTopicsTopicOutput {
	return o
}

// whether the current topic is kafka compact topic or not.
func (o GetTopicsTopicOutput) CompactTopic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTopicsTopic) bool { return v.CompactTopic }).(pulumi.BoolOutput)
}

// Time of creation.
func (o GetTopicsTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.CreateTime }).(pulumi.StringOutput)
}

// whether the current topic is kafka local topic or not.
func (o GetTopicsTopicOutput) LocalTopic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTopicsTopic) bool { return v.LocalTopic }).(pulumi.BoolOutput)
}

// Partition number of the topic.
func (o GetTopicsTopicOutput) PartitionNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsTopic) int { return v.PartitionNum }).(pulumi.IntOutput)
}

// Remark of the topic.
func (o GetTopicsTopicOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.Remark }).(pulumi.StringOutput)
}

// The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
func (o GetTopicsTopicOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsTopic) int { return v.Status }).(pulumi.IntOutput)
}

// The name of the topic.
func (o GetTopicsTopicOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.Topic }).(pulumi.StringOutput)
}

type GetTopicsTopicArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsTopic)(nil)).Elem()
}

func (o GetTopicsTopicArrayOutput) ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput {
	return o
}

func (o GetTopicsTopicArrayOutput) ToGetTopicsTopicArrayOutputWithContext(ctx context.Context) GetTopicsTopicArrayOutput {
	return o
}

func (o GetTopicsTopicArrayOutput) Index(i pulumi.IntInput) GetTopicsTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsTopic {
		return vs[0].([]GetTopicsTopic)[vs[1].(int)]
	}).(GetTopicsTopicOutput)
}

type GetTrailsActiontrail struct {
	// Indicates whether the event is a read or a write event.
	EventRw string `pulumi:"eventRw"`
	// The name of the trail.
	Name string `pulumi:"name"`
	// The name of the specified OSS bucket.
	OssBucketName string `pulumi:"ossBucketName"`
	// The prefix of the specified OSS bucket name.
	OssKeyPrefix string `pulumi:"ossKeyPrefix"`
	// The role in ActionTrail.
	RoleName string `pulumi:"roleName"`
	// The unique ARN of the Log Service project.
	SlsProjectArn string `pulumi:"slsProjectArn"`
	// The unique ARN of the Log Service role.
	SlsWriteRoleArn string `pulumi:"slsWriteRoleArn"`
}

// GetTrailsActiontrailInput is an input type that accepts GetTrailsActiontrailArgs and GetTrailsActiontrailOutput values.
// You can construct a concrete instance of `GetTrailsActiontrailInput` via:
//
// 		 GetTrailsActiontrailArgs{...}
//
type GetTrailsActiontrailInput interface {
	pulumi.Input

	ToGetTrailsActiontrailOutput() GetTrailsActiontrailOutput
	ToGetTrailsActiontrailOutputWithContext(context.Context) GetTrailsActiontrailOutput
}

type GetTrailsActiontrailArgs struct {
	// Indicates whether the event is a read or a write event.
	EventRw pulumi.StringInput `pulumi:"eventRw"`
	// The name of the trail.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the specified OSS bucket.
	OssBucketName pulumi.StringInput `pulumi:"ossBucketName"`
	// The prefix of the specified OSS bucket name.
	OssKeyPrefix pulumi.StringInput `pulumi:"ossKeyPrefix"`
	// The role in ActionTrail.
	RoleName pulumi.StringInput `pulumi:"roleName"`
	// The unique ARN of the Log Service project.
	SlsProjectArn pulumi.StringInput `pulumi:"slsProjectArn"`
	// The unique ARN of the Log Service role.
	SlsWriteRoleArn pulumi.StringInput `pulumi:"slsWriteRoleArn"`
}

func (GetTrailsActiontrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrailsActiontrail)(nil)).Elem()
}

func (i GetTrailsActiontrailArgs) ToGetTrailsActiontrailOutput() GetTrailsActiontrailOutput {
	return i.ToGetTrailsActiontrailOutputWithContext(context.Background())
}

func (i GetTrailsActiontrailArgs) ToGetTrailsActiontrailOutputWithContext(ctx context.Context) GetTrailsActiontrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrailsActiontrailOutput)
}

// GetTrailsActiontrailArrayInput is an input type that accepts GetTrailsActiontrailArray and GetTrailsActiontrailArrayOutput values.
// You can construct a concrete instance of `GetTrailsActiontrailArrayInput` via:
//
// 		 GetTrailsActiontrailArray{ GetTrailsActiontrailArgs{...} }
//
type GetTrailsActiontrailArrayInput interface {
	pulumi.Input

	ToGetTrailsActiontrailArrayOutput() GetTrailsActiontrailArrayOutput
	ToGetTrailsActiontrailArrayOutputWithContext(context.Context) GetTrailsActiontrailArrayOutput
}

type GetTrailsActiontrailArray []GetTrailsActiontrailInput

func (GetTrailsActiontrailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrailsActiontrail)(nil)).Elem()
}

func (i GetTrailsActiontrailArray) ToGetTrailsActiontrailArrayOutput() GetTrailsActiontrailArrayOutput {
	return i.ToGetTrailsActiontrailArrayOutputWithContext(context.Background())
}

func (i GetTrailsActiontrailArray) ToGetTrailsActiontrailArrayOutputWithContext(ctx context.Context) GetTrailsActiontrailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrailsActiontrailArrayOutput)
}

type GetTrailsActiontrailOutput struct{ *pulumi.OutputState }

func (GetTrailsActiontrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrailsActiontrail)(nil)).Elem()
}

func (o GetTrailsActiontrailOutput) ToGetTrailsActiontrailOutput() GetTrailsActiontrailOutput {
	return o
}

func (o GetTrailsActiontrailOutput) ToGetTrailsActiontrailOutputWithContext(ctx context.Context) GetTrailsActiontrailOutput {
	return o
}

// Indicates whether the event is a read or a write event.
func (o GetTrailsActiontrailOutput) EventRw() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrailsActiontrail) string { return v.EventRw }).(pulumi.StringOutput)
}

// The name of the trail.
func (o GetTrailsActiontrailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrailsActiontrail) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the specified OSS bucket.
func (o GetTrailsActiontrailOutput) OssBucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrailsActiontrail) string { return v.OssBucketName }).(pulumi.StringOutput)
}

// The prefix of the specified OSS bucket name.
func (o GetTrailsActiontrailOutput) OssKeyPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrailsActiontrail) string { return v.OssKeyPrefix }).(pulumi.StringOutput)
}

// The role in ActionTrail.
func (o GetTrailsActiontrailOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrailsActiontrail) string { return v.RoleName }).(pulumi.StringOutput)
}

// The unique ARN of the Log Service project.
func (o GetTrailsActiontrailOutput) SlsProjectArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrailsActiontrail) string { return v.SlsProjectArn }).(pulumi.StringOutput)
}

// The unique ARN of the Log Service role.
func (o GetTrailsActiontrailOutput) SlsWriteRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrailsActiontrail) string { return v.SlsWriteRoleArn }).(pulumi.StringOutput)
}

type GetTrailsActiontrailArrayOutput struct{ *pulumi.OutputState }

func (GetTrailsActiontrailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrailsActiontrail)(nil)).Elem()
}

func (o GetTrailsActiontrailArrayOutput) ToGetTrailsActiontrailArrayOutput() GetTrailsActiontrailArrayOutput {
	return o
}

func (o GetTrailsActiontrailArrayOutput) ToGetTrailsActiontrailArrayOutputWithContext(ctx context.Context) GetTrailsActiontrailArrayOutput {
	return o
}

func (o GetTrailsActiontrailArrayOutput) Index(i pulumi.IntInput) GetTrailsActiontrailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrailsActiontrail {
		return vs[0].([]GetTrailsActiontrail)[vs[1].(int)]
	}).(GetTrailsActiontrailOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetSaslAclsAclOutput{})
	pulumi.RegisterOutputType(GetSaslAclsAclArrayOutput{})
	pulumi.RegisterOutputType(GetSaslUsersUserOutput{})
	pulumi.RegisterOutputType(GetSaslUsersUserArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicArrayOutput{})
	pulumi.RegisterOutputType(GetTrailsActiontrailOutput{})
	pulumi.RegisterOutputType(GetTrailsActiontrailArrayOutput{})
}
