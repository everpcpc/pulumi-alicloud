// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package slb

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// HTTPS listeners of guaranteed-performance SLB support configuring multiple certificates, allowing you to forward requests with different domain names to different backend servers.
// Please refer to the [documentation](https://www.alibabacloud.com/help/doc-detail/85956.htm?spm=a2c63.p38356.b99.40.1c881563Co8p6w) for details.
//
// > **NOTE:** Available in 1.60.0+
//
// > **NOTE:** The instance with shared loadBalancerSpec doesn't support domainExtension.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/slb"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		instance, err := slb.NewLoadBalancer(ctx, "instance", &slb.LoadBalancerArgs{
// 			Internet:           pulumi.Bool(true),
// 			InternetChargeType: pulumi.String("PayByTraffic"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		foo, err := slb.NewServerCertificate(ctx, "foo", &slb.ServerCertificateArgs{
// 			PrivateKey:        pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "-----BEGIN RSA PRIVATE KEY-----\n", "MIIEowIBAAKCAQEAyjCheapjf7qDI3R9w/Gj0XFDgNLPK2aWIRvM25BdY/IB2KAf\n", "xQ7zOxu3X1bMo2zMCzsSrwIVrxx0qRM/7e4AfkHcKwDIjCcBprQp164dhFol4GpT\n", "HtcuGv0+Ue6vpuE9cxQE3/pG5x1n5EhheFu2+lAaGh/vUrUPeQp6szX/9qfzn+/k\n", "tF8wsRV8PBiFc2ZNMRXupRyc2qtOn95r86w/uK6TuerU1L64E2P5+tYLBWT+39Ai\n", "diUIenjURThFEn8Srvw8v/iLEMaKwiWNkOfWQH96166gzddOI8PT5cJy5an2c90T\n", "DgzegVo8RPK70bU9KjH7gH79YIwXVmTdIVGAUQIDAQABAoIBAE1J4a/8biR5S3/W\n", "G+03BYQeY8tuyjqw8FqfoeOcf9agwAvqybouSNQjeCk9qOQfxq/UWQQFK/zQR9gJ\n", "v7pX7GBXFK5rkj3g+0SaQhRsPmRFgY0Tl8qGPt2aSKRRNVv5ZeADmwlzRn86QmiF\n", "Mp0rkfqFfDTYWEepZszCML0ouzuxsW/9tq7rvtSjsgATNt31B3vFa3D3JBi31jUh\n", "5nfR9A3bATze7mQw3byEDiVl5ASRDgYyur403P1fDnMy9DBHZ8NaPOsFF6OBpJal\n", "BJsG5z00hll5PFN2jfmBQKlvAeU7wfwqdaSnGHOfqf2DeTTaFjIQ4gUhRn/m6pLo\n", "6kXttLECgYEA9sng0Qz/TcPFfM4tQ1gyvB1cKnnGIwg1FP8sfUjbbEgjaHhA224S\n", "k3BxtX2Kq6fhTXuwusAFc6OVMAZ76FgrQ5K4Ci7+DTsrF28z4b8td+p+lO/DxgP9\n", "lTgN+ddsiTOV4fUef9Z3yY0Zr0CnBUMbQYRaV2UIbCdiB0G4V/bt9TsCgYEA0bya\n", "Oo9wGI0RJV0bYP7qwO74Ra1/i1viWbRlS7jU37Q+AZstrlKcQ5CTPzOjKFKMiUzl\n", "4miWacZ0/q2n+Mvd7NbXGXTLijahnyOYKaHJYyh4oBymfkgAifRstE0Ki9gdvArb\n", "/I+emC0GvLSyfGN8UUeDJs4NmqdEXGqjo2JOV+MCgYALFv1MR5o9Y1u/hQBRs2fs\n", "PiGDIx+9OUQxYloccyaxEfjNXAIGGkcpavchIbgWiJ++PJ2vdquIC8TLeK8evL+M\n", "9M3iX0Q5UfxYvD2HmnCvn9D6Xl/cyRcfGnq+TGjrLW9BzSMGuZt+aiHKV0xqFx7l\n", "bc4leTvMqGRmURS4lzcQOwKBgQCDzA/i4sYfN25h21tcHXSpnsG3D2rJyQi5NCo/\n", "ZjunA92/JqOTGuiFcLGHEszhhtY3ZXJET1LNz18vtzKJnpqrvOnYXlOVW/U+SqDQ\n", "8JDb1c/PVZGuY1KrXkR9HLiW3kz5IJ3S3PFdUVYdeTN8BQxXCyg4V12nJJtJs912\n", "y0zN3wKBgGDS6YttCN6aI4EOABYE8fI1EYQ7vhfiYsaWGWSR1l6bQey7KR6M1ACz\n", "ZzMASNyytVt12yXE4/Emv6/pYqigbDLfL1zQJSLJ3EHJYTh2RxjR+AaGDudYFG/T\n", "liQ9YXhV5Iu2x1pNwrtFnssDdaaGpfA7l3xC00BL7Z+SAJyI4QKA\n", "-----END RSA PRIVATE KEY-----\n")),
// 			ServerCertificate: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "-----BEGIN CERTIFICATE-----\n", "MIIDdjCCAl4CCQCcm+erkcKN7DANBgkqhkiG9w0BAQsFADB9MQswCQYDVQQGEwJj\n", "bjELMAkGA1UECAwCYmoxEDAOBgNVBAcMB2JlaWppbmcxDzANBgNVBAoMBmFsaXl1\n", "bjELMAkGA1UECwwCc2MxFTATBgNVBAMMDHd3dy50ZXN0LmNvbTEaMBgGCSqGSIb3\n", "DQEJARYLMTIzQDEyMy5jb20wHhcNMTkwNDI2MDM0ODAxWhcNMjQwNDI1MDM0ODAx\n", "WjB9MQswCQYDVQQGEwJjbjELMAkGA1UECAwCYmoxEDAOBgNVBAcMB2JlaWppbmcx\n", "DzANBgNVBAoMBmFsaXl1bjELMAkGA1UECwwCc2MxFTATBgNVBAMMDHd3dy50ZXN0\n", "LmNvbTEaMBgGCSqGSIb3DQEJARYLMTIzQDEyMy5jb20wggEiMA0GCSqGSIb3DQEB\n", "AQUAA4IBDwAwggEKAoIBAQDKMKF5qmN/uoMjdH3D8aPRcUOA0s8rZpYhG8zbkF1j\n", "8gHYoB/FDvM7G7dfVsyjbMwLOxKvAhWvHHSpEz/t7gB+QdwrAMiMJwGmtCnXrh2E\n", "WiXgalMe1y4a/T5R7q+m4T1zFATf+kbnHWfkSGF4W7b6UBoaH+9StQ95CnqzNf/2\n", "p/Of7+S0XzCxFXw8GIVzZk0xFe6lHJzaq06f3mvzrD+4rpO56tTUvrgTY/n61gsF\n", "ZP7f0CJ2JQh6eNRFOEUSfxKu/Dy/+IsQxorCJY2Q59ZAf3rXrqDN104jw9PlwnLl\n", "qfZz3RMODN6BWjxE8rvRtT0qMfuAfv1gjBdWZN0hUYBRAgMBAAEwDQYJKoZIhvcN\n", "AQELBQADggEBAABzo82TxGp5poVkd5pLWj5ACgcBv8Cs6oH9D+4Jz9BmyuBUsQXh\n", "2aG0hQAe1mU61C9konsl/GTW8umJQ4M4lYEztXXwMf5PlBMGwebM0ZbSGg6jKtZg\n", "WCgJ3eP/FMmyXGL5Jji5+e09eObhUDVle4tdi0On97zBoz85W02rgWFAqZJwiEAP\n", "t+c7jX7uOSBq2/38iGStlrX5yB1at/gJXXiA5CL5OtlR3Okvb0/QH37efO1Nu39m\n", "lFi0ODPAVyXjVypAiLguDxPn6AtDTdk9Iw9B19OD4NrzNRWgSSX5vuxo/VcRcgWk\n", "3gEe9Ca0ZKN20q9XgthAiFFjl1S9ZgdA6Zc=\n", "-----END CERTIFICATE-----\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		https, err := slb.NewListener(ctx, "https", &slb.ListenerArgs{
// 			BackendPort:            pulumi.Int(80),
// 			Bandwidth:              pulumi.Int(10),
// 			Cookie:                 pulumi.String("testslblistenercookie"),
// 			CookieTimeout:          pulumi.Int(86400),
// 			FrontendPort:           pulumi.Int(443),
// 			HealthCheck:            pulumi.String("on"),
// 			HealthCheckConnectPort: pulumi.Int(20),
// 			HealthCheckHttpCode:    pulumi.String("http_2xx,http_3xx"),
// 			HealthCheckInterval:    pulumi.Int(5),
// 			HealthCheckTimeout:     pulumi.Int(8),
// 			HealthCheckUri:         pulumi.String("/cons"),
// 			HealthyThreshold:       pulumi.Int(8),
// 			LoadBalancerId:         instance.ID(),
// 			Protocol:               pulumi.String("https"),
// 			SslCertificateId:       foo.ID(),
// 			StickySession:          pulumi.String("on"),
// 			StickySessionType:      pulumi.String("insert"),
// 			UnhealthyThreshold:     pulumi.Int(8),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = slb.NewDomainExtension(ctx, "example1", &slb.DomainExtensionArgs{
// 			Domain:              pulumi.String("www.test.com"),
// 			FrontendPort:        https.FrontendPort,
// 			LoadBalancerId:      instance.ID(),
// 			ServerCertificateId: foo.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DomainExtension struct {
	pulumi.CustomResourceState

	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrOutput `pulumi:"deleteProtectionValidation"`
	// The domain name,
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort pulumi.IntOutput `pulumi:"frontendPort"`
	// The ID of the SLB instance.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The ID of the certificate used by the domain name.
	ServerCertificateId pulumi.StringOutput `pulumi:"serverCertificateId"`
}

// NewDomainExtension registers a new resource with the given unique name, arguments, and options.
func NewDomainExtension(ctx *pulumi.Context,
	name string, args *DomainExtensionArgs, opts ...pulumi.ResourceOption) (*DomainExtension, error) {
	if args == nil || args.Domain == nil {
		return nil, errors.New("missing required argument 'Domain'")
	}
	if args == nil || args.FrontendPort == nil {
		return nil, errors.New("missing required argument 'FrontendPort'")
	}
	if args == nil || args.LoadBalancerId == nil {
		return nil, errors.New("missing required argument 'LoadBalancerId'")
	}
	if args == nil || args.ServerCertificateId == nil {
		return nil, errors.New("missing required argument 'ServerCertificateId'")
	}
	if args == nil {
		args = &DomainExtensionArgs{}
	}
	var resource DomainExtension
	err := ctx.RegisterResource("alicloud:slb/domainExtension:DomainExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainExtension gets an existing DomainExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainExtensionState, opts ...pulumi.ResourceOption) (*DomainExtension, error) {
	var resource DomainExtension
	err := ctx.ReadResource("alicloud:slb/domainExtension:DomainExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainExtension resources.
type domainExtensionState struct {
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation *bool `pulumi:"deleteProtectionValidation"`
	// The domain name,
	Domain *string `pulumi:"domain"`
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort *int `pulumi:"frontendPort"`
	// The ID of the SLB instance.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The ID of the certificate used by the domain name.
	ServerCertificateId *string `pulumi:"serverCertificateId"`
}

type DomainExtensionState struct {
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrInput
	// The domain name,
	Domain pulumi.StringPtrInput
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort pulumi.IntPtrInput
	// The ID of the SLB instance.
	LoadBalancerId pulumi.StringPtrInput
	// The ID of the certificate used by the domain name.
	ServerCertificateId pulumi.StringPtrInput
}

func (DomainExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainExtensionState)(nil)).Elem()
}

type domainExtensionArgs struct {
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation *bool `pulumi:"deleteProtectionValidation"`
	// The domain name,
	Domain string `pulumi:"domain"`
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort int `pulumi:"frontendPort"`
	// The ID of the SLB instance.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The ID of the certificate used by the domain name.
	ServerCertificateId string `pulumi:"serverCertificateId"`
}

// The set of arguments for constructing a DomainExtension resource.
type DomainExtensionArgs struct {
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrInput
	// The domain name,
	Domain pulumi.StringInput
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort pulumi.IntInput
	// The ID of the SLB instance.
	LoadBalancerId pulumi.StringInput
	// The ID of the certificate used by the domain name.
	ServerCertificateId pulumi.StringInput
}

func (DomainExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainExtensionArgs)(nil)).Elem()
}
