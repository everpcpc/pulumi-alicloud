// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package slb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Add a group of backend servers (ECS instance) to the Server Load Balancer or remove them from it.
// 
// > **NOTE:** Available in 1.53.0+
// 
// ## Block servers
// 
// The servers mapping supports the following:
// 
// * `serverId` - (Required) A list backend server ID (ECS instance ID).
// * `weight` - (Optional) Weight of the backend server. Valid value range: [0-100]. 
// * `type` - (Optional) Type of the backend server. Valid value ecs, eni. Default to eni.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/slb_backend_server.html.markdown.
type BackendServer struct {
	s *pulumi.ResourceState
}

// NewBackendServer registers a new resource with the given unique name, arguments, and options.
func NewBackendServer(ctx *pulumi.Context,
	name string, args *BackendServerArgs, opts ...pulumi.ResourceOpt) (*BackendServer, error) {
	if args == nil || args.LoadBalancerId == nil {
		return nil, errors.New("missing required argument 'LoadBalancerId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backendServers"] = nil
		inputs["deleteProtectionValidation"] = nil
		inputs["loadBalancerId"] = nil
	} else {
		inputs["backendServers"] = args.BackendServers
		inputs["deleteProtectionValidation"] = args.DeleteProtectionValidation
		inputs["loadBalancerId"] = args.LoadBalancerId
	}
	s, err := ctx.RegisterResource("alicloud:slb/backendServer:BackendServer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BackendServer{s: s}, nil
}

// GetBackendServer gets an existing BackendServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BackendServerState, opts ...pulumi.ResourceOpt) (*BackendServer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backendServers"] = state.BackendServers
		inputs["deleteProtectionValidation"] = state.DeleteProtectionValidation
		inputs["loadBalancerId"] = state.LoadBalancerId
	}
	s, err := ctx.ReadResource("alicloud:slb/backendServer:BackendServer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BackendServer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BackendServer) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BackendServer) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
func (r *BackendServer) BackendServers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["backendServers"])
}

// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
func (r *BackendServer) DeleteProtectionValidation() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["deleteProtectionValidation"])
}

// ID of the load balancer.
func (r *BackendServer) LoadBalancerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["loadBalancerId"])
}

// Input properties used for looking up and filtering BackendServer resources.
type BackendServerState struct {
	// A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
	BackendServers interface{}
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation interface{}
	// ID of the load balancer.
	LoadBalancerId interface{}
}

// The set of arguments for constructing a BackendServer resource.
type BackendServerArgs struct {
	// A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
	BackendServers interface{}
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation interface{}
	// ID of the load balancer.
	LoadBalancerId interface{}
}
