// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package slb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A Load Balancer CA Certificate is used by the listener of the protocol https.
// 
// For information about slb and how to use it, see [What is Server Load Balancer](https://www.alibabacloud.com/help/doc-detail/27539.htm).
// 
// For information about CA Certificate and how to use it, see [Configure CA Certificate](https://www.alibabacloud.com/help/doc-detail/85968.htm).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/slb_ca_certificate.html.markdown.
type CaCertificate struct {
	s *pulumi.ResourceState
}

// NewCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewCaCertificate(ctx *pulumi.Context,
	name string, args *CaCertificateArgs, opts ...pulumi.ResourceOpt) (*CaCertificate, error) {
	if args == nil || args.CaCertificate == nil {
		return nil, errors.New("missing required argument 'CaCertificate'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["caCertificate"] = nil
		inputs["name"] = nil
		inputs["resourceGroupId"] = nil
		inputs["tags"] = nil
	} else {
		inputs["caCertificate"] = args.CaCertificate
		inputs["name"] = args.Name
		inputs["resourceGroupId"] = args.ResourceGroupId
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("alicloud:slb/caCertificate:CaCertificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CaCertificate{s: s}, nil
}

// GetCaCertificate gets an existing CaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CaCertificateState, opts ...pulumi.ResourceOpt) (*CaCertificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["caCertificate"] = state.CaCertificate
		inputs["name"] = state.Name
		inputs["resourceGroupId"] = state.ResourceGroupId
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("alicloud:slb/caCertificate:CaCertificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CaCertificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CaCertificate) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CaCertificate) ID() pulumi.IDOutput {
	return r.s.ID()
}

// the content of the CA certificate.
func (r *CaCertificate) CaCertificate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["caCertificate"])
}

// Name of the CA Certificate.
func (r *CaCertificate) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The Id of resource group which the slbCa certificate belongs.
func (r *CaCertificate) ResourceGroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupId"])
}

// A mapping of tags to assign to the resource.
func (r *CaCertificate) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering CaCertificate resources.
type CaCertificateState struct {
	// the content of the CA certificate.
	CaCertificate interface{}
	// Name of the CA Certificate.
	Name interface{}
	// The Id of resource group which the slbCa certificate belongs.
	ResourceGroupId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a CaCertificate resource.
type CaCertificateArgs struct {
	// the content of the CA certificate.
	CaCertificate interface{}
	// Name of the CA Certificate.
	Name interface{}
	// The Id of resource group which the slbCa certificate belongs.
	ResourceGroupId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
