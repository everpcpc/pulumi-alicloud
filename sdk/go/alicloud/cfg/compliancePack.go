// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Config Compliance Pack resource.
//
// For information about Cloud Config Compliance Pack and how to use it, see [What is Compliance Pack](https://help.aliyun.com/).
//
// > **NOTE:** Available in v1.124.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cfg"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cfg.NewCompliancePack(ctx, "example", &cfg.CompliancePackArgs{
// 			CompliancePackName:       pulumi.String("tf-testaccConfig1234"),
// 			CompliancePackTemplateId: pulumi.String("ct-3d20ff4e06a30027f76e"),
// 			ConfigRules: cfg.CompliancePackConfigRuleArray{
// 				&cfg.CompliancePackConfigRuleArgs{
// 					ConfigRuleParameters: cfg.CompliancePackConfigRuleConfigRuleParameterArray{
// 						&cfg.CompliancePackConfigRuleConfigRuleParameterArgs{
// 							ParameterName:  pulumi.String("days"),
// 							ParameterValue: pulumi.String("7"),
// 						},
// 					},
// 					ManagedRuleIdentifier: pulumi.String("ecs-snapshot-retention-days"),
// 				},
// 				&cfg.CompliancePackConfigRuleArgs{
// 					ConfigRuleParameters: cfg.CompliancePackConfigRuleConfigRuleParameterArray{
// 						&cfg.CompliancePackConfigRuleConfigRuleParameterArgs{
// 							ParameterName:  pulumi.String("days"),
// 							ParameterValue: pulumi.String("60"),
// 						},
// 					},
// 					ManagedRuleIdentifier: pulumi.String("ecs-instance-expired-check"),
// 				},
// 			},
// 			Description: pulumi.String("tf-testaccConfig1234"),
// 			RiskLevel:   pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cloud Config Compliance Pack can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:cfg/compliancePack:CompliancePack example <id>
// ```
type CompliancePack struct {
	pulumi.CustomResourceState

	// The Compliance Package Name.
	CompliancePackName pulumi.StringOutput `pulumi:"compliancePackName"`
	// Compliance Package Template Id.
	CompliancePackTemplateId pulumi.StringOutput `pulumi:"compliancePackTemplateId"`
	// A list of Config Rules.
	ConfigRules CompliancePackConfigRuleArrayOutput `pulumi:"configRules"`
	// The Description of compliance pack.
	Description pulumi.StringOutput `pulumi:"description"`
	// The Risk Level. Valid values:  `1`: critical, `2`: warning, `3`: info.
	RiskLevel pulumi.IntOutput `pulumi:"riskLevel"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewCompliancePack registers a new resource with the given unique name, arguments, and options.
func NewCompliancePack(ctx *pulumi.Context,
	name string, args *CompliancePackArgs, opts ...pulumi.ResourceOption) (*CompliancePack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompliancePackName == nil {
		return nil, errors.New("invalid value for required argument 'CompliancePackName'")
	}
	if args.CompliancePackTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'CompliancePackTemplateId'")
	}
	if args.ConfigRules == nil {
		return nil, errors.New("invalid value for required argument 'ConfigRules'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.RiskLevel == nil {
		return nil, errors.New("invalid value for required argument 'RiskLevel'")
	}
	var resource CompliancePack
	err := ctx.RegisterResource("alicloud:cfg/compliancePack:CompliancePack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCompliancePack gets an existing CompliancePack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCompliancePack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompliancePackState, opts ...pulumi.ResourceOption) (*CompliancePack, error) {
	var resource CompliancePack
	err := ctx.ReadResource("alicloud:cfg/compliancePack:CompliancePack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CompliancePack resources.
type compliancePackState struct {
	// The Compliance Package Name.
	CompliancePackName *string `pulumi:"compliancePackName"`
	// Compliance Package Template Id.
	CompliancePackTemplateId *string `pulumi:"compliancePackTemplateId"`
	// A list of Config Rules.
	ConfigRules []CompliancePackConfigRule `pulumi:"configRules"`
	// The Description of compliance pack.
	Description *string `pulumi:"description"`
	// The Risk Level. Valid values:  `1`: critical, `2`: warning, `3`: info.
	RiskLevel *int `pulumi:"riskLevel"`
	// The status of the resource.
	Status *string `pulumi:"status"`
}

type CompliancePackState struct {
	// The Compliance Package Name.
	CompliancePackName pulumi.StringPtrInput
	// Compliance Package Template Id.
	CompliancePackTemplateId pulumi.StringPtrInput
	// A list of Config Rules.
	ConfigRules CompliancePackConfigRuleArrayInput
	// The Description of compliance pack.
	Description pulumi.StringPtrInput
	// The Risk Level. Valid values:  `1`: critical, `2`: warning, `3`: info.
	RiskLevel pulumi.IntPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
}

func (CompliancePackState) ElementType() reflect.Type {
	return reflect.TypeOf((*compliancePackState)(nil)).Elem()
}

type compliancePackArgs struct {
	// The Compliance Package Name.
	CompliancePackName string `pulumi:"compliancePackName"`
	// Compliance Package Template Id.
	CompliancePackTemplateId string `pulumi:"compliancePackTemplateId"`
	// A list of Config Rules.
	ConfigRules []CompliancePackConfigRule `pulumi:"configRules"`
	// The Description of compliance pack.
	Description string `pulumi:"description"`
	// The Risk Level. Valid values:  `1`: critical, `2`: warning, `3`: info.
	RiskLevel int `pulumi:"riskLevel"`
}

// The set of arguments for constructing a CompliancePack resource.
type CompliancePackArgs struct {
	// The Compliance Package Name.
	CompliancePackName pulumi.StringInput
	// Compliance Package Template Id.
	CompliancePackTemplateId pulumi.StringInput
	// A list of Config Rules.
	ConfigRules CompliancePackConfigRuleArrayInput
	// The Description of compliance pack.
	Description pulumi.StringInput
	// The Risk Level. Valid values:  `1`: critical, `2`: warning, `3`: info.
	RiskLevel pulumi.IntInput
}

func (CompliancePackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*compliancePackArgs)(nil)).Elem()
}

type CompliancePackInput interface {
	pulumi.Input

	ToCompliancePackOutput() CompliancePackOutput
	ToCompliancePackOutputWithContext(ctx context.Context) CompliancePackOutput
}

func (*CompliancePack) ElementType() reflect.Type {
	return reflect.TypeOf((*CompliancePack)(nil))
}

func (i *CompliancePack) ToCompliancePackOutput() CompliancePackOutput {
	return i.ToCompliancePackOutputWithContext(context.Background())
}

func (i *CompliancePack) ToCompliancePackOutputWithContext(ctx context.Context) CompliancePackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompliancePackOutput)
}

func (i *CompliancePack) ToCompliancePackPtrOutput() CompliancePackPtrOutput {
	return i.ToCompliancePackPtrOutputWithContext(context.Background())
}

func (i *CompliancePack) ToCompliancePackPtrOutputWithContext(ctx context.Context) CompliancePackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompliancePackPtrOutput)
}

type CompliancePackPtrInput interface {
	pulumi.Input

	ToCompliancePackPtrOutput() CompliancePackPtrOutput
	ToCompliancePackPtrOutputWithContext(ctx context.Context) CompliancePackPtrOutput
}

type compliancePackPtrType CompliancePackArgs

func (*compliancePackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CompliancePack)(nil))
}

func (i *compliancePackPtrType) ToCompliancePackPtrOutput() CompliancePackPtrOutput {
	return i.ToCompliancePackPtrOutputWithContext(context.Background())
}

func (i *compliancePackPtrType) ToCompliancePackPtrOutputWithContext(ctx context.Context) CompliancePackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompliancePackPtrOutput)
}

// CompliancePackArrayInput is an input type that accepts CompliancePackArray and CompliancePackArrayOutput values.
// You can construct a concrete instance of `CompliancePackArrayInput` via:
//
//          CompliancePackArray{ CompliancePackArgs{...} }
type CompliancePackArrayInput interface {
	pulumi.Input

	ToCompliancePackArrayOutput() CompliancePackArrayOutput
	ToCompliancePackArrayOutputWithContext(context.Context) CompliancePackArrayOutput
}

type CompliancePackArray []CompliancePackInput

func (CompliancePackArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*CompliancePack)(nil))
}

func (i CompliancePackArray) ToCompliancePackArrayOutput() CompliancePackArrayOutput {
	return i.ToCompliancePackArrayOutputWithContext(context.Background())
}

func (i CompliancePackArray) ToCompliancePackArrayOutputWithContext(ctx context.Context) CompliancePackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompliancePackArrayOutput)
}

// CompliancePackMapInput is an input type that accepts CompliancePackMap and CompliancePackMapOutput values.
// You can construct a concrete instance of `CompliancePackMapInput` via:
//
//          CompliancePackMap{ "key": CompliancePackArgs{...} }
type CompliancePackMapInput interface {
	pulumi.Input

	ToCompliancePackMapOutput() CompliancePackMapOutput
	ToCompliancePackMapOutputWithContext(context.Context) CompliancePackMapOutput
}

type CompliancePackMap map[string]CompliancePackInput

func (CompliancePackMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*CompliancePack)(nil))
}

func (i CompliancePackMap) ToCompliancePackMapOutput() CompliancePackMapOutput {
	return i.ToCompliancePackMapOutputWithContext(context.Background())
}

func (i CompliancePackMap) ToCompliancePackMapOutputWithContext(ctx context.Context) CompliancePackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompliancePackMapOutput)
}

type CompliancePackOutput struct {
	*pulumi.OutputState
}

func (CompliancePackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompliancePack)(nil))
}

func (o CompliancePackOutput) ToCompliancePackOutput() CompliancePackOutput {
	return o
}

func (o CompliancePackOutput) ToCompliancePackOutputWithContext(ctx context.Context) CompliancePackOutput {
	return o
}

func (o CompliancePackOutput) ToCompliancePackPtrOutput() CompliancePackPtrOutput {
	return o.ToCompliancePackPtrOutputWithContext(context.Background())
}

func (o CompliancePackOutput) ToCompliancePackPtrOutputWithContext(ctx context.Context) CompliancePackPtrOutput {
	return o.ApplyT(func(v CompliancePack) *CompliancePack {
		return &v
	}).(CompliancePackPtrOutput)
}

type CompliancePackPtrOutput struct {
	*pulumi.OutputState
}

func (CompliancePackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompliancePack)(nil))
}

func (o CompliancePackPtrOutput) ToCompliancePackPtrOutput() CompliancePackPtrOutput {
	return o
}

func (o CompliancePackPtrOutput) ToCompliancePackPtrOutputWithContext(ctx context.Context) CompliancePackPtrOutput {
	return o
}

type CompliancePackArrayOutput struct{ *pulumi.OutputState }

func (CompliancePackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompliancePack)(nil))
}

func (o CompliancePackArrayOutput) ToCompliancePackArrayOutput() CompliancePackArrayOutput {
	return o
}

func (o CompliancePackArrayOutput) ToCompliancePackArrayOutputWithContext(ctx context.Context) CompliancePackArrayOutput {
	return o
}

func (o CompliancePackArrayOutput) Index(i pulumi.IntInput) CompliancePackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CompliancePack {
		return vs[0].([]CompliancePack)[vs[1].(int)]
	}).(CompliancePackOutput)
}

type CompliancePackMapOutput struct{ *pulumi.OutputState }

func (CompliancePackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CompliancePack)(nil))
}

func (o CompliancePackMapOutput) ToCompliancePackMapOutput() CompliancePackMapOutput {
	return o
}

func (o CompliancePackMapOutput) ToCompliancePackMapOutputWithContext(ctx context.Context) CompliancePackMapOutput {
	return o
}

func (o CompliancePackMapOutput) MapIndex(k pulumi.StringInput) CompliancePackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CompliancePack {
		return vs[0].(map[string]CompliancePack)[vs[1].(string)]
	}).(CompliancePackOutput)
}

func init() {
	pulumi.RegisterOutputType(CompliancePackOutput{})
	pulumi.RegisterOutputType(CompliancePackPtrOutput{})
	pulumi.RegisterOutputType(CompliancePackArrayOutput{})
	pulumi.RegisterOutputType(CompliancePackMapOutput{})
}
