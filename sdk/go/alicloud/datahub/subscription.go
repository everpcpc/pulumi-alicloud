// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datahub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The subscription is the basic unit of resource usage in Datahub Service under Publish/Subscribe model. You can manage the relationships between user and topics by using subscriptions. [Refer to details](https://help.aliyun.com/document_detail/47440.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/datahub_subscription.html.markdown.
type Subscription struct {
	s *pulumi.ResourceState
}

// NewSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubscription(ctx *pulumi.Context,
	name string, args *SubscriptionArgs, opts ...pulumi.ResourceOpt) (*Subscription, error) {
	if args == nil || args.ProjectName == nil {
		return nil, errors.New("missing required argument 'ProjectName'")
	}
	if args == nil || args.TopicName == nil {
		return nil, errors.New("missing required argument 'TopicName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["comment"] = nil
		inputs["projectName"] = nil
		inputs["topicName"] = nil
	} else {
		inputs["comment"] = args.Comment
		inputs["projectName"] = args.ProjectName
		inputs["topicName"] = args.TopicName
	}
	inputs["createTime"] = nil
	inputs["lastModifyTime"] = nil
	inputs["subId"] = nil
	s, err := ctx.RegisterResource("alicloud:datahub/subscription:Subscription", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subscription{s: s}, nil
}

// GetSubscription gets an existing Subscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscription(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubscriptionState, opts ...pulumi.ResourceOpt) (*Subscription, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["comment"] = state.Comment
		inputs["createTime"] = state.CreateTime
		inputs["lastModifyTime"] = state.LastModifyTime
		inputs["projectName"] = state.ProjectName
		inputs["subId"] = state.SubId
		inputs["topicName"] = state.TopicName
	}
	s, err := ctx.ReadResource("alicloud:datahub/subscription:Subscription", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subscription{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subscription) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subscription) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Comment of the datahub subscription. It cannot be longer than 255 characters.
func (r *Subscription) Comment() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["comment"])
}

// Create time of the datahub subscription. It is a human-readable string rather than 64-bits UTC.
func (r *Subscription) CreateTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createTime"])
}

// Last modify time of the datahub subscription. It is the same as *create_time* at the beginning. It is also a human-readable string rather than 64-bits UTC.
func (r *Subscription) LastModifyTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["lastModifyTime"])
}

// The name of the datahub project that the subscription belongs to. Its length is limited to 3-32 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
func (r *Subscription) ProjectName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectName"])
}

// The identidy of the subscritpion, generate from server side.
func (r *Subscription) SubId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["subId"])
}

// The name of the datahub topic that the subscription belongs to. Its length is limited to 1-128 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
func (r *Subscription) TopicName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["topicName"])
}

// Input properties used for looking up and filtering Subscription resources.
type SubscriptionState struct {
	// Comment of the datahub subscription. It cannot be longer than 255 characters.
	Comment interface{}
	// Create time of the datahub subscription. It is a human-readable string rather than 64-bits UTC.
	CreateTime interface{}
	// Last modify time of the datahub subscription. It is the same as *create_time* at the beginning. It is also a human-readable string rather than 64-bits UTC.
	LastModifyTime interface{}
	// The name of the datahub project that the subscription belongs to. Its length is limited to 3-32 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
	ProjectName interface{}
	// The identidy of the subscritpion, generate from server side.
	SubId interface{}
	// The name of the datahub topic that the subscription belongs to. Its length is limited to 1-128 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
	TopicName interface{}
}

// The set of arguments for constructing a Subscription resource.
type SubscriptionArgs struct {
	// Comment of the datahub subscription. It cannot be longer than 255 characters.
	Comment interface{}
	// The name of the datahub project that the subscription belongs to. Its length is limited to 3-32 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
	ProjectName interface{}
	// The name of the datahub topic that the subscription belongs to. Its length is limited to 1-128 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
	TopicName interface{}
}
