// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datahub

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The project is the basic unit of resource management in Datahub Service and is used to isolate and control resources. It contains a set of Topics. You can manage the datahub sources of an application by using projects. [Refer to details](https://help.aliyun.com/document_detail/47440.html).
type Project struct {
	s *pulumi.ResourceState
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOpt) (*Project, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["comment"] = nil
		inputs["name"] = nil
	} else {
		inputs["comment"] = args.Comment
		inputs["name"] = args.Name
	}
	inputs["createTime"] = nil
	inputs["lastModifyTime"] = nil
	s, err := ctx.RegisterResource("alicloud:datahub/project:Project", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectState, opts ...pulumi.ResourceOpt) (*Project, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["comment"] = state.Comment
		inputs["createTime"] = state.CreateTime
		inputs["lastModifyTime"] = state.LastModifyTime
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("alicloud:datahub/project:Project", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Project) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Project) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Comment of the datahub project. It cannot be longer than 255 characters.
func (r *Project) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// Create time of the datahub project. It is a human-readable string rather than 64-bits UTC.
func (r *Project) CreateTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createTime"])
}

// Last modify time of the datahub project. It is the same as *create_time* at the beginning. It is also a human-readable string rather than 64-bits UTC.
func (r *Project) LastModifyTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lastModifyTime"])
}

// The name of the datahub project. Its length is limited to 3-32 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
func (r *Project) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Project resources.
type ProjectState struct {
	// Comment of the datahub project. It cannot be longer than 255 characters.
	Comment interface{}
	// Create time of the datahub project. It is a human-readable string rather than 64-bits UTC.
	CreateTime interface{}
	// Last modify time of the datahub project. It is the same as *create_time* at the beginning. It is also a human-readable string rather than 64-bits UTC.
	LastModifyTime interface{}
	// The name of the datahub project. Its length is limited to 3-32 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
	Name interface{}
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Comment of the datahub project. It cannot be longer than 255 characters.
	Comment interface{}
	// The name of the datahub project. Its length is limited to 3-32 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
	Name interface{}
}
