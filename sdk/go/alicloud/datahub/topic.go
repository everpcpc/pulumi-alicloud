// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datahub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The topic is the basic unit of Datahub data source and is used to define one kind of data or stream. It contains a set of subscriptions. You can manage the datahub source of an application by using topics. [Refer to details](https://help.aliyun.com/document_detail/47440.html).
type Topic struct {
	s *pulumi.ResourceState
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOpt) (*Topic, error) {
	if args == nil || args.ProjectName == nil {
		return nil, errors.New("missing required argument 'ProjectName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["comment"] = nil
		inputs["lifeCycle"] = nil
		inputs["name"] = nil
		inputs["projectName"] = nil
		inputs["recordSchema"] = nil
		inputs["recordType"] = nil
		inputs["shardCount"] = nil
	} else {
		inputs["comment"] = args.Comment
		inputs["lifeCycle"] = args.LifeCycle
		inputs["name"] = args.Name
		inputs["projectName"] = args.ProjectName
		inputs["recordSchema"] = args.RecordSchema
		inputs["recordType"] = args.RecordType
		inputs["shardCount"] = args.ShardCount
	}
	inputs["createTime"] = nil
	inputs["lastModifyTime"] = nil
	s, err := ctx.RegisterResource("alicloud:datahub/topic:Topic", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicState, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["comment"] = state.Comment
		inputs["createTime"] = state.CreateTime
		inputs["lastModifyTime"] = state.LastModifyTime
		inputs["lifeCycle"] = state.LifeCycle
		inputs["name"] = state.Name
		inputs["projectName"] = state.ProjectName
		inputs["recordSchema"] = state.RecordSchema
		inputs["recordType"] = state.RecordType
		inputs["shardCount"] = state.ShardCount
	}
	s, err := ctx.ReadResource("alicloud:datahub/topic:Topic", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Topic) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Topic) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Comment of the datahub topic. It cannot be longer than 255 characters.
func (r *Topic) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// Create time of the datahub topic. It is a human-readable string rather than 64-bits UTC.
func (r *Topic) CreateTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createTime"])
}

// Last modify time of the datahub topic. It is the same as *create_time* at the beginning. It is also a human-readable string rather than 64-bits UTC.
func (r *Topic) LastModifyTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lastModifyTime"])
}

// How many days this topic lives. The permitted range of values is [1, 7]. The default value is 3.
func (r *Topic) LifeCycle() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["lifeCycle"])
}

// The name of the datahub topic. Its length is limited to 1-128 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
func (r *Topic) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the datahub project that this topic belongs to. It is case-insensitive.
func (r *Topic) ProjectName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectName"])
}

// Schema of this topic, required only for TUPLE topic. Supported data types (case-insensitive) are:
// - BIGINT
// - STRING
// - BOOLEAN
// - DOUBLE
// - TIMESTAMP
func (r *Topic) RecordSchema() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["recordSchema"])
}

// The type of this topic. Its value must be one of {BLOB, TUPLE}. For BLOB topic, data will be organized as binary and encoded by BASE64. For TUPLE topic, data has fixed schema. The default value is "TUPLE" with a schema {STRING}.
func (r *Topic) RecordType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recordType"])
}

// The number of shards this topic contains. The permitted range of values is [1, 10]. The default value is 1.
func (r *Topic) ShardCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["shardCount"])
}

// Input properties used for looking up and filtering Topic resources.
type TopicState struct {
	// Comment of the datahub topic. It cannot be longer than 255 characters.
	Comment interface{}
	// Create time of the datahub topic. It is a human-readable string rather than 64-bits UTC.
	CreateTime interface{}
	// Last modify time of the datahub topic. It is the same as *create_time* at the beginning. It is also a human-readable string rather than 64-bits UTC.
	LastModifyTime interface{}
	// How many days this topic lives. The permitted range of values is [1, 7]. The default value is 3.
	LifeCycle interface{}
	// The name of the datahub topic. Its length is limited to 1-128 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
	Name interface{}
	// The name of the datahub project that this topic belongs to. It is case-insensitive.
	ProjectName interface{}
	// Schema of this topic, required only for TUPLE topic. Supported data types (case-insensitive) are:
	// - BIGINT
	// - STRING
	// - BOOLEAN
	// - DOUBLE
	// - TIMESTAMP
	RecordSchema interface{}
	// The type of this topic. Its value must be one of {BLOB, TUPLE}. For BLOB topic, data will be organized as binary and encoded by BASE64. For TUPLE topic, data has fixed schema. The default value is "TUPLE" with a schema {STRING}.
	RecordType interface{}
	// The number of shards this topic contains. The permitted range of values is [1, 10]. The default value is 1.
	ShardCount interface{}
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// Comment of the datahub topic. It cannot be longer than 255 characters.
	Comment interface{}
	// How many days this topic lives. The permitted range of values is [1, 7]. The default value is 3.
	LifeCycle interface{}
	// The name of the datahub topic. Its length is limited to 1-128 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
	Name interface{}
	// The name of the datahub project that this topic belongs to. It is case-insensitive.
	ProjectName interface{}
	// Schema of this topic, required only for TUPLE topic. Supported data types (case-insensitive) are:
	// - BIGINT
	// - STRING
	// - BOOLEAN
	// - DOUBLE
	// - TIMESTAMP
	RecordSchema interface{}
	// The type of this topic. Its value must be one of {BLOB, TUPLE}. For BLOB topic, data will be organized as binary and encoded by BASE64. For TUPLE topic, data has fixed schema. The default value is "TUPLE" with a schema {STRING}.
	RecordType interface{}
	// The number of shards this topic contains. The permitted range of values is [1, 10]. The default value is 1.
	ShardCount interface{}
}
