// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/ssl_vpn_server.html.markdown.
type SslVpnServer struct {
	s *pulumi.ResourceState
}

// NewSslVpnServer registers a new resource with the given unique name, arguments, and options.
func NewSslVpnServer(ctx *pulumi.Context,
	name string, args *SslVpnServerArgs, opts ...pulumi.ResourceOpt) (*SslVpnServer, error) {
	if args == nil || args.ClientIpPool == nil {
		return nil, errors.New("missing required argument 'ClientIpPool'")
	}
	if args == nil || args.LocalSubnet == nil {
		return nil, errors.New("missing required argument 'LocalSubnet'")
	}
	if args == nil || args.VpnGatewayId == nil {
		return nil, errors.New("missing required argument 'VpnGatewayId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cipher"] = nil
		inputs["clientIpPool"] = nil
		inputs["compress"] = nil
		inputs["localSubnet"] = nil
		inputs["name"] = nil
		inputs["port"] = nil
		inputs["protocol"] = nil
		inputs["vpnGatewayId"] = nil
	} else {
		inputs["cipher"] = args.Cipher
		inputs["clientIpPool"] = args.ClientIpPool
		inputs["compress"] = args.Compress
		inputs["localSubnet"] = args.LocalSubnet
		inputs["name"] = args.Name
		inputs["port"] = args.Port
		inputs["protocol"] = args.Protocol
		inputs["vpnGatewayId"] = args.VpnGatewayId
	}
	inputs["connections"] = nil
	inputs["internetIp"] = nil
	inputs["maxConnections"] = nil
	s, err := ctx.RegisterResource("alicloud:vpn/sslVpnServer:SslVpnServer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SslVpnServer{s: s}, nil
}

// GetSslVpnServer gets an existing SslVpnServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslVpnServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SslVpnServerState, opts ...pulumi.ResourceOpt) (*SslVpnServer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cipher"] = state.Cipher
		inputs["clientIpPool"] = state.ClientIpPool
		inputs["compress"] = state.Compress
		inputs["connections"] = state.Connections
		inputs["internetIp"] = state.InternetIp
		inputs["localSubnet"] = state.LocalSubnet
		inputs["maxConnections"] = state.MaxConnections
		inputs["name"] = state.Name
		inputs["port"] = state.Port
		inputs["protocol"] = state.Protocol
		inputs["vpnGatewayId"] = state.VpnGatewayId
	}
	s, err := ctx.ReadResource("alicloud:vpn/sslVpnServer:SslVpnServer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SslVpnServer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SslVpnServer) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SslVpnServer) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The encryption algorithm used by the SSL-VPN server. Valid value: AES-128-CBC (default)| AES-192-CBC | AES-256-CBC | none
func (r *SslVpnServer) Cipher() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cipher"])
}

// The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
func (r *SslVpnServer) ClientIpPool() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientIpPool"])
}

// Specify whether to compress the communication. Valid value: true (default) | false
func (r *SslVpnServer) Compress() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["compress"])
}

// The number of current connections.
func (r *SslVpnServer) Connections() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["connections"])
}

// The internet IP of the SSL-VPN server.
func (r *SslVpnServer) InternetIp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["internetIp"])
}

// The CIDR block to be accessed by the client through the SSL-VPN connection.
func (r *SslVpnServer) LocalSubnet() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["localSubnet"])
}

// The maximum number of connections.
func (r *SslVpnServer) MaxConnections() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxConnections"])
}

// The name of the SSL-VPN server.
func (r *SslVpnServer) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The port used by the SSL-VPN server. The default value is 1194.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
func (r *SslVpnServer) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
func (r *SslVpnServer) Protocol() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["protocol"])
}

// The ID of the VPN gateway.
func (r *SslVpnServer) VpnGatewayId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpnGatewayId"])
}

// Input properties used for looking up and filtering SslVpnServer resources.
type SslVpnServerState struct {
	// The encryption algorithm used by the SSL-VPN server. Valid value: AES-128-CBC (default)| AES-192-CBC | AES-256-CBC | none
	Cipher interface{}
	// The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
	ClientIpPool interface{}
	// Specify whether to compress the communication. Valid value: true (default) | false
	Compress interface{}
	// The number of current connections.
	Connections interface{}
	// The internet IP of the SSL-VPN server.
	InternetIp interface{}
	// The CIDR block to be accessed by the client through the SSL-VPN connection.
	LocalSubnet interface{}
	// The maximum number of connections.
	MaxConnections interface{}
	// The name of the SSL-VPN server.
	Name interface{}
	// The port used by the SSL-VPN server. The default value is 1194.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
	Port interface{}
	// The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
	Protocol interface{}
	// The ID of the VPN gateway.
	VpnGatewayId interface{}
}

// The set of arguments for constructing a SslVpnServer resource.
type SslVpnServerArgs struct {
	// The encryption algorithm used by the SSL-VPN server. Valid value: AES-128-CBC (default)| AES-192-CBC | AES-256-CBC | none
	Cipher interface{}
	// The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
	ClientIpPool interface{}
	// Specify whether to compress the communication. Valid value: true (default) | false
	Compress interface{}
	// The CIDR block to be accessed by the client through the SSL-VPN connection.
	LocalSubnet interface{}
	// The name of the SSL-VPN server.
	Name interface{}
	// The port used by the SSL-VPN server. The default value is 1194.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
	Port interface{}
	// The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
	Protocol interface{}
	// The ID of the VPN gateway.
	VpnGatewayId interface{}
}
