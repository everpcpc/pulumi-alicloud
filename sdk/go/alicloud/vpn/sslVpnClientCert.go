// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SSL VPN client cert resource.
// 
// ~> **NOTE:** Terraform will auto build SSL VPN client certs  while it uses `alicloud_ssl_vpn_client_cert` to build a ssl vpn client certs resource.
//              It depends on VPN instance and SSL VPN Server.
type SslVpnClientCert struct {
	s *pulumi.ResourceState
}

// NewSslVpnClientCert registers a new resource with the given unique name, arguments, and options.
func NewSslVpnClientCert(ctx *pulumi.Context,
	name string, args *SslVpnClientCertArgs, opts ...pulumi.ResourceOpt) (*SslVpnClientCert, error) {
	if args == nil || args.SslVpnServerId == nil {
		return nil, errors.New("missing required argument 'SslVpnServerId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["sslVpnServerId"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["sslVpnServerId"] = args.SslVpnServerId
	}
	inputs["status"] = nil
	s, err := ctx.RegisterResource("alicloud:vpn/sslVpnClientCert:SslVpnClientCert", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SslVpnClientCert{s: s}, nil
}

// GetSslVpnClientCert gets an existing SslVpnClientCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslVpnClientCert(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SslVpnClientCertState, opts ...pulumi.ResourceOpt) (*SslVpnClientCert, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
		inputs["sslVpnServerId"] = state.SslVpnServerId
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("alicloud:vpn/sslVpnClientCert:SslVpnClientCert", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SslVpnClientCert{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SslVpnClientCert) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SslVpnClientCert) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The name of the client certificate.
func (r *SslVpnClientCert) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the SSL-VPN server.
func (r *SslVpnClientCert) SslVpnServerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sslVpnServerId"])
}

// The status of the client certificate.
func (r *SslVpnClientCert) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Input properties used for looking up and filtering SslVpnClientCert resources.
type SslVpnClientCertState struct {
	// The name of the client certificate.
	Name interface{}
	// The ID of the SSL-VPN server.
	SslVpnServerId interface{}
	// The status of the client certificate.
	Status interface{}
}

// The set of arguments for constructing a SslVpnClientCert resource.
type SslVpnClientCertArgs struct {
	// The name of the client certificate.
	Name interface{}
	// The ID of the SSL-VPN server.
	SslVpnServerId interface{}
}
