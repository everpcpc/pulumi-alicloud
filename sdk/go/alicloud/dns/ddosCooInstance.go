// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// BGP-Line Anti-DDoS instance resource. "Ddoscoo" is the short term of this product. See [What is Anti-DDoS Pro](https://www.alibabacloud.com/help/doc-detail/69319.htm).
// 
// > **NOTE:** The product region only support cn-hangzhou.
// 
// > **NOTE:** The endpoint of bssopenapi used only support "business.aliyuncs.com" at present.
// 
// > **NOTE:** Available in 1.37.0+ .
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/ddoscoo_instance.html.markdown.
type DdosCooInstance struct {
	s *pulumi.ResourceState
}

// NewDdosCooInstance registers a new resource with the given unique name, arguments, and options.
func NewDdosCooInstance(ctx *pulumi.Context,
	name string, args *DdosCooInstanceArgs, opts ...pulumi.ResourceOpt) (*DdosCooInstance, error) {
	if args == nil || args.Bandwidth == nil {
		return nil, errors.New("missing required argument 'Bandwidth'")
	}
	if args == nil || args.BaseBandwidth == nil {
		return nil, errors.New("missing required argument 'BaseBandwidth'")
	}
	if args == nil || args.DomainCount == nil {
		return nil, errors.New("missing required argument 'DomainCount'")
	}
	if args == nil || args.PortCount == nil {
		return nil, errors.New("missing required argument 'PortCount'")
	}
	if args == nil || args.ServiceBandwidth == nil {
		return nil, errors.New("missing required argument 'ServiceBandwidth'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bandwidth"] = nil
		inputs["baseBandwidth"] = nil
		inputs["domainCount"] = nil
		inputs["name"] = nil
		inputs["period"] = nil
		inputs["portCount"] = nil
		inputs["serviceBandwidth"] = nil
	} else {
		inputs["bandwidth"] = args.Bandwidth
		inputs["baseBandwidth"] = args.BaseBandwidth
		inputs["domainCount"] = args.DomainCount
		inputs["name"] = args.Name
		inputs["period"] = args.Period
		inputs["portCount"] = args.PortCount
		inputs["serviceBandwidth"] = args.ServiceBandwidth
	}
	s, err := ctx.RegisterResource("alicloud:dns/ddosCooInstance:DdosCooInstance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DdosCooInstance{s: s}, nil
}

// GetDdosCooInstance gets an existing DdosCooInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDdosCooInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DdosCooInstanceState, opts ...pulumi.ResourceOpt) (*DdosCooInstance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bandwidth"] = state.Bandwidth
		inputs["baseBandwidth"] = state.BaseBandwidth
		inputs["domainCount"] = state.DomainCount
		inputs["name"] = state.Name
		inputs["period"] = state.Period
		inputs["portCount"] = state.PortCount
		inputs["serviceBandwidth"] = state.ServiceBandwidth
	}
	s, err := ctx.ReadResource("alicloud:dns/ddosCooInstance:DdosCooInstance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DdosCooInstance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DdosCooInstance) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DdosCooInstance) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: 30, 60, 100, 300, 400, 500, 600. The unit is Gbps. Only support upgrade.
func (r *DdosCooInstance) Bandwidth() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["bandwidth"])
}

// Base defend bandwidth of the instance. Valid values: 30, 60, 100, 300, 400, 500, 600. The unit is Gbps. Only support upgrade.
func (r *DdosCooInstance) BaseBandwidth() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["baseBandwidth"])
}

// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
func (r *DdosCooInstance) DomainCount() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["domainCount"])
}

// Name of the instance. This name can have a string of 1 to 63 characters.
func (r *DdosCooInstance) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The duration that you will buy Ddoscoo instance (in month). Valid values: [1~9], 12, 24, 36. Default to 1. At present, the provider does not support modify "period".
func (r *DdosCooInstance) Period() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["period"])
}

// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
func (r *DdosCooInstance) PortCount() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["portCount"])
}

// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade.
func (r *DdosCooInstance) ServiceBandwidth() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceBandwidth"])
}

// Input properties used for looking up and filtering DdosCooInstance resources.
type DdosCooInstanceState struct {
	// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: 30, 60, 100, 300, 400, 500, 600. The unit is Gbps. Only support upgrade.
	Bandwidth interface{}
	// Base defend bandwidth of the instance. Valid values: 30, 60, 100, 300, 400, 500, 600. The unit is Gbps. Only support upgrade.
	BaseBandwidth interface{}
	// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	DomainCount interface{}
	// Name of the instance. This name can have a string of 1 to 63 characters.
	Name interface{}
	// The duration that you will buy Ddoscoo instance (in month). Valid values: [1~9], 12, 24, 36. Default to 1. At present, the provider does not support modify "period".
	Period interface{}
	// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	PortCount interface{}
	// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade.
	ServiceBandwidth interface{}
}

// The set of arguments for constructing a DdosCooInstance resource.
type DdosCooInstanceArgs struct {
	// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: 30, 60, 100, 300, 400, 500, 600. The unit is Gbps. Only support upgrade.
	Bandwidth interface{}
	// Base defend bandwidth of the instance. Valid values: 30, 60, 100, 300, 400, 500, 600. The unit is Gbps. Only support upgrade.
	BaseBandwidth interface{}
	// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	DomainCount interface{}
	// Name of the instance. This name can have a string of 1 to 63 characters.
	Name interface{}
	// The duration that you will buy Ddoscoo instance (in month). Valid values: [1~9], 12, 24, 36. Default to 1. At present, the provider does not support modify "period".
	Period interface{}
	// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	PortCount interface{}
	// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade.
	ServiceBandwidth interface{}
}
