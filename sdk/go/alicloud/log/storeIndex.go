// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Log Service provides the LogSearch/Analytics function to query and analyze large amounts of logs in real time.
// You can use this function by enabling the index and field statistics. [Refer to details](https://www.alibabacloud.com/help/doc-detail/43772.htm)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/log_store_index.html.markdown.
type StoreIndex struct {
	s *pulumi.ResourceState
}

// NewStoreIndex registers a new resource with the given unique name, arguments, and options.
func NewStoreIndex(ctx *pulumi.Context,
	name string, args *StoreIndexArgs, opts ...pulumi.ResourceOpt) (*StoreIndex, error) {
	if args == nil || args.Logstore == nil {
		return nil, errors.New("missing required argument 'Logstore'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["fieldSearches"] = nil
		inputs["fullText"] = nil
		inputs["logstore"] = nil
		inputs["project"] = nil
	} else {
		inputs["fieldSearches"] = args.FieldSearches
		inputs["fullText"] = args.FullText
		inputs["logstore"] = args.Logstore
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("alicloud:log/storeIndex:StoreIndex", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &StoreIndex{s: s}, nil
}

// GetStoreIndex gets an existing StoreIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoreIndex(ctx *pulumi.Context,
	name string, id pulumi.ID, state *StoreIndexState, opts ...pulumi.ResourceOpt) (*StoreIndex, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["fieldSearches"] = state.FieldSearches
		inputs["fullText"] = state.FullText
		inputs["logstore"] = state.Logstore
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("alicloud:log/storeIndex:StoreIndex", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &StoreIndex{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *StoreIndex) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *StoreIndex) ID() pulumi.IDOutput {
	return r.s.ID()
}

// List configurations of field search index. Valid item as follows:
func (r *StoreIndex) FieldSearches() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["fieldSearches"])
}

// The configuration of full text index. Valid item as follows:
func (r *StoreIndex) FullText() pulumi.Output {
	return r.s.State["fullText"]
}

// The log store name to the query index belongs.
func (r *StoreIndex) Logstore() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["logstore"])
}

// The project name to the log store belongs.
func (r *StoreIndex) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering StoreIndex resources.
type StoreIndexState struct {
	// List configurations of field search index. Valid item as follows:
	FieldSearches interface{}
	// The configuration of full text index. Valid item as follows:
	FullText interface{}
	// The log store name to the query index belongs.
	Logstore interface{}
	// The project name to the log store belongs.
	Project interface{}
}

// The set of arguments for constructing a StoreIndex resource.
type StoreIndexArgs struct {
	// List configurations of field search index. Valid item as follows:
	FieldSearches interface{}
	// The configuration of full text index. Valid item as follows:
	FullText interface{}
	// The log store name to the query index belongs.
	Logstore interface{}
	// The project name to the log store belongs.
	Project interface{}
}
