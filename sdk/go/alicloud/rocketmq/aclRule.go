// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Sag Acl Rule resource. This topic describes how to configure an access control list (ACL) rule for a target Smart Access Gateway instance to permit or deny access to or from specified IP addresses in the ACL rule.
// 
// For information about Sag Acl Rule and how to use it, see [What is access control list (ACL) rule](https://www.alibabacloud.com/help/doc-detail/111483.htm).
// 
// > **NOTE:** Available in 1.60.0+
// 
// > **NOTE:** Only the following regions support create Cloud Connect Network. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/sag_acl_rule.html.markdown.
type AclRule struct {
	s *pulumi.ResourceState
}

// NewAclRule registers a new resource with the given unique name, arguments, and options.
func NewAclRule(ctx *pulumi.Context,
	name string, args *AclRuleArgs, opts ...pulumi.ResourceOpt) (*AclRule, error) {
	if args == nil || args.AclId == nil {
		return nil, errors.New("missing required argument 'AclId'")
	}
	if args == nil || args.DestCidr == nil {
		return nil, errors.New("missing required argument 'DestCidr'")
	}
	if args == nil || args.DestPortRange == nil {
		return nil, errors.New("missing required argument 'DestPortRange'")
	}
	if args == nil || args.Direction == nil {
		return nil, errors.New("missing required argument 'Direction'")
	}
	if args == nil || args.IpProtocol == nil {
		return nil, errors.New("missing required argument 'IpProtocol'")
	}
	if args == nil || args.Policy == nil {
		return nil, errors.New("missing required argument 'Policy'")
	}
	if args == nil || args.SourceCidr == nil {
		return nil, errors.New("missing required argument 'SourceCidr'")
	}
	if args == nil || args.SourcePortRange == nil {
		return nil, errors.New("missing required argument 'SourcePortRange'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["aclId"] = nil
		inputs["description"] = nil
		inputs["destCidr"] = nil
		inputs["destPortRange"] = nil
		inputs["direction"] = nil
		inputs["ipProtocol"] = nil
		inputs["policy"] = nil
		inputs["priority"] = nil
		inputs["sourceCidr"] = nil
		inputs["sourcePortRange"] = nil
	} else {
		inputs["aclId"] = args.AclId
		inputs["description"] = args.Description
		inputs["destCidr"] = args.DestCidr
		inputs["destPortRange"] = args.DestPortRange
		inputs["direction"] = args.Direction
		inputs["ipProtocol"] = args.IpProtocol
		inputs["policy"] = args.Policy
		inputs["priority"] = args.Priority
		inputs["sourceCidr"] = args.SourceCidr
		inputs["sourcePortRange"] = args.SourcePortRange
	}
	s, err := ctx.RegisterResource("alicloud:rocketmq/aclRule:AclRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclRule{s: s}, nil
}

// GetAclRule gets an existing AclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AclRuleState, opts ...pulumi.ResourceOpt) (*AclRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["aclId"] = state.AclId
		inputs["description"] = state.Description
		inputs["destCidr"] = state.DestCidr
		inputs["destPortRange"] = state.DestPortRange
		inputs["direction"] = state.Direction
		inputs["ipProtocol"] = state.IpProtocol
		inputs["policy"] = state.Policy
		inputs["priority"] = state.Priority
		inputs["sourceCidr"] = state.SourceCidr
		inputs["sourcePortRange"] = state.SourcePortRange
	}
	s, err := ctx.ReadResource("alicloud:rocketmq/aclRule:AclRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AclRule) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AclRule) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the ACL.
func (r *AclRule) AclId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["aclId"])
}

// The description of the ACL rule. It must be 1 to 512 characters in length.
func (r *AclRule) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The destination address. It is an IPv4 address range in CIDR format. Default value: 0.0.0.0/0.
func (r *AclRule) DestCidr() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["destCidr"])
}

// The range of the destination port. Valid value: 80/80. 
func (r *AclRule) DestPortRange() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["destPortRange"])
}

// The direction of the ACL rule. Valid values: in|out.
func (r *AclRule) Direction() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["direction"])
}

// The protocol used by the ACL rule. The value is not case sensitive.
func (r *AclRule) IpProtocol() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ipProtocol"])
}

// The policy used by the ACL rule. Valid values: accept|drop.
func (r *AclRule) Policy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["policy"])
}

// The priority of the ACL rule. Value range: 1 to 100. 
func (r *AclRule) Priority() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["priority"])
}

// The source address. It is an IPv4 address range in the CIDR format. Default value: 0.0.0.0/0.
func (r *AclRule) SourceCidr() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceCidr"])
}

// The range of the source port. Valid value: 80/80.
func (r *AclRule) SourcePortRange() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourcePortRange"])
}

// Input properties used for looking up and filtering AclRule resources.
type AclRuleState struct {
	// The ID of the ACL.
	AclId interface{}
	// The description of the ACL rule. It must be 1 to 512 characters in length.
	Description interface{}
	// The destination address. It is an IPv4 address range in CIDR format. Default value: 0.0.0.0/0.
	DestCidr interface{}
	// The range of the destination port. Valid value: 80/80. 
	DestPortRange interface{}
	// The direction of the ACL rule. Valid values: in|out.
	Direction interface{}
	// The protocol used by the ACL rule. The value is not case sensitive.
	IpProtocol interface{}
	// The policy used by the ACL rule. Valid values: accept|drop.
	Policy interface{}
	// The priority of the ACL rule. Value range: 1 to 100. 
	Priority interface{}
	// The source address. It is an IPv4 address range in the CIDR format. Default value: 0.0.0.0/0.
	SourceCidr interface{}
	// The range of the source port. Valid value: 80/80.
	SourcePortRange interface{}
}

// The set of arguments for constructing a AclRule resource.
type AclRuleArgs struct {
	// The ID of the ACL.
	AclId interface{}
	// The description of the ACL rule. It must be 1 to 512 characters in length.
	Description interface{}
	// The destination address. It is an IPv4 address range in CIDR format. Default value: 0.0.0.0/0.
	DestCidr interface{}
	// The range of the destination port. Valid value: 80/80. 
	DestPortRange interface{}
	// The direction of the ACL rule. Valid values: in|out.
	Direction interface{}
	// The protocol used by the ACL rule. The value is not case sensitive.
	IpProtocol interface{}
	// The policy used by the ACL rule. Valid values: accept|drop.
	Policy interface{}
	// The priority of the ACL rule. Value range: 1 to 100. 
	Priority interface{}
	// The source address. It is an IPv4 address range in the CIDR format. Default value: 0.0.0.0/0.
	SourceCidr interface{}
	// The range of the source port. Valid value: 80/80.
	SourcePortRange interface{}
}
