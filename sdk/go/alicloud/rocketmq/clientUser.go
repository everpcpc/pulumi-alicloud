// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Sag ClientUser resource. This topic describes how to manage accounts as an administrator. After you configure the network, you can create multiple accounts and distribute them to end users so that clients can access Alibaba Cloud.
// 
// For information about Sag ClientUser and how to use it, see [What is Sag ClientUser](https://www.alibabacloud.com/help/doc-detail/108326.htm).
// 
// > **NOTE:** Available in 1.65.0+
// 
// > **NOTE:** Only the following regions support. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/sag_client_user.html.markdown.
type ClientUser struct {
	s *pulumi.ResourceState
}

// NewClientUser registers a new resource with the given unique name, arguments, and options.
func NewClientUser(ctx *pulumi.Context,
	name string, args *ClientUserArgs, opts ...pulumi.ResourceOpt) (*ClientUser, error) {
	if args == nil || args.Bandwidth == nil {
		return nil, errors.New("missing required argument 'Bandwidth'")
	}
	if args == nil || args.SagId == nil {
		return nil, errors.New("missing required argument 'SagId'")
	}
	if args == nil || args.UserMail == nil {
		return nil, errors.New("missing required argument 'UserMail'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bandwidth"] = nil
		inputs["clientIp"] = nil
		inputs["kmsEncryptedPassword"] = nil
		inputs["kmsEncryptionContext"] = nil
		inputs["password"] = nil
		inputs["sagId"] = nil
		inputs["userMail"] = nil
		inputs["userName"] = nil
	} else {
		inputs["bandwidth"] = args.Bandwidth
		inputs["clientIp"] = args.ClientIp
		inputs["kmsEncryptedPassword"] = args.KmsEncryptedPassword
		inputs["kmsEncryptionContext"] = args.KmsEncryptionContext
		inputs["password"] = args.Password
		inputs["sagId"] = args.SagId
		inputs["userMail"] = args.UserMail
		inputs["userName"] = args.UserName
	}
	s, err := ctx.RegisterResource("alicloud:rocketmq/clientUser:ClientUser", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientUser{s: s}, nil
}

// GetClientUser gets an existing ClientUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClientUserState, opts ...pulumi.ResourceOpt) (*ClientUser, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bandwidth"] = state.Bandwidth
		inputs["clientIp"] = state.ClientIp
		inputs["kmsEncryptedPassword"] = state.KmsEncryptedPassword
		inputs["kmsEncryptionContext"] = state.KmsEncryptionContext
		inputs["password"] = state.Password
		inputs["sagId"] = state.SagId
		inputs["userMail"] = state.UserMail
		inputs["userName"] = state.UserName
	}
	s, err := ctx.ReadResource("alicloud:rocketmq/clientUser:ClientUser", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientUser{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClientUser) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClientUser) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The SAG APP bandwidth that the user can use. Unit: Kbit/s. Maximum value: 2000 Kbit/s.
func (r *ClientUser) Bandwidth() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["bandwidth"])
}

// The IP address of the SAG APP. If you specify this parameter, the current account always uses the specified IP address.Note The IP address must be in the private CIDR block of the SAG client.If you do not specify this parameter, the system automatically allocates an IP address from the private CIDR block of the SAG client. In this case, each re-connection uses a different IP address.
func (r *ClientUser) ClientIp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientIp"])
}

func (r *ClientUser) KmsEncryptedPassword() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kmsEncryptedPassword"])
}

func (r *ClientUser) KmsEncryptionContext() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["kmsEncryptionContext"])
}

// The password used to log on to the SAG APP.Both the user name and the password must be specified. If you specify the user name, the password must be specified, too.
func (r *ClientUser) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// The ID of the SAG instance created for the SAG APP.
func (r *ClientUser) SagId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sagId"])
}

// The email address of the user. The administrator uses this address to send the account information for logging on to the APP to the user.
func (r *ClientUser) UserMail() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userMail"])
}

// The user name. User names in the same SAG APP must be unique.Both the user name and the password must be specified. If you specify the user name, the password must be specified, too.
func (r *ClientUser) UserName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userName"])
}

// Input properties used for looking up and filtering ClientUser resources.
type ClientUserState struct {
	// The SAG APP bandwidth that the user can use. Unit: Kbit/s. Maximum value: 2000 Kbit/s.
	Bandwidth interface{}
	// The IP address of the SAG APP. If you specify this parameter, the current account always uses the specified IP address.Note The IP address must be in the private CIDR block of the SAG client.If you do not specify this parameter, the system automatically allocates an IP address from the private CIDR block of the SAG client. In this case, each re-connection uses a different IP address.
	ClientIp interface{}
	KmsEncryptedPassword interface{}
	KmsEncryptionContext interface{}
	// The password used to log on to the SAG APP.Both the user name and the password must be specified. If you specify the user name, the password must be specified, too.
	Password interface{}
	// The ID of the SAG instance created for the SAG APP.
	SagId interface{}
	// The email address of the user. The administrator uses this address to send the account information for logging on to the APP to the user.
	UserMail interface{}
	// The user name. User names in the same SAG APP must be unique.Both the user name and the password must be specified. If you specify the user name, the password must be specified, too.
	UserName interface{}
}

// The set of arguments for constructing a ClientUser resource.
type ClientUserArgs struct {
	// The SAG APP bandwidth that the user can use. Unit: Kbit/s. Maximum value: 2000 Kbit/s.
	Bandwidth interface{}
	// The IP address of the SAG APP. If you specify this parameter, the current account always uses the specified IP address.Note The IP address must be in the private CIDR block of the SAG client.If you do not specify this parameter, the system automatically allocates an IP address from the private CIDR block of the SAG client. In this case, each re-connection uses a different IP address.
	ClientIp interface{}
	KmsEncryptedPassword interface{}
	KmsEncryptionContext interface{}
	// The password used to log on to the SAG APP.Both the user name and the password must be specified. If you specify the user name, the password must be specified, too.
	Password interface{}
	// The ID of the SAG instance created for the SAG APP.
	SagId interface{}
	// The email address of the user. The administrator uses this address to send the account information for logging on to the APP to the user.
	UserMail interface{}
	// The user name. User names in the same SAG APP must be unique.Both the user name and the password must be specified. If you specify the user name, the password must be specified, too.
	UserName interface{}
}
