// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ONS group resource.
// 
// For more information about how to use it, see [RocketMQ Group Management API](https://www.alibabacloud.com/help/doc-detail/29616.html). 
// 
// > **NOTE:** Available in 1.53.0+
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/ons_group.html.markdown.
type Group struct {
	s *pulumi.ResourceState
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOpt) (*Group, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["groupId"] = nil
		inputs["instanceId"] = nil
		inputs["readEnable"] = nil
		inputs["remark"] = nil
	} else {
		inputs["groupId"] = args.GroupId
		inputs["instanceId"] = args.InstanceId
		inputs["readEnable"] = args.ReadEnable
		inputs["remark"] = args.Remark
	}
	s, err := ctx.RegisterResource("alicloud:rocketmq/group:Group", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupState, opts ...pulumi.ResourceOpt) (*Group, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["groupId"] = state.GroupId
		inputs["instanceId"] = state.InstanceId
		inputs["readEnable"] = state.ReadEnable
		inputs["remark"] = state.Remark
	}
	s, err := ctx.ReadResource("alicloud:rocketmq/group:Group", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Group) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Group) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Name of the group. Two groups on a single instance cannot have the same name. A `groupId` starts with "GID_" or "GID-", and contains letters, numbers, hyphens (-), and underscores (_).
func (r *Group) GroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupId"])
}

// ID of the ONS Instance that owns the groups.
func (r *Group) InstanceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceId"])
}

// This attribute is used to set the message reading enabled or disabled. It can only be set after the group is used by the client.
func (r *Group) ReadEnable() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["readEnable"])
}

// This attribute is a concise description of group. The length cannot exceed 256.
func (r *Group) Remark() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["remark"])
}

// Input properties used for looking up and filtering Group resources.
type GroupState struct {
	// Name of the group. Two groups on a single instance cannot have the same name. A `groupId` starts with "GID_" or "GID-", and contains letters, numbers, hyphens (-), and underscores (_).
	GroupId interface{}
	// ID of the ONS Instance that owns the groups.
	InstanceId interface{}
	// This attribute is used to set the message reading enabled or disabled. It can only be set after the group is used by the client.
	ReadEnable interface{}
	// This attribute is a concise description of group. The length cannot exceed 256.
	Remark interface{}
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// Name of the group. Two groups on a single instance cannot have the same name. A `groupId` starts with "GID_" or "GID-", and contains letters, numbers, hyphens (-), and underscores (_).
	GroupId interface{}
	// ID of the ONS Instance that owns the groups.
	InstanceId interface{}
	// This attribute is used to set the message reading enabled or disabled. It can only be set after the group is used by the client.
	ReadEnable interface{}
	// This attribute is a concise description of group. The length cannot exceed 256.
	Remark interface{}
}
