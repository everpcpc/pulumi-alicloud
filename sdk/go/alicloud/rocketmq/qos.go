// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Sag Qos resource. Smart Access Gateway (SAG) supports quintuple-based QoS functions to differentiate traffic of different services and ensure high-priority traffic bandwidth.
// 
// For information about Sag Qos and how to use it, see [What is Qos](https://www.alibabacloud.com/help/doc-detail/131306.htm).
// 
// > **NOTE:** Available in 1.60.0+
// 
// > **NOTE:** Only the following regions support. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/sag_qos.html.markdown.
type Qos struct {
	s *pulumi.ResourceState
}

// NewQos registers a new resource with the given unique name, arguments, and options.
func NewQos(ctx *pulumi.Context,
	name string, args *QosArgs, opts ...pulumi.ResourceOpt) (*Qos, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
	} else {
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("alicloud:rocketmq/qos:Qos", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Qos{s: s}, nil
}

// GetQos gets an existing Qos resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQos(ctx *pulumi.Context,
	name string, id pulumi.ID, state *QosState, opts ...pulumi.ResourceOpt) (*Qos, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("alicloud:rocketmq/qos:Qos", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Qos{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Qos) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Qos) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the QoS policy to be created. The name can contain 2 to 128 characters including a-z, A-Z, 0-9, periods, underlines, and hyphens. The name must start with an English letter, but cannot start with http:// or https://.
func (r *Qos) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Qos resources.
type QosState struct {
	// The name of the QoS policy to be created. The name can contain 2 to 128 characters including a-z, A-Z, 0-9, periods, underlines, and hyphens. The name must start with an English letter, but cannot start with http:// or https://.
	Name interface{}
}

// The set of arguments for constructing a Qos resource.
type QosArgs struct {
	// The name of the QoS policy to be created. The name can contain 2 to 128 characters including a-z, A-Z, 0-9, periods, underlines, and hyphens. The name must start with an English letter, but cannot start with http:// or https://.
	Name interface{}
}
