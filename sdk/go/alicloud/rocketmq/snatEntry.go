// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package rocketmq

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Sag SnatEntry resource. This topic describes how to add a SNAT entry to enable the SNAT function. The SNAT function can hide internal IP addresses and resolve private IP address conflicts. With this function, on-premises sites can access internal IP addresses, but cannot be accessed by internal IP addresses. If you do not add a SNAT entry, on-premises sites can access each other only when all related IP addresses do not conflict.
//
// For information about Sag SnatEntry and how to use it, see [What is Sag SnatEntry](https://www.alibabacloud.com/help/doc-detail/124231.htm).
//
// > **NOTE:** Available in 1.61.0+
//
// > **NOTE:** Only the following regions support. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]
//
//
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/sag_snat_entry.html.markdown.
type SnatEntry struct {
	pulumi.CustomResourceState

	// The destination CIDR block.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// The ID of the SAG instance.
	SagId pulumi.StringOutput `pulumi:"sagId"`
	// The public IP address.
	SnatIp pulumi.StringOutput `pulumi:"snatIp"`
}

// NewSnatEntry registers a new resource with the given unique name, arguments, and options.
func NewSnatEntry(ctx *pulumi.Context,
	name string, args *SnatEntryArgs, opts ...pulumi.ResourceOption) (*SnatEntry, error) {
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.SagId == nil {
		return nil, errors.New("missing required argument 'SagId'")
	}
	if args == nil || args.SnatIp == nil {
		return nil, errors.New("missing required argument 'SnatIp'")
	}
	if args == nil {
		args = &SnatEntryArgs{}
	}
	var resource SnatEntry
	err := ctx.RegisterResource("alicloud:rocketmq/snatEntry:SnatEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnatEntry gets an existing SnatEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnatEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnatEntryState, opts ...pulumi.ResourceOption) (*SnatEntry, error) {
	var resource SnatEntry
	err := ctx.ReadResource("alicloud:rocketmq/snatEntry:SnatEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnatEntry resources.
type snatEntryState struct {
	// The destination CIDR block.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The ID of the SAG instance.
	SagId *string `pulumi:"sagId"`
	// The public IP address.
	SnatIp *string `pulumi:"snatIp"`
}

type SnatEntryState struct {
	// The destination CIDR block.
	CidrBlock pulumi.StringPtrInput
	// The ID of the SAG instance.
	SagId pulumi.StringPtrInput
	// The public IP address.
	SnatIp pulumi.StringPtrInput
}

func (SnatEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*snatEntryState)(nil)).Elem()
}

type snatEntryArgs struct {
	// The destination CIDR block.
	CidrBlock string `pulumi:"cidrBlock"`
	// The ID of the SAG instance.
	SagId string `pulumi:"sagId"`
	// The public IP address.
	SnatIp string `pulumi:"snatIp"`
}

// The set of arguments for constructing a SnatEntry resource.
type SnatEntryArgs struct {
	// The destination CIDR block.
	CidrBlock pulumi.StringInput
	// The ID of the SAG instance.
	SagId pulumi.StringInput
	// The public IP address.
	SnatIp pulumi.StringInput
}

func (SnatEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snatEntryArgs)(nil)).Elem()
}
