// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hbr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a HBR Ecs Backup Plan resource.
//
// For information about HBR Ecs Backup Plan and how to use it, see [What is Ecs Backup Plan](https://www.alibabacloud.com/help/doc-detail/186568.htm).
//
// > **NOTE:** Available in v1.132.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/hbr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := hbr.NewEcsBackupPlan(ctx, "example", &hbr.EcsBackupPlanArgs{
// 			BackupType:        pulumi.String("COMPLETE"),
// 			EcsBackupPlanName: pulumi.String("example_value"),
// 			Exclude:           pulumi.String(fmt.Sprintf("%v%v", "  [\"/home/exclude\"]\n", "  \n")),
// 			Include:           pulumi.String(fmt.Sprintf("%v%v", "  [\"/home/include\"]\n", "  \n")),
// 			InstanceId:        pulumi.String("i-bp1567rc0oxxxxxxxxxx"),
// 			Paths: pulumi.StringArray{
// 				pulumi.String("/home"),
// 				pulumi.String("/var"),
// 			},
// 			Retention:  pulumi.String("1"),
// 			Schedule:   pulumi.String("I|1602673264|PT2H"),
// 			SpeedLimit: pulumi.String("I|1602673264|PT2H"),
// 			VaultId:    pulumi.String("v-0003gxoksflhxxxxxxxx"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// HBR Ecs Backup Plan can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:hbr/ecsBackupPlan:EcsBackupPlan example <id>
// ```
type EcsBackupPlan struct {
	pulumi.CustomResourceState

	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType pulumi.StringOutput    `pulumi:"backupType"`
	Detail     pulumi.StringPtrOutput `pulumi:"detail"`
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
	EcsBackupPlanName pulumi.StringOutput `pulumi:"ecsBackupPlanName"`
	// Exclude Path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Exclude pulumi.StringPtrOutput `pulumi:"exclude"`
	// Include Path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Include pulumi.StringPtrOutput `pulumi:"include"`
	// The ECS Instance Id. Must Have Installed the Client.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Windows System with Application Consistency Using VSS. eg: {`UseVSS`:false}.
	Options pulumi.StringPtrOutput `pulumi:"options"`
	// Backup Path. e.g. `["/home", "/var"]`
	Paths pulumi.StringArrayOutput `pulumi:"paths"`
	// Backup Retention Period, the Minimum Value of 1.
	Retention pulumi.StringOutput `pulumi:"retention"`
	// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  pulumi.StringPtrOutput `pulumi:"speedLimit"`
	UpdatePaths pulumi.BoolPtrOutput   `pulumi:"updatePaths"`
	// Vault ID.
	VaultId pulumi.StringPtrOutput `pulumi:"vaultId"`
}

// NewEcsBackupPlan registers a new resource with the given unique name, arguments, and options.
func NewEcsBackupPlan(ctx *pulumi.Context,
	name string, args *EcsBackupPlanArgs, opts ...pulumi.ResourceOption) (*EcsBackupPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EcsBackupPlanName == nil {
		return nil, errors.New("invalid value for required argument 'EcsBackupPlanName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Retention == nil {
		return nil, errors.New("invalid value for required argument 'Retention'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	var resource EcsBackupPlan
	err := ctx.RegisterResource("alicloud:hbr/ecsBackupPlan:EcsBackupPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsBackupPlan gets an existing EcsBackupPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsBackupPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsBackupPlanState, opts ...pulumi.ResourceOption) (*EcsBackupPlan, error) {
	var resource EcsBackupPlan
	err := ctx.ReadResource("alicloud:hbr/ecsBackupPlan:EcsBackupPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsBackupPlan resources.
type ecsBackupPlanState struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType *string `pulumi:"backupType"`
	Detail     *string `pulumi:"detail"`
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled *bool `pulumi:"disabled"`
	// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
	EcsBackupPlanName *string `pulumi:"ecsBackupPlanName"`
	// Exclude Path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Exclude *string `pulumi:"exclude"`
	// Include Path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Include *string `pulumi:"include"`
	// The ECS Instance Id. Must Have Installed the Client.
	InstanceId *string `pulumi:"instanceId"`
	// Windows System with Application Consistency Using VSS. eg: {`UseVSS`:false}.
	Options *string `pulumi:"options"`
	// Backup Path. e.g. `["/home", "/var"]`
	Paths []string `pulumi:"paths"`
	// Backup Retention Period, the Minimum Value of 1.
	Retention *string `pulumi:"retention"`
	// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
	Schedule *string `pulumi:"schedule"`
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  *string `pulumi:"speedLimit"`
	UpdatePaths *bool   `pulumi:"updatePaths"`
	// Vault ID.
	VaultId *string `pulumi:"vaultId"`
}

type EcsBackupPlanState struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType pulumi.StringPtrInput
	Detail     pulumi.StringPtrInput
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled pulumi.BoolPtrInput
	// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
	EcsBackupPlanName pulumi.StringPtrInput
	// Exclude Path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Exclude pulumi.StringPtrInput
	// Include Path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Include pulumi.StringPtrInput
	// The ECS Instance Id. Must Have Installed the Client.
	InstanceId pulumi.StringPtrInput
	// Windows System with Application Consistency Using VSS. eg: {`UseVSS`:false}.
	Options pulumi.StringPtrInput
	// Backup Path. e.g. `["/home", "/var"]`
	Paths pulumi.StringArrayInput
	// Backup Retention Period, the Minimum Value of 1.
	Retention pulumi.StringPtrInput
	// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
	Schedule pulumi.StringPtrInput
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  pulumi.StringPtrInput
	UpdatePaths pulumi.BoolPtrInput
	// Vault ID.
	VaultId pulumi.StringPtrInput
}

func (EcsBackupPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsBackupPlanState)(nil)).Elem()
}

type ecsBackupPlanArgs struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType *string `pulumi:"backupType"`
	Detail     *string `pulumi:"detail"`
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled *bool `pulumi:"disabled"`
	// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
	EcsBackupPlanName string `pulumi:"ecsBackupPlanName"`
	// Exclude Path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Exclude *string `pulumi:"exclude"`
	// Include Path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Include *string `pulumi:"include"`
	// The ECS Instance Id. Must Have Installed the Client.
	InstanceId string `pulumi:"instanceId"`
	// Windows System with Application Consistency Using VSS. eg: {`UseVSS`:false}.
	Options *string `pulumi:"options"`
	// Backup Path. e.g. `["/home", "/var"]`
	Paths []string `pulumi:"paths"`
	// Backup Retention Period, the Minimum Value of 1.
	Retention string `pulumi:"retention"`
	// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
	Schedule string `pulumi:"schedule"`
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  *string `pulumi:"speedLimit"`
	UpdatePaths *bool   `pulumi:"updatePaths"`
	// Vault ID.
	VaultId *string `pulumi:"vaultId"`
}

// The set of arguments for constructing a EcsBackupPlan resource.
type EcsBackupPlanArgs struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType pulumi.StringPtrInput
	Detail     pulumi.StringPtrInput
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled pulumi.BoolPtrInput
	// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
	EcsBackupPlanName pulumi.StringInput
	// Exclude Path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Exclude pulumi.StringPtrInput
	// Include Path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Include pulumi.StringPtrInput
	// The ECS Instance Id. Must Have Installed the Client.
	InstanceId pulumi.StringInput
	// Windows System with Application Consistency Using VSS. eg: {`UseVSS`:false}.
	Options pulumi.StringPtrInput
	// Backup Path. e.g. `["/home", "/var"]`
	Paths pulumi.StringArrayInput
	// Backup Retention Period, the Minimum Value of 1.
	Retention pulumi.StringInput
	// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
	Schedule pulumi.StringInput
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  pulumi.StringPtrInput
	UpdatePaths pulumi.BoolPtrInput
	// Vault ID.
	VaultId pulumi.StringPtrInput
}

func (EcsBackupPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsBackupPlanArgs)(nil)).Elem()
}

type EcsBackupPlanInput interface {
	pulumi.Input

	ToEcsBackupPlanOutput() EcsBackupPlanOutput
	ToEcsBackupPlanOutputWithContext(ctx context.Context) EcsBackupPlanOutput
}

func (*EcsBackupPlan) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsBackupPlan)(nil))
}

func (i *EcsBackupPlan) ToEcsBackupPlanOutput() EcsBackupPlanOutput {
	return i.ToEcsBackupPlanOutputWithContext(context.Background())
}

func (i *EcsBackupPlan) ToEcsBackupPlanOutputWithContext(ctx context.Context) EcsBackupPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsBackupPlanOutput)
}

func (i *EcsBackupPlan) ToEcsBackupPlanPtrOutput() EcsBackupPlanPtrOutput {
	return i.ToEcsBackupPlanPtrOutputWithContext(context.Background())
}

func (i *EcsBackupPlan) ToEcsBackupPlanPtrOutputWithContext(ctx context.Context) EcsBackupPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsBackupPlanPtrOutput)
}

type EcsBackupPlanPtrInput interface {
	pulumi.Input

	ToEcsBackupPlanPtrOutput() EcsBackupPlanPtrOutput
	ToEcsBackupPlanPtrOutputWithContext(ctx context.Context) EcsBackupPlanPtrOutput
}

type ecsBackupPlanPtrType EcsBackupPlanArgs

func (*ecsBackupPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsBackupPlan)(nil))
}

func (i *ecsBackupPlanPtrType) ToEcsBackupPlanPtrOutput() EcsBackupPlanPtrOutput {
	return i.ToEcsBackupPlanPtrOutputWithContext(context.Background())
}

func (i *ecsBackupPlanPtrType) ToEcsBackupPlanPtrOutputWithContext(ctx context.Context) EcsBackupPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsBackupPlanPtrOutput)
}

// EcsBackupPlanArrayInput is an input type that accepts EcsBackupPlanArray and EcsBackupPlanArrayOutput values.
// You can construct a concrete instance of `EcsBackupPlanArrayInput` via:
//
//          EcsBackupPlanArray{ EcsBackupPlanArgs{...} }
type EcsBackupPlanArrayInput interface {
	pulumi.Input

	ToEcsBackupPlanArrayOutput() EcsBackupPlanArrayOutput
	ToEcsBackupPlanArrayOutputWithContext(context.Context) EcsBackupPlanArrayOutput
}

type EcsBackupPlanArray []EcsBackupPlanInput

func (EcsBackupPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*EcsBackupPlan)(nil))
}

func (i EcsBackupPlanArray) ToEcsBackupPlanArrayOutput() EcsBackupPlanArrayOutput {
	return i.ToEcsBackupPlanArrayOutputWithContext(context.Background())
}

func (i EcsBackupPlanArray) ToEcsBackupPlanArrayOutputWithContext(ctx context.Context) EcsBackupPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsBackupPlanArrayOutput)
}

// EcsBackupPlanMapInput is an input type that accepts EcsBackupPlanMap and EcsBackupPlanMapOutput values.
// You can construct a concrete instance of `EcsBackupPlanMapInput` via:
//
//          EcsBackupPlanMap{ "key": EcsBackupPlanArgs{...} }
type EcsBackupPlanMapInput interface {
	pulumi.Input

	ToEcsBackupPlanMapOutput() EcsBackupPlanMapOutput
	ToEcsBackupPlanMapOutputWithContext(context.Context) EcsBackupPlanMapOutput
}

type EcsBackupPlanMap map[string]EcsBackupPlanInput

func (EcsBackupPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*EcsBackupPlan)(nil))
}

func (i EcsBackupPlanMap) ToEcsBackupPlanMapOutput() EcsBackupPlanMapOutput {
	return i.ToEcsBackupPlanMapOutputWithContext(context.Background())
}

func (i EcsBackupPlanMap) ToEcsBackupPlanMapOutputWithContext(ctx context.Context) EcsBackupPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsBackupPlanMapOutput)
}

type EcsBackupPlanOutput struct {
	*pulumi.OutputState
}

func (EcsBackupPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsBackupPlan)(nil))
}

func (o EcsBackupPlanOutput) ToEcsBackupPlanOutput() EcsBackupPlanOutput {
	return o
}

func (o EcsBackupPlanOutput) ToEcsBackupPlanOutputWithContext(ctx context.Context) EcsBackupPlanOutput {
	return o
}

func (o EcsBackupPlanOutput) ToEcsBackupPlanPtrOutput() EcsBackupPlanPtrOutput {
	return o.ToEcsBackupPlanPtrOutputWithContext(context.Background())
}

func (o EcsBackupPlanOutput) ToEcsBackupPlanPtrOutputWithContext(ctx context.Context) EcsBackupPlanPtrOutput {
	return o.ApplyT(func(v EcsBackupPlan) *EcsBackupPlan {
		return &v
	}).(EcsBackupPlanPtrOutput)
}

type EcsBackupPlanPtrOutput struct {
	*pulumi.OutputState
}

func (EcsBackupPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsBackupPlan)(nil))
}

func (o EcsBackupPlanPtrOutput) ToEcsBackupPlanPtrOutput() EcsBackupPlanPtrOutput {
	return o
}

func (o EcsBackupPlanPtrOutput) ToEcsBackupPlanPtrOutputWithContext(ctx context.Context) EcsBackupPlanPtrOutput {
	return o
}

type EcsBackupPlanArrayOutput struct{ *pulumi.OutputState }

func (EcsBackupPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EcsBackupPlan)(nil))
}

func (o EcsBackupPlanArrayOutput) ToEcsBackupPlanArrayOutput() EcsBackupPlanArrayOutput {
	return o
}

func (o EcsBackupPlanArrayOutput) ToEcsBackupPlanArrayOutputWithContext(ctx context.Context) EcsBackupPlanArrayOutput {
	return o
}

func (o EcsBackupPlanArrayOutput) Index(i pulumi.IntInput) EcsBackupPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EcsBackupPlan {
		return vs[0].([]EcsBackupPlan)[vs[1].(int)]
	}).(EcsBackupPlanOutput)
}

type EcsBackupPlanMapOutput struct{ *pulumi.OutputState }

func (EcsBackupPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EcsBackupPlan)(nil))
}

func (o EcsBackupPlanMapOutput) ToEcsBackupPlanMapOutput() EcsBackupPlanMapOutput {
	return o
}

func (o EcsBackupPlanMapOutput) ToEcsBackupPlanMapOutputWithContext(ctx context.Context) EcsBackupPlanMapOutput {
	return o
}

func (o EcsBackupPlanMapOutput) MapIndex(k pulumi.StringInput) EcsBackupPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EcsBackupPlan {
		return vs[0].(map[string]EcsBackupPlan)[vs[1].(string)]
	}).(EcsBackupPlanOutput)
}

func init() {
	pulumi.RegisterOutputType(EcsBackupPlanOutput{})
	pulumi.RegisterOutputType(EcsBackupPlanPtrOutput{})
	pulumi.RegisterOutputType(EcsBackupPlanArrayOutput{})
	pulumi.RegisterOutputType(EcsBackupPlanMapOutput{})
}
