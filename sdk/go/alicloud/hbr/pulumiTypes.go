// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hbr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GetOssBackupPlansPlan struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType string `pulumi:"backupType"`
	// The OSS Bucket Name.
	Bucket          string `pulumi:"bucket"`
	Disabled        bool   `pulumi:"disabled"`
	Id              string `pulumi:"id"`
	OssBackupPlanId string `pulumi:"ossBackupPlanId"`
	// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
	OssBackupPlanName string `pulumi:"ossBackupPlanName"`
	Prefix            string `pulumi:"prefix"`
	// Backup Retention Period, the Minimum Value of 1.
	Retention string `pulumi:"retention"`
	// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
	Schedule string `pulumi:"schedule"`
	// Vault ID.
	VaultId string `pulumi:"vaultId"`
}

// GetOssBackupPlansPlanInput is an input type that accepts GetOssBackupPlansPlanArgs and GetOssBackupPlansPlanOutput values.
// You can construct a concrete instance of `GetOssBackupPlansPlanInput` via:
//
//          GetOssBackupPlansPlanArgs{...}
type GetOssBackupPlansPlanInput interface {
	pulumi.Input

	ToGetOssBackupPlansPlanOutput() GetOssBackupPlansPlanOutput
	ToGetOssBackupPlansPlanOutputWithContext(context.Context) GetOssBackupPlansPlanOutput
}

type GetOssBackupPlansPlanArgs struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The OSS Bucket Name.
	Bucket          pulumi.StringInput `pulumi:"bucket"`
	Disabled        pulumi.BoolInput   `pulumi:"disabled"`
	Id              pulumi.StringInput `pulumi:"id"`
	OssBackupPlanId pulumi.StringInput `pulumi:"ossBackupPlanId"`
	// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
	OssBackupPlanName pulumi.StringInput `pulumi:"ossBackupPlanName"`
	Prefix            pulumi.StringInput `pulumi:"prefix"`
	// Backup Retention Period, the Minimum Value of 1.
	Retention pulumi.StringInput `pulumi:"retention"`
	// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// Vault ID.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetOssBackupPlansPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOssBackupPlansPlan)(nil)).Elem()
}

func (i GetOssBackupPlansPlanArgs) ToGetOssBackupPlansPlanOutput() GetOssBackupPlansPlanOutput {
	return i.ToGetOssBackupPlansPlanOutputWithContext(context.Background())
}

func (i GetOssBackupPlansPlanArgs) ToGetOssBackupPlansPlanOutputWithContext(ctx context.Context) GetOssBackupPlansPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOssBackupPlansPlanOutput)
}

// GetOssBackupPlansPlanArrayInput is an input type that accepts GetOssBackupPlansPlanArray and GetOssBackupPlansPlanArrayOutput values.
// You can construct a concrete instance of `GetOssBackupPlansPlanArrayInput` via:
//
//          GetOssBackupPlansPlanArray{ GetOssBackupPlansPlanArgs{...} }
type GetOssBackupPlansPlanArrayInput interface {
	pulumi.Input

	ToGetOssBackupPlansPlanArrayOutput() GetOssBackupPlansPlanArrayOutput
	ToGetOssBackupPlansPlanArrayOutputWithContext(context.Context) GetOssBackupPlansPlanArrayOutput
}

type GetOssBackupPlansPlanArray []GetOssBackupPlansPlanInput

func (GetOssBackupPlansPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOssBackupPlansPlan)(nil)).Elem()
}

func (i GetOssBackupPlansPlanArray) ToGetOssBackupPlansPlanArrayOutput() GetOssBackupPlansPlanArrayOutput {
	return i.ToGetOssBackupPlansPlanArrayOutputWithContext(context.Background())
}

func (i GetOssBackupPlansPlanArray) ToGetOssBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetOssBackupPlansPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOssBackupPlansPlanArrayOutput)
}

type GetOssBackupPlansPlanOutput struct{ *pulumi.OutputState }

func (GetOssBackupPlansPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOssBackupPlansPlan)(nil)).Elem()
}

func (o GetOssBackupPlansPlanOutput) ToGetOssBackupPlansPlanOutput() GetOssBackupPlansPlanOutput {
	return o
}

func (o GetOssBackupPlansPlanOutput) ToGetOssBackupPlansPlanOutputWithContext(ctx context.Context) GetOssBackupPlansPlanOutput {
	return o
}

// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
func (o GetOssBackupPlansPlanOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.BackupType }).(pulumi.StringOutput)
}

// The OSS Bucket Name.
func (o GetOssBackupPlansPlanOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o GetOssBackupPlansPlanOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) bool { return v.Disabled }).(pulumi.BoolOutput)
}

func (o GetOssBackupPlansPlanOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetOssBackupPlansPlanOutput) OssBackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.OssBackupPlanId }).(pulumi.StringOutput)
}

// The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
func (o GetOssBackupPlansPlanOutput) OssBackupPlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.OssBackupPlanName }).(pulumi.StringOutput)
}

func (o GetOssBackupPlansPlanOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Prefix }).(pulumi.StringOutput)
}

// Backup Retention Period, the Minimum Value of 1.
func (o GetOssBackupPlansPlanOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Retention }).(pulumi.StringOutput)
}

// Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
func (o GetOssBackupPlansPlanOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Schedule }).(pulumi.StringOutput)
}

// Vault ID.
func (o GetOssBackupPlansPlanOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetOssBackupPlansPlanArrayOutput struct{ *pulumi.OutputState }

func (GetOssBackupPlansPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOssBackupPlansPlan)(nil)).Elem()
}

func (o GetOssBackupPlansPlanArrayOutput) ToGetOssBackupPlansPlanArrayOutput() GetOssBackupPlansPlanArrayOutput {
	return o
}

func (o GetOssBackupPlansPlanArrayOutput) ToGetOssBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetOssBackupPlansPlanArrayOutput {
	return o
}

func (o GetOssBackupPlansPlanArrayOutput) Index(i pulumi.IntInput) GetOssBackupPlansPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOssBackupPlansPlan {
		return vs[0].([]GetOssBackupPlansPlan)[vs[1].(int)]
	}).(GetOssBackupPlansPlanOutput)
}

type GetVaultsVault struct {
	// The name of the OSS bucket of the Vault.
	BucketName string `pulumi:"bucketName"`
	// The amount of backup data. The unit is Byte.
	BytesDone string `pulumi:"bytesDone"`
	// The creation time of the Vault. UNIX time in seconds.
	CreateTime string `pulumi:"createTime"`
	// Whether to enable the deduplication function for the database backup Vault.
	Dedup bool `pulumi:"dedup"`
	// The description of the Vault.
	Description string `pulumi:"description"`
	// The ID of Vault.
	Id string `pulumi:"id"`
	// Index available.
	IndexAvailable bool `pulumi:"indexAvailable"`
	// Index level.
	IndexLevel string `pulumi:"indexLevel"`
	// Index update time.
	IndexUpdateTime string `pulumi:"indexUpdateTime"`
	// The time of the last remote backup synchronization.
	LatestReplicationTime string `pulumi:"latestReplicationTime"`
	// Billing model, possible values:
	PaymentType string `pulumi:"paymentType"`
	// Whether it is a remote backup warehouse. It's a boolean value.
	Replication bool `pulumi:"replication"`
	// The region ID to which the remote backup Vault belongs.
	ReplicationSourceRegionId string `pulumi:"replicationSourceRegionId"`
	// The source vault ID of the remote backup Vault.
	ReplicationSourceVaultId string `pulumi:"replicationSourceVaultId"`
	// Warehouse-level data retention days, only valid for archive libraries.
	Retention string `pulumi:"retention"`
	// Whether to enable the backup search function.
	SearchEnabled bool     `pulumi:"searchEnabled"`
	SourceTypes   []string `pulumi:"sourceTypes"`
	// The status of Vault. Valid values: `INITIALIZING`, `CREATED`, `ERROR`, `UNKNOWN`.
	Status string `pulumi:"status"`
	// Backup vault storage usage. The unit is Byte.
	StorageSize string `pulumi:"storageSize"`
	// The update time of the Vault. UNIX time in seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of Vault.
	VaultId string `pulumi:"vaultId"`
	// The name of Vault.
	VaultName string `pulumi:"vaultName"`
	// Error status information of Vault.
	VaultStatusMessage string `pulumi:"vaultStatusMessage"`
	// The storage class of Vault. Valid values: `STANDARD`.
	VaultStorageClass string `pulumi:"vaultStorageClass"`
	// The type of Vault. Valid values: `STANDARD`.
	VaultType string `pulumi:"vaultType"`
}

// GetVaultsVaultInput is an input type that accepts GetVaultsVaultArgs and GetVaultsVaultOutput values.
// You can construct a concrete instance of `GetVaultsVaultInput` via:
//
//          GetVaultsVaultArgs{...}
type GetVaultsVaultInput interface {
	pulumi.Input

	ToGetVaultsVaultOutput() GetVaultsVaultOutput
	ToGetVaultsVaultOutputWithContext(context.Context) GetVaultsVaultOutput
}

type GetVaultsVaultArgs struct {
	// The name of the OSS bucket of the Vault.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The amount of backup data. The unit is Byte.
	BytesDone pulumi.StringInput `pulumi:"bytesDone"`
	// The creation time of the Vault. UNIX time in seconds.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Whether to enable the deduplication function for the database backup Vault.
	Dedup pulumi.BoolInput `pulumi:"dedup"`
	// The description of the Vault.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of Vault.
	Id pulumi.StringInput `pulumi:"id"`
	// Index available.
	IndexAvailable pulumi.BoolInput `pulumi:"indexAvailable"`
	// Index level.
	IndexLevel pulumi.StringInput `pulumi:"indexLevel"`
	// Index update time.
	IndexUpdateTime pulumi.StringInput `pulumi:"indexUpdateTime"`
	// The time of the last remote backup synchronization.
	LatestReplicationTime pulumi.StringInput `pulumi:"latestReplicationTime"`
	// Billing model, possible values:
	PaymentType pulumi.StringInput `pulumi:"paymentType"`
	// Whether it is a remote backup warehouse. It's a boolean value.
	Replication pulumi.BoolInput `pulumi:"replication"`
	// The region ID to which the remote backup Vault belongs.
	ReplicationSourceRegionId pulumi.StringInput `pulumi:"replicationSourceRegionId"`
	// The source vault ID of the remote backup Vault.
	ReplicationSourceVaultId pulumi.StringInput `pulumi:"replicationSourceVaultId"`
	// Warehouse-level data retention days, only valid for archive libraries.
	Retention pulumi.StringInput `pulumi:"retention"`
	// Whether to enable the backup search function.
	SearchEnabled pulumi.BoolInput        `pulumi:"searchEnabled"`
	SourceTypes   pulumi.StringArrayInput `pulumi:"sourceTypes"`
	// The status of Vault. Valid values: `INITIALIZING`, `CREATED`, `ERROR`, `UNKNOWN`.
	Status pulumi.StringInput `pulumi:"status"`
	// Backup vault storage usage. The unit is Byte.
	StorageSize pulumi.StringInput `pulumi:"storageSize"`
	// The update time of the Vault. UNIX time in seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of Vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
	// The name of Vault.
	VaultName pulumi.StringInput `pulumi:"vaultName"`
	// Error status information of Vault.
	VaultStatusMessage pulumi.StringInput `pulumi:"vaultStatusMessage"`
	// The storage class of Vault. Valid values: `STANDARD`.
	VaultStorageClass pulumi.StringInput `pulumi:"vaultStorageClass"`
	// The type of Vault. Valid values: `STANDARD`.
	VaultType pulumi.StringInput `pulumi:"vaultType"`
}

func (GetVaultsVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultsVault)(nil)).Elem()
}

func (i GetVaultsVaultArgs) ToGetVaultsVaultOutput() GetVaultsVaultOutput {
	return i.ToGetVaultsVaultOutputWithContext(context.Background())
}

func (i GetVaultsVaultArgs) ToGetVaultsVaultOutputWithContext(ctx context.Context) GetVaultsVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVaultsVaultOutput)
}

// GetVaultsVaultArrayInput is an input type that accepts GetVaultsVaultArray and GetVaultsVaultArrayOutput values.
// You can construct a concrete instance of `GetVaultsVaultArrayInput` via:
//
//          GetVaultsVaultArray{ GetVaultsVaultArgs{...} }
type GetVaultsVaultArrayInput interface {
	pulumi.Input

	ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput
	ToGetVaultsVaultArrayOutputWithContext(context.Context) GetVaultsVaultArrayOutput
}

type GetVaultsVaultArray []GetVaultsVaultInput

func (GetVaultsVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVaultsVault)(nil)).Elem()
}

func (i GetVaultsVaultArray) ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput {
	return i.ToGetVaultsVaultArrayOutputWithContext(context.Background())
}

func (i GetVaultsVaultArray) ToGetVaultsVaultArrayOutputWithContext(ctx context.Context) GetVaultsVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVaultsVaultArrayOutput)
}

type GetVaultsVaultOutput struct{ *pulumi.OutputState }

func (GetVaultsVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultsVault)(nil)).Elem()
}

func (o GetVaultsVaultOutput) ToGetVaultsVaultOutput() GetVaultsVaultOutput {
	return o
}

func (o GetVaultsVaultOutput) ToGetVaultsVaultOutputWithContext(ctx context.Context) GetVaultsVaultOutput {
	return o
}

// The name of the OSS bucket of the Vault.
func (o GetVaultsVaultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.BucketName }).(pulumi.StringOutput)
}

// The amount of backup data. The unit is Byte.
func (o GetVaultsVaultOutput) BytesDone() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.BytesDone }).(pulumi.StringOutput)
}

// The creation time of the Vault. UNIX time in seconds.
func (o GetVaultsVaultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether to enable the deduplication function for the database backup Vault.
func (o GetVaultsVaultOutput) Dedup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.Dedup }).(pulumi.BoolOutput)
}

// The description of the Vault.
func (o GetVaultsVaultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of Vault.
func (o GetVaultsVaultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Id }).(pulumi.StringOutput)
}

// Index available.
func (o GetVaultsVaultOutput) IndexAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.IndexAvailable }).(pulumi.BoolOutput)
}

// Index level.
func (o GetVaultsVaultOutput) IndexLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.IndexLevel }).(pulumi.StringOutput)
}

// Index update time.
func (o GetVaultsVaultOutput) IndexUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.IndexUpdateTime }).(pulumi.StringOutput)
}

// The time of the last remote backup synchronization.
func (o GetVaultsVaultOutput) LatestReplicationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.LatestReplicationTime }).(pulumi.StringOutput)
}

// Billing model, possible values:
func (o GetVaultsVaultOutput) PaymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.PaymentType }).(pulumi.StringOutput)
}

// Whether it is a remote backup warehouse. It's a boolean value.
func (o GetVaultsVaultOutput) Replication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.Replication }).(pulumi.BoolOutput)
}

// The region ID to which the remote backup Vault belongs.
func (o GetVaultsVaultOutput) ReplicationSourceRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.ReplicationSourceRegionId }).(pulumi.StringOutput)
}

// The source vault ID of the remote backup Vault.
func (o GetVaultsVaultOutput) ReplicationSourceVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.ReplicationSourceVaultId }).(pulumi.StringOutput)
}

// Warehouse-level data retention days, only valid for archive libraries.
func (o GetVaultsVaultOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Retention }).(pulumi.StringOutput)
}

// Whether to enable the backup search function.
func (o GetVaultsVaultOutput) SearchEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.SearchEnabled }).(pulumi.BoolOutput)
}

func (o GetVaultsVaultOutput) SourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVaultsVault) []string { return v.SourceTypes }).(pulumi.StringArrayOutput)
}

// The status of Vault. Valid values: `INITIALIZING`, `CREATED`, `ERROR`, `UNKNOWN`.
func (o GetVaultsVaultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Status }).(pulumi.StringOutput)
}

// Backup vault storage usage. The unit is Byte.
func (o GetVaultsVaultOutput) StorageSize() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.StorageSize }).(pulumi.StringOutput)
}

// The update time of the Vault. UNIX time in seconds.
func (o GetVaultsVaultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of Vault.
func (o GetVaultsVaultOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultId }).(pulumi.StringOutput)
}

// The name of Vault.
func (o GetVaultsVaultOutput) VaultName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultName }).(pulumi.StringOutput)
}

// Error status information of Vault.
func (o GetVaultsVaultOutput) VaultStatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultStatusMessage }).(pulumi.StringOutput)
}

// The storage class of Vault. Valid values: `STANDARD`.
func (o GetVaultsVaultOutput) VaultStorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultStorageClass }).(pulumi.StringOutput)
}

// The type of Vault. Valid values: `STANDARD`.
func (o GetVaultsVaultOutput) VaultType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultType }).(pulumi.StringOutput)
}

type GetVaultsVaultArrayOutput struct{ *pulumi.OutputState }

func (GetVaultsVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVaultsVault)(nil)).Elem()
}

func (o GetVaultsVaultArrayOutput) ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput {
	return o
}

func (o GetVaultsVaultArrayOutput) ToGetVaultsVaultArrayOutputWithContext(ctx context.Context) GetVaultsVaultArrayOutput {
	return o
}

func (o GetVaultsVaultArrayOutput) Index(i pulumi.IntInput) GetVaultsVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVaultsVault {
		return vs[0].([]GetVaultsVault)[vs[1].(int)]
	}).(GetVaultsVaultOutput)
}

func init() {
	pulumi.RegisterOutputType(GetOssBackupPlansPlanOutput{})
	pulumi.RegisterOutputType(GetOssBackupPlansPlanArrayOutput{})
	pulumi.RegisterOutputType(GetVaultsVaultOutput{})
	pulumi.RegisterOutputType(GetVaultsVaultArrayOutput{})
}
