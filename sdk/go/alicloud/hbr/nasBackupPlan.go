// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hbr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a HBR Nas Backup Plan resource.
//
// For information about HBR Nas Backup Plan and how to use it, see [What is Nas Backup Plan](https://www.alibabacloud.com/help/doc-detail/132248.htm).
//
// > **NOTE:** Available in v1.132.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/hbr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := hbr.NewNasBackupPlan(ctx, "example", &hbr.NasBackupPlanArgs{
// 			BackupType:        pulumi.String("COMPLETE"),
// 			CreateTime:        pulumi.String("1603163444"),
// 			Exclude:           pulumi.String(fmt.Sprintf("%v%v", "  [\"/home/exclude\"]\n", "  \n")),
// 			FileSystemId:      pulumi.String("031cf4964f"),
// 			Include:           pulumi.String(fmt.Sprintf("%v%v", "  [\"/home/include\"]\n", "  \n")),
// 			NasBackupPlanName: pulumi.String("example_value"),
// 			Paths: pulumi.StringArray{
// 				pulumi.String("/home"),
// 				pulumi.String("/var"),
// 			},
// 			Retention:  pulumi.String("1"),
// 			Schedule:   pulumi.String("I|1602673264|PT2H"),
// 			SpeedLimit: pulumi.String("I|1602673264|PT2H"),
// 			VaultId:    pulumi.String("v-0003gxoksflhu46w185s"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// HBR Nas Backup Plan can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:hbr/nasBackupPlan:NasBackupPlan example <id>
// ```
type NasBackupPlan struct {
	pulumi.CustomResourceState

	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType pulumi.StringOutput `pulumi:"backupType"`
	// File System Creation Time. Unix Time Seconds.
	CreateTime pulumi.StringOutput    `pulumi:"createTime"`
	Detail     pulumi.StringPtrOutput `pulumi:"detail"`
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The exclude path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Exclude pulumi.StringPtrOutput `pulumi:"exclude"`
	// The File System ID.
	FileSystemId pulumi.StringPtrOutput `pulumi:"fileSystemId"`
	// The include path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Include pulumi.StringPtrOutput `pulumi:"include"`
	// The name of the resource.
	NasBackupPlanName pulumi.StringOutput `pulumi:"nasBackupPlanName"`
	// Options. NAS Backup Plan Does Not Support Yet.
	Options pulumi.StringPtrOutput `pulumi:"options"`
	// Backup Path. Up to 65536 Characters. e.g.`["/home", "/var"]`
	Paths pulumi.StringArrayOutput `pulumi:"paths"`
	// Backup Retention Period, the Minimum Value of 1.
	Retention pulumi.StringOutput `pulumi:"retention"`
	// The Backup Policy. Formats: I | {Range Specified by the StartTime }|{ Interval}\n* The Time Range Specified by the StartTime Backup Start Time in Unix Time Seconds.\n* Interval ISO8601 Time Intervals. For Example:\n**PT1H Interval for an Hour.\n**P1D Interval Day.\nMeaning from {Range Specified by the Starttime} Every {Interval} of the Time Where We Took Backups Once a Task. Does Not Compensate the Has Elapsed Time the Backup Task. If the Last Backup Has Not Been Completed without Triggering the next Backup.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  pulumi.StringPtrOutput `pulumi:"speedLimit"`
	UpdatePaths pulumi.BoolPtrOutput   `pulumi:"updatePaths"`
	VaultId     pulumi.StringPtrOutput `pulumi:"vaultId"`
}

// NewNasBackupPlan registers a new resource with the given unique name, arguments, and options.
func NewNasBackupPlan(ctx *pulumi.Context,
	name string, args *NasBackupPlanArgs, opts ...pulumi.ResourceOption) (*NasBackupPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CreateTime == nil {
		return nil, errors.New("invalid value for required argument 'CreateTime'")
	}
	if args.NasBackupPlanName == nil {
		return nil, errors.New("invalid value for required argument 'NasBackupPlanName'")
	}
	if args.Retention == nil {
		return nil, errors.New("invalid value for required argument 'Retention'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	var resource NasBackupPlan
	err := ctx.RegisterResource("alicloud:hbr/nasBackupPlan:NasBackupPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNasBackupPlan gets an existing NasBackupPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNasBackupPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NasBackupPlanState, opts ...pulumi.ResourceOption) (*NasBackupPlan, error) {
	var resource NasBackupPlan
	err := ctx.ReadResource("alicloud:hbr/nasBackupPlan:NasBackupPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NasBackupPlan resources.
type nasBackupPlanState struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType *string `pulumi:"backupType"`
	// File System Creation Time. Unix Time Seconds.
	CreateTime *string `pulumi:"createTime"`
	Detail     *string `pulumi:"detail"`
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled *bool `pulumi:"disabled"`
	// The exclude path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Exclude *string `pulumi:"exclude"`
	// The File System ID.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The include path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Include *string `pulumi:"include"`
	// The name of the resource.
	NasBackupPlanName *string `pulumi:"nasBackupPlanName"`
	// Options. NAS Backup Plan Does Not Support Yet.
	Options *string `pulumi:"options"`
	// Backup Path. Up to 65536 Characters. e.g.`["/home", "/var"]`
	Paths []string `pulumi:"paths"`
	// Backup Retention Period, the Minimum Value of 1.
	Retention *string `pulumi:"retention"`
	// The Backup Policy. Formats: I | {Range Specified by the StartTime }|{ Interval}\n* The Time Range Specified by the StartTime Backup Start Time in Unix Time Seconds.\n* Interval ISO8601 Time Intervals. For Example:\n**PT1H Interval for an Hour.\n**P1D Interval Day.\nMeaning from {Range Specified by the Starttime} Every {Interval} of the Time Where We Took Backups Once a Task. Does Not Compensate the Has Elapsed Time the Backup Task. If the Last Backup Has Not Been Completed without Triggering the next Backup.
	Schedule *string `pulumi:"schedule"`
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  *string `pulumi:"speedLimit"`
	UpdatePaths *bool   `pulumi:"updatePaths"`
	VaultId     *string `pulumi:"vaultId"`
}

type NasBackupPlanState struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType pulumi.StringPtrInput
	// File System Creation Time. Unix Time Seconds.
	CreateTime pulumi.StringPtrInput
	Detail     pulumi.StringPtrInput
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled pulumi.BoolPtrInput
	// The exclude path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Exclude pulumi.StringPtrInput
	// The File System ID.
	FileSystemId pulumi.StringPtrInput
	// The include path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Include pulumi.StringPtrInput
	// The name of the resource.
	NasBackupPlanName pulumi.StringPtrInput
	// Options. NAS Backup Plan Does Not Support Yet.
	Options pulumi.StringPtrInput
	// Backup Path. Up to 65536 Characters. e.g.`["/home", "/var"]`
	Paths pulumi.StringArrayInput
	// Backup Retention Period, the Minimum Value of 1.
	Retention pulumi.StringPtrInput
	// The Backup Policy. Formats: I | {Range Specified by the StartTime }|{ Interval}\n* The Time Range Specified by the StartTime Backup Start Time in Unix Time Seconds.\n* Interval ISO8601 Time Intervals. For Example:\n**PT1H Interval for an Hour.\n**P1D Interval Day.\nMeaning from {Range Specified by the Starttime} Every {Interval} of the Time Where We Took Backups Once a Task. Does Not Compensate the Has Elapsed Time the Backup Task. If the Last Backup Has Not Been Completed without Triggering the next Backup.
	Schedule pulumi.StringPtrInput
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  pulumi.StringPtrInput
	UpdatePaths pulumi.BoolPtrInput
	VaultId     pulumi.StringPtrInput
}

func (NasBackupPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*nasBackupPlanState)(nil)).Elem()
}

type nasBackupPlanArgs struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType *string `pulumi:"backupType"`
	// File System Creation Time. Unix Time Seconds.
	CreateTime string  `pulumi:"createTime"`
	Detail     *string `pulumi:"detail"`
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled *bool `pulumi:"disabled"`
	// The exclude path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Exclude *string `pulumi:"exclude"`
	// The File System ID.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The include path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Include *string `pulumi:"include"`
	// The name of the resource.
	NasBackupPlanName string `pulumi:"nasBackupPlanName"`
	// Options. NAS Backup Plan Does Not Support Yet.
	Options *string `pulumi:"options"`
	// Backup Path. Up to 65536 Characters. e.g.`["/home", "/var"]`
	Paths []string `pulumi:"paths"`
	// Backup Retention Period, the Minimum Value of 1.
	Retention string `pulumi:"retention"`
	// The Backup Policy. Formats: I | {Range Specified by the StartTime }|{ Interval}\n* The Time Range Specified by the StartTime Backup Start Time in Unix Time Seconds.\n* Interval ISO8601 Time Intervals. For Example:\n**PT1H Interval for an Hour.\n**P1D Interval Day.\nMeaning from {Range Specified by the Starttime} Every {Interval} of the Time Where We Took Backups Once a Task. Does Not Compensate the Has Elapsed Time the Backup Task. If the Last Backup Has Not Been Completed without Triggering the next Backup.
	Schedule string `pulumi:"schedule"`
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  *string `pulumi:"speedLimit"`
	UpdatePaths *bool   `pulumi:"updatePaths"`
	VaultId     *string `pulumi:"vaultId"`
}

// The set of arguments for constructing a NasBackupPlan resource.
type NasBackupPlanArgs struct {
	// Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
	BackupType pulumi.StringPtrInput
	// File System Creation Time. Unix Time Seconds.
	CreateTime pulumi.StringInput
	Detail     pulumi.StringPtrInput
	// Whether to Disable the Backup Task. Valid Values: true, false.
	Disabled pulumi.BoolPtrInput
	// The exclude path. String of Json List, most 255 Characters. e.g. `"[\"/var\"]"`
	Exclude pulumi.StringPtrInput
	// The File System ID.
	FileSystemId pulumi.StringPtrInput
	// The include path. String of Json List, most 255 Characters. e.g. `"[\"/home/work\"]"`
	Include pulumi.StringPtrInput
	// The name of the resource.
	NasBackupPlanName pulumi.StringInput
	// Options. NAS Backup Plan Does Not Support Yet.
	Options pulumi.StringPtrInput
	// Backup Path. Up to 65536 Characters. e.g.`["/home", "/var"]`
	Paths pulumi.StringArrayInput
	// Backup Retention Period, the Minimum Value of 1.
	Retention pulumi.StringInput
	// The Backup Policy. Formats: I | {Range Specified by the StartTime }|{ Interval}\n* The Time Range Specified by the StartTime Backup Start Time in Unix Time Seconds.\n* Interval ISO8601 Time Intervals. For Example:\n**PT1H Interval for an Hour.\n**P1D Interval Day.\nMeaning from {Range Specified by the Starttime} Every {Interval} of the Time Where We Took Backups Once a Task. Does Not Compensate the Has Elapsed Time the Backup Task. If the Last Backup Has Not Been Completed without Triggering the next Backup.
	Schedule pulumi.StringInput
	// flow control. The format is: {start}|{end}|{bandwidth} * start starting hour * end end hour * bandwidth limit rate, in KiB ** Use | to separate multiple flow control configurations; ** Multiple flow control configurations are not allowed to have overlapping times.
	SpeedLimit  pulumi.StringPtrInput
	UpdatePaths pulumi.BoolPtrInput
	VaultId     pulumi.StringPtrInput
}

func (NasBackupPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nasBackupPlanArgs)(nil)).Elem()
}

type NasBackupPlanInput interface {
	pulumi.Input

	ToNasBackupPlanOutput() NasBackupPlanOutput
	ToNasBackupPlanOutputWithContext(ctx context.Context) NasBackupPlanOutput
}

func (*NasBackupPlan) ElementType() reflect.Type {
	return reflect.TypeOf((*NasBackupPlan)(nil))
}

func (i *NasBackupPlan) ToNasBackupPlanOutput() NasBackupPlanOutput {
	return i.ToNasBackupPlanOutputWithContext(context.Background())
}

func (i *NasBackupPlan) ToNasBackupPlanOutputWithContext(ctx context.Context) NasBackupPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NasBackupPlanOutput)
}

func (i *NasBackupPlan) ToNasBackupPlanPtrOutput() NasBackupPlanPtrOutput {
	return i.ToNasBackupPlanPtrOutputWithContext(context.Background())
}

func (i *NasBackupPlan) ToNasBackupPlanPtrOutputWithContext(ctx context.Context) NasBackupPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NasBackupPlanPtrOutput)
}

type NasBackupPlanPtrInput interface {
	pulumi.Input

	ToNasBackupPlanPtrOutput() NasBackupPlanPtrOutput
	ToNasBackupPlanPtrOutputWithContext(ctx context.Context) NasBackupPlanPtrOutput
}

type nasBackupPlanPtrType NasBackupPlanArgs

func (*nasBackupPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NasBackupPlan)(nil))
}

func (i *nasBackupPlanPtrType) ToNasBackupPlanPtrOutput() NasBackupPlanPtrOutput {
	return i.ToNasBackupPlanPtrOutputWithContext(context.Background())
}

func (i *nasBackupPlanPtrType) ToNasBackupPlanPtrOutputWithContext(ctx context.Context) NasBackupPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NasBackupPlanPtrOutput)
}

// NasBackupPlanArrayInput is an input type that accepts NasBackupPlanArray and NasBackupPlanArrayOutput values.
// You can construct a concrete instance of `NasBackupPlanArrayInput` via:
//
//          NasBackupPlanArray{ NasBackupPlanArgs{...} }
type NasBackupPlanArrayInput interface {
	pulumi.Input

	ToNasBackupPlanArrayOutput() NasBackupPlanArrayOutput
	ToNasBackupPlanArrayOutputWithContext(context.Context) NasBackupPlanArrayOutput
}

type NasBackupPlanArray []NasBackupPlanInput

func (NasBackupPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*NasBackupPlan)(nil))
}

func (i NasBackupPlanArray) ToNasBackupPlanArrayOutput() NasBackupPlanArrayOutput {
	return i.ToNasBackupPlanArrayOutputWithContext(context.Background())
}

func (i NasBackupPlanArray) ToNasBackupPlanArrayOutputWithContext(ctx context.Context) NasBackupPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NasBackupPlanArrayOutput)
}

// NasBackupPlanMapInput is an input type that accepts NasBackupPlanMap and NasBackupPlanMapOutput values.
// You can construct a concrete instance of `NasBackupPlanMapInput` via:
//
//          NasBackupPlanMap{ "key": NasBackupPlanArgs{...} }
type NasBackupPlanMapInput interface {
	pulumi.Input

	ToNasBackupPlanMapOutput() NasBackupPlanMapOutput
	ToNasBackupPlanMapOutputWithContext(context.Context) NasBackupPlanMapOutput
}

type NasBackupPlanMap map[string]NasBackupPlanInput

func (NasBackupPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*NasBackupPlan)(nil))
}

func (i NasBackupPlanMap) ToNasBackupPlanMapOutput() NasBackupPlanMapOutput {
	return i.ToNasBackupPlanMapOutputWithContext(context.Background())
}

func (i NasBackupPlanMap) ToNasBackupPlanMapOutputWithContext(ctx context.Context) NasBackupPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NasBackupPlanMapOutput)
}

type NasBackupPlanOutput struct {
	*pulumi.OutputState
}

func (NasBackupPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NasBackupPlan)(nil))
}

func (o NasBackupPlanOutput) ToNasBackupPlanOutput() NasBackupPlanOutput {
	return o
}

func (o NasBackupPlanOutput) ToNasBackupPlanOutputWithContext(ctx context.Context) NasBackupPlanOutput {
	return o
}

func (o NasBackupPlanOutput) ToNasBackupPlanPtrOutput() NasBackupPlanPtrOutput {
	return o.ToNasBackupPlanPtrOutputWithContext(context.Background())
}

func (o NasBackupPlanOutput) ToNasBackupPlanPtrOutputWithContext(ctx context.Context) NasBackupPlanPtrOutput {
	return o.ApplyT(func(v NasBackupPlan) *NasBackupPlan {
		return &v
	}).(NasBackupPlanPtrOutput)
}

type NasBackupPlanPtrOutput struct {
	*pulumi.OutputState
}

func (NasBackupPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NasBackupPlan)(nil))
}

func (o NasBackupPlanPtrOutput) ToNasBackupPlanPtrOutput() NasBackupPlanPtrOutput {
	return o
}

func (o NasBackupPlanPtrOutput) ToNasBackupPlanPtrOutputWithContext(ctx context.Context) NasBackupPlanPtrOutput {
	return o
}

type NasBackupPlanArrayOutput struct{ *pulumi.OutputState }

func (NasBackupPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NasBackupPlan)(nil))
}

func (o NasBackupPlanArrayOutput) ToNasBackupPlanArrayOutput() NasBackupPlanArrayOutput {
	return o
}

func (o NasBackupPlanArrayOutput) ToNasBackupPlanArrayOutputWithContext(ctx context.Context) NasBackupPlanArrayOutput {
	return o
}

func (o NasBackupPlanArrayOutput) Index(i pulumi.IntInput) NasBackupPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NasBackupPlan {
		return vs[0].([]NasBackupPlan)[vs[1].(int)]
	}).(NasBackupPlanOutput)
}

type NasBackupPlanMapOutput struct{ *pulumi.OutputState }

func (NasBackupPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NasBackupPlan)(nil))
}

func (o NasBackupPlanMapOutput) ToNasBackupPlanMapOutput() NasBackupPlanMapOutput {
	return o
}

func (o NasBackupPlanMapOutput) ToNasBackupPlanMapOutputWithContext(ctx context.Context) NasBackupPlanMapOutput {
	return o
}

func (o NasBackupPlanMapOutput) MapIndex(k pulumi.StringInput) NasBackupPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NasBackupPlan {
		return vs[0].(map[string]NasBackupPlan)[vs[1].(string)]
	}).(NasBackupPlanOutput)
}

func init() {
	pulumi.RegisterOutputType(NasBackupPlanOutput{})
	pulumi.RegisterOutputType(NasBackupPlanPtrOutput{})
	pulumi.RegisterOutputType(NasBackupPlanArrayOutput{})
	pulumi.RegisterOutputType(NasBackupPlanMapOutput{})
}
