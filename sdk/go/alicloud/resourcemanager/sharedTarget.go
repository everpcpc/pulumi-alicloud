// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package resourcemanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Resource Manager Shared Target resource.
//
// For information about Resource Manager Shared Target and how to use it, see [What is Shared Target](https://www.alibabacloud.com/help/en/doc-detail/94475.htm).
//
// > **NOTE:** Available in v1.111.0+.
//
// ## Import
//
// Resource Manager Shared Target can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:resourcemanager/sharedTarget:SharedTarget example <resource_share_id>:<target_id>
// ```
type SharedTarget struct {
	pulumi.CustomResourceState

	// The resource share ID of resource manager.
	ResourceShareId pulumi.StringOutput `pulumi:"resourceShareId"`
	// The status of shared target.
	Status pulumi.StringOutput `pulumi:"status"`
	// The member account ID in resource directory.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
}

// NewSharedTarget registers a new resource with the given unique name, arguments, and options.
func NewSharedTarget(ctx *pulumi.Context,
	name string, args *SharedTargetArgs, opts ...pulumi.ResourceOption) (*SharedTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceShareId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceShareId'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	var resource SharedTarget
	err := ctx.RegisterResource("alicloud:resourcemanager/sharedTarget:SharedTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedTarget gets an existing SharedTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedTargetState, opts ...pulumi.ResourceOption) (*SharedTarget, error) {
	var resource SharedTarget
	err := ctx.ReadResource("alicloud:resourcemanager/sharedTarget:SharedTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedTarget resources.
type sharedTargetState struct {
	// The resource share ID of resource manager.
	ResourceShareId *string `pulumi:"resourceShareId"`
	// The status of shared target.
	Status *string `pulumi:"status"`
	// The member account ID in resource directory.
	TargetId *string `pulumi:"targetId"`
}

type SharedTargetState struct {
	// The resource share ID of resource manager.
	ResourceShareId pulumi.StringPtrInput
	// The status of shared target.
	Status pulumi.StringPtrInput
	// The member account ID in resource directory.
	TargetId pulumi.StringPtrInput
}

func (SharedTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedTargetState)(nil)).Elem()
}

type sharedTargetArgs struct {
	// The resource share ID of resource manager.
	ResourceShareId string `pulumi:"resourceShareId"`
	// The member account ID in resource directory.
	TargetId string `pulumi:"targetId"`
}

// The set of arguments for constructing a SharedTarget resource.
type SharedTargetArgs struct {
	// The resource share ID of resource manager.
	ResourceShareId pulumi.StringInput
	// The member account ID in resource directory.
	TargetId pulumi.StringInput
}

func (SharedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedTargetArgs)(nil)).Elem()
}

type SharedTargetInput interface {
	pulumi.Input

	ToSharedTargetOutput() SharedTargetOutput
	ToSharedTargetOutputWithContext(ctx context.Context) SharedTargetOutput
}

func (SharedTarget) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedTarget)(nil)).Elem()
}

func (i SharedTarget) ToSharedTargetOutput() SharedTargetOutput {
	return i.ToSharedTargetOutputWithContext(context.Background())
}

func (i SharedTarget) ToSharedTargetOutputWithContext(ctx context.Context) SharedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedTargetOutput)
}

type SharedTargetOutput struct {
	*pulumi.OutputState
}

func (SharedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedTargetOutput)(nil)).Elem()
}

func (o SharedTargetOutput) ToSharedTargetOutput() SharedTargetOutput {
	return o
}

func (o SharedTargetOutput) ToSharedTargetOutputWithContext(ctx context.Context) SharedTargetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SharedTargetOutput{})
}
