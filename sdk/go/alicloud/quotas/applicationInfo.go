// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package quotas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Quotas Application Info resource.
//
// For information about Quotas Application Info and how to use it, see [What is Application Info](https://help.aliyun.com/document_detail/171289.html).
//
// > **NOTE:** Available in v1.115.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/quotas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := quotas.NewApplicationInfo(ctx, "example", &quotas.ApplicationInfoArgs{
// 			DesireValue: pulumi.Float64(100),
// 			Dimensions: quotas.ApplicationInfoDimensionArray{
// 				&quotas.ApplicationInfoDimensionArgs{
// 					Key:   pulumi.String("regionId"),
// 					Value: pulumi.String("cn-hangzhou"),
// 				},
// 			},
// 			NoticeType:      pulumi.Int(0),
// 			ProductCode:     pulumi.String("ess"),
// 			QuotaActionCode: pulumi.String("q_db_instance"),
// 			Reason:          pulumi.String("For Terraform Test"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Quotas Application Info can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:quotas/applicationInfo:ApplicationInfo example <id>
// ```
type ApplicationInfo struct {
	pulumi.CustomResourceState

	// The approve value of the quota application.
	ApproveValue pulumi.StringOutput `pulumi:"approveValue"`
	// The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
	AuditMode pulumi.StringPtrOutput `pulumi:"auditMode"`
	// The audit reason.
	AuditReason pulumi.StringOutput `pulumi:"auditReason"`
	// The desire value of the quota application.
	DesireValue pulumi.Float64Output `pulumi:"desireValue"`
	// The quota dimensions.
	Dimensions ApplicationInfoDimensionArrayOutput `pulumi:"dimensions"`
	// The effective time of the quota application.
	EffectiveTime pulumi.StringOutput `pulumi:"effectiveTime"`
	// The expire time of the quota application.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// The notice type. Valid values: `0`, `1`, `2`, `3`.
	NoticeType pulumi.IntPtrOutput `pulumi:"noticeType"`
	// The product code.
	ProductCode pulumi.StringOutput `pulumi:"productCode"`
	// The ID of quota action.
	QuotaActionCode pulumi.StringOutput `pulumi:"quotaActionCode"`
	// The quota category. Valid values: `CommonQuota`, `FlowControl`.
	QuotaCategory pulumi.StringPtrOutput `pulumi:"quotaCategory"`
	// The description of the quota application.
	QuotaDescription pulumi.StringOutput `pulumi:"quotaDescription"`
	// The name of the quota application.
	QuotaName pulumi.StringOutput `pulumi:"quotaName"`
	// The unit of the quota application.
	QuotaUnit pulumi.StringOutput `pulumi:"quotaUnit"`
	// The reason of the quota application.
	Reason pulumi.StringOutput `pulumi:"reason"`
	// The status of the quota application.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewApplicationInfo registers a new resource with the given unique name, arguments, and options.
func NewApplicationInfo(ctx *pulumi.Context,
	name string, args *ApplicationInfoArgs, opts ...pulumi.ResourceOption) (*ApplicationInfo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DesireValue == nil {
		return nil, errors.New("invalid value for required argument 'DesireValue'")
	}
	if args.ProductCode == nil {
		return nil, errors.New("invalid value for required argument 'ProductCode'")
	}
	if args.QuotaActionCode == nil {
		return nil, errors.New("invalid value for required argument 'QuotaActionCode'")
	}
	if args.Reason == nil {
		return nil, errors.New("invalid value for required argument 'Reason'")
	}
	var resource ApplicationInfo
	err := ctx.RegisterResource("alicloud:quotas/applicationInfo:ApplicationInfo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationInfo gets an existing ApplicationInfo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationInfo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationInfoState, opts ...pulumi.ResourceOption) (*ApplicationInfo, error) {
	var resource ApplicationInfo
	err := ctx.ReadResource("alicloud:quotas/applicationInfo:ApplicationInfo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationInfo resources.
type applicationInfoState struct {
	// The approve value of the quota application.
	ApproveValue *string `pulumi:"approveValue"`
	// The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
	AuditMode *string `pulumi:"auditMode"`
	// The audit reason.
	AuditReason *string `pulumi:"auditReason"`
	// The desire value of the quota application.
	DesireValue *float64 `pulumi:"desireValue"`
	// The quota dimensions.
	Dimensions []ApplicationInfoDimension `pulumi:"dimensions"`
	// The effective time of the quota application.
	EffectiveTime *string `pulumi:"effectiveTime"`
	// The expire time of the quota application.
	ExpireTime *string `pulumi:"expireTime"`
	// The notice type. Valid values: `0`, `1`, `2`, `3`.
	NoticeType *int `pulumi:"noticeType"`
	// The product code.
	ProductCode *string `pulumi:"productCode"`
	// The ID of quota action.
	QuotaActionCode *string `pulumi:"quotaActionCode"`
	// The quota category. Valid values: `CommonQuota`, `FlowControl`.
	QuotaCategory *string `pulumi:"quotaCategory"`
	// The description of the quota application.
	QuotaDescription *string `pulumi:"quotaDescription"`
	// The name of the quota application.
	QuotaName *string `pulumi:"quotaName"`
	// The unit of the quota application.
	QuotaUnit *string `pulumi:"quotaUnit"`
	// The reason of the quota application.
	Reason *string `pulumi:"reason"`
	// The status of the quota application.
	Status *string `pulumi:"status"`
}

type ApplicationInfoState struct {
	// The approve value of the quota application.
	ApproveValue pulumi.StringPtrInput
	// The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
	AuditMode pulumi.StringPtrInput
	// The audit reason.
	AuditReason pulumi.StringPtrInput
	// The desire value of the quota application.
	DesireValue pulumi.Float64PtrInput
	// The quota dimensions.
	Dimensions ApplicationInfoDimensionArrayInput
	// The effective time of the quota application.
	EffectiveTime pulumi.StringPtrInput
	// The expire time of the quota application.
	ExpireTime pulumi.StringPtrInput
	// The notice type. Valid values: `0`, `1`, `2`, `3`.
	NoticeType pulumi.IntPtrInput
	// The product code.
	ProductCode pulumi.StringPtrInput
	// The ID of quota action.
	QuotaActionCode pulumi.StringPtrInput
	// The quota category. Valid values: `CommonQuota`, `FlowControl`.
	QuotaCategory pulumi.StringPtrInput
	// The description of the quota application.
	QuotaDescription pulumi.StringPtrInput
	// The name of the quota application.
	QuotaName pulumi.StringPtrInput
	// The unit of the quota application.
	QuotaUnit pulumi.StringPtrInput
	// The reason of the quota application.
	Reason pulumi.StringPtrInput
	// The status of the quota application.
	Status pulumi.StringPtrInput
}

func (ApplicationInfoState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationInfoState)(nil)).Elem()
}

type applicationInfoArgs struct {
	// The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
	AuditMode *string `pulumi:"auditMode"`
	// The desire value of the quota application.
	DesireValue float64 `pulumi:"desireValue"`
	// The quota dimensions.
	Dimensions []ApplicationInfoDimension `pulumi:"dimensions"`
	// The notice type. Valid values: `0`, `1`, `2`, `3`.
	NoticeType *int `pulumi:"noticeType"`
	// The product code.
	ProductCode string `pulumi:"productCode"`
	// The ID of quota action.
	QuotaActionCode string `pulumi:"quotaActionCode"`
	// The quota category. Valid values: `CommonQuota`, `FlowControl`.
	QuotaCategory *string `pulumi:"quotaCategory"`
	// The reason of the quota application.
	Reason string `pulumi:"reason"`
}

// The set of arguments for constructing a ApplicationInfo resource.
type ApplicationInfoArgs struct {
	// The audit mode. Valid values: `Async`, `Sync`. Default to: `Async`.
	AuditMode pulumi.StringPtrInput
	// The desire value of the quota application.
	DesireValue pulumi.Float64Input
	// The quota dimensions.
	Dimensions ApplicationInfoDimensionArrayInput
	// The notice type. Valid values: `0`, `1`, `2`, `3`.
	NoticeType pulumi.IntPtrInput
	// The product code.
	ProductCode pulumi.StringInput
	// The ID of quota action.
	QuotaActionCode pulumi.StringInput
	// The quota category. Valid values: `CommonQuota`, `FlowControl`.
	QuotaCategory pulumi.StringPtrInput
	// The reason of the quota application.
	Reason pulumi.StringInput
}

func (ApplicationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationInfoArgs)(nil)).Elem()
}

type ApplicationInfoInput interface {
	pulumi.Input

	ToApplicationInfoOutput() ApplicationInfoOutput
	ToApplicationInfoOutputWithContext(ctx context.Context) ApplicationInfoOutput
}

func (*ApplicationInfo) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInfo)(nil))
}

func (i *ApplicationInfo) ToApplicationInfoOutput() ApplicationInfoOutput {
	return i.ToApplicationInfoOutputWithContext(context.Background())
}

func (i *ApplicationInfo) ToApplicationInfoOutputWithContext(ctx context.Context) ApplicationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInfoOutput)
}

type ApplicationInfoOutput struct {
	*pulumi.OutputState
}

func (ApplicationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInfo)(nil))
}

func (o ApplicationInfoOutput) ToApplicationInfoOutput() ApplicationInfoOutput {
	return o
}

func (o ApplicationInfoOutput) ToApplicationInfoOutputWithContext(ctx context.Context) ApplicationInfoOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApplicationInfoOutput{})
}
