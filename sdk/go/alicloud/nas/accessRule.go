// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Nas Access Rule resource.
// 
// When NAS is activated, the Default VPC Permission Group is automatically generated. It allows all IP addresses in a VPC to access the mount point with full permissions. Full permissions include Read/Write permission with no restriction on root users.
// 
// > **NOTE:** Available in v1.34.0+.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/nas_access_rule.html.markdown.
type AccessRule struct {
	s *pulumi.ResourceState
}

// NewAccessRule registers a new resource with the given unique name, arguments, and options.
func NewAccessRule(ctx *pulumi.Context,
	name string, args *AccessRuleArgs, opts ...pulumi.ResourceOpt) (*AccessRule, error) {
	if args == nil || args.AccessGroupName == nil {
		return nil, errors.New("missing required argument 'AccessGroupName'")
	}
	if args == nil || args.SourceCidrIp == nil {
		return nil, errors.New("missing required argument 'SourceCidrIp'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessGroupName"] = nil
		inputs["priority"] = nil
		inputs["rwAccessType"] = nil
		inputs["sourceCidrIp"] = nil
		inputs["userAccessType"] = nil
	} else {
		inputs["accessGroupName"] = args.AccessGroupName
		inputs["priority"] = args.Priority
		inputs["rwAccessType"] = args.RwAccessType
		inputs["sourceCidrIp"] = args.SourceCidrIp
		inputs["userAccessType"] = args.UserAccessType
	}
	inputs["accessRuleId"] = nil
	s, err := ctx.RegisterResource("alicloud:nas/accessRule:AccessRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessRule{s: s}, nil
}

// GetAccessRule gets an existing AccessRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccessRuleState, opts ...pulumi.ResourceOpt) (*AccessRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessGroupName"] = state.AccessGroupName
		inputs["accessRuleId"] = state.AccessRuleId
		inputs["priority"] = state.Priority
		inputs["rwAccessType"] = state.RwAccessType
		inputs["sourceCidrIp"] = state.SourceCidrIp
		inputs["userAccessType"] = state.UserAccessType
	}
	s, err := ctx.ReadResource("alicloud:nas/accessRule:AccessRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccessRule) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccessRule) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Permission group name.
func (r *AccessRule) AccessGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessGroupName"])
}

// The nas access rule ID.
func (r *AccessRule) AccessRuleId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessRuleId"])
}

// Priority level. Range: 1-100. Default value: 1.
func (r *AccessRule) Priority() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["priority"])
}

// Read-write permission type: RDWR (default), RDONLY.
func (r *AccessRule) RwAccessType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["rwAccessType"])
}

// Address or address segment.
func (r *AccessRule) SourceCidrIp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceCidrIp"])
}

// User permission type: noSquash (default), root_squash, all_squash.
func (r *AccessRule) UserAccessType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userAccessType"])
}

// Input properties used for looking up and filtering AccessRule resources.
type AccessRuleState struct {
	// Permission group name.
	AccessGroupName interface{}
	// The nas access rule ID.
	AccessRuleId interface{}
	// Priority level. Range: 1-100. Default value: 1.
	Priority interface{}
	// Read-write permission type: RDWR (default), RDONLY.
	RwAccessType interface{}
	// Address or address segment.
	SourceCidrIp interface{}
	// User permission type: noSquash (default), root_squash, all_squash.
	UserAccessType interface{}
}

// The set of arguments for constructing a AccessRule resource.
type AccessRuleArgs struct {
	// Permission group name.
	AccessGroupName interface{}
	// Priority level. Range: 1-100. Default value: 1.
	Priority interface{}
	// Read-write permission type: RDWR (default), RDONLY.
	RwAccessType interface{}
	// Address or address segment.
	SourceCidrIp interface{}
	// User permission type: noSquash (default), root_squash, all_squash.
	UserAccessType interface{}
}
