// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Nas Mount Target resource.
// 
// > NOTE: Available in v1.34.0+.
// 
// > NOTE: Currently this resource support create a mount point in a classic network only when current region is China mainland regions.
// 
// > NOTE: You must grant NAS with specific RAM permissions when creating a classic mount targets,
// and it only can be achieved by creating a classic mount target mannually.
// See [Add a mount point](https://www.alibabacloud.com/help/doc-detail/60431.htm) and [Why do I need RAM permissions to create a mount point in a classic network](https://www.alibabacloud.com/help/faq-detail/42176.htm).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/nas_mount_target.html.markdown.
type MountTarget struct {
	s *pulumi.ResourceState
}

// NewMountTarget registers a new resource with the given unique name, arguments, and options.
func NewMountTarget(ctx *pulumi.Context,
	name string, args *MountTargetArgs, opts ...pulumi.ResourceOpt) (*MountTarget, error) {
	if args == nil || args.AccessGroupName == nil {
		return nil, errors.New("missing required argument 'AccessGroupName'")
	}
	if args == nil || args.FileSystemId == nil {
		return nil, errors.New("missing required argument 'FileSystemId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessGroupName"] = nil
		inputs["fileSystemId"] = nil
		inputs["status"] = nil
		inputs["vswitchId"] = nil
	} else {
		inputs["accessGroupName"] = args.AccessGroupName
		inputs["fileSystemId"] = args.FileSystemId
		inputs["status"] = args.Status
		inputs["vswitchId"] = args.VswitchId
	}
	s, err := ctx.RegisterResource("alicloud:nas/mountTarget:MountTarget", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MountTarget{s: s}, nil
}

// GetMountTarget gets an existing MountTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountTarget(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MountTargetState, opts ...pulumi.ResourceOpt) (*MountTarget, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessGroupName"] = state.AccessGroupName
		inputs["fileSystemId"] = state.FileSystemId
		inputs["status"] = state.Status
		inputs["vswitchId"] = state.VswitchId
	}
	s, err := ctx.ReadResource("alicloud:nas/mountTarget:MountTarget", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MountTarget{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MountTarget) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MountTarget) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Permission group name.
func (r *MountTarget) AccessGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessGroupName"])
}

// File system ID.
func (r *MountTarget) FileSystemId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["fileSystemId"])
}

// Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
func (r *MountTarget) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// VSwitch ID.
func (r *MountTarget) VswitchId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vswitchId"])
}

// Input properties used for looking up and filtering MountTarget resources.
type MountTargetState struct {
	// Permission group name.
	AccessGroupName interface{}
	// File system ID.
	FileSystemId interface{}
	// Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
	Status interface{}
	// VSwitch ID.
	VswitchId interface{}
}

// The set of arguments for constructing a MountTarget resource.
type MountTargetArgs struct {
	// Permission group name.
	AccessGroupName interface{}
	// File system ID.
	FileSystemId interface{}
	// Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
	Status interface{}
	// VSwitch ID.
	VswitchId interface{}
}
