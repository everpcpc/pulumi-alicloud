// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package nas

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Nas Mount Target resource.
//
// > NOTE: Available in v1.34.0+.
//
// > NOTE: Currently this resource support create a mount point in a classic network only when current region is China mainland regions.
//
// > NOTE: You must grant NAS with specific RAM permissions when creating a classic mount targets,
// and it only can be achieved by creating a classic mount target mannually.
// See [Add a mount point](https://www.alibabacloud.com/help/doc-detail/60431.htm) and [Why do I need RAM permissions to create a mount point in a classic network](https://www.alibabacloud.com/help/faq-detail/42176.htm).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/nas_mount_target.html.markdown.
type MountTarget struct {
	pulumi.CustomResourceState

	// Permission group name.
	AccessGroupName pulumi.StringOutput `pulumi:"accessGroupName"`
	// File system ID.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
	Status pulumi.StringOutput `pulumi:"status"`
	// VSwitch ID.
	VswitchId pulumi.StringPtrOutput `pulumi:"vswitchId"`
}

// NewMountTarget registers a new resource with the given unique name, arguments, and options.
func NewMountTarget(ctx *pulumi.Context,
	name string, args *MountTargetArgs, opts ...pulumi.ResourceOption) (*MountTarget, error) {
	if args == nil || args.AccessGroupName == nil {
		return nil, errors.New("missing required argument 'AccessGroupName'")
	}
	if args == nil || args.FileSystemId == nil {
		return nil, errors.New("missing required argument 'FileSystemId'")
	}
	if args == nil {
		args = &MountTargetArgs{}
	}
	var resource MountTarget
	err := ctx.RegisterResource("alicloud:nas/mountTarget:MountTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountTarget gets an existing MountTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountTargetState, opts ...pulumi.ResourceOption) (*MountTarget, error) {
	var resource MountTarget
	err := ctx.ReadResource("alicloud:nas/mountTarget:MountTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MountTarget resources.
type mountTargetState struct {
	// Permission group name.
	AccessGroupName *string `pulumi:"accessGroupName"`
	// File system ID.
	FileSystemId *string `pulumi:"fileSystemId"`
	// Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
	Status *string `pulumi:"status"`
	// VSwitch ID.
	VswitchId *string `pulumi:"vswitchId"`
}

type MountTargetState struct {
	// Permission group name.
	AccessGroupName pulumi.StringPtrInput
	// File system ID.
	FileSystemId pulumi.StringPtrInput
	// Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
	Status pulumi.StringPtrInput
	// VSwitch ID.
	VswitchId pulumi.StringPtrInput
}

func (MountTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountTargetState)(nil)).Elem()
}

type mountTargetArgs struct {
	// Permission group name.
	AccessGroupName string `pulumi:"accessGroupName"`
	// File system ID.
	FileSystemId string `pulumi:"fileSystemId"`
	// Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
	Status *string `pulumi:"status"`
	// VSwitch ID.
	VswitchId *string `pulumi:"vswitchId"`
}

// The set of arguments for constructing a MountTarget resource.
type MountTargetArgs struct {
	// Permission group name.
	AccessGroupName pulumi.StringInput
	// File system ID.
	FileSystemId pulumi.StringInput
	// Whether the MountTarget is active. An inactive MountTarget is inusable. Valid values are Active(default) and Inactive.
	Status pulumi.StringPtrInput
	// VSwitch ID.
	VswitchId pulumi.StringPtrInput
}

func (MountTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountTargetArgs)(nil)).Elem()
}

