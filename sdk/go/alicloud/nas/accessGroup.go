// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Nas Access Group resource.
// 
// In NAS, the permission group acts as a whitelist that allows you to restrict file system access. You can allow specified IP addresses or CIDR blocks to access the file system, and assign different levels of access permission to different IP addresses or CIDR blocks by adding rules to the permission group.
// 
// > **NOTE:** Available in v1.33.0+.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/nas_access_group.html.markdown.
type AccessGroup struct {
	s *pulumi.ResourceState
}

// NewAccessGroup registers a new resource with the given unique name, arguments, and options.
func NewAccessGroup(ctx *pulumi.Context,
	name string, args *AccessGroupArgs, opts ...pulumi.ResourceOpt) (*AccessGroup, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["type"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("alicloud:nas/accessGroup:AccessGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessGroup{s: s}, nil
}

// GetAccessGroup gets an existing AccessGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccessGroupState, opts ...pulumi.ResourceOpt) (*AccessGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("alicloud:nas/accessGroup:AccessGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccessGroup) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccessGroup) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The Access Group description.
func (r *AccessGroup) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// A Name of one Access Group.
func (r *AccessGroup) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A Type of one Access Group. Valid values: `Vpc` and `Classic`.
func (r *AccessGroup) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering AccessGroup resources.
type AccessGroupState struct {
	// The Access Group description.
	Description interface{}
	// A Name of one Access Group.
	Name interface{}
	// A Type of one Access Group. Valid values: `Vpc` and `Classic`.
	Type interface{}
}

// The set of arguments for constructing a AccessGroup resource.
type AccessGroupArgs struct {
	// The Access Group description.
	Description interface{}
	// A Name of one Access Group.
	Name interface{}
	// A Type of one Access Group. Valid values: `Vpc` and `Classic`.
	Type interface{}
}
