// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package brain

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Brain Industrial Pid Organization resource.
//
// > **NOTE:** Available in v1.113.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/brain"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := brain.NewIndustrialPidOrganization(ctx, "example", &brain.IndustrialPidOrganizationArgs{
// 			PidOrganizationName: pulumi.String("tf-testAcc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Brain Industrial Pid Organization can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:brain/industrialPidOrganization:IndustrialPidOrganization example <id>
// ```
type IndustrialPidOrganization struct {
	pulumi.CustomResourceState

	// The ID of parent pid organization.
	ParentPidOrganizationId pulumi.StringPtrOutput `pulumi:"parentPidOrganizationId"`
	// The name of pid organization.
	PidOrganizationName pulumi.StringOutput `pulumi:"pidOrganizationName"`
}

// NewIndustrialPidOrganization registers a new resource with the given unique name, arguments, and options.
func NewIndustrialPidOrganization(ctx *pulumi.Context,
	name string, args *IndustrialPidOrganizationArgs, opts ...pulumi.ResourceOption) (*IndustrialPidOrganization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PidOrganizationName == nil {
		return nil, errors.New("invalid value for required argument 'PidOrganizationName'")
	}
	var resource IndustrialPidOrganization
	err := ctx.RegisterResource("alicloud:brain/industrialPidOrganization:IndustrialPidOrganization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndustrialPidOrganization gets an existing IndustrialPidOrganization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndustrialPidOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndustrialPidOrganizationState, opts ...pulumi.ResourceOption) (*IndustrialPidOrganization, error) {
	var resource IndustrialPidOrganization
	err := ctx.ReadResource("alicloud:brain/industrialPidOrganization:IndustrialPidOrganization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IndustrialPidOrganization resources.
type industrialPidOrganizationState struct {
	// The ID of parent pid organization.
	ParentPidOrganizationId *string `pulumi:"parentPidOrganizationId"`
	// The name of pid organization.
	PidOrganizationName *string `pulumi:"pidOrganizationName"`
}

type IndustrialPidOrganizationState struct {
	// The ID of parent pid organization.
	ParentPidOrganizationId pulumi.StringPtrInput
	// The name of pid organization.
	PidOrganizationName pulumi.StringPtrInput
}

func (IndustrialPidOrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*industrialPidOrganizationState)(nil)).Elem()
}

type industrialPidOrganizationArgs struct {
	// The ID of parent pid organization.
	ParentPidOrganizationId *string `pulumi:"parentPidOrganizationId"`
	// The name of pid organization.
	PidOrganizationName string `pulumi:"pidOrganizationName"`
}

// The set of arguments for constructing a IndustrialPidOrganization resource.
type IndustrialPidOrganizationArgs struct {
	// The ID of parent pid organization.
	ParentPidOrganizationId pulumi.StringPtrInput
	// The name of pid organization.
	PidOrganizationName pulumi.StringInput
}

func (IndustrialPidOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*industrialPidOrganizationArgs)(nil)).Elem()
}

type IndustrialPidOrganizationInput interface {
	pulumi.Input

	ToIndustrialPidOrganizationOutput() IndustrialPidOrganizationOutput
	ToIndustrialPidOrganizationOutputWithContext(ctx context.Context) IndustrialPidOrganizationOutput
}

func (*IndustrialPidOrganization) ElementType() reflect.Type {
	return reflect.TypeOf((*IndustrialPidOrganization)(nil))
}

func (i *IndustrialPidOrganization) ToIndustrialPidOrganizationOutput() IndustrialPidOrganizationOutput {
	return i.ToIndustrialPidOrganizationOutputWithContext(context.Background())
}

func (i *IndustrialPidOrganization) ToIndustrialPidOrganizationOutputWithContext(ctx context.Context) IndustrialPidOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndustrialPidOrganizationOutput)
}

type IndustrialPidOrganizationOutput struct {
	*pulumi.OutputState
}

func (IndustrialPidOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndustrialPidOrganization)(nil))
}

func (o IndustrialPidOrganizationOutput) ToIndustrialPidOrganizationOutput() IndustrialPidOrganizationOutput {
	return o
}

func (o IndustrialPidOrganizationOutput) ToIndustrialPidOrganizationOutputWithContext(ctx context.Context) IndustrialPidOrganizationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IndustrialPidOrganizationOutput{})
}
