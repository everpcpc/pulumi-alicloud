// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package brain

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Brain Industrial Pid Project resource.
//
// > **NOTE:** Available in v1.113.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/brain"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := brain.NewIndustrialPidProject(ctx, "example", &brain.IndustrialPidProjectArgs{
// 			PidOrganisationId: pulumi.String("3e74e684-cbb5-xxxx"),
// 			PidProjectName:    pulumi.String("tf-testAcc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Brain Industrial Pid Project can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:brain/industrialPidProject:IndustrialPidProject example <id>
// ```
type IndustrialPidProject struct {
	pulumi.CustomResourceState

	// The ID of Pid Organisation.
	PidOrganisationId pulumi.StringOutput `pulumi:"pidOrganisationId"`
	// The description of Pid Project.
	PidProjectDesc pulumi.StringPtrOutput `pulumi:"pidProjectDesc"`
	// The name of Pid Project.
	PidProjectName pulumi.StringOutput `pulumi:"pidProjectName"`
}

// NewIndustrialPidProject registers a new resource with the given unique name, arguments, and options.
func NewIndustrialPidProject(ctx *pulumi.Context,
	name string, args *IndustrialPidProjectArgs, opts ...pulumi.ResourceOption) (*IndustrialPidProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PidOrganisationId == nil {
		return nil, errors.New("invalid value for required argument 'PidOrganisationId'")
	}
	if args.PidProjectName == nil {
		return nil, errors.New("invalid value for required argument 'PidProjectName'")
	}
	var resource IndustrialPidProject
	err := ctx.RegisterResource("alicloud:brain/industrialPidProject:IndustrialPidProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndustrialPidProject gets an existing IndustrialPidProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndustrialPidProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndustrialPidProjectState, opts ...pulumi.ResourceOption) (*IndustrialPidProject, error) {
	var resource IndustrialPidProject
	err := ctx.ReadResource("alicloud:brain/industrialPidProject:IndustrialPidProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IndustrialPidProject resources.
type industrialPidProjectState struct {
	// The ID of Pid Organisation.
	PidOrganisationId *string `pulumi:"pidOrganisationId"`
	// The description of Pid Project.
	PidProjectDesc *string `pulumi:"pidProjectDesc"`
	// The name of Pid Project.
	PidProjectName *string `pulumi:"pidProjectName"`
}

type IndustrialPidProjectState struct {
	// The ID of Pid Organisation.
	PidOrganisationId pulumi.StringPtrInput
	// The description of Pid Project.
	PidProjectDesc pulumi.StringPtrInput
	// The name of Pid Project.
	PidProjectName pulumi.StringPtrInput
}

func (IndustrialPidProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*industrialPidProjectState)(nil)).Elem()
}

type industrialPidProjectArgs struct {
	// The ID of Pid Organisation.
	PidOrganisationId string `pulumi:"pidOrganisationId"`
	// The description of Pid Project.
	PidProjectDesc *string `pulumi:"pidProjectDesc"`
	// The name of Pid Project.
	PidProjectName string `pulumi:"pidProjectName"`
}

// The set of arguments for constructing a IndustrialPidProject resource.
type IndustrialPidProjectArgs struct {
	// The ID of Pid Organisation.
	PidOrganisationId pulumi.StringInput
	// The description of Pid Project.
	PidProjectDesc pulumi.StringPtrInput
	// The name of Pid Project.
	PidProjectName pulumi.StringInput
}

func (IndustrialPidProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*industrialPidProjectArgs)(nil)).Elem()
}

type IndustrialPidProjectInput interface {
	pulumi.Input

	ToIndustrialPidProjectOutput() IndustrialPidProjectOutput
	ToIndustrialPidProjectOutputWithContext(ctx context.Context) IndustrialPidProjectOutput
}

func (*IndustrialPidProject) ElementType() reflect.Type {
	return reflect.TypeOf((*IndustrialPidProject)(nil))
}

func (i *IndustrialPidProject) ToIndustrialPidProjectOutput() IndustrialPidProjectOutput {
	return i.ToIndustrialPidProjectOutputWithContext(context.Background())
}

func (i *IndustrialPidProject) ToIndustrialPidProjectOutputWithContext(ctx context.Context) IndustrialPidProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndustrialPidProjectOutput)
}

type IndustrialPidProjectOutput struct {
	*pulumi.OutputState
}

func (IndustrialPidProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndustrialPidProject)(nil))
}

func (o IndustrialPidProjectOutput) ToIndustrialPidProjectOutput() IndustrialPidProjectOutput {
	return o
}

func (o IndustrialPidProjectOutput) ToIndustrialPidProjectOutputWithContext(ctx context.Context) IndustrialPidProjectOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IndustrialPidProjectOutput{})
}
