// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a custom image. You can then use a custom image to create ECS instances (RunInstances) or change the system disk for an existing instance (ReplaceSystemDisk).
// 
// > **NOTE:**  If you want to create a template from an ECS instance, you can specify the instance ID (InstanceId) to create a custom image. You must make sure that the status of the specified instance is Running or Stopped. After a successful invocation, each disk of the specified instance has a new snapshot created.
// 
// > **NOTE:**  If you want to create a custom image based on the system disk of your ECS instance, you can specify one of the system disk snapshots (SnapshotId) to create a custom image. However, the specified snapshot cannot be created on or before July 15, 2013.
// 
// > **NOTE:**  If you want to combine snapshots of multiple disks into an image template, you can specify DiskDeviceMapping to create a custom image.
// 
// > **NOTE:**  Available in 1.64.0+
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/image.html.markdown.
type Image struct {
	s *pulumi.ResourceState
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOpt) (*Image, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["architecture"] = nil
		inputs["description"] = nil
		inputs["diskDeviceMappings"] = nil
		inputs["force"] = nil
		inputs["imageName"] = nil
		inputs["instanceId"] = nil
		inputs["name"] = nil
		inputs["platform"] = nil
		inputs["resourceGroupId"] = nil
		inputs["snapshotId"] = nil
		inputs["tags"] = nil
	} else {
		inputs["architecture"] = args.Architecture
		inputs["description"] = args.Description
		inputs["diskDeviceMappings"] = args.DiskDeviceMappings
		inputs["force"] = args.Force
		inputs["imageName"] = args.ImageName
		inputs["instanceId"] = args.InstanceId
		inputs["name"] = args.Name
		inputs["platform"] = args.Platform
		inputs["resourceGroupId"] = args.ResourceGroupId
		inputs["snapshotId"] = args.SnapshotId
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("alicloud:ecs/image:Image", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Image{s: s}, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ImageState, opts ...pulumi.ResourceOpt) (*Image, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["architecture"] = state.Architecture
		inputs["description"] = state.Description
		inputs["diskDeviceMappings"] = state.DiskDeviceMappings
		inputs["force"] = state.Force
		inputs["imageName"] = state.ImageName
		inputs["instanceId"] = state.InstanceId
		inputs["name"] = state.Name
		inputs["platform"] = state.Platform
		inputs["resourceGroupId"] = state.ResourceGroupId
		inputs["snapshotId"] = state.SnapshotId
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("alicloud:ecs/image:Image", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Image{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Image) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Image) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x8664`.
func (r *Image) Architecture() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["architecture"])
}

// The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
func (r *Image) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Description of the system with disks and snapshots under the image.
func (r *Image) DiskDeviceMappings() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["diskDeviceMappings"])
}

// Indicates whether to force delete the custom image, Default is `false`. 
// - true：Force deletes the custom image, regardless of whether the image is currently being used by other instances.
// - false：Verifies that the image is not currently in use by any other instances before deleting the image.
func (r *Image) Force() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["force"])
}

// The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
func (r *Image) ImageName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["imageName"])
}

// The instance ID.
func (r *Image) InstanceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceId"])
}

func (r *Image) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the operating system platform of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `CentOS`, `Ubuntu`, `SUSE`, `OpenSUSE`, `RedHat`, `Debian`, `CoreOS`, `Aliyun Linux`, `Windows Server 2003`, `Windows Server 2008`, `Windows Server 2012`, `Windows 7`, Default is `Others Linux`, `Customized Linux`.
func (r *Image) Platform() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["platform"])
}

// The ID of the enterprise resource group to which a custom image belongs
func (r *Image) ResourceGroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupId"])
}

// Specifies a snapshot that is used to create a combined custom image.
func (r *Image) SnapshotId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["snapshotId"])
}

// The tag value of an image. The value of N ranges from 1 to 20.
func (r *Image) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Image resources.
type ImageState struct {
	// Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x8664`.
	Architecture interface{}
	// The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
	Description interface{}
	// Description of the system with disks and snapshots under the image.
	DiskDeviceMappings interface{}
	// Indicates whether to force delete the custom image, Default is `false`. 
	// - true：Force deletes the custom image, regardless of whether the image is currently being used by other instances.
	// - false：Verifies that the image is not currently in use by any other instances before deleting the image.
	Force interface{}
	// The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
	ImageName interface{}
	// The instance ID.
	InstanceId interface{}
	Name interface{}
	// Specifies the operating system platform of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `CentOS`, `Ubuntu`, `SUSE`, `OpenSUSE`, `RedHat`, `Debian`, `CoreOS`, `Aliyun Linux`, `Windows Server 2003`, `Windows Server 2008`, `Windows Server 2012`, `Windows 7`, Default is `Others Linux`, `Customized Linux`.
	Platform interface{}
	// The ID of the enterprise resource group to which a custom image belongs
	ResourceGroupId interface{}
	// Specifies a snapshot that is used to create a combined custom image.
	SnapshotId interface{}
	// The tag value of an image. The value of N ranges from 1 to 20.
	Tags interface{}
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x8664`.
	Architecture interface{}
	// The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
	Description interface{}
	// Description of the system with disks and snapshots under the image.
	DiskDeviceMappings interface{}
	// Indicates whether to force delete the custom image, Default is `false`. 
	// - true：Force deletes the custom image, regardless of whether the image is currently being used by other instances.
	// - false：Verifies that the image is not currently in use by any other instances before deleting the image.
	Force interface{}
	// The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
	ImageName interface{}
	// The instance ID.
	InstanceId interface{}
	Name interface{}
	// Specifies the operating system platform of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `CentOS`, `Ubuntu`, `SUSE`, `OpenSUSE`, `RedHat`, `Debian`, `CoreOS`, `Aliyun Linux`, `Windows Server 2003`, `Windows Server 2008`, `Windows Server 2012`, `Windows 7`, Default is `Others Linux`, `Customized Linux`.
	Platform interface{}
	// The ID of the enterprise resource group to which a custom image belongs
	ResourceGroupId interface{}
	// Specifies a snapshot that is used to create a combined custom image.
	SnapshotId interface{}
	// The tag value of an image. The value of N ranges from 1 to 20.
	Tags interface{}
}
