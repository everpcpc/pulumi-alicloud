// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a security group rule resource.
// Represents a single `ingress` or `egress` group rule, which can be added to external Security Groups.
// 
// ~> **NOTE:**  `nic_type` should set to `intranet` when security group type is `vpc` or specifying the `source_security_group_id`. In this situation it does not distinguish between intranet and internet, the rule is effective on them both.
// 
type SecurityGroupRule struct {
	s *pulumi.ResourceState
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOpt) (*SecurityGroupRule, error) {
	if args == nil || args.IpProtocol == nil {
		return nil, errors.New("missing required argument 'IpProtocol'")
	}
	if args == nil || args.SecurityGroupId == nil {
		return nil, errors.New("missing required argument 'SecurityGroupId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cidrIp"] = nil
		inputs["ipProtocol"] = nil
		inputs["nicType"] = nil
		inputs["policy"] = nil
		inputs["portRange"] = nil
		inputs["priority"] = nil
		inputs["securityGroupId"] = nil
		inputs["sourceGroupOwnerAccount"] = nil
		inputs["sourceSecurityGroupId"] = nil
		inputs["type"] = nil
	} else {
		inputs["cidrIp"] = args.CidrIp
		inputs["ipProtocol"] = args.IpProtocol
		inputs["nicType"] = args.NicType
		inputs["policy"] = args.Policy
		inputs["portRange"] = args.PortRange
		inputs["priority"] = args.Priority
		inputs["securityGroupId"] = args.SecurityGroupId
		inputs["sourceGroupOwnerAccount"] = args.SourceGroupOwnerAccount
		inputs["sourceSecurityGroupId"] = args.SourceSecurityGroupId
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("alicloud:ecs/securityGroupRule:SecurityGroupRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecurityGroupRule{s: s}, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecurityGroupRuleState, opts ...pulumi.ResourceOpt) (*SecurityGroupRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cidrIp"] = state.CidrIp
		inputs["ipProtocol"] = state.IpProtocol
		inputs["nicType"] = state.NicType
		inputs["policy"] = state.Policy
		inputs["portRange"] = state.PortRange
		inputs["priority"] = state.Priority
		inputs["securityGroupId"] = state.SecurityGroupId
		inputs["sourceGroupOwnerAccount"] = state.SourceGroupOwnerAccount
		inputs["sourceSecurityGroupId"] = state.SourceSecurityGroupId
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("alicloud:ecs/securityGroupRule:SecurityGroupRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecurityGroupRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecurityGroupRule) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecurityGroupRule) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The target IP address range. The default value is 0.0.0.0/0 (which means no restriction will be applied). Other supported formats include 10.159.6.18/12. Only IPv4 is supported.
func (r *SecurityGroupRule) CidrIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidrIp"])
}

// The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
func (r *SecurityGroupRule) IpProtocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipProtocol"])
}

// Network type, can be either `internet` or `intranet`, the default value is `internet`.
func (r *SecurityGroupRule) NicType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nicType"])
}

// Authorization policy, can be either `accept` or `drop`, the default value is `accept`.
func (r *SecurityGroupRule) Policy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policy"])
}

// The range of port numbers relevant to the IP protocol. Default to "-1/-1". When the protocol is tcp or udp, each side port number range from 1 to 65535 and '-1/-1' will be invalid.
// For example, `1/200` means that the range of the port numbers is 1-200. Other protocols' 'port_range' can only be "-1/-1", and other values will be invalid.
func (r *SecurityGroupRule) PortRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["portRange"])
}

// Authorization policy priority, with parameter values: `1-100`, default value: 1.
func (r *SecurityGroupRule) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// The security group to apply this rule to.
func (r *SecurityGroupRule) SecurityGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["securityGroupId"])
}

// The Alibaba Cloud user account Id of the target security group when security groups are authorized across accounts.  This parameter is invalid if `cidr_ip` has already been set.
func (r *SecurityGroupRule) SourceGroupOwnerAccount() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceGroupOwnerAccount"])
}

// The target security group ID within the same region. If this field is specified, the `nic_type` can only select `intranet`.
func (r *SecurityGroupRule) SourceSecurityGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceSecurityGroupId"])
}

// The type of rule being created. Valid options are `ingress` (inbound) or `egress` (outbound).
func (r *SecurityGroupRule) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering SecurityGroupRule resources.
type SecurityGroupRuleState struct {
	// The target IP address range. The default value is 0.0.0.0/0 (which means no restriction will be applied). Other supported formats include 10.159.6.18/12. Only IPv4 is supported.
	CidrIp interface{}
	// The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
	IpProtocol interface{}
	// Network type, can be either `internet` or `intranet`, the default value is `internet`.
	NicType interface{}
	// Authorization policy, can be either `accept` or `drop`, the default value is `accept`.
	Policy interface{}
	// The range of port numbers relevant to the IP protocol. Default to "-1/-1". When the protocol is tcp or udp, each side port number range from 1 to 65535 and '-1/-1' will be invalid.
	// For example, `1/200` means that the range of the port numbers is 1-200. Other protocols' 'port_range' can only be "-1/-1", and other values will be invalid.
	PortRange interface{}
	// Authorization policy priority, with parameter values: `1-100`, default value: 1.
	Priority interface{}
	// The security group to apply this rule to.
	SecurityGroupId interface{}
	// The Alibaba Cloud user account Id of the target security group when security groups are authorized across accounts.  This parameter is invalid if `cidr_ip` has already been set.
	SourceGroupOwnerAccount interface{}
	// The target security group ID within the same region. If this field is specified, the `nic_type` can only select `intranet`.
	SourceSecurityGroupId interface{}
	// The type of rule being created. Valid options are `ingress` (inbound) or `egress` (outbound).
	Type interface{}
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	// The target IP address range. The default value is 0.0.0.0/0 (which means no restriction will be applied). Other supported formats include 10.159.6.18/12. Only IPv4 is supported.
	CidrIp interface{}
	// The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
	IpProtocol interface{}
	// Network type, can be either `internet` or `intranet`, the default value is `internet`.
	NicType interface{}
	// Authorization policy, can be either `accept` or `drop`, the default value is `accept`.
	Policy interface{}
	// The range of port numbers relevant to the IP protocol. Default to "-1/-1". When the protocol is tcp or udp, each side port number range from 1 to 65535 and '-1/-1' will be invalid.
	// For example, `1/200` means that the range of the port numbers is 1-200. Other protocols' 'port_range' can only be "-1/-1", and other values will be invalid.
	PortRange interface{}
	// Authorization policy priority, with parameter values: `1-100`, default value: 1.
	Priority interface{}
	// The security group to apply this rule to.
	SecurityGroupId interface{}
	// The Alibaba Cloud user account Id of the target security group when security groups are authorized across accounts.  This parameter is invalid if `cidr_ip` has already been set.
	SourceGroupOwnerAccount interface{}
	// The target security group ID within the same region. If this field is specified, the `nic_type` can only select `intranet`.
	SourceSecurityGroupId interface{}
	// The type of rule being created. Valid options are `ingress` (inbound) or `egress` (outbound).
	Type interface{}
}
