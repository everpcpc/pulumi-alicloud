// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Alicloud ECS Disk Attachment as a resource, to attach and detach disks from ECS Instances.
type DiskAttachment struct {
	s *pulumi.ResourceState
}

// NewDiskAttachment registers a new resource with the given unique name, arguments, and options.
func NewDiskAttachment(ctx *pulumi.Context,
	name string, args *DiskAttachmentArgs, opts ...pulumi.ResourceOpt) (*DiskAttachment, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["deviceName"] = nil
		inputs["diskId"] = nil
		inputs["instanceId"] = nil
	} else {
		inputs["deviceName"] = args.DeviceName
		inputs["diskId"] = args.DiskId
		inputs["instanceId"] = args.InstanceId
	}
	s, err := ctx.RegisterResource("alicloud:ecs/diskAttachment:DiskAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DiskAttachment{s: s}, nil
}

// GetDiskAttachment gets an existing DiskAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DiskAttachmentState, opts ...pulumi.ResourceOpt) (*DiskAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["deviceName"] = state.DeviceName
		inputs["diskId"] = state.DiskId
		inputs["instanceId"] = state.InstanceId
	}
	s, err := ctx.ReadResource("alicloud:ecs/diskAttachment:DiskAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DiskAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DiskAttachment) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DiskAttachment) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The device name has been deprecated, and when attaching disk, it will be allocated automatically by system according to default order from /dev/xvdb to /dev/xvdz.
func (r *DiskAttachment) DeviceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deviceName"])
}

// ID of the Disk to be attached.
func (r *DiskAttachment) DiskId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["diskId"])
}

// ID of the Instance to attach to.
func (r *DiskAttachment) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

// Input properties used for looking up and filtering DiskAttachment resources.
type DiskAttachmentState struct {
	// The device name has been deprecated, and when attaching disk, it will be allocated automatically by system according to default order from /dev/xvdb to /dev/xvdz.
	DeviceName interface{}
	// ID of the Disk to be attached.
	DiskId interface{}
	// ID of the Instance to attach to.
	InstanceId interface{}
}

// The set of arguments for constructing a DiskAttachment resource.
type DiskAttachmentArgs struct {
	// The device name has been deprecated, and when attaching disk, it will be allocated automatically by system according to default order from /dev/xvdb to /dev/xvdz.
	DeviceName interface{}
	// ID of the Disk to be attached.
	DiskId interface{}
	// ID of the Instance to attach to.
	InstanceId interface{}
}
