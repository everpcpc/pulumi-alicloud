// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ECS snapshot policy resource.
// 
// For information about snapshot policy and how to use it, see [Snapshot](https://www.alibabacloud.com/help/doc-detail/25460.html).
// 
// > **NOTE:** Available in 1.42.0+.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/snapshot_policy.html.markdown.
type SnapshotPolicy struct {
	s *pulumi.ResourceState
}

// NewSnapshotPolicy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotPolicy(ctx *pulumi.Context,
	name string, args *SnapshotPolicyArgs, opts ...pulumi.ResourceOpt) (*SnapshotPolicy, error) {
	if args == nil || args.RepeatWeekdays == nil {
		return nil, errors.New("missing required argument 'RepeatWeekdays'")
	}
	if args == nil || args.RetentionDays == nil {
		return nil, errors.New("missing required argument 'RetentionDays'")
	}
	if args == nil || args.TimePoints == nil {
		return nil, errors.New("missing required argument 'TimePoints'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["repeatWeekdays"] = nil
		inputs["retentionDays"] = nil
		inputs["timePoints"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["repeatWeekdays"] = args.RepeatWeekdays
		inputs["retentionDays"] = args.RetentionDays
		inputs["timePoints"] = args.TimePoints
	}
	s, err := ctx.RegisterResource("alicloud:ecs/snapshotPolicy:SnapshotPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SnapshotPolicy{s: s}, nil
}

// GetSnapshotPolicy gets an existing SnapshotPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnapshotPolicyState, opts ...pulumi.ResourceOpt) (*SnapshotPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
		inputs["repeatWeekdays"] = state.RepeatWeekdays
		inputs["retentionDays"] = state.RetentionDays
		inputs["timePoints"] = state.TimePoints
	}
	s, err := ctx.ReadResource("alicloud:ecs/snapshotPolicy:SnapshotPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SnapshotPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SnapshotPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SnapshotPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The snapshot policy name.
func (r *SnapshotPolicy) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The automatic snapshot repetition dates. The unit of measurement is day and the repeating cycle is a week. Value range: [1, 7], which represents days starting from Monday to Sunday, for example 1  indicates Monday. When you want to schedule multiple automatic snapshot tasks for a disk in a week, you can set the RepeatWeekdays to an array.
// - A maximum of seven time points can be selected.
// - The format is  an JSON array of ["1", "2", … "7"]  and the time points are separated by commas (,).
func (r *SnapshotPolicy) RepeatWeekdays() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["repeatWeekdays"])
}

// The snapshot retention time, and the unit of measurement is day. Optional values:
// - -1: The automatic snapshots are retained permanently.
// - [1, 65536]: The number of days retained.
func (r *SnapshotPolicy) RetentionDays() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["retentionDays"])
}

// The automatic snapshot creation schedule, and the unit of measurement is hour. Value range: [0, 23], which represents from 00:00 to 24:00,  for example 1 indicates 01:00. When you want to schedule multiple automatic snapshot tasks for a disk in a day, you can set the TimePoints to an array.
// - A maximum of 24 time points can be selected.
// - The format is  an JSON array of ["0", "1", … "23"] and the time points are separated by commas (,).
func (r *SnapshotPolicy) TimePoints() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["timePoints"])
}

// Input properties used for looking up and filtering SnapshotPolicy resources.
type SnapshotPolicyState struct {
	// The snapshot policy name.
	Name interface{}
	// The automatic snapshot repetition dates. The unit of measurement is day and the repeating cycle is a week. Value range: [1, 7], which represents days starting from Monday to Sunday, for example 1  indicates Monday. When you want to schedule multiple automatic snapshot tasks for a disk in a week, you can set the RepeatWeekdays to an array.
	// - A maximum of seven time points can be selected.
	// - The format is  an JSON array of ["1", "2", … "7"]  and the time points are separated by commas (,).
	RepeatWeekdays interface{}
	// The snapshot retention time, and the unit of measurement is day. Optional values:
	// - -1: The automatic snapshots are retained permanently.
	// - [1, 65536]: The number of days retained.
	RetentionDays interface{}
	// The automatic snapshot creation schedule, and the unit of measurement is hour. Value range: [0, 23], which represents from 00:00 to 24:00,  for example 1 indicates 01:00. When you want to schedule multiple automatic snapshot tasks for a disk in a day, you can set the TimePoints to an array.
	// - A maximum of 24 time points can be selected.
	// - The format is  an JSON array of ["0", "1", … "23"] and the time points are separated by commas (,).
	TimePoints interface{}
}

// The set of arguments for constructing a SnapshotPolicy resource.
type SnapshotPolicyArgs struct {
	// The snapshot policy name.
	Name interface{}
	// The automatic snapshot repetition dates. The unit of measurement is day and the repeating cycle is a week. Value range: [1, 7], which represents days starting from Monday to Sunday, for example 1  indicates Monday. When you want to schedule multiple automatic snapshot tasks for a disk in a week, you can set the RepeatWeekdays to an array.
	// - A maximum of seven time points can be selected.
	// - The format is  an JSON array of ["1", "2", … "7"]  and the time points are separated by commas (,).
	RepeatWeekdays interface{}
	// The snapshot retention time, and the unit of measurement is day. Optional values:
	// - -1: The automatic snapshots are retained permanently.
	// - [1, 65536]: The number of days retained.
	RetentionDays interface{}
	// The automatic snapshot creation schedule, and the unit of measurement is hour. Value range: [0, 23], which represents from 00:00 to 24:00,  for example 1 indicates 01:00. When you want to schedule multiple automatic snapshot tasks for a disk in a day, you can set the TimePoints to an array.
	// - A maximum of 24 time points can be selected.
	// - The format is  an JSON array of ["0", "1", … "23"] and the time points are separated by commas (,).
	TimePoints interface{}
}
