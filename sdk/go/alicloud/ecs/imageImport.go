// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Import a copy of your local on-premise file to ECS, and appear as a custom replacement in the corresponding domain.
// 
// > **NOTE:** You must upload the image file to the object storage OSS in advance.
// 
// > **NOTE:** The region where the image is imported must be the same region as the OSS bucket where the image file is uploaded.
// 
// > **NOTE:** Available in 1.69.0+.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/image_import.html.markdown.
type ImageImport struct {
	s *pulumi.ResourceState
}

// NewImageImport registers a new resource with the given unique name, arguments, and options.
func NewImageImport(ctx *pulumi.Context,
	name string, args *ImageImportArgs, opts ...pulumi.ResourceOpt) (*ImageImport, error) {
	if args == nil || args.DiskDeviceMappings == nil {
		return nil, errors.New("missing required argument 'DiskDeviceMappings'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["architecture"] = nil
		inputs["description"] = nil
		inputs["diskDeviceMappings"] = nil
		inputs["imageName"] = nil
		inputs["licenseType"] = nil
		inputs["osType"] = nil
		inputs["platform"] = nil
	} else {
		inputs["architecture"] = args.Architecture
		inputs["description"] = args.Description
		inputs["diskDeviceMappings"] = args.DiskDeviceMappings
		inputs["imageName"] = args.ImageName
		inputs["licenseType"] = args.LicenseType
		inputs["osType"] = args.OsType
		inputs["platform"] = args.Platform
	}
	s, err := ctx.RegisterResource("alicloud:ecs/imageImport:ImageImport", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ImageImport{s: s}, nil
}

// GetImageImport gets an existing ImageImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageImport(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ImageImportState, opts ...pulumi.ResourceOpt) (*ImageImport, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["architecture"] = state.Architecture
		inputs["description"] = state.Description
		inputs["diskDeviceMappings"] = state.DiskDeviceMappings
		inputs["imageName"] = state.ImageName
		inputs["licenseType"] = state.LicenseType
		inputs["osType"] = state.OsType
		inputs["platform"] = state.Platform
	}
	s, err := ctx.ReadResource("alicloud:ecs/imageImport:ImageImport", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ImageImport{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ImageImport) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ImageImport) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x8664`.
func (r *ImageImport) Architecture() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["architecture"])
}

// Description of the image. The length is 2 to 256 English or Chinese characters, and cannot begin with http: // and https: //.
func (r *ImageImport) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Description of the system with disks and snapshots under the image.
func (r *ImageImport) DiskDeviceMappings() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["diskDeviceMappings"])
}

// The image name. The length is 2 ~ 128 English or Chinese characters. Must start with a capital letter or Chinese, and cannot start with http: // and https: //. Can contain numbers, colons (:), underscores (_), or hyphens (-).
func (r *ImageImport) ImageName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["imageName"])
}

func (r *ImageImport) LicenseType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["licenseType"])
}

// Operating system platform type. Valid values: `windows`, Default is `linux`.
func (r *ImageImport) OsType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["osType"])
}

// Specifies the operating system platform of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `CentOS`, `Ubuntu`, `SUSE`, `OpenSUSE`, `Debian`, `CoreOS`, `Windows Server 2003`, `Windows Server 2008`, `Windows Server 2012`, `Windows 7`, Default is `Others Linux`, `Customized Linux`.
func (r *ImageImport) Platform() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["platform"])
}

// Input properties used for looking up and filtering ImageImport resources.
type ImageImportState struct {
	// Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x8664`.
	Architecture interface{}
	// Description of the image. The length is 2 to 256 English or Chinese characters, and cannot begin with http: // and https: //.
	Description interface{}
	// Description of the system with disks and snapshots under the image.
	DiskDeviceMappings interface{}
	// The image name. The length is 2 ~ 128 English or Chinese characters. Must start with a capital letter or Chinese, and cannot start with http: // and https: //. Can contain numbers, colons (:), underscores (_), or hyphens (-).
	ImageName interface{}
	LicenseType interface{}
	// Operating system platform type. Valid values: `windows`, Default is `linux`.
	OsType interface{}
	// Specifies the operating system platform of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `CentOS`, `Ubuntu`, `SUSE`, `OpenSUSE`, `Debian`, `CoreOS`, `Windows Server 2003`, `Windows Server 2008`, `Windows Server 2012`, `Windows 7`, Default is `Others Linux`, `Customized Linux`.
	Platform interface{}
}

// The set of arguments for constructing a ImageImport resource.
type ImageImportArgs struct {
	// Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x8664`.
	Architecture interface{}
	// Description of the image. The length is 2 to 256 English or Chinese characters, and cannot begin with http: // and https: //.
	Description interface{}
	// Description of the system with disks and snapshots under the image.
	DiskDeviceMappings interface{}
	// The image name. The length is 2 ~ 128 English or Chinese characters. Must start with a capital letter or Chinese, and cannot start with http: // and https: //. Can contain numbers, colons (:), underscores (_), or hyphens (-).
	ImageName interface{}
	LicenseType interface{}
	// Operating system platform type. Valid values: `windows`, Default is `linux`.
	OsType interface{}
	// Specifies the operating system platform of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `CentOS`, `Ubuntu`, `SUSE`, `OpenSUSE`, `Debian`, `CoreOS`, `Windows Server 2003`, `Windows Server 2008`, `Windows Server 2012`, `Windows 7`, Default is `Others Linux`, `Customized Linux`.
	Platform interface{}
}
