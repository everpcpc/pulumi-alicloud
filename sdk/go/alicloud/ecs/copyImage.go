// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type CopyImage struct {
	s *pulumi.ResourceState
}

// NewCopyImage registers a new resource with the given unique name, arguments, and options.
func NewCopyImage(ctx *pulumi.Context,
	name string, args *CopyImageArgs, opts ...pulumi.ResourceOpt) (*CopyImage, error) {
	if args == nil || args.SourceImageId == nil {
		return nil, errors.New("missing required argument 'SourceImageId'")
	}
	if args == nil || args.SourceRegionId == nil {
		return nil, errors.New("missing required argument 'SourceRegionId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["encrypted"] = nil
		inputs["force"] = nil
		inputs["kmsKeyId"] = nil
		inputs["name"] = nil
		inputs["sourceImageId"] = nil
		inputs["sourceRegionId"] = nil
		inputs["tags"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["encrypted"] = args.Encrypted
		inputs["force"] = args.Force
		inputs["kmsKeyId"] = args.KmsKeyId
		inputs["name"] = args.Name
		inputs["sourceImageId"] = args.SourceImageId
		inputs["sourceRegionId"] = args.SourceRegionId
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("alicloud:ecs/copyImage:CopyImage", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CopyImage{s: s}, nil
}

// GetCopyImage gets an existing CopyImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCopyImage(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CopyImageState, opts ...pulumi.ResourceOpt) (*CopyImage, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["encrypted"] = state.Encrypted
		inputs["force"] = state.Force
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["name"] = state.Name
		inputs["sourceImageId"] = state.SourceImageId
		inputs["sourceRegionId"] = state.SourceRegionId
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("alicloud:ecs/copyImage:CopyImage", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CopyImage{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CopyImage) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CopyImage) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *CopyImage) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *CopyImage) Encrypted() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["encrypted"])
}

func (r *CopyImage) Force() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["force"])
}

func (r *CopyImage) KmsKeyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kmsKeyId"])
}

func (r *CopyImage) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *CopyImage) SourceImageId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceImageId"])
}

func (r *CopyImage) SourceRegionId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceRegionId"])
}

func (r *CopyImage) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering CopyImage resources.
type CopyImageState struct {
	Description interface{}
	Encrypted interface{}
	Force interface{}
	KmsKeyId interface{}
	Name interface{}
	SourceImageId interface{}
	SourceRegionId interface{}
	Tags interface{}
}

// The set of arguments for constructing a CopyImage resource.
type CopyImageArgs struct {
	Description interface{}
	Encrypted interface{}
	Force interface{}
	KmsKeyId interface{}
	Name interface{}
	SourceImageId interface{}
	SourceRegionId interface{}
	Tags interface{}
}
