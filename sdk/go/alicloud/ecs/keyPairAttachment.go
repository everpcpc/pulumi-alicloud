// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a key pair attachment resource to bind key pair for several ECS instances.
// 
// > **NOTE:** After the key pair is attached with sone instances, there instances must be rebooted to make the key pair affect.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/key_pair_attachment.html.markdown.
type KeyPairAttachment struct {
	s *pulumi.ResourceState
}

// NewKeyPairAttachment registers a new resource with the given unique name, arguments, and options.
func NewKeyPairAttachment(ctx *pulumi.Context,
	name string, args *KeyPairAttachmentArgs, opts ...pulumi.ResourceOpt) (*KeyPairAttachment, error) {
	if args == nil || args.InstanceIds == nil {
		return nil, errors.New("missing required argument 'InstanceIds'")
	}
	if args == nil || args.KeyName == nil {
		return nil, errors.New("missing required argument 'KeyName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["force"] = nil
		inputs["instanceIds"] = nil
		inputs["keyName"] = nil
	} else {
		inputs["force"] = args.Force
		inputs["instanceIds"] = args.InstanceIds
		inputs["keyName"] = args.KeyName
	}
	s, err := ctx.RegisterResource("alicloud:ecs/keyPairAttachment:KeyPairAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KeyPairAttachment{s: s}, nil
}

// GetKeyPairAttachment gets an existing KeyPairAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPairAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KeyPairAttachmentState, opts ...pulumi.ResourceOpt) (*KeyPairAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["force"] = state.Force
		inputs["instanceIds"] = state.InstanceIds
		inputs["keyName"] = state.KeyName
	}
	s, err := ctx.ReadResource("alicloud:ecs/keyPairAttachment:KeyPairAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KeyPairAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *KeyPairAttachment) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KeyPairAttachment) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Set it to true and it will reboot instances which attached with the key pair to make key pair affect immediately.
func (r *KeyPairAttachment) Force() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["force"])
}

// The list of ECS instance's IDs.
func (r *KeyPairAttachment) InstanceIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["instanceIds"])
}

// The name of key pair used to bind.
func (r *KeyPairAttachment) KeyName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyName"])
}

// Input properties used for looking up and filtering KeyPairAttachment resources.
type KeyPairAttachmentState struct {
	// Set it to true and it will reboot instances which attached with the key pair to make key pair affect immediately.
	Force interface{}
	// The list of ECS instance's IDs.
	InstanceIds interface{}
	// The name of key pair used to bind.
	KeyName interface{}
}

// The set of arguments for constructing a KeyPairAttachment resource.
type KeyPairAttachmentArgs struct {
	// Set it to true and it will reboot instances which attached with the key pair to make key pair affect immediately.
	Force interface{}
	// The list of ECS instance's IDs.
	InstanceIds interface{}
	// The name of key pair used to bind.
	KeyName interface{}
}
