// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Elasticsearch instance resource. It contains data nodes, dedicated master node(optional) and etc. It can be associated with private IP whitelists and kibana IP whitelist.
// 
// > **NOTE:** Only one operation is supported in a request. So if `dataNodeSpec` and `dataNodeDiskSize` are both changed, system will respond error.
// 
// > **NOTE:** At present, `version` can not be modified once instance has been created.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/elasticsearch_instance.html.markdown.
type Instance struct {
	s *pulumi.ResourceState
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOpt) (*Instance, error) {
	if args == nil || args.DataNodeAmount == nil {
		return nil, errors.New("missing required argument 'DataNodeAmount'")
	}
	if args == nil || args.DataNodeDiskSize == nil {
		return nil, errors.New("missing required argument 'DataNodeDiskSize'")
	}
	if args == nil || args.DataNodeDiskType == nil {
		return nil, errors.New("missing required argument 'DataNodeDiskType'")
	}
	if args == nil || args.DataNodeSpec == nil {
		return nil, errors.New("missing required argument 'DataNodeSpec'")
	}
	if args == nil || args.Version == nil {
		return nil, errors.New("missing required argument 'Version'")
	}
	if args == nil || args.VswitchId == nil {
		return nil, errors.New("missing required argument 'VswitchId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dataNodeAmount"] = nil
		inputs["dataNodeDiskSize"] = nil
		inputs["dataNodeDiskType"] = nil
		inputs["dataNodeSpec"] = nil
		inputs["description"] = nil
		inputs["instanceChargeType"] = nil
		inputs["kibanaWhitelists"] = nil
		inputs["kmsEncryptedPassword"] = nil
		inputs["kmsEncryptionContext"] = nil
		inputs["masterNodeSpec"] = nil
		inputs["password"] = nil
		inputs["period"] = nil
		inputs["privateWhitelists"] = nil
		inputs["publicWhitelists"] = nil
		inputs["version"] = nil
		inputs["vswitchId"] = nil
		inputs["zoneCount"] = nil
	} else {
		inputs["dataNodeAmount"] = args.DataNodeAmount
		inputs["dataNodeDiskSize"] = args.DataNodeDiskSize
		inputs["dataNodeDiskType"] = args.DataNodeDiskType
		inputs["dataNodeSpec"] = args.DataNodeSpec
		inputs["description"] = args.Description
		inputs["instanceChargeType"] = args.InstanceChargeType
		inputs["kibanaWhitelists"] = args.KibanaWhitelists
		inputs["kmsEncryptedPassword"] = args.KmsEncryptedPassword
		inputs["kmsEncryptionContext"] = args.KmsEncryptionContext
		inputs["masterNodeSpec"] = args.MasterNodeSpec
		inputs["password"] = args.Password
		inputs["period"] = args.Period
		inputs["privateWhitelists"] = args.PrivateWhitelists
		inputs["publicWhitelists"] = args.PublicWhitelists
		inputs["version"] = args.Version
		inputs["vswitchId"] = args.VswitchId
		inputs["zoneCount"] = args.ZoneCount
	}
	inputs["domain"] = nil
	inputs["kibanaDomain"] = nil
	inputs["kibanaPort"] = nil
	inputs["port"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("alicloud:elasticsearch/instance:Instance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceState, opts ...pulumi.ResourceOpt) (*Instance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dataNodeAmount"] = state.DataNodeAmount
		inputs["dataNodeDiskSize"] = state.DataNodeDiskSize
		inputs["dataNodeDiskType"] = state.DataNodeDiskType
		inputs["dataNodeSpec"] = state.DataNodeSpec
		inputs["description"] = state.Description
		inputs["domain"] = state.Domain
		inputs["instanceChargeType"] = state.InstanceChargeType
		inputs["kibanaDomain"] = state.KibanaDomain
		inputs["kibanaPort"] = state.KibanaPort
		inputs["kibanaWhitelists"] = state.KibanaWhitelists
		inputs["kmsEncryptedPassword"] = state.KmsEncryptedPassword
		inputs["kmsEncryptionContext"] = state.KmsEncryptionContext
		inputs["masterNodeSpec"] = state.MasterNodeSpec
		inputs["password"] = state.Password
		inputs["period"] = state.Period
		inputs["port"] = state.Port
		inputs["privateWhitelists"] = state.PrivateWhitelists
		inputs["publicWhitelists"] = state.PublicWhitelists
		inputs["status"] = state.Status
		inputs["version"] = state.Version
		inputs["vswitchId"] = state.VswitchId
		inputs["zoneCount"] = state.ZoneCount
	}
	s, err := ctx.ReadResource("alicloud:elasticsearch/instance:Instance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Instance) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Instance) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The Elasticsearch cluster's data node quantity, between 2 and 50.
func (r *Instance) DataNodeAmount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["dataNodeAmount"])
}

// The single data node storage space.
// - `cloudSsd`: An SSD disk, supports a maximum of 2048 GiB (2 TB).
// - `cloudEfficiency` An ultra disk, supports a maximum of 5120 GiB (5 TB). If the data to be stored is larger than 2048 GiB, an ultra disk can only support the following data sizes (GiB): [`2560`, `3072`, `3584`, `4096`, `4608`, `5120`].
func (r *Instance) DataNodeDiskSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["dataNodeDiskSize"])
}

// The data node disk type. Supported values: cloud_ssd, cloud_efficiency.
func (r *Instance) DataNodeDiskType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dataNodeDiskType"])
}

// The data node specifications of the Elasticsearch instance.
func (r *Instance) DataNodeSpec() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dataNodeSpec"])
}

// The description of instance. It a string of 0 to 30 characters.
func (r *Instance) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Instance connection domain (only VPC network access supported).
func (r *Instance) Domain() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["domain"])
}

// Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`. From version 1.69.0, the Elasticsearch cluster allows you to update your instanceChargeYpe from `PostPaid` to `PrePaid`, the following attributes are required: `period`. But, updating from `PostPaid` to `PrePaid` is not supported.
func (r *Instance) InstanceChargeType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceChargeType"])
}

// Kibana console domain (Internet access supported).
func (r *Instance) KibanaDomain() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kibanaDomain"])
}

// Kibana console port.
func (r *Instance) KibanaPort() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["kibanaPort"])
}

// Set the Kibana's IP whitelist in internet network.
func (r *Instance) KibanaWhitelists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["kibanaWhitelists"])
}

// An KMS encrypts password used to a instance. If the `password` is filled in, this field will be ignored, but you have to specify one of `password` and `kmsEncryptedPassword` fields.
func (r *Instance) KmsEncryptedPassword() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kmsEncryptedPassword"])
}

// An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating instance with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
func (r *Instance) KmsEncryptionContext() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["kmsEncryptionContext"])
}

// The dedicated master node spec. If specified, dedicated master node will be created.
func (r *Instance) MasterNodeSpec() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["masterNodeSpec"])
}

// The password of the instance. The password can be 8 to 32 characters in length and must contain three of the following conditions: uppercase letters, lowercase letters, numbers, and special characters (!@#$%^&*()_+-=).
func (r *Instance) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// The duration that you will buy Elasticsearch instance (in month). It is valid when instanceChargeType is `PrePaid`. Valid values: [1~9], 12, 24, 36. Default to 1.
func (r *Instance) Period() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["period"])
}

// Instance connection port.
func (r *Instance) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// Set the instance's IP whitelist in VPC network.
func (r *Instance) PrivateWhitelists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["privateWhitelists"])
}

func (r *Instance) PublicWhitelists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["publicWhitelists"])
}

// The Elasticsearch instance status. Includes `active`, `activating`, `inactive`. Some operations are denied when status is not `active`.
func (r *Instance) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// Elasticsearch version. Supported values: `5.5.3_with_X-Pack`, `6.3_with_X-Pack` and `6.7_with_X-Pack`.
func (r *Instance) Version() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["version"])
}

// The ID of VSwitch.
func (r *Instance) VswitchId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vswitchId"])
}

// The Multi-AZ supported for Elasticsearch, between 1 and 3. The `dataNodeAmount` value must be an integral multiple of the `zoneCount` value.
func (r *Instance) ZoneCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["zoneCount"])
}

// Input properties used for looking up and filtering Instance resources.
type InstanceState struct {
	// The Elasticsearch cluster's data node quantity, between 2 and 50.
	DataNodeAmount interface{}
	// The single data node storage space.
	// - `cloudSsd`: An SSD disk, supports a maximum of 2048 GiB (2 TB).
	// - `cloudEfficiency` An ultra disk, supports a maximum of 5120 GiB (5 TB). If the data to be stored is larger than 2048 GiB, an ultra disk can only support the following data sizes (GiB): [`2560`, `3072`, `3584`, `4096`, `4608`, `5120`].
	DataNodeDiskSize interface{}
	// The data node disk type. Supported values: cloud_ssd, cloud_efficiency.
	DataNodeDiskType interface{}
	// The data node specifications of the Elasticsearch instance.
	DataNodeSpec interface{}
	// The description of instance. It a string of 0 to 30 characters.
	Description interface{}
	// Instance connection domain (only VPC network access supported).
	Domain interface{}
	// Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`. From version 1.69.0, the Elasticsearch cluster allows you to update your instanceChargeYpe from `PostPaid` to `PrePaid`, the following attributes are required: `period`. But, updating from `PostPaid` to `PrePaid` is not supported.
	InstanceChargeType interface{}
	// Kibana console domain (Internet access supported).
	KibanaDomain interface{}
	// Kibana console port.
	KibanaPort interface{}
	// Set the Kibana's IP whitelist in internet network.
	KibanaWhitelists interface{}
	// An KMS encrypts password used to a instance. If the `password` is filled in, this field will be ignored, but you have to specify one of `password` and `kmsEncryptedPassword` fields.
	KmsEncryptedPassword interface{}
	// An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating instance with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
	KmsEncryptionContext interface{}
	// The dedicated master node spec. If specified, dedicated master node will be created.
	MasterNodeSpec interface{}
	// The password of the instance. The password can be 8 to 32 characters in length and must contain three of the following conditions: uppercase letters, lowercase letters, numbers, and special characters (!@#$%^&*()_+-=).
	Password interface{}
	// The duration that you will buy Elasticsearch instance (in month). It is valid when instanceChargeType is `PrePaid`. Valid values: [1~9], 12, 24, 36. Default to 1.
	Period interface{}
	// Instance connection port.
	Port interface{}
	// Set the instance's IP whitelist in VPC network.
	PrivateWhitelists interface{}
	PublicWhitelists interface{}
	// The Elasticsearch instance status. Includes `active`, `activating`, `inactive`. Some operations are denied when status is not `active`.
	Status interface{}
	// Elasticsearch version. Supported values: `5.5.3_with_X-Pack`, `6.3_with_X-Pack` and `6.7_with_X-Pack`.
	Version interface{}
	// The ID of VSwitch.
	VswitchId interface{}
	// The Multi-AZ supported for Elasticsearch, between 1 and 3. The `dataNodeAmount` value must be an integral multiple of the `zoneCount` value.
	ZoneCount interface{}
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The Elasticsearch cluster's data node quantity, between 2 and 50.
	DataNodeAmount interface{}
	// The single data node storage space.
	// - `cloudSsd`: An SSD disk, supports a maximum of 2048 GiB (2 TB).
	// - `cloudEfficiency` An ultra disk, supports a maximum of 5120 GiB (5 TB). If the data to be stored is larger than 2048 GiB, an ultra disk can only support the following data sizes (GiB): [`2560`, `3072`, `3584`, `4096`, `4608`, `5120`].
	DataNodeDiskSize interface{}
	// The data node disk type. Supported values: cloud_ssd, cloud_efficiency.
	DataNodeDiskType interface{}
	// The data node specifications of the Elasticsearch instance.
	DataNodeSpec interface{}
	// The description of instance. It a string of 0 to 30 characters.
	Description interface{}
	// Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`. From version 1.69.0, the Elasticsearch cluster allows you to update your instanceChargeYpe from `PostPaid` to `PrePaid`, the following attributes are required: `period`. But, updating from `PostPaid` to `PrePaid` is not supported.
	InstanceChargeType interface{}
	// Set the Kibana's IP whitelist in internet network.
	KibanaWhitelists interface{}
	// An KMS encrypts password used to a instance. If the `password` is filled in, this field will be ignored, but you have to specify one of `password` and `kmsEncryptedPassword` fields.
	KmsEncryptedPassword interface{}
	// An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating instance with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
	KmsEncryptionContext interface{}
	// The dedicated master node spec. If specified, dedicated master node will be created.
	MasterNodeSpec interface{}
	// The password of the instance. The password can be 8 to 32 characters in length and must contain three of the following conditions: uppercase letters, lowercase letters, numbers, and special characters (!@#$%^&*()_+-=).
	Password interface{}
	// The duration that you will buy Elasticsearch instance (in month). It is valid when instanceChargeType is `PrePaid`. Valid values: [1~9], 12, 24, 36. Default to 1.
	Period interface{}
	// Set the instance's IP whitelist in VPC network.
	PrivateWhitelists interface{}
	PublicWhitelists interface{}
	// Elasticsearch version. Supported values: `5.5.3_with_X-Pack`, `6.3_with_X-Pack` and `6.7_with_X-Pack`.
	Version interface{}
	// The ID of VSwitch.
	VswitchId interface{}
	// The Multi-AZ supported for Elasticsearch, between 1 and 3. The `dataNodeAmount` value must be an integral multiple of the `zoneCount` value.
	ZoneCount interface{}
}
