// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CAS Certificate resource.
// 
// > **NOTE:** The Certificate name which you want to add must be already registered and had not added by another account. Every Certificate name can only exist in a unique group.
// 
// > **NOTE:** The Cas Certificate region only support cn-hangzhou, ap-south-1, me-east-1, eu-central-1, ap-northeast-1, ap-southeast-2.
// 
// > **NOTE:** Available in 1.35.0+ .
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-alicloud/blob/master/website/docs/r/cas_certificate.html.markdown.
type Certificate struct {
	s *pulumi.ResourceState
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	if args == nil || args.Cert == nil {
		return nil, errors.New("missing required argument 'Cert'")
	}
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cert"] = nil
		inputs["key"] = nil
		inputs["name"] = nil
	} else {
		inputs["cert"] = args.Cert
		inputs["key"] = args.Key
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("alicloud:cas/certificate:Certificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateState, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cert"] = state.Cert
		inputs["key"] = state.Key
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("alicloud:cas/certificate:Certificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Certificate) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Certificate) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Cert of the Certificate in which the Certificate will add.
func (r *Certificate) Cert() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cert"])
}

// Key of the Certificate in which the Certificate will add.
func (r *Certificate) Key() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["key"])
}

// Name of the Certificate. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
func (r *Certificate) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// Cert of the Certificate in which the Certificate will add.
	Cert interface{}
	// Key of the Certificate in which the Certificate will add.
	Key interface{}
	// Name of the Certificate. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
	Name interface{}
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Cert of the Certificate in which the Certificate will add.
	Cert interface{}
	// Key of the Certificate in which the Certificate will add.
	Key interface{}
	// Name of the Certificate. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
	Name interface{}
}
